// Code generated by [web2go -lib -pkg xtex -type Context -o /home/binet/tmp/xtex.go tex.web], DO NOT EDIT.

// This program is copyright (C) 1982 by D. E. Knuth; all rights are reserved.
// Unlimited copying and redistribution of this file are permitted as long
// as this file is not modified. Modifications are permitted, but only if
// the resulting file is not named tex.web. (The WEB system provides
// for alterations via an auxiliary file; the master file should stay intact.)
// See Appendix H of the WEB manual for hints on how to install this program.
// And see Appendix A of the TRIP manual for details about how to validate it.
//
// TeX is a trademark of the American Mathematical Society.
// METAFONT is a trademark of Addison-Wesley Publishing Company.
//
// Version 0 was released in September 1982 after it passed a variety of tests.
// Version 1 was released in November 1983 after thorough testing.
// Version 1.1 fixed ``disappearing font identifiers'' et alia (July 1984).
// Version 1.2 allowed `0' in response to an error, et alia (October 1984).
// Version 1.3 made memory allocation more flexible and local (November 1984).
// Version 1.4 fixed accents right after line breaks, et alia (April 1985).
// Version 1.5 fixed \the\toks after other expansion in \edefs (August 1985).
// Version 2.0 (almost identical to 1.5) corresponds to "Volume B" (April 1986).
// Version 2.1 corrected anomalies in discretionary breaks (January 1987).
// Version 2.2 corrected "(Please type...)" with null \endlinechar (April 1987).
// Version 2.3 avoided incomplete page in premature termination (August 1987).
// Version 2.4 fixed \noaligned rules in indented displays (August 1987).
// Version 2.5 saved cur_order when expanding tokens (September 1987).
// Version 2.6 added 10sp slop when shipping leaders (November 1987).
// Version 2.7 improved rounding of negative-width characters (November 1987).
// Version 2.8 fixed weird bug if no \patterns are used (December 1987).
// Version 2.9 made \csname\endcsname's "relax" local (December 1987).
// Version 2.91 fixed \outer\def\a0{}\a\a bug (April 1988).
// Version 2.92 fixed \patterns, also file names with complex macros (May 1988).
// Version 2.93 fixed negative halving in allocator when mem_min<0 (June 1988).
// Version 2.94 kept open_log_file from calling fatal_error (November 1988).
// Version 2.95 solved that problem a better way (December 1988).
// Version 2.96 corrected bug in "Infinite shrinkage" recovery (January 1989).
// Version 2.97 corrected blunder in creating 2.95 (February 1989).
// Version 2.98 omitted save_for_after at outer level (March 1989).
// Version 2.99 caught $$\begingroup\halign..$$ (June 1989).
// Version 2.991 caught .5\ifdim.6... (June 1989).
// Version 2.992 introduced major changes for 8-bit extensions (September 1989).
// Version 2.993 fixed a save_stack synchronization bug et alia (December 1989).
// Version 3.0 fixed unusual displays; was more \output robust (March 1990).
// Version 3.1 fixed nullfont, disabled \write{\the\prevgraf} (September 1990).
// Version 3.14 fixed unprintable font names and corrected typos (March 1991).
// Version 3.141 more of same; reconstituted ligatures better (March 1992).
// Version 3.1415 preserved nonexplicit kerns, tidied up (February 1993).
// Version 3.14159 allowed fontmemsize to change; bulletproofing (March 1995).
// Version 3.141592 fixed \xleaders, glueset, weird alignments (December 2002).
// Version 3.1415926 was a general cleanup with minor fixes (February 2008).
// Version 3.14159265 was similar (January 2014).
// Version 3.141592653 was similar but more extensive (January 2021).
//
// A reward of $327.68 will be paid to the first finder of any remaining bug.
//
// Although considerable effort has been expended to make the TeX program
// correct and reliable, no warranty is implied; the author disclaims any
// obligation or liability for damages, including but not limited to
// special, indirect, or consequential damages arising out of or in
// connection with the use or performance of this software. This work has
// been a ``labor of love'' and the author hopes that users enjoy it.
//
// Here is TeX material that gets inserted after \input webmac
package xtex

import (
	"fmt"
	"io"
	"math"
	"os"
	"path/filepath"
	"runtime"
	"strings"
	"time"
	"unsafe"
)

const (
	memMax          = 30000
	memMin          = 0
	bufSize         = 500
	errorLine       = 72
	halfErrorLine   = 42
	maxPrintLine    = 79
	stackSize       = 200
	maxInOpen       = 6
	fontMax         = 75
	fontMemSize     = 20000
	paramSize       = 60
	nestSize        = 40
	maxStrings      = 3000
	stringVacancies = 8000
	poolSize        = 32000
	saveSize        = 600
	trieSize        = 8000
	trieOpSize      = 500
	dviBufSize      = 800
	fileNameSize    = 40
	poolName        = "TeXformats:TEX.POOL                     "
)

type (
	ASCIICode          byte     // 0..255
	eightBits          byte     // 0..255
	alphaFile          *pasFile // file of char
	byteFile           *pasFile // file of 0..255
	poolPointer        uint16   // 0..32000
	strNumber          uint16   // 0..3000
	packedASCIICode    byte     // 0..255
	scaled             int32    // integer
	nonnegativeInteger uint32   // 0..2147483647
	smallNumber        byte     // 0..63
	glueRatio          float32  // real
	quarterword        byte     // 0..255
	halfword           uint16   // 0..65535
	twoChoices         byte     // 1..2
	fourChoices        byte     // 1..4
	wordFile           *pasFile // file of record memoryWord
	glueOrd            byte     // 0..3
	groupCode          byte     // 0..16
	internalFontNumber byte     // 0..75
	fontIndex          uint16   // 0..20000
	dviIndex           uint16   // 0..800
	triePointer        uint16   // 0..8000
	hyphPointer        uint16   // 0..307
)

type twoHalves struct {
	rh      uint16
	variant uint16
}

func (r twoHalves) lh() uint16 { return *(*uint16)(unsafe.Pointer(&r.variant)) }

func (r *twoHalves) pLh() *uint16 { return (*uint16)(unsafe.Pointer(&r.variant)) }

func (r twoHalves) b0() byte { return *(*byte)(unsafe.Pointer(&r.variant)) }

func (r *twoHalves) pB0() *byte { return (*byte)(unsafe.Pointer(&r.variant)) }

func (r twoHalves) b1() byte {
	return *(*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&r.variant)) + 1))
}

func (r *twoHalves) pB1() *byte {
	return (*byte)(unsafe.Pointer(uintptr(unsafe.Pointer(&r.variant)) + 1))
}

type fourQuarters struct {
	b0 byte
	b1 byte
	b2 byte
	b3 byte
}

type memoryWord struct {
	variant uint32
}

func (r memoryWord) int() int32 { return *(*int32)(unsafe.Pointer(&r.variant)) }

func (r *memoryWord) pInt() *int32 { return (*int32)(unsafe.Pointer(&r.variant)) }

func (r memoryWord) gr() float32 { return *(*float32)(unsafe.Pointer(&r.variant)) }

func (r *memoryWord) pGr() *float32 { return (*float32)(unsafe.Pointer(&r.variant)) }

func (r memoryWord) hh() twoHalves { return *(*twoHalves)(unsafe.Pointer(&r.variant)) }

func (r *memoryWord) pHh() *twoHalves { return (*twoHalves)(unsafe.Pointer(&r.variant)) }

func (r memoryWord) qqqq() fourQuarters { return *(*fourQuarters)(unsafe.Pointer(&r.variant)) }

func (r *memoryWord) pQqqq() *fourQuarters { return (*fourQuarters)(unsafe.Pointer(&r.variant)) }

type listStateRecord struct {
	modeField int16
	headField uint16
	tailField uint16
	pgField   int32
	mlField   int32
	auxField  memoryWord
}

type inStateRecord struct {
	stateField byte
	indexField byte
	startField uint16
	locField   uint16
	limitField uint16
	nameField  uint16
}

type Context struct {
	stdin                io.ReadCloser
	stdout               io.WriteCloser
	bad                  int32               // integer
	xord                 [256]byte           // array[char] of 0..255
	xchr                 [256]byte           // array[0..255] of char
	nameOfFile           [40]byte            // array[1..40] of char
	nameLength           byte                // 0..40
	buffer               [501]byte           // array[0..500] of 0..255
	first                uint16              // 0..500
	last                 uint16              // 0..500
	maxBufStack          uint16              // 0..500
	termIn               pasFile             // file of char
	termOut              pasFile             // file of char
	strPool              [32001]byte         // array[0..32000] of 0..255
	strStart             [3001]uint16        // array[0..3000] of 0..32000
	poolPtr              uint16              // 0..32000
	strPtr               uint16              // 0..3000
	initPoolPtr          uint16              // 0..32000
	initStrPtr           uint16              // 0..3000
	poolFile             pasFile             // file of char
	logFile              pasFile             // file of char
	selector             byte                // 0..21
	dig                  [23]byte            // array[0..22] of 0..15
	tally                int32               // integer
	termOffset           byte                // 0..79
	fileOffset           byte                // 0..79
	trickBuf             [73]byte            // array[0..72] of 0..255
	trickCount           int32               // integer
	firstCount           int32               // integer
	interaction          byte                // 0..3
	deletionsAllowed     bool                // boolean
	setBoxAllowed        bool                // boolean
	history              byte                // 0..3
	errorCount           int8                // -1..100
	helpLine             [6]uint16           // array[0..5] of 0..3000
	helpPtr              byte                // 0..6
	useErrHelp           bool                // boolean
	interrupt            int32               // integer
	OKToInterrupt        bool                // boolean
	arithError           bool                // boolean
	remainder            int32               // integer
	tempPtr              uint16              // 0..65535
	mem                  [30001]memoryWord   // array[0..30000] of record memoryWord
	loMemMax             uint16              // 0..65535
	hiMemMin             uint16              // 0..65535
	varUsed              int32               // integer
	dynUsed              int32               // integer
	avail                uint16              // 0..65535
	memEnd               uint16              // 0..65535
	rover                uint16              // 0..65535
	fontInShortDisplay   int32               // integer
	depthThreshold       int32               // integer
	breadthMax           int32               // integer
	nest                 [41]listStateRecord // array[0..40] of record listStateRecord
	nestPtr              byte                // 0..40
	maxNestStack         byte                // 0..40
	curList              listStateRecord     // record listStateRecord
	shownMode            int16               // -203..203
	oldSetting           byte                // 0..21
	sysTime              int32               // integer
	sysDay               int32               // integer
	sysMonth             int32               // integer
	sysYear              int32               // integer
	eqtb                 [6106]memoryWord    // array[1..6106] of record memoryWord
	xeqLevel             [844]byte           // array[5263..6106] of 0..255
	hash                 [2367]twoHalves     // array[514..2880] of record twoHalves
	hashUsed             uint16              // 0..65535
	noNewControlSequence bool                // boolean
	csCount              int32               // integer
	saveStack            [601]memoryWord     // array[0..600] of record memoryWord
	savePtr              uint16              // 0..600
	maxSaveStack         uint16              // 0..600
	curLevel             byte                // 0..255
	curGroup             byte                // 0..16
	curBoundary          uint16              // 0..600
	magSet               int32               // integer
	curCmd               byte                // 0..255
	curChr               uint16              // 0..65535
	curCs                uint16              // 0..65535
	curTok               uint16              // 0..65535
	inputStack           [201]inStateRecord  // array[0..200] of record inStateRecord
	inputPtr             byte                // 0..200
	maxInStack           byte                // 0..200
	curInput             inStateRecord       // record inStateRecord
	inOpen               byte                // 0..6
	openParens           byte                // 0..6
	inputFile            [6]pasFile          // array[1..6] of file of char
	line                 int32               // integer
	lineStack            [6]int32            // array[1..6] of integer
	scannerStatus        byte                // 0..5
	warningIndex         uint16              // 0..65535
	defRef               uint16              // 0..65535
	paramStack           [61]uint16          // array[0..60] of 0..65535
	paramPtr             byte                // 0..60
	maxParamStack        int32               // integer
	alignState           int32               // integer
	basePtr              byte                // 0..200
	parLoc               uint16              // 0..65535
	parToken             uint16              // 0..65535
	forceEof             bool                // boolean
	curMark              [5]uint16           // array[0..4] of 0..65535
	longState            byte                // 111..114
	pstack               [9]uint16           // array[0..8] of 0..65535
	curVal               int32               // integer
	curValLevel          byte                // 0..5
	radix                byte                // 0..63
	curOrder             byte                // 0..3
	readFile             [16]pasFile         // array[0..15] of file of char
	readOpen             [17]byte            // array[0..16] of 0..2
	condPtr              uint16              // 0..65535
	ifLimit              byte                // 0..4
	curIf                byte                // 0..63
	ifLine               int32               // integer
	skipLine             int32               // integer
	curName              uint16              // 0..3000
	curArea              uint16              // 0..3000
	curExt               uint16              // 0..3000
	areaDelimiter        uint16              // 0..32000
	extDelimiter         uint16              // 0..32000
	TEXFormatDefault     [20]byte            // array[1..20] of char
	nameInProgress       bool                // boolean
	jobName              uint16              // 0..3000
	logOpened            bool                // boolean
	dviFile              pasFile             // file of 0..255
	outputFileName       uint16              // 0..3000
	logName              uint16              // 0..3000
	tfmFile              pasFile             // file of 0..255
	fontInfo             [20001]memoryWord   // array[0..20000] of record memoryWord
	fmemPtr              uint16              // 0..20000
	fontPtr              byte                // 0..75
	fontCheck            [76]fourQuarters    // array[0..75] of record fourQuarters
	fontSize             [76]int32           // array[0..75] of integer
	fontDsize            [76]int32           // array[0..75] of integer
	fontParams           [76]uint16          // array[0..75] of 0..20000
	fontName             [76]uint16          // array[0..75] of 0..3000
	fontArea             [76]uint16          // array[0..75] of 0..3000
	fontBc               [76]byte            // array[0..75] of 0..255
	fontEc               [76]byte            // array[0..75] of 0..255
	fontGlue             [76]uint16          // array[0..75] of 0..65535
	fontUsed             [76]bool            // array[0..75] of boolean
	hyphenChar           [76]int32           // array[0..75] of integer
	skewChar             [76]int32           // array[0..75] of integer
	bcharLabel           [76]uint16          // array[0..75] of 0..20000
	fontBchar            [76]uint16          // array[0..75] of 0..256
	fontFalseBchar       [76]uint16          // array[0..75] of 0..256
	charBase             [76]int32           // array[0..75] of integer
	widthBase            [76]int32           // array[0..75] of integer
	heightBase           [76]int32           // array[0..75] of integer
	depthBase            [76]int32           // array[0..75] of integer
	italicBase           [76]int32           // array[0..75] of integer
	ligKernBase          [76]int32           // array[0..75] of integer
	kernBase             [76]int32           // array[0..75] of integer
	extenBase            [76]int32           // array[0..75] of integer
	paramBase            [76]int32           // array[0..75] of integer
	nullCharacter        fourQuarters        // record fourQuarters
	totalPages           int32               // integer
	maxV                 int32               // integer
	maxH                 int32               // integer
	maxPush              int32               // integer
	lastBop              int32               // integer
	deadCycles           int32               // integer
	doingLeaders         bool                // boolean
	c                    byte                // 0..255
	f                    byte                // 0..255
	ruleHt               int32               // integer
	ruleDp               int32               // integer
	ruleWd               int32               // integer
	g                    uint16              // 0..65535
	lq                   int32               // integer
	lr                   int32               // integer
	dviBuf               [801]byte           // array[0..800] of 0..255
	halfBuf              uint16              // 0..800
	dviLimit             uint16              // 0..800
	dviPtr               uint16              // 0..800
	dviOffset            int32               // integer
	dviGone              int32               // integer
	downPtr              uint16              // 0..65535
	rightPtr             uint16              // 0..65535
	dviH                 int32               // integer
	dviV                 int32               // integer
	curH                 int32               // integer
	curV                 int32               // integer
	dviF                 byte                // 0..75
	curS                 int32               // integer
	totalStretch         [4]int32            // array[0..3] of integer
	totalShrink          [4]int32            // array[0..3] of integer
	lastBadness          int32               // integer
	adjustTail           uint16              // 0..65535
	packBeginLine        int32               // integer
	emptyField           twoHalves           // record twoHalves
	nullDelimiter        fourQuarters        // record fourQuarters
	curMlist             uint16              // 0..65535
	curStyle             byte                // 0..63
	curSize              byte                // 0..63
	curMu                int32               // integer
	mlistPenalties       bool                // boolean
	curF                 byte                // 0..75
	curC                 byte                // 0..255
	curI                 fourQuarters        // record fourQuarters
	magicOffset          int32               // integer
	curAlign             uint16              // 0..65535
	curSpan              uint16              // 0..65535
	curLoop              uint16              // 0..65535
	alignPtr             uint16              // 0..65535
	curHead              uint16              // 0..65535
	curTail              uint16              // 0..65535
	justBox              uint16              // 0..65535
	passive              uint16              // 0..65535
	printedNode          uint16              // 0..65535
	passNumber           uint16              // 0..65535
	activeWidth          [6]int32            // array[1..6] of integer
	curActiveWidth       [6]int32            // array[1..6] of integer
	background           [6]int32            // array[1..6] of integer
	breakWidth           [6]int32            // array[1..6] of integer
	noShrinkErrorYet     bool                // boolean
	curP                 uint16              // 0..65535
	secondPass           bool                // boolean
	finalPass            bool                // boolean
	threshold            int32               // integer
	minimalDemerits      [4]int32            // array[0..3] of integer
	minimumDemerits      int32               // integer
	bestPlace            [4]uint16           // array[0..3] of 0..65535
	bestPlLine           [4]uint16           // array[0..3] of 0..65535
	discWidth            int32               // integer
	easyLine             uint16              // 0..65535
	lastSpecialLine      uint16              // 0..65535
	firstWidth           int32               // integer
	secondWidth          int32               // integer
	firstIndent          int32               // integer
	secondIndent         int32               // integer
	bestBet              uint16              // 0..65535
	fewestDemerits       int32               // integer
	bestLine             uint16              // 0..65535
	actualLooseness      int32               // integer
	lineDiff             int32               // integer
	hc                   [66]uint16          // array[0..65] of 0..256
	hn                   byte                // 0..64
	ha                   uint16              // 0..65535
	hb                   uint16              // 0..65535
	hf                   byte                // 0..75
	hu                   [64]uint16          // array[0..63] of 0..256
	hyfChar              int32               // integer
	curLang              byte                // 0..255
	initCurLang          byte                // 0..255
	lHyf                 int32               // integer
	rHyf                 int32               // integer
	initLHyf             int32               // integer
	initRHyf             int32               // integer
	hyfBchar             uint16              // 0..65535
	hyf                  [65]byte            // array[0..64] of 0..9
	initList             uint16              // 0..65535
	initLig              bool                // boolean
	initLft              bool                // boolean
	hyphenPassed         byte                // 0..63
	curL                 uint16              // 0..65535
	curR                 uint16              // 0..65535
	curQ                 uint16              // 0..65535
	ligStack             uint16              // 0..65535
	ligaturePresent      bool                // boolean
	lftHit               bool                // boolean
	rtHit                bool                // boolean
	trie                 [8001]twoHalves     // array[0..8000] of record twoHalves
	hyfDistance          [500]byte           // array[1..500] of 0..63
	hyfNum               [500]byte           // array[1..500] of 0..63
	hyfNext              [500]byte           // array[1..500] of 0..255
	opStart              [256]uint16         // array[0..255] of 0..500
	hyphWord             [308]uint16         // array[0..307] of 0..3000
	hyphList             [308]uint16         // array[0..307] of 0..65535
	hyphCount            uint16              // 0..307
	trieOpHash           [1001]uint16        // array[-500..500] of 0..500
	trieUsed             [256]byte           // array[0..255] of 0..255
	trieOpLang           [500]byte           // array[1..500] of 0..255
	trieOpVal            [500]byte           // array[1..500] of 0..255
	trieOpPtr            uint16              // 0..500
	trieC                [8001]byte          // array[0..8000] of 0..255
	trieO                [8001]byte          // array[0..8000] of 0..255
	trieL                [8001]uint16        // array[0..8000] of 0..8000
	trieR                [8001]uint16        // array[0..8000] of 0..8000
	triePtr              uint16              // 0..8000
	trieHash             [8001]uint16        // array[0..8000] of 0..8000
	trieTaken            [8000]bool          // array[1..8000] of boolean
	trieMin              [256]uint16         // array[0..255] of 0..8000
	trieMax              uint16              // 0..8000
	trieNotReady         bool                // boolean
	bestHeightPlusDepth  int32               // integer
	pageTail             uint16              // 0..65535
	pageContents         byte                // 0..2
	pageMaxDepth         int32               // integer
	bestPageBreak        uint16              // 0..65535
	leastPageCost        int32               // integer
	bestSize             int32               // integer
	pageSoFar            [8]int32            // array[0..7] of integer
	lastGlue             uint16              // 0..65535
	lastPenalty          int32               // integer
	lastKern             int32               // integer
	insertPenalties      int32               // integer
	outputActive         bool                // boolean
	mainF                byte                // 0..75
	mainI                fourQuarters        // record fourQuarters
	mainJ                fourQuarters        // record fourQuarters
	mainK                uint16              // 0..20000
	mainP                uint16              // 0..65535
	mainS                int32               // integer
	bchar                uint16              // 0..65535
	falseBchar           uint16              // 0..65535
	cancelBoundary       bool                // boolean
	insDisc              bool                // boolean
	curBox               uint16              // 0..65535
	afterToken           uint16              // 0..65535
	longHelpSeen         bool                // boolean
	formatIdent          uint16              // 0..3000
	fmtFile              pasFile             // file of record memoryWord
	readyAlready         int32               // integer
	writeFile            [16]pasFile         // array[0..15] of file of char
	writeOpen            [18]bool            // array[0..17] of boolean
	writeLoc             uint16              // 0..65535
}

func (tex *Context) initialize() {
	var i int32  // integer
	var k int32  // integer
	var z uint16 // 0..307
	tex.xchr[32] = ' '
	tex.xchr[33] = '!'
	tex.xchr[34] = '"'
	tex.xchr[35] = '#'
	tex.xchr[36] = '$'
	tex.xchr[37] = '%'
	tex.xchr[38] = '&'
	tex.xchr[39] = '\''
	tex.xchr[40] = '('
	tex.xchr[41] = ')'
	tex.xchr[42] = '*'
	tex.xchr[43] = '+'
	tex.xchr[44] = ','
	tex.xchr[45] = '-'
	tex.xchr[46] = '.'
	tex.xchr[47] = '/'
	tex.xchr[48] = '0'
	tex.xchr[49] = '1'
	tex.xchr[50] = '2'
	tex.xchr[51] = '3'
	tex.xchr[52] = '4'
	tex.xchr[53] = '5'
	tex.xchr[54] = '6'
	tex.xchr[55] = '7'
	tex.xchr[56] = '8'
	tex.xchr[57] = '9'
	tex.xchr[58] = ':'
	tex.xchr[59] = ';'
	tex.xchr[60] = '<'
	tex.xchr[61] = '='
	tex.xchr[62] = '>'
	tex.xchr[63] = '?'
	tex.xchr[64] = '@'
	tex.xchr[65] = 'A'
	tex.xchr[66] = 'B'
	tex.xchr[67] = 'C'
	tex.xchr[68] = 'D'
	tex.xchr[69] = 'E'
	tex.xchr[70] = 'F'
	tex.xchr[71] = 'G'
	tex.xchr[72] = 'H'
	tex.xchr[73] = 'I'
	tex.xchr[74] = 'J'
	tex.xchr[75] = 'K'
	tex.xchr[76] = 'L'
	tex.xchr[77] = 'M'
	tex.xchr[78] = 'N'
	tex.xchr[79] = 'O'
	tex.xchr[80] = 'P'
	tex.xchr[81] = 'Q'
	tex.xchr[82] = 'R'
	tex.xchr[83] = 'S'
	tex.xchr[84] = 'T'
	tex.xchr[85] = 'U'
	tex.xchr[86] = 'V'
	tex.xchr[87] = 'W'
	tex.xchr[88] = 'X'
	tex.xchr[89] = 'Y'
	tex.xchr[90] = 'Z'
	tex.xchr[91] = '['
	tex.xchr[92] = '\\'
	tex.xchr[93] = ']'
	tex.xchr[94] = '^'
	tex.xchr[95] = '_'
	tex.xchr[96] = '`'
	tex.xchr[97] = 'a'
	tex.xchr[98] = 'b'
	tex.xchr[99] = 'c'
	tex.xchr[100] = 'd'
	tex.xchr[101] = 'e'
	tex.xchr[102] = 'f'
	tex.xchr[103] = 'g'
	tex.xchr[104] = 'h'
	tex.xchr[105] = 'i'
	tex.xchr[106] = 'j'
	tex.xchr[107] = 'k'
	tex.xchr[108] = 'l'
	tex.xchr[109] = 'm'
	tex.xchr[110] = 'n'
	tex.xchr[111] = 'o'
	tex.xchr[112] = 'p'
	tex.xchr[113] = 'q'
	tex.xchr[114] = 'r'
	tex.xchr[115] = 's'
	tex.xchr[116] = 't'
	tex.xchr[117] = 'u'
	tex.xchr[118] = 'v'
	tex.xchr[119] = 'w'
	tex.xchr[120] = 'x'
	tex.xchr[121] = 'y'
	tex.xchr[122] = 'z'
	tex.xchr[123] = '{'
	tex.xchr[124] = '|'
	tex.xchr[125] = '}'
	tex.xchr[126] = '~'
	for _i := int64(0); _i <= int64(31); _i++ {
		i = int32(_i)
		tex.xchr[i] = ' '
	}
	for _i := int64(127); _i <= int64(255); _i++ {
		i = int32(_i)
		tex.xchr[i] = ' '
	}
	for _i := int64(0); _i <= int64(255); _i++ {
		i = int32(_i)
		tex.xord[chr(i)] = 127
	}
	for _i := int64(128); _i <= int64(255); _i++ {
		i = int32(_i)
		tex.xord[tex.xchr[i]] = byte(i)
	}
	for _i := int64(0); _i <= int64(126); _i++ {
		i = int32(_i)
		tex.xord[tex.xchr[i]] = byte(i)
	}
	tex.interaction = 3
	tex.deletionsAllowed = true
	tex.setBoxAllowed = true
	tex.errorCount = 0
	tex.helpPtr = 0
	tex.useErrHelp = false
	tex.interrupt = 0
	tex.OKToInterrupt = true
	tex.nestPtr = 0
	tex.maxNestStack = 0
	tex.curList.modeField = 1
	tex.curList.headField = 29999
	tex.curList.tailField = 29999
	*tex.curList.auxField.pInt() = -65536000
	tex.curList.mlField = 0
	tex.curList.pgField = 0
	tex.shownMode = 0
	tex.pageContents = 0
	tex.pageTail = 29998
	tex.mem[29998].pHh().rh = 0
	tex.lastGlue = 65535
	tex.lastPenalty = 0
	tex.lastKern = 0
	tex.pageSoFar[7] = 0
	tex.pageMaxDepth = 0
	for _i := int64(5263); _i <= int64(6106); _i++ {
		k = int32(_i)
		tex.xeqLevel[k-5263] = 1
	}
	tex.noNewControlSequence = true
	*tex.hash[514-514].pLh() = 0
	tex.hash[514-514].rh = 0
	for _i := int64(515); _i <= int64(2880); _i++ {
		k = int32(_i)
		tex.hash[k-514] = tex.hash[514-514]
	}
	tex.savePtr = 0
	tex.curLevel = 1
	tex.curGroup = 0
	tex.curBoundary = 0
	tex.maxSaveStack = 0
	tex.magSet = 0
	tex.curMark[0] = 0
	tex.curMark[1] = 0
	tex.curMark[2] = 0
	tex.curMark[3] = 0
	tex.curMark[4] = 0
	tex.curVal = 0
	tex.curValLevel = 0
	tex.radix = 0
	tex.curOrder = 0
	for _i := int64(0); _i <= int64(16); _i++ {
		k = int32(_i)
		tex.readOpen[k] = 2
	}
	tex.condPtr = 0
	tex.ifLimit = 0
	tex.curIf = 0
	tex.ifLine = 0
	setString(tex.TEXFormatDefault[:], "TeXformats:plain.fmt")
	for _i := int64(0); _i <= int64(fontMax); _i++ {
		k = int32(_i)
		tex.fontUsed[k] = false
	}
	tex.nullCharacter.b0 = 0
	tex.nullCharacter.b1 = 0
	tex.nullCharacter.b2 = 0
	tex.nullCharacter.b3 = 0
	tex.totalPages = 0
	tex.maxV = 0
	tex.maxH = 0
	tex.maxPush = 0
	tex.lastBop = -1
	tex.doingLeaders = false
	tex.deadCycles = 0
	tex.curS = -1
	tex.halfBuf = uint16((dviBufSize / 2))
	tex.dviLimit = dviBufSize
	tex.dviPtr = 0
	tex.dviOffset = 0
	tex.dviGone = 0
	tex.downPtr = 0
	tex.rightPtr = 0
	tex.adjustTail = 0
	tex.lastBadness = 0
	tex.packBeginLine = 0
	tex.emptyField.rh = 0
	*tex.emptyField.pLh() = 0
	tex.nullDelimiter.b0 = 0
	tex.nullDelimiter.b1 = 0
	tex.nullDelimiter.b2 = 0
	tex.nullDelimiter.b3 = 0
	tex.alignPtr = 0
	tex.curAlign = 0
	tex.curSpan = 0
	tex.curLoop = 0
	tex.curHead = 0
	tex.curTail = 0
	for _i := int64(0); _i <= int64(307); _i++ {
		z = uint16(_i)
		tex.hyphWord[z] = 0
		tex.hyphList[z] = 0
	}
	tex.hyphCount = 0
	tex.outputActive = false
	tex.insertPenalties = 0
	tex.ligaturePresent = false
	tex.cancelBoundary = false
	tex.lftHit = false
	tex.rtHit = false
	tex.insDisc = false
	tex.afterToken = 0
	tex.longHelpSeen = false
	tex.formatIdent = 0
	for _i := int64(0); _i <= int64(17); _i++ {
		k = int32(_i)
		tex.writeOpen[k] = false
	}
	for _i := int64(1); _i <= int64(19); _i++ {
		k = int32(_i)
		*tex.mem[k].pInt() = 0
	}
	k = 0
	for k <= 19 {
		tex.mem[k].pHh().rh = 1
		*tex.mem[k].pHh().pB0() = 0
		*tex.mem[k].pHh().pB1() = 0
		k = k + 4
	}
	*tex.mem[6].pInt() = 65536
	*tex.mem[4].pHh().pB0() = 1
	*tex.mem[10].pInt() = 65536
	*tex.mem[8].pHh().pB0() = 2
	*tex.mem[14].pInt() = 65536
	*tex.mem[12].pHh().pB0() = 1
	*tex.mem[15].pInt() = 65536
	*tex.mem[12].pHh().pB1() = 1
	*tex.mem[18].pInt() = -65536
	*tex.mem[16].pHh().pB0() = 1
	tex.rover = 20
	tex.mem[tex.rover].pHh().rh = 65535
	*tex.mem[tex.rover].pHh().pLh() = 1000
	*tex.mem[int32(tex.rover)+1].pHh().pLh() = tex.rover
	tex.mem[int32(tex.rover)+1].pHh().rh = tex.rover
	tex.loMemMax = uint16(int32(tex.rover) + 1000)
	tex.mem[tex.loMemMax].pHh().rh = 0
	*tex.mem[tex.loMemMax].pHh().pLh() = 0
	for _i := int64(29987); _i <= int64(30000); _i++ {
		k = int32(_i)
		tex.mem[k] = tex.mem[tex.loMemMax]
	}
	*tex.mem[29990].pHh().pLh() = 6714
	tex.mem[29991].pHh().rh = 256
	*tex.mem[29991].pHh().pLh() = 0
	*tex.mem[29993].pHh().pB0() = 1
	*tex.mem[29994].pHh().pLh() = 65535
	*tex.mem[29993].pHh().pB1() = 0
	*tex.mem[30000].pHh().pB1() = 255
	*tex.mem[30000].pHh().pB0() = 1
	tex.mem[30000].pHh().rh = 30000
	*tex.mem[29998].pHh().pB0() = 10
	*tex.mem[29998].pHh().pB1() = 0
	tex.avail = 0
	tex.memEnd = 30000
	tex.hiMemMin = 29987
	tex.varUsed = 20
	tex.dynUsed = 14
	*tex.eqtb[2881-1].pHh().pB0() = 101
	tex.eqtb[2881-1].pHh().rh = 0
	*tex.eqtb[2881-1].pHh().pB1() = 0
	for _i := int64(1); _i <= int64(2880); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[2881-1]
	}
	tex.eqtb[2882-1].pHh().rh = 0
	*tex.eqtb[2882-1].pHh().pB1() = 1
	*tex.eqtb[2882-1].pHh().pB0() = 117
	for _i := int64(2883); _i <= int64(3411); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[2882-1]
	}
	tex.mem[0].pHh().rh = uint16(int32(tex.mem[0].hh().rh) + 530)
	tex.eqtb[3412-1].pHh().rh = 0
	*tex.eqtb[3412-1].pHh().pB0() = 118
	*tex.eqtb[3412-1].pHh().pB1() = 1
	for _i := int64(3413); _i <= int64(3677); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[2881-1]
	}
	tex.eqtb[3678-1].pHh().rh = 0
	*tex.eqtb[3678-1].pHh().pB0() = 119
	*tex.eqtb[3678-1].pHh().pB1() = 1
	for _i := int64(3679); _i <= int64(3933); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[3678-1]
	}
	tex.eqtb[3934-1].pHh().rh = 0
	*tex.eqtb[3934-1].pHh().pB0() = 120
	*tex.eqtb[3934-1].pHh().pB1() = 1
	for _i := int64(3935); _i <= int64(3982); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[3934-1]
	}
	tex.eqtb[3983-1].pHh().rh = 0
	*tex.eqtb[3983-1].pHh().pB0() = 120
	*tex.eqtb[3983-1].pHh().pB1() = 1
	for _i := int64(3984); _i <= int64(5262); _i++ {
		k = int32(_i)
		tex.eqtb[k-1] = tex.eqtb[3983-1]
	}
	for _i := int64(0); _i <= int64(255); _i++ {
		k = int32(_i)
		tex.eqtb[3983+k-1].pHh().rh = 12
		tex.eqtb[5007+k-1].pHh().rh = uint16(k + 0)
		tex.eqtb[4751+k-1].pHh().rh = 1000
	}
	tex.eqtb[3996-1].pHh().rh = 5
	tex.eqtb[4015-1].pHh().rh = 10
	tex.eqtb[4075-1].pHh().rh = 0
	tex.eqtb[4020-1].pHh().rh = 14
	tex.eqtb[4110-1].pHh().rh = 15
	tex.eqtb[3983-1].pHh().rh = 9
	for _i := int64(48); _i <= int64(57); _i++ {
		k = int32(_i)
		tex.eqtb[5007+k-1].pHh().rh = uint16(k + 28672)
	}
	for _i := int64(65); _i <= int64(90); _i++ {
		k = int32(_i)
		tex.eqtb[3983+k-1].pHh().rh = 11
		tex.eqtb[3983+k+32-1].pHh().rh = 11
		tex.eqtb[5007+k-1].pHh().rh = uint16(k + 28928)
		tex.eqtb[5007+k+32-1].pHh().rh = uint16(k + 28960)
		tex.eqtb[4239+k-1].pHh().rh = uint16(k + 32)
		tex.eqtb[4239+k+32-1].pHh().rh = uint16(k + 32)
		tex.eqtb[4495+k-1].pHh().rh = uint16(k)
		tex.eqtb[4495+k+32-1].pHh().rh = uint16(k)
		tex.eqtb[4751+k-1].pHh().rh = 999
	}
	for _i := int64(5263); _i <= int64(5573); _i++ {
		k = int32(_i)
		*tex.eqtb[k-1].pInt() = 0
	}
	*tex.eqtb[5280-1].pInt() = 1000
	*tex.eqtb[5264-1].pInt() = 10000
	*tex.eqtb[5304-1].pInt() = 1
	*tex.eqtb[5303-1].pInt() = 25
	*tex.eqtb[5308-1].pInt() = 92
	*tex.eqtb[5311-1].pInt() = 13
	for _i := int64(0); _i <= int64(255); _i++ {
		k = int32(_i)
		*tex.eqtb[5574+k-1].pInt() = -1
	}
	*tex.eqtb[5620-1].pInt() = 0
	for _i := int64(5830); _i <= int64(6106); _i++ {
		k = int32(_i)
		*tex.eqtb[k-1].pInt() = 0
	}
	tex.hashUsed = 2614
	tex.csCount = 0
	*tex.eqtb[2623-1].pHh().pB0() = 116
	tex.hash[2623-514].rh = 502
	tex.fontPtr = 0
	tex.fmemPtr = 7
	tex.fontName[0] = 801
	tex.fontArea[0] = 338
	tex.hyphenChar[0] = 45
	tex.skewChar[0] = -1
	tex.bcharLabel[0] = 0
	tex.fontBchar[0] = 256
	tex.fontFalseBchar[0] = 256
	tex.fontBc[0] = 1
	tex.fontEc[0] = 0
	tex.fontSize[0] = 0
	tex.fontDsize[0] = 0
	tex.charBase[0] = 0
	tex.widthBase[0] = 0
	tex.heightBase[0] = 0
	tex.depthBase[0] = 0
	tex.italicBase[0] = 0
	tex.ligKernBase[0] = 0
	tex.kernBase[0] = 0
	tex.extenBase[0] = 0
	tex.fontGlue[0] = 0
	tex.fontParams[0] = 7
	tex.paramBase[0] = -1
	for _i := int64(0); _i <= int64(6); _i++ {
		k = int32(_i)
		*tex.fontInfo[k].pInt() = 0
	}
	for _i := int64(-trieOpSize); _i <= int64(trieOpSize); _i++ {
		k = int32(_i)
		tex.trieOpHash[k+500] = 0
	}
	for _i := int64(0); _i <= int64(255); _i++ {
		k = int32(_i)
		tex.trieUsed[k] = 0
	}
	tex.trieOpPtr = 0
	tex.trieNotReady = true
	tex.trieL[0] = 0
	tex.trieC[0] = 0
	tex.triePtr = 0
	tex.hash[2614-514].rh = 1190
	tex.formatIdent = 1257
	tex.hash[2622-514].rh = 1296
	*tex.eqtb[2622-1].pHh().pB1() = 1
	*tex.eqtb[2622-1].pHh().pB0() = 113
	tex.eqtb[2622-1].pHh().rh = 0
}

func (tex *Context) printLn() {
	switch tex.selector {
	case 19:
		writeLn(&tex.termOut)
		writeLn(&tex.logFile)
		tex.termOffset = 0
		tex.fileOffset = 0
	case 18:
		writeLn(&tex.logFile)
		tex.fileOffset = 0
	case 17:
		writeLn(&tex.termOut)
		tex.termOffset = 0
	case 16, 20, 21:
	default:
		writeLn(&tex.writeFile[tex.selector])
	}
}

func (tex *Context) printChar(s byte) {
	if int32(s) == tex.eqtb[5312-1].int() {
		if tex.selector < 20 {
			tex.printLn()
			goto label10
		}
	}
	switch tex.selector {
	case 19:
		write(&tex.termOut, tex.xchr[s])
		write(&tex.logFile, tex.xchr[s])
		tex.termOffset = byte(int32(tex.termOffset) + 1)
		tex.fileOffset = byte(int32(tex.fileOffset) + 1)
		if tex.termOffset == maxPrintLine {
			writeLn(&tex.termOut)
			tex.termOffset = 0
		}
		if tex.fileOffset == maxPrintLine {
			writeLn(&tex.logFile)
			tex.fileOffset = 0
		}
	case 18:
		write(&tex.logFile, tex.xchr[s])
		tex.fileOffset = byte(int32(tex.fileOffset) + 1)
		if tex.fileOffset == maxPrintLine {
			tex.printLn()
		}
	case 17:
		write(&tex.termOut, tex.xchr[s])
		tex.termOffset = byte(int32(tex.termOffset) + 1)
		if tex.termOffset == maxPrintLine {
			tex.printLn()
		}
	case 16:
	case 20:
		if tex.tally < tex.trickCount {
			tex.trickBuf[(tex.tally % errorLine)] = s
		}
	case 21:
		if tex.poolPtr < poolSize {
			tex.strPool[tex.poolPtr] = s
			tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
		}
	default:
		write(&tex.writeFile[tex.selector], tex.xchr[s])
	}
	tex.tally = tex.tally + 1
label10:
}

func (tex *Context) print(s int32) {
	var j uint16 // 0..32000
	var nl int32 // integer
	if s >= int32(tex.strPtr) {
		s = 259
	} else if s < 256 {
		if s < 0 {
			s = 259
		} else {
			if tex.selector > 20 {
				tex.printChar(byte(s))
				goto label10
			}
			if s == tex.eqtb[5312-1].int() {
				if tex.selector < 20 {
					tex.printLn()
					goto label10
				}
			}
			nl = tex.eqtb[5312-1].int()
			*tex.eqtb[5312-1].pInt() = -1
			j = tex.strStart[s]
			for j < tex.strStart[s+1] {
				tex.printChar(tex.strPool[j])
				j = uint16(int32(j) + 1)
			}
			*tex.eqtb[5312-1].pInt() = nl
			goto label10
		}
	}
	j = tex.strStart[s]
	for j < tex.strStart[s+1] {
		tex.printChar(tex.strPool[j])
		j = uint16(int32(j) + 1)
	}
label10:
	;
}

func (tex *Context) slowPrint(s int32) {
	var j uint16 // 0..32000
	if (s >= int32(tex.strPtr)) || (s < 256) {
		tex.print(s)
	} else {
		j = tex.strStart[s]
		for j < tex.strStart[s+1] {
			tex.print(int32(tex.strPool[j]))
			j = uint16(int32(j) + 1)
		}
	}
}

func (tex *Context) printNl(s uint16) {
	if ((tex.termOffset > 0) && odd(int32(tex.selector))) || ((tex.fileOffset > 0) && (tex.selector >= 18)) {
		tex.printLn()
	}
	tex.print(int32(s))
}

func (tex *Context) printEsc(s uint16) {
	var c int32 // integer
	c = tex.eqtb[5308-1].int()
	if c >= 0 {
		if c < 256 {
			tex.print(c)
		}
	}
	tex.slowPrint(int32(s))
}

func (tex *Context) printTheDigs(k byte) {
	for k > 0 {
		k = byte(int32(k) - 1)
		if tex.dig[k] < 10 {
			tex.printChar(byte(48 + int32(tex.dig[k])))
		} else {
			tex.printChar(byte(55 + int32(tex.dig[k])))
		}
	}
}

func (tex *Context) printInt(n int32) {
	var k byte  // 0..23
	var m int32 // integer
	k = 0
	if n < 0 {
		tex.printChar(45)
		if n > -100000000 {
			n = -n
		} else {
			m = -1 - n
			n = (m / 10)
			m = (m % 10) + 1
			k = 1
			if m < 10 {
				tex.dig[0] = byte(m)
			} else {
				tex.dig[0] = 0
				n = n + 1
			}
		}
	}
	for {
		tex.dig[k] = byte((n % 10))
		n = (n / 10)
		k = byte(int32(k) + 1)
		if n == 0 {
			break
		}
	}
	tex.printTheDigs(k)
}

func (tex *Context) printCs(p int32) {
	if p < 514 {
		if p >= 257 {
			if p == 513 {
				tex.printEsc(504)
				tex.printEsc(505)
				tex.printChar(32)
			} else {
				tex.printEsc(uint16(p - 257))
				if tex.eqtb[3983+p-257-1].hh().rh == 11 {
					tex.printChar(32)
				}
			}
		} else if p < 1 {
			tex.printEsc(506)
		} else {
			tex.print(p - 1)
		}
	} else if p >= 2881 {
		tex.printEsc(506)
	} else if (tex.hash[p-514].rh < 0) || (tex.hash[p-514].rh >= tex.strPtr) {
		tex.printEsc(507)
	} else {
		tex.printEsc(tex.hash[p-514].rh)
		tex.printChar(32)
	}
}

func (tex *Context) sprintCs(p uint16) {
	if p < 514 {
		if p < 257 {
			tex.print(int32(p) - 1)
		} else if p < 513 {
			tex.printEsc(uint16(int32(p) - 257))
		} else {
			tex.printEsc(504)
			tex.printEsc(505)
		}
	} else {
		tex.printEsc(tex.hash[p-514].rh)
	}
}

func (tex *Context) printFileName(n, a, e int32) {
	tex.slowPrint(a)
	tex.slowPrint(n)
	tex.slowPrint(e)
}

func (tex *Context) printSize(s int32) {
	if s == 0 {
		tex.printEsc(412)
	} else if s == 16 {
		tex.printEsc(413)
	} else {
		tex.printEsc(414)
	}
}

func (tex *Context) printWriteWhatsit(s uint16, p uint16) {
	tex.printEsc(s)
	if tex.mem[int32(p)+1].hh().lh() < 16 {
		tex.printInt(int32(tex.mem[int32(p)+1].hh().lh()))
	} else if tex.mem[int32(p)+1].hh().lh() == 16 {
		tex.printChar(42)
	} else {
		tex.printChar(45)
	}
}

func (tex *Context) jumpOut() {
	panic(pasEndOfTeX)
}

func (tex *Context) error1() {
	var c byte               // 0..255
	var s1, s2, s3, s4 int32 // integer
	if tex.history < 2 {
		tex.history = 2
	}
	tex.printChar(46)
	tex.showContext()
	if tex.interaction == 3 {
		for true {
		label22:
			if tex.interaction != 3 {
				goto label10
			}
			tex.clearForErrorPrompt()
			tex.print(264)
			tex.termInput()
			if tex.last == tex.first {
				goto label10
			}
			c = tex.buffer[tex.first]
			if c >= 97 {
				c = byte(int32(c) - 32)
			}
			switch c {
			case 48, 49, 50, 51, 52, 53, 54, 55, 56, 57:
				if tex.deletionsAllowed {
					s1 = int32(tex.curTok)
					s2 = int32(tex.curCmd)
					s3 = int32(tex.curChr)
					s4 = tex.alignState
					tex.alignState = 1000000
					tex.OKToInterrupt = false
					if (int32(tex.last) > (int32(tex.first) + 1)) && (tex.buffer[int32(tex.first)+1] >= 48) && (tex.buffer[int32(tex.first)+1] <= 57) {
						c = byte((int32(c) * 10) + int32(tex.buffer[int32(tex.first)+1]) - (48 * 11))
					} else {
						c = byte(int32(c) - 48)
					}
					for c > 0 {
						tex.getToken()
						c = byte(int32(c) - 1)
					}
					tex.curTok = uint16(s1)
					tex.curCmd = byte(s2)
					tex.curChr = uint16(s3)
					tex.alignState = s4
					tex.OKToInterrupt = true
					tex.helpPtr = 2
					tex.helpLine[1] = 279
					tex.helpLine[0] = 280
					tex.showContext()
					goto label22
				}
			case 69:
				if tex.basePtr > 0 {
					if tex.inputStack[tex.basePtr].nameField >= 256 {
						tex.printNl(265)
						tex.slowPrint(int32(tex.inputStack[tex.basePtr].nameField))
						tex.print(266)
						tex.printInt(tex.line)
						tex.interaction = 2
						tex.jumpOut()
					}
				}
			case 72:
				if tex.useErrHelp {
					tex.giveErrHelp()
					tex.useErrHelp = false
				} else {
					if tex.helpPtr == 0 {
						tex.helpPtr = 2
						tex.helpLine[1] = 281
						tex.helpLine[0] = 282
					}
					for {
						tex.helpPtr = byte(int32(tex.helpPtr) - 1)
						tex.print(int32(tex.helpLine[tex.helpPtr]))
						tex.printLn()
						if tex.helpPtr == 0 {
							break
						}
					}
				}
				tex.helpPtr = 4
				tex.helpLine[3] = 283
				tex.helpLine[2] = 282
				tex.helpLine[1] = 284
				tex.helpLine[0] = 285
				goto label22
			case 73:
				tex.beginFileReading()
				if int32(tex.last) > int32(tex.first)+1 {
					tex.curInput.locField = uint16(int32(tex.first) + 1)
					tex.buffer[tex.first] = 32
				} else {
					tex.print(278)
					tex.termInput()
					tex.curInput.locField = tex.first
				}
				tex.first = tex.last
				tex.curInput.limitField = uint16(int32(tex.last) - 1)
				goto label10
			case 81, 82, 83:
				tex.errorCount = 0
				tex.interaction = byte(0 + int32(c) - 81)
				tex.print(273)
				switch c {
				case 81:
					tex.printEsc(274)
					tex.selector = byte(int32(tex.selector) - 1)
				case 82:
					tex.printEsc(275)
				case 83:
					tex.printEsc(276)
				}
				tex.print(277)
				tex.printLn()
				break1(&tex.termOut)
				goto label10
			case 88:
				tex.interaction = 2
				tex.jumpOut()
			default:
			}
			tex.print(267)
			tex.printNl(268)
			tex.printNl(269)
			if tex.basePtr > 0 {
				if tex.inputStack[tex.basePtr].nameField >= 256 {
					tex.print(270)
				}
			}
			if tex.deletionsAllowed {
				tex.printNl(271)
			}
			tex.printNl(272)
		}
	}
	tex.errorCount = int8(int32(tex.errorCount) + 1)
	if tex.errorCount == 100 {
		tex.printNl(263)
		tex.history = 3
		tex.jumpOut()
	}
	if tex.interaction > 0 {
		tex.selector = byte(int32(tex.selector) - 1)
	}
	if tex.useErrHelp {
		tex.printLn()
		tex.giveErrHelp()
	} else {
		for tex.helpPtr > 0 {
			tex.helpPtr = byte(int32(tex.helpPtr) - 1)
			tex.printNl(tex.helpLine[tex.helpPtr])
		}
	}
	tex.printLn()
	if tex.interaction > 0 {
		tex.selector = byte(int32(tex.selector) + 1)
	}
	tex.printLn()
label10:
}

func (tex *Context) fatalError(s uint16) {
	tex.normalizeSelector()
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(287)
	tex.helpPtr = 1
	tex.helpLine[0] = s
	if tex.interaction == 3 {
		tex.interaction = 2
	}
	if tex.logOpened {
		tex.error1()
	}
	tex.history = 3
	tex.jumpOut()
}

func (tex *Context) overflow(s uint16, n int32) {
	tex.normalizeSelector()
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(288)
	tex.print(int32(s))
	tex.printChar(61)
	tex.printInt(n)
	tex.printChar(93)
	tex.helpPtr = 2
	tex.helpLine[1] = 289
	tex.helpLine[0] = 290
	if tex.interaction == 3 {
		tex.interaction = 2
	}
	if tex.logOpened {
		tex.error1()
	}
	tex.history = 3
	tex.jumpOut()
}

func (tex *Context) confusion(s uint16) {
	tex.normalizeSelector()
	if tex.history < 2 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(291)
		tex.print(int32(s))
		tex.printChar(41)
		tex.helpPtr = 1
		tex.helpLine[0] = 292
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(293)
		tex.helpPtr = 2
		tex.helpLine[1] = 294
		tex.helpLine[0] = 295
	}
	if tex.interaction == 3 {
		tex.interaction = 2
	}
	if tex.logOpened {
		tex.error1()
	}
	tex.history = 3
	tex.jumpOut()
}

func (tex *Context) aOpenIn(f *pasFile) (ret bool) {
	reset1(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) aOpenOut(f *pasFile) (ret bool) {
	rewrite1(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) bOpenIn(f *pasFile) (ret bool) {
	reset1(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) bOpenOut(f *pasFile) (ret bool) {
	rewrite1(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) wOpenIn(f *pasFile) (ret bool) {
	reset4(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) wOpenOut(f *pasFile) (ret bool) {
	rewrite4(tex, f, string(tex.nameOfFile[:]), "/O")
	ret = erstat(f) == 0
	return ret
}

func (tex *Context) aClose(f *pasFile) {
	close(f)
}

func (tex *Context) bClose(f *pasFile) {
	close(f)
}

func (tex *Context) wClose(f *pasFile) {
	close(f)
}

func (tex *Context) inputLn(f *pasFile, bypassEoln bool) (ret bool) {
	var lastNonblank uint16 // 0..500
	if bypassEoln {
		if !eof(f) {
			get(f)
		}
	}
	tex.last = tex.first
	if eof(f) {
		ret = false
	} else {
		lastNonblank = tex.first
		for !eoln(f) {
			if tex.last >= tex.maxBufStack {
				tex.maxBufStack = uint16(int32(tex.last) + 1)
				if tex.maxBufStack == bufSize {
					if tex.formatIdent == 0 {
						writeLn(&tex.termOut, "Buffer size exceeded!")
						panic(pasFinalEnd)
					} else {
						tex.curInput.locField = tex.first
						tex.curInput.limitField = uint16(int32(tex.last) - 1)
						tex.overflow(256, bufSize)
					}
				}
			}
			tex.buffer[tex.last] = tex.xord[f.byte()]
			get(f)
			tex.last = uint16(int32(tex.last) + 1)
			if tex.buffer[int32(tex.last)-1] != 32 {
				lastNonblank = tex.last
			}
		}
		tex.last = lastNonblank
		ret = true
	}
	return ret
}

func (tex *Context) initTerminal() (ret bool) {
	reset1(tex, &tex.termIn, "TTY:", "/O/I")
	for true {
		write(&tex.termOut, "**")
		break1(&tex.termOut)
		if !tex.inputLn(&tex.termIn, true) {
			writeLn(&tex.termOut)
			write(&tex.termOut, "! End of file on the terminal... why?")
			ret = false
			goto label10
		}
		tex.curInput.locField = tex.first
		for (tex.curInput.locField < tex.last) && (tex.buffer[tex.curInput.locField] == 32) {
			tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
		}
		if tex.curInput.locField < tex.last {
			ret = true
			goto label10
		}
		writeLn(&tex.termOut, "Please type the name of your input file.")
	}
label10:
	return ret
}

func (tex *Context) makeString() (ret uint16) {
	if tex.strPtr == maxStrings {
		tex.overflow(258, maxStrings-int32(tex.initStrPtr))
	}
	tex.strPtr = uint16(int32(tex.strPtr) + 1)
	tex.strStart[tex.strPtr] = tex.poolPtr
	ret = uint16(int32(tex.strPtr) - 1)
	return ret
}

func (tex *Context) strEqBuf(s uint16, k int32) (ret bool) {
	var j uint16    // 0..32000
	var result bool // boolean
	j = tex.strStart[s]
	for j < tex.strStart[int32(s)+1] {
		if tex.strPool[j] != tex.buffer[k] {
			result = false
			goto label45
		}
		j = uint16(int32(j) + 1)
		k = k + 1
	}
	result = true
label45:
	ret = result
	return ret
}

func (tex *Context) strEqStr(s, t uint16) (ret bool) {
	var j, k uint16 // 0..32000
	var result bool // boolean
	result = false
	if (int32(tex.strStart[int32(s)+1]) - int32(tex.strStart[s])) != (int32(tex.strStart[int32(t)+1]) - int32(tex.strStart[t])) {
		goto label45
	}
	j = tex.strStart[s]
	k = tex.strStart[t]
	for j < tex.strStart[int32(s)+1] {
		if tex.strPool[j] != tex.strPool[k] {
			goto label45
		}
		j = uint16(int32(j) + 1)
		k = uint16(int32(k) + 1)
	}
	result = true
label45:
	ret = result
	return ret
}

func (tex *Context) getStringsStarted() (ret bool) {
	var k, l byte // 0..255
	var m, n byte // char
	var a int32   // integer
	var c bool    // boolean
	tex.poolPtr = 0
	tex.strPtr = 0
	tex.strStart[0] = 0
	for _i := int64(0); _i <= int64(255); _i++ {
		k = byte(_i)
		if (k < 32) || (k > 126) {
			tex.strPool[tex.poolPtr] = 94
			tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
			tex.strPool[tex.poolPtr] = 94
			tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
			if k < 64 {
				tex.strPool[tex.poolPtr] = byte(int32(k) + 64)
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
			} else if k < 128 {
				tex.strPool[tex.poolPtr] = byte(int32(k) - 64)
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
			} else {
				l = byte((int32(k) / 16))
				if l < 10 {
					tex.strPool[tex.poolPtr] = byte(int32(l) + 48)
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				} else {
					tex.strPool[tex.poolPtr] = byte(int32(l) + 87)
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				}
				l = byte((int32(k) % 16))
				if l < 10 {
					tex.strPool[tex.poolPtr] = byte(int32(l) + 48)
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				} else {
					tex.strPool[tex.poolPtr] = byte(int32(l) + 87)
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				}
			}
		} else {
			tex.strPool[tex.poolPtr] = k
			tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
		}
		tex.makeString()
	}
	setString(tex.nameOfFile[:], poolName)
	if tex.aOpenIn(&tex.poolFile) {
		c = false
		for {
			if eof(&tex.poolFile) {
				writeLn(&tex.termOut, "! TEX.POOL has no check sum.")
				tex.aClose(&tex.poolFile)
				ret = false
				goto label10
			}
			read(&tex.poolFile, &m, &n)
			if m == '*' {
				a = 0
				k = 1
				for true {
					if (tex.xord[n] < 48) || (tex.xord[n] > 57) {
						writeLn(&tex.termOut, "! TEX.POOL check sum doesn't have nine digits.")
						tex.aClose(&tex.poolFile)
						ret = false
						goto label10
					}
					a = (10 * a) + int32(tex.xord[n]) - 48
					if k == 9 {
						goto label30
					}
					k = byte(int32(k) + 1)
					read(&tex.poolFile, &n)
				}
			label30:
				if a != 504454778 {
					writeLn(&tex.termOut, "! TEX.POOL doesn't match; TANGLE me again.")
					tex.aClose(&tex.poolFile)
					ret = false
					goto label10
				}
				c = true
			} else {
				if (tex.xord[m] < 48) || (tex.xord[m] > 57) || (tex.xord[n] < 48) || (tex.xord[n] > 57) {
					writeLn(&tex.termOut, "! TEX.POOL line doesn't begin with two digits.")
					tex.aClose(&tex.poolFile)
					ret = false
					goto label10
				}
				l = byte((int32(tex.xord[m]) * 10) + int32(tex.xord[n]) - (48 * 11))
				if int32(tex.poolPtr)+int32(l)+stringVacancies > poolSize {
					writeLn(&tex.termOut, "! You have to increase POOLSIZE.")
					tex.aClose(&tex.poolFile)
					ret = false
					goto label10
				}
				for _i := int64(1); _i <= int64(l); _i++ {
					k = byte(_i)
					if eoln(&tex.poolFile) {
						m = ' '
					} else {
						read(&tex.poolFile, &m)
					}
					tex.strPool[tex.poolPtr] = tex.xord[m]
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				}
				readLn(&tex.poolFile)
				tex.makeString()
			}
			if c {
				break
			}
		}
		tex.aClose(&tex.poolFile)
		ret = true
	} else {
		writeLn(&tex.termOut, "! I can't read TEX.POOL.")
		tex.aClose(&tex.poolFile)
		ret = false
		goto label10
	}
label10:
	return ret
}

func (tex *Context) printTwo(n int32) {
	n = (iabs(n) % 100)
	tex.printChar(byte(48 + (n / 10)))
	tex.printChar(byte(48 + (n % 10)))
}

func (tex *Context) printHex(n int32) {
	var k byte // 0..22
	k = 0
	tex.printChar(34)
	for {
		tex.dig[k] = byte((n % 16))
		n = (n / 16)
		k = byte(int32(k) + 1)
		if n == 0 {
			break
		}
	}
	tex.printTheDigs(k)
}

func (tex *Context) printRomanInt(n int32) {
	var j, k uint16 // 0..32000
	var u, v uint32 // 0..2147483647
	j = tex.strStart[260]
	v = 1000
	for true {
		for n >= int32(v) {
			tex.printChar(tex.strPool[j])
			n = n - int32(v)
		}
		if n <= 0 {
			goto label10
		}
		k = uint16(int32(j) + 2)
		u = uint32((int32(v) / (int32(tex.strPool[int32(k)-1]) - 48)))
		if tex.strPool[int32(k)-1] == 50 {
			k = uint16(int32(k) + 2)
			u = uint32((int32(u) / (int32(tex.strPool[int32(k)-1]) - 48)))
		}
		if n+int32(u) >= int32(v) {
			tex.printChar(tex.strPool[k])
			n = n + int32(u)
		} else {
			j = uint16(int32(j) + 2)
			v = uint32((int32(v) / (int32(tex.strPool[int32(j)-1]) - 48)))
		}
	}
label10:
}

func (tex *Context) printCurrentString() {
	var j uint16 // 0..32000
	j = tex.strStart[tex.strPtr]
	for j < tex.poolPtr {
		tex.printChar(tex.strPool[j])
		j = uint16(int32(j) + 1)
	}
}

func (tex *Context) termInput() {
	var k uint16 // 0..500
	break1(&tex.termOut)
	if !tex.inputLn(&tex.termIn, true) {
		tex.fatalError(261)
	}
	tex.termOffset = 0
	tex.selector = byte(int32(tex.selector) - 1)
	if tex.last != tex.first {
		for _i := int64(tex.first); _i <= int64(int32(tex.last)-1); _i++ {
			k = uint16(_i)
			tex.print(int32(tex.buffer[k]))
		}
	}
	tex.printLn()
	tex.selector = byte(int32(tex.selector) + 1)
}

func (tex *Context) intError(n int32) {
	tex.print(286)
	tex.printInt(n)
	tex.printChar(41)
	tex.error1()
}

func (tex *Context) normalizeSelector() {
	if tex.logOpened {
		tex.selector = 19
	} else {
		tex.selector = 17
	}
	if tex.jobName == 0 {
		tex.openLogFile()
	}
	if tex.interaction == 0 {
		tex.selector = byte(int32(tex.selector) - 1)
	}
}

func (tex *Context) pauseForInstructions() {
	if tex.OKToInterrupt {
		tex.interaction = 3
		if (tex.selector == 18) || (tex.selector == 16) {
			tex.selector = byte(int32(tex.selector) + 1)
		}
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(296)
		tex.helpPtr = 3
		tex.helpLine[2] = 297
		tex.helpLine[1] = 298
		tex.helpLine[0] = 299
		tex.deletionsAllowed = false
		tex.error1()
		tex.deletionsAllowed = true
		tex.interrupt = 0
	}
}

func (tex *Context) half(x int32) (ret int32) {
	if odd(x) {
		ret = ((x + 1) / 2)
	} else {
		ret = (x / 2)
	}
	return ret
}

func (tex *Context) roundDecimals(k byte) (ret int32) {
	var a int32 // integer
	a = 0
	for k > 0 {
		k = byte(int32(k) - 1)
		a = ((a + (int32(tex.dig[k]) * 131072)) / 10)
	}
	ret = ((a + 1) / 2)
	return ret
}

func (tex *Context) printScaled(s int32) {
	var delta int32 // integer
	if s < 0 {
		tex.printChar(45)
		s = -s
	}
	tex.printInt((s / 65536))
	tex.printChar(46)
	s = (10 * (s % 65536)) + 5
	delta = 10
	for {
		if delta > 65536 {
			s = s - 17232
		}
		tex.printChar(byte(48 + (s / 65536)))
		s = (10 * (s % 65536))
		delta = (delta * 10)
		if s <= delta {
			break
		}
	}
}

func (tex *Context) multAndAdd(n int32, x, y, maxAnswer int32) (ret int32) {
	if n < 0 {
		x = -x
		n = -n
	}
	if n == 0 {
		ret = y
	} else if (x <= ((maxAnswer - y) / n)) && (-x <= ((maxAnswer + y) / n)) {
		ret = (n * x) + y
	} else {
		tex.arithError = true
		ret = 0
	}
	return ret
}

func (tex *Context) xOverN(x int32, n int32) (ret int32) {
	var negative bool // boolean
	negative = false
	if n == 0 {
		tex.arithError = true
		ret = 0
		tex.remainder = x
	} else {
		if n < 0 {
			x = -x
			n = -n
			negative = true
		}
		if x >= 0 {
			ret = (x / n)
			tex.remainder = (x % n)
		} else {
			ret = -(-x / n)
			tex.remainder = -(-x % n)
		}
	}
	if negative {
		tex.remainder = -tex.remainder
	}
	return ret
}

func (tex *Context) xnOverD(x int32, n, d int32) (ret int32) {
	var positive bool  // boolean
	var t, u, v uint32 // 0..2147483647
	if x >= 0 {
		positive = true
	} else {
		x = -x
		positive = false
	}
	t = uint32(((x % 32768) * n))
	u = uint32(((x / 32768) * n) + (int32(t) / 32768))
	v = uint32(((int32(u) % d) * 32768) + (int32(t) % 32768))
	if (int32(u) / d) >= 32768 {
		tex.arithError = true
	} else {
		u = uint32((32768 * (int32(u) / d)) + (int32(v) / d))
	}
	if positive {
		ret = int32(u)
		tex.remainder = (int32(v) % d)
	} else {
		ret = int32(-u)
		tex.remainder = -(int32(v) % d)
	}
	return ret
}

func (tex *Context) badness(t, s int32) (ret uint16) {
	var r int32 // integer
	if t == 0 {
		ret = 0
	} else if s <= 0 {
		ret = 10000
	} else {
		if t <= 7230584 {
			r = ((t * 297) / s)
		} else if s >= 1663497 {
			r = (t / (s / 297))
		} else {
			r = t
		}
		if r > 1290 {
			ret = 10000
		} else {
			ret = uint16((((r * r * r) + 131072) / 262144))
		}
	}
	return ret
}

func (tex *Context) showTokenList(p, q int32, l int32) {
	var m, c int32    // integer
	var matchChr byte // 0..255
	var n byte        // 0..255
	matchChr = 35
	n = 48
	tex.tally = 0
	for (p != 0) && (tex.tally < l) {
		if p == q {
			tex.firstCount = tex.tally
			tex.trickCount = tex.tally + 1 + errorLine - halfErrorLine
			if tex.trickCount < errorLine {
				tex.trickCount = errorLine
			}
		}
		if (p < int32(tex.hiMemMin)) || (p > int32(tex.memEnd)) {
			tex.printEsc(309)
			goto label10
		}
		if tex.mem[p].hh().lh() >= 4095 {
			tex.printCs(int32(tex.mem[p].hh().lh()) - 4095)
		} else {
			m = (int32(tex.mem[p].hh().lh()) / 256)
			c = (int32(tex.mem[p].hh().lh()) % 256)
			if tex.mem[p].hh().lh() < 0 {
				tex.printEsc(555)
			} else {
				switch m {
				case 1, 2, 3, 4, 7, 8, 10, 11, 12:
					tex.print(c)
				case 6:
					tex.print(c)
					tex.print(c)
				case 5:
					tex.print(int32(matchChr))
					if c <= 9 {
						tex.printChar(byte(c + 48))
					} else {
						tex.printChar(33)
						goto label10
					}
				case 13:
					matchChr = byte(c)
					tex.print(c)
					n = byte(int32(n) + 1)
					tex.printChar(n)
					if n > 57 {
						goto label10
					}
				case 14:
					tex.print(556)
				default:
					tex.printEsc(555)
				}
			}
		}
		p = int32(tex.mem[p].hh().rh)
	}
	if p != 0 {
		tex.printEsc(554)
	}
label10:
}

func (tex *Context) runaway() {
	var p uint16 // 0..65535
	if tex.scannerStatus > 1 {
		tex.printNl(569)
		switch tex.scannerStatus {
		case 2:
			tex.print(570)
			p = tex.defRef
		case 3:
			tex.print(571)
			p = 29997
		case 4:
			tex.print(572)
			p = 29996
		case 5:
			tex.print(573)
			p = tex.defRef
		}
		tex.printChar(63)
		tex.printLn()
		tex.showTokenList(int32(tex.mem[p].hh().rh), 0, errorLine-10)
	}
}

func (tex *Context) getAvail() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.avail
	if p != 0 {
		tex.avail = tex.mem[tex.avail].hh().rh
	} else if tex.memEnd < memMax {
		tex.memEnd = uint16(int32(tex.memEnd) + 1)
		p = tex.memEnd
	} else {
		tex.hiMemMin = uint16(int32(tex.hiMemMin) - 1)
		p = tex.hiMemMin
		if tex.hiMemMin <= tex.loMemMax {
			tex.runaway()
			tex.overflow(300, memMax+1-memMin)
		}
	}
	tex.mem[p].pHh().rh = 0
	ret = p
	return ret
}

func (tex *Context) flushList(p uint16) {
	var q, r uint16 // 0..65535
	if p != 0 {
		r = p
		for {
			q = r
			r = tex.mem[r].hh().rh
			if r == 0 {
				break
			}
		}
		tex.mem[q].pHh().rh = tex.avail
		tex.avail = p
	}
}

func (tex *Context) getNode(s int32) (ret uint16) {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	var r int32  // integer
	var t int32  // integer
label20:
	p = tex.rover
	for {
		q = uint16(int32(p) + int32(tex.mem[p].hh().lh()))
		for tex.mem[q].hh().rh == 65535 {
			t = int32(tex.mem[int32(q)+1].hh().rh)
			if q == tex.rover {
				tex.rover = uint16(t)
			}
			*tex.mem[t+1].pHh().pLh() = tex.mem[int32(q)+1].hh().lh()
			tex.mem[int32(tex.mem[int32(q)+1].hh().lh())+1].pHh().rh = uint16(t)
			q = uint16(int32(q) + int32(tex.mem[q].hh().lh()))
		}
		r = int32(q) - s
		if r > int32(p)+1 {
			*tex.mem[p].pHh().pLh() = uint16(r - int32(p))
			tex.rover = p
			goto label40
		}
		if r == int32(p) {
			if tex.mem[int32(p)+1].hh().rh != p {
				tex.rover = tex.mem[int32(p)+1].hh().rh
				t = int32(tex.mem[int32(p)+1].hh().lh())
				*tex.mem[int32(tex.rover)+1].pHh().pLh() = uint16(t)
				tex.mem[t+1].pHh().rh = tex.rover
				goto label40
			}
		}
		*tex.mem[p].pHh().pLh() = uint16(int32(q) - int32(p))
		p = tex.mem[int32(p)+1].hh().rh
		if p == tex.rover {
			break
		}
	}
	if s == 1073741824 {
		ret = 65535
		goto label10
	}
	if int32(tex.loMemMax)+2 < int32(tex.hiMemMin) {
		if int32(tex.loMemMax)+2 <= 65535 {
			if int32(tex.hiMemMin)-int32(tex.loMemMax) >= 1998 {
				t = int32(tex.loMemMax) + 1000
			} else {
				t = int32(tex.loMemMax) + 1 + ((int32(tex.hiMemMin) - int32(tex.loMemMax)) / 2)
			}
			p = tex.mem[int32(tex.rover)+1].hh().lh()
			q = tex.loMemMax
			tex.mem[int32(p)+1].pHh().rh = q
			*tex.mem[int32(tex.rover)+1].pHh().pLh() = q
			if t > 65535 {
				t = 65535
			}
			tex.mem[int32(q)+1].pHh().rh = tex.rover
			*tex.mem[int32(q)+1].pHh().pLh() = p
			tex.mem[q].pHh().rh = 65535
			*tex.mem[q].pHh().pLh() = uint16(t - int32(tex.loMemMax))
			tex.loMemMax = uint16(t)
			tex.mem[tex.loMemMax].pHh().rh = 0
			*tex.mem[tex.loMemMax].pHh().pLh() = 0
			tex.rover = q
			goto label20
		}
	}
	tex.overflow(300, memMax+1-memMin)
label40:
	tex.mem[r].pHh().rh = 0
	ret = uint16(r)
label10:
	return ret
}

func (tex *Context) freeNode(p uint16, s uint16) {
	var q uint16 // 0..65535
	*tex.mem[p].pHh().pLh() = s
	tex.mem[p].pHh().rh = 65535
	q = tex.mem[int32(tex.rover)+1].hh().lh()
	*tex.mem[int32(p)+1].pHh().pLh() = q
	tex.mem[int32(p)+1].pHh().rh = tex.rover
	*tex.mem[int32(tex.rover)+1].pHh().pLh() = p
	tex.mem[int32(q)+1].pHh().rh = p
}

func (tex *Context) sortAvail() {
	var p, q, r uint16  // 0..65535
	var oldRover uint16 // 0..65535
	p = tex.getNode(1073741824)
	p = tex.mem[int32(tex.rover)+1].hh().rh
	tex.mem[int32(tex.rover)+1].pHh().rh = 65535
	oldRover = tex.rover
	for p != oldRover {
		if p < tex.rover {
			q = p
			p = tex.mem[int32(q)+1].hh().rh
			tex.mem[int32(q)+1].pHh().rh = tex.rover
			tex.rover = q
		} else {
			q = tex.rover
			for tex.mem[int32(q)+1].hh().rh < p {
				q = tex.mem[int32(q)+1].hh().rh
			}
			r = tex.mem[int32(p)+1].hh().rh
			tex.mem[int32(p)+1].pHh().rh = tex.mem[int32(q)+1].hh().rh
			tex.mem[int32(q)+1].pHh().rh = p
			p = r
		}
	}
	p = tex.rover
	for tex.mem[int32(p)+1].hh().rh != 65535 {
		*tex.mem[int32(tex.mem[int32(p)+1].hh().rh)+1].pHh().pLh() = p
		p = tex.mem[int32(p)+1].hh().rh
	}
	tex.mem[int32(p)+1].pHh().rh = tex.rover
	*tex.mem[int32(tex.rover)+1].pHh().pLh() = p
}

func (tex *Context) newNullBox() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(7)
	*tex.mem[p].pHh().pB0() = 0
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pInt() = 0
	*tex.mem[int32(p)+2].pInt() = 0
	*tex.mem[int32(p)+3].pInt() = 0
	*tex.mem[int32(p)+4].pInt() = 0
	tex.mem[int32(p)+5].pHh().rh = 0
	*tex.mem[int32(p)+5].pHh().pB0() = 0
	*tex.mem[int32(p)+5].pHh().pB1() = 0
	*tex.mem[int32(p)+6].pGr() = 0
	ret = p
	return ret
}

func (tex *Context) newRule() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(4)
	*tex.mem[p].pHh().pB0() = 2
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pInt() = -1073741824
	*tex.mem[int32(p)+2].pInt() = -1073741824
	*tex.mem[int32(p)+3].pInt() = -1073741824
	ret = p
	return ret
}

func (tex *Context) newLigature(f, c byte, q uint16) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 6
	*tex.mem[int32(p)+1].pHh().pB0() = f
	*tex.mem[int32(p)+1].pHh().pB1() = c
	tex.mem[int32(p)+1].pHh().rh = q
	*tex.mem[p].pHh().pB1() = 0
	ret = p
	return ret
}

func (tex *Context) newLigItem(c byte) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB1() = c
	tex.mem[int32(p)+1].pHh().rh = 0
	ret = p
	return ret
}

func (tex *Context) newDisc() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 7
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pHh().pLh() = 0
	tex.mem[int32(p)+1].pHh().rh = 0
	ret = p
	return ret
}

func (tex *Context) newMath(w int32, s byte) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 9
	*tex.mem[p].pHh().pB1() = s
	*tex.mem[int32(p)+1].pInt() = w
	ret = p
	return ret
}

func (tex *Context) newSpec(p uint16) (ret uint16) {
	var q uint16 // 0..65535
	q = tex.getNode(4)
	tex.mem[q] = tex.mem[p]
	tex.mem[q].pHh().rh = 0
	*tex.mem[int32(q)+1].pInt() = tex.mem[int32(p)+1].int()
	*tex.mem[int32(q)+2].pInt() = tex.mem[int32(p)+2].int()
	*tex.mem[int32(q)+3].pInt() = tex.mem[int32(p)+3].int()
	ret = q
	return ret
}

func (tex *Context) newParamGlue(n byte) (ret uint16) {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 10
	*tex.mem[p].pHh().pB1() = byte(int32(n) + 1)
	tex.mem[int32(p)+1].pHh().rh = 0
	q = tex.eqtb[2882+int32(n)-1].hh().rh
	*tex.mem[int32(p)+1].pHh().pLh() = q
	tex.mem[q].pHh().rh = uint16(int32(tex.mem[q].hh().rh) + 1)
	ret = p
	return ret
}

func (tex *Context) newGlue(q uint16) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 10
	*tex.mem[p].pHh().pB1() = 0
	tex.mem[int32(p)+1].pHh().rh = 0
	*tex.mem[int32(p)+1].pHh().pLh() = q
	tex.mem[q].pHh().rh = uint16(int32(tex.mem[q].hh().rh) + 1)
	ret = p
	return ret
}

func (tex *Context) newSkipParam(n byte) (ret uint16) {
	var p uint16 // 0..65535
	tex.tempPtr = tex.newSpec(tex.eqtb[2882+int32(n)-1].hh().rh)
	p = tex.newGlue(tex.tempPtr)
	tex.mem[tex.tempPtr].pHh().rh = 0
	*tex.mem[p].pHh().pB1() = byte(int32(n) + 1)
	ret = p
	return ret
}

func (tex *Context) newKern(w int32) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 11
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pInt() = w
	ret = p
	return ret
}

func (tex *Context) newPenalty(m int32) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 12
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pInt() = m
	ret = p
	return ret
}

func (tex *Context) shortDisplay(p int32) {
	var n int32 // integer
	for p > memMin {
		if p >= int32(tex.hiMemMin) {
			if p <= int32(tex.memEnd) {
				if int32(tex.mem[p].hh().b0()) != tex.fontInShortDisplay {
					if (tex.mem[p].hh().b0() < 0) || (tex.mem[p].hh().b0() > fontMax) {
						tex.printChar(42)
					} else {
						tex.printEsc(tex.hash[2624+int32(tex.mem[p].hh().b0())-514].rh)
					}
					tex.printChar(32)
					tex.fontInShortDisplay = int32(tex.mem[p].hh().b0())
				}
				tex.print(int32(tex.mem[p].hh().b1()) - 0)
			}
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 3, 8, 4, 5, 13:
				tex.print(308)
			case 2:
				tex.printChar(124)
			case 10:
				if tex.mem[p+1].hh().lh() != 0 {
					tex.printChar(32)
				}
			case 9:
				tex.printChar(36)
			case 6:
				tex.shortDisplay(int32(tex.mem[p+1].hh().rh))
			case 7:
				tex.shortDisplay(int32(tex.mem[p+1].hh().lh()))
				tex.shortDisplay(int32(tex.mem[p+1].hh().rh))
				n = int32(tex.mem[p].hh().b1())
				for n > 0 {
					if tex.mem[p].hh().rh != 0 {
						p = int32(tex.mem[p].hh().rh)
					}
					n = n - 1
				}
			default:
			}
		}
		p = int32(tex.mem[p].hh().rh)
	}
}

func (tex *Context) printFontAndChar(p int32) {
	if p > int32(tex.memEnd) {
		tex.printEsc(309)
	} else {
		if (tex.mem[p].hh().b0() < 0) || (tex.mem[p].hh().b0() > fontMax) {
			tex.printChar(42)
		} else {
			tex.printEsc(tex.hash[2624+int32(tex.mem[p].hh().b0())-514].rh)
		}
		tex.printChar(32)
		tex.print(int32(tex.mem[p].hh().b1()) - 0)
	}
}

func (tex *Context) printMark(p int32) {
	tex.printChar(123)
	if (p < int32(tex.hiMemMin)) || (p > int32(tex.memEnd)) {
		tex.printEsc(309)
	} else {
		tex.showTokenList(int32(tex.mem[p].hh().rh), 0, maxPrintLine-10)
	}
	tex.printChar(125)
}

func (tex *Context) printRuleDimen(d int32) {
	if d == -1073741824 {
		tex.printChar(42)
	} else {
		tex.printScaled(d)
	}
}

func (tex *Context) printGlue(d int32, order int32, s uint16) {
	tex.printScaled(d)
	if (order < 0) || (order > 3) {
		tex.print(310)
	} else if order > 0 {
		tex.print(311)
		for order > 1 {
			tex.printChar(108)
			order = order - 1
		}
	} else if s != 0 {
		tex.print(int32(s))
	}
}

func (tex *Context) printSpec(p int32, s uint16) {
	if (p < memMin) || (p >= int32(tex.loMemMax)) {
		tex.printChar(42)
	} else {
		tex.printScaled(tex.mem[p+1].int())
		if s != 0 {
			tex.print(int32(s))
		}
		if tex.mem[p+2].int() != 0 {
			tex.print(312)
			tex.printGlue(tex.mem[p+2].int(), int32(tex.mem[p].hh().b0()), s)
		}
		if tex.mem[p+3].int() != 0 {
			tex.print(313)
			tex.printGlue(tex.mem[p+3].int(), int32(tex.mem[p].hh().b1()), s)
		}
	}
}

func (tex *Context) printFamAndChar(p uint16) {
	tex.printEsc(464)
	tex.printInt(int32(tex.mem[p].hh().b0()))
	tex.printChar(32)
	tex.print(int32(tex.mem[p].hh().b1()) - 0)
}

func (tex *Context) printDelimiter(p uint16) {
	var a int32 // integer
	a = (int32(tex.mem[p].qqqq().b0) * 256) + int32(tex.mem[p].qqqq().b1) - 0
	a = (a * 4096) + (int32(tex.mem[p].qqqq().b2) * 256) + int32(tex.mem[p].qqqq().b3) - 0
	if a < 0 {
		tex.printInt(a)
	} else {
		tex.printHex(a)
	}
}

func (tex *Context) printSubsidiaryData(p uint16, c byte) {
	if (int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])) >= tex.depthThreshold {
		if tex.mem[p].hh().rh != 0 {
			tex.print(314)
		}
	} else {
		tex.strPool[tex.poolPtr] = c
		tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
		tex.tempPtr = p
		switch tex.mem[p].hh().rh {
		case 1:
			tex.printLn()
			tex.printCurrentString()
			tex.printFamAndChar(p)
		case 2:
			tex.showInfo()
		case 3:
			if tex.mem[p].hh().lh() == 0 {
				tex.printLn()
				tex.printCurrentString()
				tex.print(860)
			} else {
				tex.showInfo()
			}
		default:
		}
		tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
	}
}

func (tex *Context) printStyle(c int32) {
	switch c / 2 {
	case 0:
		tex.printEsc(861)
	case 1:
		tex.printEsc(862)
	case 2:
		tex.printEsc(863)
	case 3:
		tex.printEsc(864)
	default:
		tex.print(865)
	}
}

func (tex *Context) printSkipParam(n int32) {
	switch n {
	case 0:
		tex.printEsc(376)
	case 1:
		tex.printEsc(377)
	case 2:
		tex.printEsc(378)
	case 3:
		tex.printEsc(379)
	case 4:
		tex.printEsc(380)
	case 5:
		tex.printEsc(381)
	case 6:
		tex.printEsc(382)
	case 7:
		tex.printEsc(383)
	case 8:
		tex.printEsc(384)
	case 9:
		tex.printEsc(385)
	case 10:
		tex.printEsc(386)
	case 11:
		tex.printEsc(387)
	case 12:
		tex.printEsc(388)
	case 13:
		tex.printEsc(389)
	case 14:
		tex.printEsc(390)
	case 15:
		tex.printEsc(391)
	case 16:
		tex.printEsc(392)
	case 17:
		tex.printEsc(393)
	default:
		tex.print(394)
	}
}

func (tex *Context) showNodeList(p int32) {
	var n int32   // integer
	var g float32 // real
	if (int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])) > tex.depthThreshold {
		if p > 0 {
			tex.print(314)
		}
		goto label10
	}
	n = 0
	for p > memMin {
		tex.printLn()
		tex.printCurrentString()
		if p > int32(tex.memEnd) {
			tex.print(315)
			goto label10
		}
		n = n + 1
		if n > tex.breadthMax {
			tex.print(316)
			goto label10
		}
		if p >= int32(tex.hiMemMin) {
			tex.printFontAndChar(p)
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 13:
				if tex.mem[p].hh().b0() == 0 {
					tex.printEsc(104)
				} else if tex.mem[p].hh().b0() == 1 {
					tex.printEsc(118)
				} else {
					tex.printEsc(318)
				}
				tex.print(319)
				tex.printScaled(tex.mem[p+3].int())
				tex.printChar(43)
				tex.printScaled(tex.mem[p+2].int())
				tex.print(320)
				tex.printScaled(tex.mem[p+1].int())
				if tex.mem[p].hh().b0() == 13 {
					if tex.mem[p].hh().b1() != 0 {
						tex.print(286)
						tex.printInt(int32(tex.mem[p].hh().b1()) + 1)
						tex.print(322)
					}
					if tex.mem[p+6].int() != 0 {
						tex.print(323)
						tex.printGlue(tex.mem[p+6].int(), int32(tex.mem[p+5].hh().b1()), 0)
					}
					if tex.mem[p+4].int() != 0 {
						tex.print(324)
						tex.printGlue(tex.mem[p+4].int(), int32(tex.mem[p+5].hh().b0()), 0)
					}
				} else {
					g = tex.mem[p+6].gr()
					if (g != 0) && (tex.mem[p+5].hh().b0() != 0) {
						tex.print(325)
						if tex.mem[p+5].hh().b0() == 2 {
							tex.print(326)
						}
						if iabs(tex.mem[p+6].int()) < 1048576 {
							tex.print(327)
						} else if abs(g) > 20000 {
							if g > 0 {
								tex.printChar(62)
							} else {
								tex.print(328)
							}
							tex.printGlue((20000 * 65536), int32(tex.mem[p+5].hh().b1()), 0)
						} else {
							tex.printGlue(round((65536 * g)), int32(tex.mem[p+5].hh().b1()), 0)
						}
					}
					if tex.mem[p+4].int() != 0 {
						tex.print(321)
						tex.printScaled(tex.mem[p+4].int())
					}
				}
				tex.strPool[tex.poolPtr] = 46
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+5].hh().rh))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
			case 2:
				tex.printEsc(329)
				tex.printRuleDimen(tex.mem[p+3].int())
				tex.printChar(43)
				tex.printRuleDimen(tex.mem[p+2].int())
				tex.print(320)
				tex.printRuleDimen(tex.mem[p+1].int())
			case 3:
				tex.printEsc(330)
				tex.printInt(int32(tex.mem[p].hh().b1()) - 0)
				tex.print(331)
				tex.printScaled(tex.mem[p+3].int())
				tex.print(332)
				tex.printSpec(int32(tex.mem[p+4].hh().rh), 0)
				tex.printChar(44)
				tex.printScaled(tex.mem[p+2].int())
				tex.print(333)
				tex.printInt(tex.mem[p+1].int())
				tex.strPool[tex.poolPtr] = 46
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+4].hh().lh()))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
			case 8:
				switch tex.mem[p].hh().b1() {
				case 0:
					tex.printWriteWhatsit(1285, uint16(p))
					tex.printChar(61)
					tex.printFileName(int32(tex.mem[p+1].hh().rh), int32(tex.mem[p+2].hh().lh()), int32(tex.mem[p+2].hh().rh))
				case 1:
					tex.printWriteWhatsit(594, uint16(p))
					tex.printMark(int32(tex.mem[p+1].hh().rh))
				case 2:
					tex.printWriteWhatsit(1286, uint16(p))
				case 3:
					tex.printEsc(1287)
					tex.printMark(int32(tex.mem[p+1].hh().rh))
				case 4:
					tex.printEsc(1289)
					tex.printInt(int32(tex.mem[p+1].hh().rh))
					tex.print(1292)
					tex.printInt(int32(tex.mem[p+1].hh().b0()))
					tex.printChar(44)
					tex.printInt(int32(tex.mem[p+1].hh().b1()))
					tex.printChar(41)
				default:
					tex.print(1293)
				}
			case 10:
				if tex.mem[p].hh().b1() >= 100 {
					tex.printEsc(338)
					if tex.mem[p].hh().b1() == 101 {
						tex.printChar(99)
					} else if tex.mem[p].hh().b1() == 102 {
						tex.printChar(120)
					}
					tex.print(339)
					tex.printSpec(int32(tex.mem[p+1].hh().lh()), 0)
					tex.strPool[tex.poolPtr] = 46
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
					tex.showNodeList(int32(tex.mem[p+1].hh().rh))
					tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
				} else {
					tex.printEsc(334)
					if tex.mem[p].hh().b1() != 0 {
						tex.printChar(40)
						if tex.mem[p].hh().b1() < 98 {
							tex.printSkipParam(int32(tex.mem[p].hh().b1()) - 1)
						} else if tex.mem[p].hh().b1() == 98 {
							tex.printEsc(335)
						} else {
							tex.printEsc(336)
						}
						tex.printChar(41)
					}
					if tex.mem[p].hh().b1() != 98 {
						tex.printChar(32)
						if tex.mem[p].hh().b1() < 98 {
							tex.printSpec(int32(tex.mem[p+1].hh().lh()), 0)
						} else {
							tex.printSpec(int32(tex.mem[p+1].hh().lh()), 337)
						}
					}
				}
			case 11:
				if tex.mem[p].hh().b1() != 99 {
					tex.printEsc(340)
					if tex.mem[p].hh().b1() != 0 {
						tex.printChar(32)
					}
					tex.printScaled(tex.mem[p+1].int())
					if tex.mem[p].hh().b1() == 2 {
						tex.print(341)
					}
				} else {
					tex.printEsc(342)
					tex.printScaled(tex.mem[p+1].int())
					tex.print(337)
				}
			case 9:
				tex.printEsc(343)
				if tex.mem[p].hh().b1() == 0 {
					tex.print(344)
				} else {
					tex.print(345)
				}
				if tex.mem[p+1].int() != 0 {
					tex.print(346)
					tex.printScaled(tex.mem[p+1].int())
				}
			case 6:
				tex.printFontAndChar(p + 1)
				tex.print(347)
				if tex.mem[p].hh().b1() > 1 {
					tex.printChar(124)
				}
				tex.fontInShortDisplay = int32(tex.mem[p+1].hh().b0())
				tex.shortDisplay(int32(tex.mem[p+1].hh().rh))
				if odd(int32(tex.mem[p].hh().b1())) {
					tex.printChar(124)
				}
				tex.printChar(41)
			case 12:
				tex.printEsc(348)
				tex.printInt(tex.mem[p+1].int())
			case 7:
				tex.printEsc(349)
				if tex.mem[p].hh().b1() > 0 {
					tex.print(350)
					tex.printInt(int32(tex.mem[p].hh().b1()))
				}
				tex.strPool[tex.poolPtr] = 46
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+1].hh().lh()))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
				tex.strPool[tex.poolPtr] = 124
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+1].hh().rh))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
			case 4:
				tex.printEsc(351)
				tex.printMark(tex.mem[p+1].int())
			case 5:
				tex.printEsc(352)
				tex.strPool[tex.poolPtr] = 46
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(tex.mem[p+1].int())
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
			case 14:
				tex.printStyle(int32(tex.mem[p].hh().b1()))
			case 15:
				tex.printEsc(525)
				tex.strPool[tex.poolPtr] = 68
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+1].hh().lh()))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
				tex.strPool[tex.poolPtr] = 84
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+1].hh().rh))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
				tex.strPool[tex.poolPtr] = 83
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+2].hh().lh()))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
				tex.strPool[tex.poolPtr] = 115
				tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				tex.showNodeList(int32(tex.mem[p+2].hh().rh))
				tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
			case 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 26, 29, 28, 30, 31:
				switch tex.mem[p].hh().b0() {
				case 16:
					tex.printEsc(866)
				case 17:
					tex.printEsc(867)
				case 18:
					tex.printEsc(868)
				case 19:
					tex.printEsc(869)
				case 20:
					tex.printEsc(870)
				case 21:
					tex.printEsc(871)
				case 22:
					tex.printEsc(872)
				case 23:
					tex.printEsc(873)
				case 27:
					tex.printEsc(874)
				case 26:
					tex.printEsc(875)
				case 29:
					tex.printEsc(539)
				case 24:
					tex.printEsc(533)
					tex.printDelimiter(uint16(p + 4))
				case 28:
					tex.printEsc(508)
					tex.printFamAndChar(uint16(p + 4))
				case 30:
					tex.printEsc(876)
					tex.printDelimiter(uint16(p + 1))
				case 31:
					tex.printEsc(877)
					tex.printDelimiter(uint16(p + 1))
				}
				if tex.mem[p].hh().b1() != 0 {
					if tex.mem[p].hh().b1() == 1 {
						tex.printEsc(878)
					} else {
						tex.printEsc(879)
					}
				}
				if tex.mem[p].hh().b0() < 30 {
					tex.printSubsidiaryData(uint16(p+1), 46)
				}
				tex.printSubsidiaryData(uint16(p+2), 94)
				tex.printSubsidiaryData(uint16(p+3), 95)
			case 25:
				tex.printEsc(880)
				if tex.mem[p+1].int() == 1073741824 {
					tex.print(881)
				} else {
					tex.printScaled(tex.mem[p+1].int())
				}
				if (tex.mem[p+4].qqqq().b0 != 0) || (tex.mem[p+4].qqqq().b1 != 0) || (tex.mem[p+4].qqqq().b2 != 0) || (tex.mem[p+4].qqqq().b3 != 0) {
					tex.print(882)
					tex.printDelimiter(uint16(p + 4))
				}
				if (tex.mem[p+5].qqqq().b0 != 0) || (tex.mem[p+5].qqqq().b1 != 0) || (tex.mem[p+5].qqqq().b2 != 0) || (tex.mem[p+5].qqqq().b3 != 0) {
					tex.print(883)
					tex.printDelimiter(uint16(p + 5))
				}
				tex.printSubsidiaryData(uint16(p+2), 92)
				tex.printSubsidiaryData(uint16(p+3), 47)
			default:
				tex.print(317)
			}
		}
		p = int32(tex.mem[p].hh().rh)
	}
label10:
}

func (tex *Context) showBox(p uint16) {
	tex.depthThreshold = tex.eqtb[5288-1].int()
	tex.breadthMax = tex.eqtb[5287-1].int()
	if tex.breadthMax <= 0 {
		tex.breadthMax = 5
	}
	if int32(tex.poolPtr)+tex.depthThreshold >= poolSize {
		tex.depthThreshold = poolSize - int32(tex.poolPtr) - 1
	}
	tex.showNodeList(int32(p))
	tex.printLn()
}

func (tex *Context) deleteTokenRef(p uint16) {
	if tex.mem[p].hh().lh() == 0 {
		tex.flushList(p)
	} else {
		*tex.mem[p].pHh().pLh() = uint16(int32(tex.mem[p].hh().lh()) - 1)
	}
}

func (tex *Context) deleteGlueRef(p uint16) {
	if tex.mem[p].hh().rh == 0 {
		tex.freeNode(p, 4)
	} else {
		tex.mem[p].pHh().rh = uint16(int32(tex.mem[p].hh().rh) - 1)
	}
}

func (tex *Context) flushNodeList(p uint16) {
	var q uint16 // 0..65535
	for p != 0 {
		q = tex.mem[p].hh().rh
		if p >= tex.hiMemMin {
			tex.mem[p].pHh().rh = tex.avail
			tex.avail = p
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 13:
				tex.flushNodeList(tex.mem[int32(p)+5].hh().rh)
				tex.freeNode(p, 7)
				goto label30
			case 2:
				tex.freeNode(p, 4)
				goto label30
			case 3:
				tex.flushNodeList(tex.mem[int32(p)+4].hh().lh())
				tex.deleteGlueRef(tex.mem[int32(p)+4].hh().rh)
				tex.freeNode(p, 5)
				goto label30
			case 8:
				switch tex.mem[p].hh().b1() {
				case 0:
					tex.freeNode(p, 3)
				case 1, 3:
					tex.deleteTokenRef(tex.mem[int32(p)+1].hh().rh)
					tex.freeNode(p, 2)
					goto label30
				case 2, 4:
					tex.freeNode(p, 2)
				default:
					tex.confusion(1295)
				}
				goto label30
			case 10:
				if tex.mem[tex.mem[int32(p)+1].hh().lh()].hh().rh == 0 {
					tex.freeNode(tex.mem[int32(p)+1].hh().lh(), 4)
				} else {
					tex.mem[tex.mem[int32(p)+1].hh().lh()].pHh().rh = uint16(int32(tex.mem[tex.mem[int32(p)+1].hh().lh()].hh().rh) - 1)
				}
				if tex.mem[int32(p)+1].hh().rh != 0 {
					tex.flushNodeList(tex.mem[int32(p)+1].hh().rh)
				}
			case 11, 9, 12:
			case 6:
				tex.flushNodeList(tex.mem[int32(p)+1].hh().rh)
			case 4:
				tex.deleteTokenRef(uint16(tex.mem[int32(p)+1].int()))
			case 7:
				tex.flushNodeList(tex.mem[int32(p)+1].hh().lh())
				tex.flushNodeList(tex.mem[int32(p)+1].hh().rh)
			case 5:
				tex.flushNodeList(uint16(tex.mem[int32(p)+1].int()))
			case 14:
				tex.freeNode(p, 3)
				goto label30
			case 15:
				tex.flushNodeList(tex.mem[int32(p)+1].hh().lh())
				tex.flushNodeList(tex.mem[int32(p)+1].hh().rh)
				tex.flushNodeList(tex.mem[int32(p)+2].hh().lh())
				tex.flushNodeList(tex.mem[int32(p)+2].hh().rh)
				tex.freeNode(p, 3)
				goto label30
			case 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 26, 29, 28:
				if tex.mem[int32(p)+1].hh().rh >= 2 {
					tex.flushNodeList(tex.mem[int32(p)+1].hh().lh())
				}
				if tex.mem[int32(p)+2].hh().rh >= 2 {
					tex.flushNodeList(tex.mem[int32(p)+2].hh().lh())
				}
				if tex.mem[int32(p)+3].hh().rh >= 2 {
					tex.flushNodeList(tex.mem[int32(p)+3].hh().lh())
				}
				if tex.mem[p].hh().b0() == 24 {
					tex.freeNode(p, 5)
				} else if tex.mem[p].hh().b0() == 28 {
					tex.freeNode(p, 5)
				} else {
					tex.freeNode(p, 4)
				}
				goto label30
			case 30, 31:
				tex.freeNode(p, 4)
				goto label30
			case 25:
				tex.flushNodeList(tex.mem[int32(p)+2].hh().lh())
				tex.flushNodeList(tex.mem[int32(p)+3].hh().lh())
				tex.freeNode(p, 6)
				goto label30
			default:
				tex.confusion(353)
			}
			tex.freeNode(p, 2)
		label30:
		}
		p = q
	}
}

func (tex *Context) copyNodeList(p uint16) (ret uint16) {
	var h uint16   // 0..65535
	var q uint16   // 0..65535
	var r uint16   // 0..65535
	var words byte // 0..5
	h = tex.getAvail()
	q = h
	for p != 0 {
		words = 1
		if p >= tex.hiMemMin {
			r = tex.getAvail()
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 13:
				r = tex.getNode(7)
				tex.mem[int32(r)+6] = tex.mem[int32(p)+6]
				tex.mem[int32(r)+5] = tex.mem[int32(p)+5]
				tex.mem[int32(r)+5].pHh().rh = tex.copyNodeList(tex.mem[int32(p)+5].hh().rh)
				words = 5
			case 2:
				r = tex.getNode(4)
				words = 4
			case 3:
				r = tex.getNode(5)
				tex.mem[int32(r)+4] = tex.mem[int32(p)+4]
				tex.mem[tex.mem[int32(p)+4].hh().rh].pHh().rh = uint16(int32(tex.mem[tex.mem[int32(p)+4].hh().rh].hh().rh) + 1)
				*tex.mem[int32(r)+4].pHh().pLh() = tex.copyNodeList(tex.mem[int32(p)+4].hh().lh())
				words = 4
			case 8:
				switch tex.mem[p].hh().b1() {
				case 0:
					r = tex.getNode(3)
					words = 3
				case 1, 3:
					r = tex.getNode(2)
					*tex.mem[tex.mem[int32(p)+1].hh().rh].pHh().pLh() = uint16(int32(tex.mem[tex.mem[int32(p)+1].hh().rh].hh().lh()) + 1)
					words = 2
				case 2, 4:
					r = tex.getNode(2)
					words = 2
				default:
					tex.confusion(1294)
				}
			case 10:
				r = tex.getNode(2)
				tex.mem[tex.mem[int32(p)+1].hh().lh()].pHh().rh = uint16(int32(tex.mem[tex.mem[int32(p)+1].hh().lh()].hh().rh) + 1)
				*tex.mem[int32(r)+1].pHh().pLh() = tex.mem[int32(p)+1].hh().lh()
				tex.mem[int32(r)+1].pHh().rh = tex.copyNodeList(tex.mem[int32(p)+1].hh().rh)
			case 11, 9, 12:
				r = tex.getNode(2)
				words = 2
			case 6:
				r = tex.getNode(2)
				tex.mem[int32(r)+1] = tex.mem[int32(p)+1]
				tex.mem[int32(r)+1].pHh().rh = tex.copyNodeList(tex.mem[int32(p)+1].hh().rh)
			case 7:
				r = tex.getNode(2)
				*tex.mem[int32(r)+1].pHh().pLh() = tex.copyNodeList(tex.mem[int32(p)+1].hh().lh())
				tex.mem[int32(r)+1].pHh().rh = tex.copyNodeList(tex.mem[int32(p)+1].hh().rh)
			case 4:
				r = tex.getNode(2)
				*tex.mem[tex.mem[int32(p)+1].int()].pHh().pLh() = uint16(int32(tex.mem[tex.mem[int32(p)+1].int()].hh().lh()) + 1)
				words = 2
			case 5:
				r = tex.getNode(2)
				*tex.mem[int32(r)+1].pInt() = int32(tex.copyNodeList(uint16(tex.mem[int32(p)+1].int())))
			default:
				tex.confusion(354)
			}
		}
		for words > 0 {
			words = byte(int32(words) - 1)
			tex.mem[int32(r)+int32(words)] = tex.mem[int32(p)+int32(words)]
		}
		tex.mem[q].pHh().rh = r
		q = r
		p = tex.mem[p].hh().rh
	}
	tex.mem[q].pHh().rh = 0
	q = tex.mem[h].hh().rh
	tex.mem[h].pHh().rh = tex.avail
	tex.avail = h
	ret = q
	return ret
}

func (tex *Context) printMode(m int32) {
	if m > 0 {
		switch m / 101 {
		case 0:
			tex.print(355)
		case 1:
			tex.print(356)
		case 2:
			tex.print(357)
		}
	} else if m == 0 {
		tex.print(358)
	} else {
		switch -m / 101 {
		case 0:
			tex.print(359)
		case 1:
			tex.print(360)
		case 2:
			tex.print(343)
		}
	}
	tex.print(361)
}

func (tex *Context) pushNest() {
	if tex.nestPtr > tex.maxNestStack {
		tex.maxNestStack = tex.nestPtr
		if tex.nestPtr == nestSize {
			tex.overflow(362, nestSize)
		}
	}
	tex.nest[tex.nestPtr] = tex.curList
	tex.nestPtr = byte(int32(tex.nestPtr) + 1)
	tex.curList.headField = tex.getAvail()
	tex.curList.tailField = tex.curList.headField
	tex.curList.pgField = 0
	tex.curList.mlField = tex.line
}

func (tex *Context) popNest() {
	tex.mem[tex.curList.headField].pHh().rh = tex.avail
	tex.avail = tex.curList.headField
	tex.nestPtr = byte(int32(tex.nestPtr) - 1)
	tex.curList = tex.nest[tex.nestPtr]
}

func (tex *Context) showActivities() {
	var p byte       // 0..40
	var m int16      // -203..203
	var a memoryWord // record memoryWord
	var q, r uint16  // 0..65535
	var t int32      // integer
	tex.nest[tex.nestPtr] = tex.curList
	tex.printNl(338)
	tex.printLn()
	for _i := int64(tex.nestPtr); _i >= int64(0); _i-- {
		p = byte(_i)
		m = tex.nest[p].modeField
		a = tex.nest[p].auxField
		tex.printNl(363)
		tex.printMode(int32(m))
		tex.print(364)
		tex.printInt(iabs(tex.nest[p].mlField))
		if m == 102 {
			if tex.nest[p].pgField != 8585216 {
				tex.print(365)
				tex.printInt((tex.nest[p].pgField % 65536))
				tex.print(366)
				tex.printInt((tex.nest[p].pgField / 4194304))
				tex.printChar(44)
				tex.printInt(((tex.nest[p].pgField / 65536) % 64))
				tex.printChar(41)
			}
		}
		if tex.nest[p].mlField < 0 {
			tex.print(367)
		}
		if p == 0 {
			if 29998 != int32(tex.pageTail) {
				tex.printNl(980)
				if tex.outputActive {
					tex.print(981)
				}
				tex.showBox(tex.mem[29998].hh().rh)
				if tex.pageContents > 0 {
					tex.printNl(982)
					tex.printTotals()
					tex.printNl(983)
					tex.printScaled(tex.pageSoFar[0])
					r = tex.mem[30000].hh().rh
					for r != 30000 {
						tex.printLn()
						tex.printEsc(330)
						t = int32(tex.mem[r].hh().b1()) - 0
						tex.printInt(t)
						tex.print(984)
						if tex.eqtb[5318+t-1].int() == 1000 {
							t = tex.mem[int32(r)+3].int()
						} else {
							t = (tex.xOverN(tex.mem[int32(r)+3].int(), 1000) * tex.eqtb[5318+t-1].int())
						}
						tex.printScaled(t)
						if tex.mem[r].hh().b0() == 1 {
							q = 29998
							t = 0
							for {
								q = tex.mem[q].hh().rh
								if (tex.mem[q].hh().b0() == 3) && (tex.mem[q].hh().b1() == tex.mem[r].hh().b1()) {
									t = t + 1
								}
								if q == tex.mem[int32(r)+1].hh().lh() {
									break
								}
							}
							tex.print(985)
							tex.printInt(t)
							tex.print(986)
						}
						r = tex.mem[r].hh().rh
					}
				}
			}
			if tex.mem[29999].hh().rh != 0 {
				tex.printNl(368)
			}
		}
		tex.showBox(tex.mem[tex.nest[p].headField].hh().rh)
		switch iabs(int32(m)) / 101 {
		case 0:
			tex.printNl(369)
			if a.int() <= -65536000 {
				tex.print(370)
			} else {
				tex.printScaled(a.int())
			}
			if tex.nest[p].pgField != 0 {
				tex.print(371)
				tex.printInt(tex.nest[p].pgField)
				tex.print(372)
				if tex.nest[p].pgField != 1 {
					tex.printChar(115)
				}
			}
		case 1:
			tex.printNl(373)
			tex.printInt(int32(a.hh().lh()))
			if m > 0 {
				if a.hh().rh > 0 {
					tex.print(374)
					tex.printInt(int32(a.hh().rh))
				}
			}
		case 2:
			if a.int() != 0 {
				tex.print(375)
				tex.showBox(uint16(a.int()))
			}
		}
	}
}

func (tex *Context) printParam(n int32) {
	switch n {
	case 0:
		tex.printEsc(420)
	case 1:
		tex.printEsc(421)
	case 2:
		tex.printEsc(422)
	case 3:
		tex.printEsc(423)
	case 4:
		tex.printEsc(424)
	case 5:
		tex.printEsc(425)
	case 6:
		tex.printEsc(426)
	case 7:
		tex.printEsc(427)
	case 8:
		tex.printEsc(428)
	case 9:
		tex.printEsc(429)
	case 10:
		tex.printEsc(430)
	case 11:
		tex.printEsc(431)
	case 12:
		tex.printEsc(432)
	case 13:
		tex.printEsc(433)
	case 14:
		tex.printEsc(434)
	case 15:
		tex.printEsc(435)
	case 16:
		tex.printEsc(436)
	case 17:
		tex.printEsc(437)
	case 18:
		tex.printEsc(438)
	case 19:
		tex.printEsc(439)
	case 20:
		tex.printEsc(440)
	case 21:
		tex.printEsc(441)
	case 22:
		tex.printEsc(442)
	case 23:
		tex.printEsc(443)
	case 24:
		tex.printEsc(444)
	case 25:
		tex.printEsc(445)
	case 26:
		tex.printEsc(446)
	case 27:
		tex.printEsc(447)
	case 28:
		tex.printEsc(448)
	case 29:
		tex.printEsc(449)
	case 30:
		tex.printEsc(450)
	case 31:
		tex.printEsc(451)
	case 32:
		tex.printEsc(452)
	case 33:
		tex.printEsc(453)
	case 34:
		tex.printEsc(454)
	case 35:
		tex.printEsc(455)
	case 36:
		tex.printEsc(456)
	case 37:
		tex.printEsc(457)
	case 38:
		tex.printEsc(458)
	case 39:
		tex.printEsc(459)
	case 40:
		tex.printEsc(460)
	case 41:
		tex.printEsc(461)
	case 42:
		tex.printEsc(462)
	case 43:
		tex.printEsc(463)
	case 44:
		tex.printEsc(464)
	case 45:
		tex.printEsc(465)
	case 46:
		tex.printEsc(466)
	case 47:
		tex.printEsc(467)
	case 48:
		tex.printEsc(468)
	case 49:
		tex.printEsc(469)
	case 50:
		tex.printEsc(470)
	case 51:
		tex.printEsc(471)
	case 52:
		tex.printEsc(472)
	case 53:
		tex.printEsc(473)
	case 54:
		tex.printEsc(474)
	default:
		tex.print(475)
	}
}

func (tex *Context) fixDateAndTime() {
	tex.sysTime = (12 * 60)
	tex.sysDay = 4
	tex.sysMonth = 7
	tex.sysYear = 1776
	*tex.eqtb[5283-1].pInt() = pasSysTime()
	*tex.eqtb[5284-1].pInt() = pasSysDay()
	*tex.eqtb[5285-1].pInt() = pasSysMonth()
	*tex.eqtb[5286-1].pInt() = pasSysYear()
}

func (tex *Context) beginDiagnostic() {
	tex.oldSetting = tex.selector
	if (tex.eqtb[5292-1].int() <= 0) && (tex.selector == 19) {
		tex.selector = byte(int32(tex.selector) - 1)
		if tex.history == 0 {
			tex.history = 1
		}
	}
}

func (tex *Context) endDiagnostic(blankLine bool) {
	tex.printNl(338)
	if blankLine {
		tex.printLn()
	}
	tex.selector = tex.oldSetting
}

func (tex *Context) printLengthParam(n int32) {
	switch n {
	case 0:
		tex.printEsc(478)
	case 1:
		tex.printEsc(479)
	case 2:
		tex.printEsc(480)
	case 3:
		tex.printEsc(481)
	case 4:
		tex.printEsc(482)
	case 5:
		tex.printEsc(483)
	case 6:
		tex.printEsc(484)
	case 7:
		tex.printEsc(485)
	case 8:
		tex.printEsc(486)
	case 9:
		tex.printEsc(487)
	case 10:
		tex.printEsc(488)
	case 11:
		tex.printEsc(489)
	case 12:
		tex.printEsc(490)
	case 13:
		tex.printEsc(491)
	case 14:
		tex.printEsc(492)
	case 15:
		tex.printEsc(493)
	case 16:
		tex.printEsc(494)
	case 17:
		tex.printEsc(495)
	case 18:
		tex.printEsc(496)
	case 19:
		tex.printEsc(497)
	case 20:
		tex.printEsc(498)
	default:
		tex.print(499)
	}
}

func (tex *Context) printCmdChr(cmd byte, chrCode uint16) {
	switch cmd {
	case 1:
		tex.print(557)
		tex.print(int32(chrCode))
	case 2:
		tex.print(558)
		tex.print(int32(chrCode))
	case 3:
		tex.print(559)
		tex.print(int32(chrCode))
	case 6:
		tex.print(560)
		tex.print(int32(chrCode))
	case 7:
		tex.print(561)
		tex.print(int32(chrCode))
	case 8:
		tex.print(562)
		tex.print(int32(chrCode))
	case 9:
		tex.print(563)
	case 10:
		tex.print(564)
		tex.print(int32(chrCode))
	case 11:
		tex.print(565)
		tex.print(int32(chrCode))
	case 12:
		tex.print(566)
		tex.print(int32(chrCode))
	case 75, 76:
		if chrCode < 2900 {
			tex.printSkipParam(int32(chrCode) - 2882)
		} else if chrCode < 3156 {
			tex.printEsc(395)
			tex.printInt(int32(chrCode) - 2900)
		} else {
			tex.printEsc(396)
			tex.printInt(int32(chrCode) - 3156)
		}
	case 72:
		if chrCode >= 3422 {
			tex.printEsc(407)
			tex.printInt(int32(chrCode) - 3422)
		} else {
			switch chrCode {
			case 3413:
				tex.printEsc(398)
			case 3414:
				tex.printEsc(399)
			case 3415:
				tex.printEsc(400)
			case 3416:
				tex.printEsc(401)
			case 3417:
				tex.printEsc(402)
			case 3418:
				tex.printEsc(403)
			case 3419:
				tex.printEsc(404)
			case 3420:
				tex.printEsc(405)
			default:
				tex.printEsc(406)
			}
		}
	case 73:
		if chrCode < 5318 {
			tex.printParam(int32(chrCode) - 5263)
		} else {
			tex.printEsc(476)
			tex.printInt(int32(chrCode) - 5318)
		}
	case 74:
		if chrCode < 5851 {
			tex.printLengthParam(int32(chrCode) - 5830)
		} else {
			tex.printEsc(500)
			tex.printInt(int32(chrCode) - 5851)
		}
	case 45:
		tex.printEsc(508)
	case 90:
		tex.printEsc(509)
	case 40:
		tex.printEsc(510)
	case 41:
		tex.printEsc(511)
	case 77:
		tex.printEsc(519)
	case 61:
		tex.printEsc(512)
	case 42:
		tex.printEsc(531)
	case 16:
		tex.printEsc(513)
	case 107:
		tex.printEsc(504)
	case 88:
		tex.printEsc(518)
	case 15:
		tex.printEsc(514)
	case 92:
		tex.printEsc(515)
	case 67:
		tex.printEsc(505)
	case 62:
		tex.printEsc(516)
	case 64:
		tex.printEsc(32)
	case 102:
		tex.printEsc(517)
	case 32:
		tex.printEsc(520)
	case 36:
		tex.printEsc(521)
	case 39:
		tex.printEsc(522)
	case 37:
		tex.printEsc(330)
	case 44:
		tex.printEsc(47)
	case 18:
		tex.printEsc(351)
	case 46:
		tex.printEsc(523)
	case 17:
		tex.printEsc(524)
	case 54:
		tex.printEsc(525)
	case 91:
		tex.printEsc(526)
	case 34:
		tex.printEsc(527)
	case 65:
		tex.printEsc(528)
	case 103:
		tex.printEsc(529)
	case 55:
		tex.printEsc(335)
	case 63:
		tex.printEsc(530)
	case 66:
		tex.printEsc(533)
	case 96:
		tex.printEsc(534)
	case 0:
		tex.printEsc(535)
	case 98:
		tex.printEsc(536)
	case 80:
		tex.printEsc(532)
	case 84:
		tex.printEsc(408)
	case 109:
		tex.printEsc(537)
	case 71:
		tex.printEsc(407)
	case 38:
		tex.printEsc(352)
	case 33:
		tex.printEsc(538)
	case 56:
		tex.printEsc(539)
	case 35:
		tex.printEsc(540)
	case 13:
		tex.printEsc(597)
	case 104:
		if chrCode == 0 {
			tex.printEsc(629)
		} else {
			tex.printEsc(630)
		}
	case 110:
		switch chrCode {
		case 1:
			tex.printEsc(632)
		case 2:
			tex.printEsc(633)
		case 3:
			tex.printEsc(634)
		case 4:
			tex.printEsc(635)
		default:
			tex.printEsc(631)
		}
	case 89:
		if chrCode == 0 {
			tex.printEsc(476)
		} else if chrCode == 1 {
			tex.printEsc(500)
		} else if chrCode == 2 {
			tex.printEsc(395)
		} else {
			tex.printEsc(396)
		}
	case 79:
		if chrCode == 1 {
			tex.printEsc(669)
		} else {
			tex.printEsc(668)
		}
	case 82:
		if chrCode == 0 {
			tex.printEsc(670)
		} else {
			tex.printEsc(671)
		}
	case 83:
		if chrCode == 1 {
			tex.printEsc(672)
		} else if chrCode == 3 {
			tex.printEsc(673)
		} else {
			tex.printEsc(674)
		}
	case 70:
		switch chrCode {
		case 0:
			tex.printEsc(675)
		case 1:
			tex.printEsc(676)
		case 2:
			tex.printEsc(677)
		case 3:
			tex.printEsc(678)
		default:
			tex.printEsc(679)
		}
	case 108:
		switch chrCode {
		case 0:
			tex.printEsc(735)
		case 1:
			tex.printEsc(736)
		case 2:
			tex.printEsc(737)
		case 3:
			tex.printEsc(738)
		case 4:
			tex.printEsc(739)
		default:
			tex.printEsc(740)
		}
	case 105:
		switch chrCode {
		case 1:
			tex.printEsc(758)
		case 2:
			tex.printEsc(759)
		case 3:
			tex.printEsc(760)
		case 4:
			tex.printEsc(761)
		case 5:
			tex.printEsc(762)
		case 6:
			tex.printEsc(763)
		case 7:
			tex.printEsc(764)
		case 8:
			tex.printEsc(765)
		case 9:
			tex.printEsc(766)
		case 10:
			tex.printEsc(767)
		case 11:
			tex.printEsc(768)
		case 12:
			tex.printEsc(769)
		case 13:
			tex.printEsc(770)
		case 14:
			tex.printEsc(771)
		case 15:
			tex.printEsc(772)
		case 16:
			tex.printEsc(773)
		default:
			tex.printEsc(757)
		}
	case 106:
		if chrCode == 2 {
			tex.printEsc(774)
		} else if chrCode == 4 {
			tex.printEsc(775)
		} else {
			tex.printEsc(776)
		}
	case 4:
		if chrCode == 256 {
			tex.printEsc(898)
		} else {
			tex.print(902)
			tex.print(int32(chrCode))
		}
	case 5:
		if chrCode == 257 {
			tex.printEsc(899)
		} else {
			tex.printEsc(900)
		}
	case 81:
		switch chrCode {
		case 0:
			tex.printEsc(970)
		case 1:
			tex.printEsc(971)
		case 2:
			tex.printEsc(972)
		case 3:
			tex.printEsc(973)
		case 4:
			tex.printEsc(974)
		case 5:
			tex.printEsc(975)
		case 6:
			tex.printEsc(976)
		default:
			tex.printEsc(977)
		}
	case 14:
		if chrCode == 1 {
			tex.printEsc(1026)
		} else {
			tex.printEsc(1025)
		}
	case 26:
		switch chrCode {
		case 4:
			tex.printEsc(1027)
		case 0:
			tex.printEsc(1028)
		case 1:
			tex.printEsc(1029)
		case 2:
			tex.printEsc(1030)
		default:
			tex.printEsc(1031)
		}
	case 27:
		switch chrCode {
		case 4:
			tex.printEsc(1032)
		case 0:
			tex.printEsc(1033)
		case 1:
			tex.printEsc(1034)
		case 2:
			tex.printEsc(1035)
		default:
			tex.printEsc(1036)
		}
	case 28:
		tex.printEsc(336)
	case 29:
		tex.printEsc(340)
	case 30:
		tex.printEsc(342)
	case 21:
		if chrCode == 1 {
			tex.printEsc(1054)
		} else {
			tex.printEsc(1055)
		}
	case 22:
		if chrCode == 1 {
			tex.printEsc(1056)
		} else {
			tex.printEsc(1057)
		}
	case 20:
		switch chrCode {
		case 0:
			tex.printEsc(409)
		case 1:
			tex.printEsc(1058)
		case 2:
			tex.printEsc(1059)
		case 3:
			tex.printEsc(965)
		case 4:
			tex.printEsc(1060)
		case 5:
			tex.printEsc(967)
		default:
			tex.printEsc(1061)
		}
	case 31:
		if chrCode == 100 {
			tex.printEsc(1063)
		} else if chrCode == 101 {
			tex.printEsc(1064)
		} else if chrCode == 102 {
			tex.printEsc(1065)
		} else {
			tex.printEsc(1062)
		}
	case 43:
		if chrCode == 0 {
			tex.printEsc(1081)
		} else {
			tex.printEsc(1080)
		}
	case 25:
		if chrCode == 10 {
			tex.printEsc(1092)
		} else if chrCode == 11 {
			tex.printEsc(1091)
		} else {
			tex.printEsc(1090)
		}
	case 23:
		if chrCode == 1 {
			tex.printEsc(1094)
		} else {
			tex.printEsc(1093)
		}
	case 24:
		if chrCode == 1 {
			tex.printEsc(1096)
		} else {
			tex.printEsc(1095)
		}
	case 47:
		if chrCode == 1 {
			tex.printEsc(45)
		} else {
			tex.printEsc(349)
		}
	case 48:
		if chrCode == 1 {
			tex.printEsc(1128)
		} else {
			tex.printEsc(1127)
		}
	case 50:
		switch chrCode {
		case 16:
			tex.printEsc(866)
		case 17:
			tex.printEsc(867)
		case 18:
			tex.printEsc(868)
		case 19:
			tex.printEsc(869)
		case 20:
			tex.printEsc(870)
		case 21:
			tex.printEsc(871)
		case 22:
			tex.printEsc(872)
		case 23:
			tex.printEsc(873)
		case 26:
			tex.printEsc(875)
		default:
			tex.printEsc(874)
		}
	case 51:
		if chrCode == 1 {
			tex.printEsc(878)
		} else if chrCode == 2 {
			tex.printEsc(879)
		} else {
			tex.printEsc(1129)
		}
	case 53:
		tex.printStyle(int32(chrCode))
	case 52:
		switch chrCode {
		case 1:
			tex.printEsc(1148)
		case 2:
			tex.printEsc(1149)
		case 3:
			tex.printEsc(1150)
		case 4:
			tex.printEsc(1151)
		case 5:
			tex.printEsc(1152)
		default:
			tex.printEsc(1147)
		}
	case 49:
		if chrCode == 30 {
			tex.printEsc(876)
		} else {
			tex.printEsc(877)
		}
	case 93:
		if chrCode == 1 {
			tex.printEsc(1171)
		} else if chrCode == 2 {
			tex.printEsc(1172)
		} else {
			tex.printEsc(1173)
		}
	case 97:
		if chrCode == 0 {
			tex.printEsc(1174)
		} else if chrCode == 1 {
			tex.printEsc(1175)
		} else if chrCode == 2 {
			tex.printEsc(1176)
		} else {
			tex.printEsc(1177)
		}
	case 94:
		if chrCode != 0 {
			tex.printEsc(1192)
		} else {
			tex.printEsc(1191)
		}
	case 95:
		switch chrCode {
		case 0:
			tex.printEsc(1193)
		case 1:
			tex.printEsc(1194)
		case 2:
			tex.printEsc(1195)
		case 3:
			tex.printEsc(1196)
		case 4:
			tex.printEsc(1197)
		case 5:
			tex.printEsc(1198)
		default:
			tex.printEsc(1199)
		}
	case 68:
		tex.printEsc(513)
		tex.printHex(int32(chrCode))
	case 69:
		tex.printEsc(524)
		tex.printHex(int32(chrCode))
	case 85:
		if chrCode == 3983 {
			tex.printEsc(415)
		} else if chrCode == 5007 {
			tex.printEsc(419)
		} else if chrCode == 4239 {
			tex.printEsc(416)
		} else if chrCode == 4495 {
			tex.printEsc(417)
		} else if chrCode == 4751 {
			tex.printEsc(418)
		} else {
			tex.printEsc(477)
		}
	case 86:
		tex.printSize(int32(chrCode) - 3935)
	case 99:
		if chrCode == 1 {
			tex.printEsc(953)
		} else {
			tex.printEsc(941)
		}
	case 78:
		if chrCode == 0 {
			tex.printEsc(1217)
		} else {
			tex.printEsc(1218)
		}
	case 87:
		tex.print(1226)
		tex.slowPrint(int32(tex.fontName[chrCode]))
		if tex.fontSize[chrCode] != tex.fontDsize[chrCode] {
			tex.print(741)
			tex.printScaled(tex.fontSize[chrCode])
			tex.print(397)
		}
	case 100:
		switch chrCode {
		case 0:
			tex.printEsc(274)
		case 1:
			tex.printEsc(275)
		case 2:
			tex.printEsc(276)
		default:
			tex.printEsc(1227)
		}
	case 60:
		if chrCode == 0 {
			tex.printEsc(1229)
		} else {
			tex.printEsc(1228)
		}
	case 58:
		if chrCode == 0 {
			tex.printEsc(1230)
		} else {
			tex.printEsc(1231)
		}
	case 57:
		if chrCode == 4239 {
			tex.printEsc(1237)
		} else {
			tex.printEsc(1238)
		}
	case 19:
		switch chrCode {
		case 1:
			tex.printEsc(1240)
		case 2:
			tex.printEsc(1241)
		case 3:
			tex.printEsc(1242)
		default:
			tex.printEsc(1239)
		}
	case 101:
		tex.print(1249)
	case 111:
		tex.print(1250)
	case 112:
		tex.printEsc(1251)
	case 113:
		tex.printEsc(1252)
	case 114:
		tex.printEsc(1171)
		tex.printEsc(1252)
	case 115:
		tex.printEsc(1253)
	case 59:
		switch chrCode {
		case 0:
			tex.printEsc(1285)
		case 1:
			tex.printEsc(594)
		case 2:
			tex.printEsc(1286)
		case 3:
			tex.printEsc(1287)
		case 4:
			tex.printEsc(1288)
		case 5:
			tex.printEsc(1289)
		default:
			tex.print(1290)
		}
	default:
		tex.print(567)
	}
}

func (tex *Context) idLookup(j, l int32) (ret uint16) {
	var h int32  // integer
	var d int32  // integer
	var p uint16 // 0..65535
	var k uint16 // 0..65535
	h = int32(tex.buffer[j])
	for _i := int64(j + 1); _i <= int64(j+l-1); _i++ {
		k = uint16(_i)
		h = h + h + int32(tex.buffer[k])
		for h >= 1777 {
			h = h - 1777
		}
	}
	p = uint16(h + 514)
	for true {
		if tex.hash[p-514].rh > 0 {
			if (int32(tex.strStart[int32(tex.hash[p-514].rh)+1]) - int32(tex.strStart[tex.hash[p-514].rh])) == l {
				if tex.strEqBuf(tex.hash[p-514].rh, j) {
					goto label40
				}
			}
		}
		if tex.hash[p-514].lh() == 0 {
			if tex.noNewControlSequence {
				p = 2881
			} else {
				if tex.hash[p-514].rh > 0 {
					for {
						if tex.hashUsed == 514 {
							tex.overflow(503, 2100)
						}
						tex.hashUsed = uint16(int32(tex.hashUsed) - 1)
						if tex.hash[tex.hashUsed-514].rh == 0 {
							break
						}
					}
					*tex.hash[p-514].pLh() = tex.hashUsed
					p = tex.hashUsed
				}
				if int32(tex.poolPtr)+l > poolSize {
					tex.overflow(257, poolSize-int32(tex.initPoolPtr))
				}
				d = (int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr]))
				for tex.poolPtr > tex.strStart[tex.strPtr] {
					tex.poolPtr = uint16(int32(tex.poolPtr) - 1)
					tex.strPool[int32(tex.poolPtr)+l] = tex.strPool[tex.poolPtr]
				}
				for _i := int64(j); _i <= int64(j+l-1); _i++ {
					k = uint16(_i)
					tex.strPool[tex.poolPtr] = tex.buffer[k]
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				}
				tex.hash[p-514].rh = tex.makeString()
				tex.poolPtr = uint16(int32(tex.poolPtr) + d)
			}
			goto label40
		}
		p = tex.hash[p-514].lh()
	}
label40:
	ret = p
	return ret
}

func (tex *Context) primitive(s uint16, c byte, o uint16) {
	var k uint16 // 0..32000
	var j byte   // 0..63
	var l byte   // 0..63
	if s < 256 {
		tex.curVal = int32(s) + 257
	} else {
		k = tex.strStart[s]
		l = byte(int32(tex.strStart[int32(s)+1]) - int32(k))
		for _i := int64(0); _i <= int64(int32(l)-1); _i++ {
			j = byte(_i)
			tex.buffer[j] = tex.strPool[int32(k)+int32(j)]
		}
		tex.curVal = int32(tex.idLookup(0, int32(l)))
		tex.strPtr = uint16(int32(tex.strPtr) - 1)
		tex.poolPtr = tex.strStart[tex.strPtr]
		tex.hash[tex.curVal-514].rh = s
	}
	*tex.eqtb[tex.curVal-1].pHh().pB1() = 1
	*tex.eqtb[tex.curVal-1].pHh().pB0() = c
	tex.eqtb[tex.curVal-1].pHh().rh = o
}

func (tex *Context) newSaveLevel(c byte) {
	if tex.savePtr > tex.maxSaveStack {
		tex.maxSaveStack = tex.savePtr
		if int32(tex.maxSaveStack) > saveSize-6 {
			tex.overflow(541, saveSize)
		}
	}
	*tex.saveStack[tex.savePtr].pHh().pB0() = 3
	*tex.saveStack[tex.savePtr].pHh().pB1() = tex.curGroup
	tex.saveStack[tex.savePtr].pHh().rh = tex.curBoundary
	if tex.curLevel == 255 {
		tex.overflow(542, 255)
	}
	tex.curBoundary = tex.savePtr
	tex.curLevel = byte(int32(tex.curLevel) + 1)
	tex.savePtr = uint16(int32(tex.savePtr) + 1)
	tex.curGroup = c
}

func (tex *Context) eqDestroy(w memoryWord) {
	var q uint16 // 0..65535
	switch w.hh().b0() {
	case 111, 112, 113, 114:
		tex.deleteTokenRef(w.hh().rh)
	case 117:
		tex.deleteGlueRef(w.hh().rh)
	case 118:
		q = w.hh().rh
		if q != 0 {
			tex.freeNode(q, uint16(int32(tex.mem[q].hh().lh())+int32(tex.mem[q].hh().lh())+1))
		}
	case 119:
		tex.flushNodeList(w.hh().rh)
	default:
	}
}

func (tex *Context) eqSave(p uint16, l byte) {
	if tex.savePtr > tex.maxSaveStack {
		tex.maxSaveStack = tex.savePtr
		if int32(tex.maxSaveStack) > saveSize-6 {
			tex.overflow(541, saveSize)
		}
	}
	if l == 0 {
		*tex.saveStack[tex.savePtr].pHh().pB0() = 1
	} else {
		tex.saveStack[tex.savePtr] = tex.eqtb[p-1]
		tex.savePtr = uint16(int32(tex.savePtr) + 1)
		*tex.saveStack[tex.savePtr].pHh().pB0() = 0
	}
	*tex.saveStack[tex.savePtr].pHh().pB1() = l
	tex.saveStack[tex.savePtr].pHh().rh = p
	tex.savePtr = uint16(int32(tex.savePtr) + 1)
}

func (tex *Context) eqDefine(p uint16, t byte, e uint16) {
	if tex.eqtb[p-1].hh().b1() == tex.curLevel {
		tex.eqDestroy(tex.eqtb[p-1])
	} else if tex.curLevel > 1 {
		tex.eqSave(p, tex.eqtb[p-1].hh().b1())
	}
	*tex.eqtb[p-1].pHh().pB1() = tex.curLevel
	*tex.eqtb[p-1].pHh().pB0() = t
	tex.eqtb[p-1].pHh().rh = e
}

func (tex *Context) eqWordDefine(p uint16, w int32) {
	if tex.xeqLevel[p-5263] != tex.curLevel {
		tex.eqSave(p, tex.xeqLevel[p-5263])
		tex.xeqLevel[p-5263] = tex.curLevel
	}
	*tex.eqtb[p-1].pInt() = w
}

func (tex *Context) geqDefine(p uint16, t byte, e uint16) {
	tex.eqDestroy(tex.eqtb[p-1])
	*tex.eqtb[p-1].pHh().pB1() = 1
	*tex.eqtb[p-1].pHh().pB0() = t
	tex.eqtb[p-1].pHh().rh = e
}

func (tex *Context) geqWordDefine(p uint16, w int32) {
	*tex.eqtb[p-1].pInt() = w
	tex.xeqLevel[p-5263] = 1
}

func (tex *Context) saveForAfter(t uint16) {
	if tex.curLevel > 1 {
		if tex.savePtr > tex.maxSaveStack {
			tex.maxSaveStack = tex.savePtr
			if int32(tex.maxSaveStack) > saveSize-6 {
				tex.overflow(541, saveSize)
			}
		}
		*tex.saveStack[tex.savePtr].pHh().pB0() = 2
		*tex.saveStack[tex.savePtr].pHh().pB1() = 0
		tex.saveStack[tex.savePtr].pHh().rh = t
		tex.savePtr = uint16(int32(tex.savePtr) + 1)
	}
}

func (tex *Context) unsave() {
	var p uint16 // 0..65535
	var l byte   // 0..255
	var t uint16 // 0..65535
	if tex.curLevel > 1 {
		tex.curLevel = byte(int32(tex.curLevel) - 1)
		for true {
			tex.savePtr = uint16(int32(tex.savePtr) - 1)
			if tex.saveStack[tex.savePtr].hh().b0() == 3 {
				goto label30
			}
			p = tex.saveStack[tex.savePtr].hh().rh
			if tex.saveStack[tex.savePtr].hh().b0() == 2 {
				t = tex.curTok
				tex.curTok = p
				tex.backInput()
				tex.curTok = t
			} else {
				if tex.saveStack[tex.savePtr].hh().b0() == 0 {
					l = tex.saveStack[tex.savePtr].hh().b1()
					tex.savePtr = uint16(int32(tex.savePtr) - 1)
				} else {
					tex.saveStack[tex.savePtr] = tex.eqtb[2881-1]
				}
				if p < 5263 {
					if tex.eqtb[p-1].hh().b1() == 1 {
						tex.eqDestroy(tex.saveStack[tex.savePtr])
					} else {
						tex.eqDestroy(tex.eqtb[p-1])
						tex.eqtb[p-1] = tex.saveStack[tex.savePtr]
					}
				} else if tex.xeqLevel[p-5263] != 1 {
					tex.eqtb[p-1] = tex.saveStack[tex.savePtr]
					tex.xeqLevel[p-5263] = l
				} else {
				}
			}
		}
	label30:
		tex.curGroup = tex.saveStack[tex.savePtr].hh().b1()
		tex.curBoundary = tex.saveStack[tex.savePtr].hh().rh
	} else {
		tex.confusion(543)
	}
}

func (tex *Context) prepareMag() {
	if (tex.magSet > 0) && (tex.eqtb[5280-1].int() != tex.magSet) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(547)
		tex.printInt(tex.eqtb[5280-1].int())
		tex.print(548)
		tex.printNl(549)
		tex.helpPtr = 2
		tex.helpLine[1] = 550
		tex.helpLine[0] = 551
		tex.intError(tex.magSet)
		tex.geqWordDefine(5280, tex.magSet)
	}
	if (tex.eqtb[5280-1].int() <= 0) || (tex.eqtb[5280-1].int() > 32768) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(552)
		tex.helpPtr = 1
		tex.helpLine[0] = 553
		tex.intError(tex.eqtb[5280-1].int())
		tex.geqWordDefine(5280, 1000)
	}
	tex.magSet = tex.eqtb[5280-1].int()
}

func (tex *Context) tokenShow(p uint16) {
	if p != 0 {
		tex.showTokenList(int32(tex.mem[p].hh().rh), 0, 10000000)
	}
}

func (tex *Context) printMeaning() {
	tex.printCmdChr(tex.curCmd, tex.curChr)
	if tex.curCmd >= 111 {
		tex.printChar(58)
		tex.printLn()
		tex.tokenShow(tex.curChr)
	} else if tex.curCmd == 110 {
		tex.printChar(58)
		tex.printLn()
		tex.tokenShow(tex.curMark[tex.curChr])
	}
}

func (tex *Context) showCurCmdChr() {
	tex.beginDiagnostic()
	tex.printNl(123)
	if tex.curList.modeField != tex.shownMode {
		tex.printMode(int32(tex.curList.modeField))
		tex.print(568)
		tex.shownMode = tex.curList.modeField
	}
	tex.printCmdChr(tex.curCmd, tex.curChr)
	tex.printChar(125)
	tex.endDiagnostic(false)
}

func (tex *Context) showContext() {
	var oldSetting byte // 0..21
	var nn int32        // integer
	var bottomLine bool // boolean
	var i uint16        // 0..500
	var j uint16        // 0..500
	var l byte          // 0..42
	var m int32         // integer
	var n byte          // 0..72
	var p int32         // integer
	var q int32         // integer
	tex.basePtr = tex.inputPtr
	tex.inputStack[tex.basePtr] = tex.curInput
	nn = -1
	bottomLine = false
	for true {
		tex.curInput = tex.inputStack[tex.basePtr]
		if tex.curInput.stateField != 0 {
			if (tex.curInput.nameField > 17) || (tex.basePtr == 0) {
				bottomLine = true
			}
		}
		if (tex.basePtr == tex.inputPtr) || bottomLine || (nn < tex.eqtb[5317-1].int()) {
			if (tex.basePtr == tex.inputPtr) || (tex.curInput.stateField != 0) || (tex.curInput.indexField != 3) || (tex.curInput.locField != 0) {
				tex.tally = 0
				oldSetting = tex.selector
				if tex.curInput.stateField != 0 {
					if tex.curInput.nameField <= 17 {
						if tex.curInput.nameField == 0 {
							if tex.basePtr == 0 {
								tex.printNl(574)
							} else {
								tex.printNl(575)
							}
						} else {
							tex.printNl(576)
							if tex.curInput.nameField == 17 {
								tex.printChar(42)
							} else {
								tex.printInt(int32(tex.curInput.nameField) - 1)
							}
							tex.printChar(62)
						}
					} else {
						tex.printNl(577)
						tex.printInt(tex.line)
					}
					tex.printChar(32)
					l = byte(tex.tally)
					tex.tally = 0
					tex.selector = 20
					tex.trickCount = 1000000
					if int32(tex.buffer[tex.curInput.limitField]) == tex.eqtb[5311-1].int() {
						j = tex.curInput.limitField
					} else {
						j = uint16(int32(tex.curInput.limitField) + 1)
					}
					if j > 0 {
						for _i := int64(tex.curInput.startField); _i <= int64(int32(j)-1); _i++ {
							i = uint16(_i)
							if i == tex.curInput.locField {
								tex.firstCount = tex.tally
								tex.trickCount = tex.tally + 1 + errorLine - halfErrorLine
								if tex.trickCount < errorLine {
									tex.trickCount = errorLine
								}
							}
							tex.print(int32(tex.buffer[i]))
						}
					}
				} else {
					switch tex.curInput.indexField {
					case 0:
						tex.printNl(578)
					case 1, 2:
						tex.printNl(579)
					case 3:
						if tex.curInput.locField == 0 {
							tex.printNl(580)
						} else {
							tex.printNl(581)
						}
					case 4:
						tex.printNl(582)
					case 5:
						tex.printLn()
						tex.printCs(int32(tex.curInput.nameField))
					case 6:
						tex.printNl(583)
					case 7:
						tex.printNl(584)
					case 8:
						tex.printNl(585)
					case 9:
						tex.printNl(586)
					case 10:
						tex.printNl(587)
					case 11:
						tex.printNl(588)
					case 12:
						tex.printNl(589)
					case 13:
						tex.printNl(590)
					case 14:
						tex.printNl(591)
					case 15:
						tex.printNl(592)
					default:
						tex.printNl(63)
					}
					l = byte(tex.tally)
					tex.tally = 0
					tex.selector = 20
					tex.trickCount = 1000000
					if tex.curInput.indexField < 5 {
						tex.showTokenList(int32(tex.curInput.startField), int32(tex.curInput.locField), 100000)
					} else {
						tex.showTokenList(int32(tex.mem[tex.curInput.startField].hh().rh), int32(tex.curInput.locField), 100000)
					}
				}
				tex.selector = oldSetting
				if tex.trickCount == 1000000 {
					tex.firstCount = tex.tally
					tex.trickCount = tex.tally + 1 + errorLine - halfErrorLine
					if tex.trickCount < errorLine {
						tex.trickCount = errorLine
					}
				}
				if tex.tally < tex.trickCount {
					m = tex.tally - tex.firstCount
				} else {
					m = tex.trickCount - tex.firstCount
				}
				if int32(l)+tex.firstCount <= halfErrorLine {
					p = 0
					n = byte(int32(l) + tex.firstCount)
				} else {
					tex.print(277)
					p = int32(l) + tex.firstCount - halfErrorLine + 3
					n = halfErrorLine
				}
				for _i := int64(p); _i <= int64(tex.firstCount-1); _i++ {
					q = int32(_i)
					tex.printChar(tex.trickBuf[(q % errorLine)])
				}
				tex.printLn()
				for _i := int64(1); _i <= int64(n); _i++ {
					q = int32(_i)
					tex.printChar(32)
				}
				if m+int32(n) <= errorLine {
					p = tex.firstCount + m
				} else {
					p = tex.firstCount + (errorLine - int32(n) - 3)
				}
				for _i := int64(tex.firstCount); _i <= int64(p-1); _i++ {
					q = int32(_i)
					tex.printChar(tex.trickBuf[(q % errorLine)])
				}
				if m+int32(n) > errorLine {
					tex.print(277)
				}
				nn = nn + 1
			}
		} else if nn == tex.eqtb[5317-1].int() {
			tex.printNl(277)
			nn = nn + 1
		}
		if bottomLine {
			goto label30
		}
		tex.basePtr = byte(int32(tex.basePtr) - 1)
	}
label30:
	tex.curInput = tex.inputStack[tex.inputPtr]
}

func (tex *Context) beginTokenList(p uint16, t byte) {
	if tex.inputPtr > tex.maxInStack {
		tex.maxInStack = tex.inputPtr
		if tex.inputPtr == stackSize {
			tex.overflow(593, stackSize)
		}
	}
	tex.inputStack[tex.inputPtr] = tex.curInput
	tex.inputPtr = byte(int32(tex.inputPtr) + 1)
	tex.curInput.stateField = 0
	tex.curInput.startField = p
	tex.curInput.indexField = t
	if t >= 5 {
		*tex.mem[p].pHh().pLh() = uint16(int32(tex.mem[p].hh().lh()) + 1)
		if t == 5 {
			tex.curInput.limitField = uint16(tex.paramPtr)
		} else {
			tex.curInput.locField = tex.mem[p].hh().rh
			if tex.eqtb[5293-1].int() > 1 {
				tex.beginDiagnostic()
				tex.printNl(338)
				switch t {
				case 14:
					tex.printEsc(351)
				case 15:
					tex.printEsc(594)
				default:
					tex.printCmdChr(72, uint16(int32(t)+3407))
				}
				tex.print(556)
				tex.tokenShow(p)
				tex.endDiagnostic(false)
			}
		}
	} else {
		tex.curInput.locField = p
	}
}

func (tex *Context) endTokenList() {
	if tex.curInput.indexField >= 3 {
		if tex.curInput.indexField <= 4 {
			tex.flushList(tex.curInput.startField)
		} else {
			tex.deleteTokenRef(tex.curInput.startField)
			if tex.curInput.indexField == 5 {
				for uint16(tex.paramPtr) > tex.curInput.limitField {
					tex.paramPtr = byte(int32(tex.paramPtr) - 1)
					tex.flushList(tex.paramStack[tex.paramPtr])
				}
			}
		}
	} else if tex.curInput.indexField == 1 {
		if tex.alignState > 500000 {
			tex.alignState = 0
		} else {
			tex.fatalError(595)
		}
	}
	tex.inputPtr = byte(int32(tex.inputPtr) - 1)
	tex.curInput = tex.inputStack[tex.inputPtr]
	if tex.interrupt != 0 {
		tex.pauseForInstructions()
	}
}

func (tex *Context) backInput() {
	var p uint16 // 0..65535
	for (tex.curInput.stateField == 0) && (tex.curInput.locField == 0) && (tex.curInput.indexField != 2) {
		tex.endTokenList()
	}
	p = tex.getAvail()
	*tex.mem[p].pHh().pLh() = tex.curTok
	if tex.curTok < 768 {
		if tex.curTok < 512 {
			tex.alignState = tex.alignState - 1
		} else {
			tex.alignState = tex.alignState + 1
		}
	}
	if tex.inputPtr > tex.maxInStack {
		tex.maxInStack = tex.inputPtr
		if tex.inputPtr == stackSize {
			tex.overflow(593, stackSize)
		}
	}
	tex.inputStack[tex.inputPtr] = tex.curInput
	tex.inputPtr = byte(int32(tex.inputPtr) + 1)
	tex.curInput.stateField = 0
	tex.curInput.startField = p
	tex.curInput.indexField = 3
	tex.curInput.locField = p
}

func (tex *Context) backError() {
	tex.OKToInterrupt = false
	tex.backInput()
	tex.OKToInterrupt = true
	tex.error1()
}

func (tex *Context) insError() {
	tex.OKToInterrupt = false
	tex.backInput()
	tex.curInput.indexField = 4
	tex.OKToInterrupt = true
	tex.error1()
}

func (tex *Context) beginFileReading() {
	if tex.inOpen == maxInOpen {
		tex.overflow(596, maxInOpen)
	}
	if tex.first == bufSize {
		tex.overflow(256, bufSize)
	}
	tex.inOpen = byte(int32(tex.inOpen) + 1)
	if tex.inputPtr > tex.maxInStack {
		tex.maxInStack = tex.inputPtr
		if tex.inputPtr == stackSize {
			tex.overflow(593, stackSize)
		}
	}
	tex.inputStack[tex.inputPtr] = tex.curInput
	tex.inputPtr = byte(int32(tex.inputPtr) + 1)
	tex.curInput.indexField = tex.inOpen
	tex.lineStack[tex.curInput.indexField-1] = tex.line
	tex.curInput.startField = tex.first
	tex.curInput.stateField = 1
	tex.curInput.nameField = 0
}

func (tex *Context) endFileReading() {
	tex.first = tex.curInput.startField
	tex.line = tex.lineStack[tex.curInput.indexField-1]
	if tex.curInput.nameField > 17 {
		tex.aClose(&tex.inputFile[tex.curInput.indexField-1])
	}
	tex.inputPtr = byte(int32(tex.inputPtr) - 1)
	tex.curInput = tex.inputStack[tex.inputPtr]
	tex.inOpen = byte(int32(tex.inOpen) - 1)
}

func (tex *Context) clearForErrorPrompt() {
	for (tex.curInput.stateField != 0) && (tex.curInput.nameField == 0) && (tex.inputPtr > 0) && (tex.curInput.locField > tex.curInput.limitField) {
		tex.endFileReading()
	}
	tex.printLn()
	breakIn(&tex.termIn, true)
}

func (tex *Context) checkOuterValidity() {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	if tex.scannerStatus != 0 {
		tex.deletionsAllowed = false
		if tex.curCs != 0 {
			if (tex.curInput.stateField == 0) || (tex.curInput.nameField < 1) || (tex.curInput.nameField > 17) {
				p = tex.getAvail()
				*tex.mem[p].pHh().pLh() = uint16(4095 + int32(tex.curCs))
				tex.beginTokenList(p, 3)
			}
			tex.curCmd = 10
			tex.curChr = 32
		}
		if tex.scannerStatus > 1 {
			tex.runaway()
			if tex.curCs == 0 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(604)
			} else {
				tex.curCs = 0
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(605)
			}
			tex.print(606)
			p = tex.getAvail()
			switch tex.scannerStatus {
			case 2:
				tex.print(570)
				*tex.mem[p].pHh().pLh() = 637
			case 3:
				tex.print(612)
				*tex.mem[p].pHh().pLh() = tex.parToken
				tex.longState = 113
			case 4:
				tex.print(572)
				*tex.mem[p].pHh().pLh() = 637
				q = p
				p = tex.getAvail()
				tex.mem[p].pHh().rh = q
				*tex.mem[p].pHh().pLh() = 6710
				tex.alignState = -1000000
			case 5:
				tex.print(573)
				*tex.mem[p].pHh().pLh() = 637
			}
			tex.beginTokenList(p, 4)
			tex.print(607)
			tex.sprintCs(tex.warningIndex)
			tex.helpPtr = 4
			tex.helpLine[3] = 608
			tex.helpLine[2] = 609
			tex.helpLine[1] = 610
			tex.helpLine[0] = 611
			tex.error1()
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(598)
			tex.printCmdChr(105, uint16(tex.curIf))
			tex.print(599)
			tex.printInt(tex.skipLine)
			tex.helpPtr = 3
			tex.helpLine[2] = 600
			tex.helpLine[1] = 601
			tex.helpLine[0] = 602
			if tex.curCs != 0 {
				tex.curCs = 0
			} else {
				tex.helpLine[2] = 603
			}
			tex.curTok = 6713
			tex.insError()
		}
		tex.deletionsAllowed = true
	}
}

func (tex *Context) getNext() {
	var k uint16   // 0..500
	var t uint16   // 0..65535
	var cat byte   // 0..15
	var c, cc byte // 0..255
	var d byte     // 2..3
label20:
	tex.curCs = 0
	if tex.curInput.stateField != 0 {
	label25:
		if tex.curInput.locField <= tex.curInput.limitField {
			tex.curChr = uint16(tex.buffer[tex.curInput.locField])
			tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
		label21:
			tex.curCmd = byte(tex.eqtb[3983+int32(tex.curChr)-1].hh().rh)
			switch int32(tex.curInput.stateField) + int32(tex.curCmd) {
			case 10, 26, 42, 27, 43:
				goto label25
			case 1, 17, 33:
				if tex.curInput.locField > tex.curInput.limitField {
					tex.curCs = 513
				} else {
				label26:
					k = tex.curInput.locField
					tex.curChr = uint16(tex.buffer[k])
					cat = byte(tex.eqtb[3983+int32(tex.curChr)-1].hh().rh)
					k = uint16(int32(k) + 1)
					if cat == 11 {
						tex.curInput.stateField = 17
					} else if cat == 10 {
						tex.curInput.stateField = 17
					} else {
						tex.curInput.stateField = 1
					}
					if (cat == 11) && (k <= tex.curInput.limitField) {
						for {
							tex.curChr = uint16(tex.buffer[k])
							cat = byte(tex.eqtb[3983+int32(tex.curChr)-1].hh().rh)
							k = uint16(int32(k) + 1)
							if (cat != 11) || (k > tex.curInput.limitField) {
								break
							}
						}
						if uint16(tex.buffer[k]) == tex.curChr {
							if cat == 7 {
								if k < tex.curInput.limitField {
									c = tex.buffer[int32(k)+1]
									if c < 128 {
										d = 2
										if ((c >= 48) && (c <= 57)) || ((c >= 97) && (c <= 102)) {
											if int32(k)+2 <= int32(tex.curInput.limitField) {
												cc = tex.buffer[int32(k)+2]
												if ((cc >= 48) && (cc <= 57)) || ((cc >= 97) && (cc <= 102)) {
													d = byte(int32(d) + 1)
												}
											}
										}
										if d > 2 {
											if c <= 57 {
												tex.curChr = uint16(int32(c) - 48)
											} else {
												tex.curChr = uint16(int32(c) - 87)
											}
											if cc <= 57 {
												tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 48)
											} else {
												tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 87)
											}
											tex.buffer[int32(k)-1] = byte(tex.curChr)
										} else if c < 64 {
											tex.buffer[int32(k)-1] = byte(int32(c) + 64)
										} else {
											tex.buffer[int32(k)-1] = byte(int32(c) - 64)
										}
										tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - int32(d))
										tex.first = uint16(int32(tex.first) - int32(d))
										for k <= tex.curInput.limitField {
											tex.buffer[k] = tex.buffer[int32(k)+int32(d)]
											k = uint16(int32(k) + 1)
										}
										goto label26
									}
								}
							}
						}
						if cat != 11 {
							k = uint16(int32(k) - 1)
						}
						if int32(k) > int32(tex.curInput.locField)+1 {
							tex.curCs = tex.idLookup(int32(tex.curInput.locField), int32(k)-int32(tex.curInput.locField))
							tex.curInput.locField = k
							goto label40
						}
					} else {
						if uint16(tex.buffer[k]) == tex.curChr {
							if cat == 7 {
								if k < tex.curInput.limitField {
									c = tex.buffer[int32(k)+1]
									if c < 128 {
										d = 2
										if ((c >= 48) && (c <= 57)) || ((c >= 97) && (c <= 102)) {
											if int32(k)+2 <= int32(tex.curInput.limitField) {
												cc = tex.buffer[int32(k)+2]
												if ((cc >= 48) && (cc <= 57)) || ((cc >= 97) && (cc <= 102)) {
													d = byte(int32(d) + 1)
												}
											}
										}
										if d > 2 {
											if c <= 57 {
												tex.curChr = uint16(int32(c) - 48)
											} else {
												tex.curChr = uint16(int32(c) - 87)
											}
											if cc <= 57 {
												tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 48)
											} else {
												tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 87)
											}
											tex.buffer[int32(k)-1] = byte(tex.curChr)
										} else if c < 64 {
											tex.buffer[int32(k)-1] = byte(int32(c) + 64)
										} else {
											tex.buffer[int32(k)-1] = byte(int32(c) - 64)
										}
										tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - int32(d))
										tex.first = uint16(int32(tex.first) - int32(d))
										for k <= tex.curInput.limitField {
											tex.buffer[k] = tex.buffer[int32(k)+int32(d)]
											k = uint16(int32(k) + 1)
										}
										goto label26
									}
								}
							}
						}
					}
					tex.curCs = uint16(257 + int32(tex.buffer[tex.curInput.locField]))
					tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
				}
			label40:
				tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
				tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
				if tex.curCmd >= 113 {
					tex.checkOuterValidity()
				}
			case 14, 30, 46:
				tex.curCs = uint16(int32(tex.curChr) + 1)
				tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
				tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
				tex.curInput.stateField = 1
				if tex.curCmd >= 113 {
					tex.checkOuterValidity()
				}
			case 8, 24, 40:
				if tex.curChr == uint16(tex.buffer[tex.curInput.locField]) {
					if tex.curInput.locField < tex.curInput.limitField {
						c = tex.buffer[int32(tex.curInput.locField)+1]
						if c < 128 {
							tex.curInput.locField = uint16(int32(tex.curInput.locField) + 2)
							if ((c >= 48) && (c <= 57)) || ((c >= 97) && (c <= 102)) {
								if tex.curInput.locField <= tex.curInput.limitField {
									cc = tex.buffer[tex.curInput.locField]
									if ((cc >= 48) && (cc <= 57)) || ((cc >= 97) && (cc <= 102)) {
										tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
										if c <= 57 {
											tex.curChr = uint16(int32(c) - 48)
										} else {
											tex.curChr = uint16(int32(c) - 87)
										}
										if cc <= 57 {
											tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 48)
										} else {
											tex.curChr = uint16((16 * int32(tex.curChr)) + int32(cc) - 87)
										}
										goto label21
									}
								}
							}
							if c < 64 {
								tex.curChr = uint16(int32(c) + 64)
							} else {
								tex.curChr = uint16(int32(c) - 64)
							}
							goto label21
						}
					}
				}
				tex.curInput.stateField = 1
			case 16, 32, 48:
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(613)
				tex.helpPtr = 2
				tex.helpLine[1] = 614
				tex.helpLine[0] = 615
				tex.deletionsAllowed = false
				tex.error1()
				tex.deletionsAllowed = true
				goto label20
			case 11:
				tex.curInput.stateField = 17
				tex.curChr = 32
			case 6:
				tex.curInput.locField = uint16(int32(tex.curInput.limitField) + 1)
				tex.curCmd = 10
				tex.curChr = 32
			case 22, 15, 31, 47:
				tex.curInput.locField = uint16(int32(tex.curInput.limitField) + 1)
				goto label25
			case 38:
				tex.curInput.locField = uint16(int32(tex.curInput.limitField) + 1)
				tex.curCs = tex.parLoc
				tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
				tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
				if tex.curCmd >= 113 {
					tex.checkOuterValidity()
				}
			case 2:
				tex.alignState = tex.alignState + 1
			case 18, 34:
				tex.curInput.stateField = 1
				tex.alignState = tex.alignState + 1
			case 3:
				tex.alignState = tex.alignState - 1
			case 19, 35:
				tex.curInput.stateField = 1
				tex.alignState = tex.alignState - 1
			case 20, 21, 23, 25, 28, 29, 36, 37, 39, 41, 44, 45:
				tex.curInput.stateField = 1
			default:
			}
		} else {
			tex.curInput.stateField = 33
			if tex.curInput.nameField > 17 {
				tex.line = tex.line + 1
				tex.first = tex.curInput.startField
				if !tex.forceEof {
					if tex.inputLn(&tex.inputFile[tex.curInput.indexField-1], true) {
						tex.firmUpTheLine()
					} else {
						tex.forceEof = true
					}
				}
				if tex.forceEof {
					tex.printChar(41)
					tex.openParens = byte(int32(tex.openParens) - 1)
					break1(&tex.termOut)
					tex.forceEof = false
					tex.endFileReading()
					tex.checkOuterValidity()
					goto label20
				}
				if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
					tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - 1)
				} else {
					tex.buffer[tex.curInput.limitField] = byte(tex.eqtb[5311-1].int())
				}
				tex.first = uint16(int32(tex.curInput.limitField) + 1)
				tex.curInput.locField = tex.curInput.startField
			} else {
				if !(tex.curInput.nameField == 0) {
					tex.curCmd = 0
					tex.curChr = 0
					goto label10
				}
				if tex.inputPtr > 0 {
					tex.endFileReading()
					goto label20
				}
				if tex.selector < 18 {
					tex.openLogFile()
				}
				if tex.interaction > 1 {
					if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
						tex.curInput.limitField = uint16(int32(tex.curInput.limitField) + 1)
					}
					if tex.curInput.limitField == tex.curInput.startField {
						tex.printNl(616)
					}
					tex.printLn()
					tex.first = tex.curInput.startField
					tex.print(42)
					tex.termInput()
					tex.curInput.limitField = tex.last
					if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
						tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - 1)
					} else {
						tex.buffer[tex.curInput.limitField] = byte(tex.eqtb[5311-1].int())
					}
					tex.first = uint16(int32(tex.curInput.limitField) + 1)
					tex.curInput.locField = tex.curInput.startField
				} else {
					tex.fatalError(617)
				}
			}
			if tex.interrupt != 0 {
				tex.pauseForInstructions()
			}
			goto label25
		}
	} else if tex.curInput.locField != 0 {
		t = tex.mem[tex.curInput.locField].hh().lh()
		tex.curInput.locField = tex.mem[tex.curInput.locField].hh().rh
		if t >= 4095 {
			tex.curCs = uint16(int32(t) - 4095)
			tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
			tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
			if tex.curCmd >= 113 {
				if tex.curCmd == 116 {
					tex.curCs = uint16(int32(tex.mem[tex.curInput.locField].hh().lh()) - 4095)
					tex.curInput.locField = 0
					tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
					tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
					if tex.curCmd > 100 {
						tex.curCmd = 0
						tex.curChr = 257
					}
				} else {
					tex.checkOuterValidity()
				}
			}
		} else {
			tex.curCmd = byte((int32(t) / 256))
			tex.curChr = uint16((int32(t) % 256))
			switch tex.curCmd {
			case 1:
				tex.alignState = tex.alignState + 1
			case 2:
				tex.alignState = tex.alignState - 1
			case 5:
				tex.beginTokenList(tex.paramStack[int32(tex.curInput.limitField)+int32(tex.curChr)-1], 0)
				goto label20
			default:
			}
		}
	} else {
		tex.endTokenList()
		goto label20
	}
	if tex.curCmd <= 5 {
		if tex.curCmd >= 4 {
			if tex.alignState == 0 {
				if (tex.scannerStatus == 4) || (tex.curAlign == 0) {
					tex.fatalError(595)
				}
				tex.curCmd = byte(tex.mem[int32(tex.curAlign)+5].hh().lh())
				*tex.mem[int32(tex.curAlign)+5].pHh().pLh() = tex.curChr
				if tex.curCmd == 63 {
					tex.beginTokenList(29990, 2)
				} else {
					tex.beginTokenList(uint16(tex.mem[int32(tex.curAlign)+2].int()), 2)
				}
				tex.alignState = 1000000
				goto label20
			}
		}
	}
label10:
	;
}

func (tex *Context) firmUpTheLine() {
	var k uint16 // 0..500
	tex.curInput.limitField = tex.last
	if tex.eqtb[5291-1].int() > 0 {
		if tex.interaction > 1 {
			tex.printLn()
			if tex.curInput.startField < tex.curInput.limitField {
				for _i := int64(tex.curInput.startField); _i <= int64(int32(tex.curInput.limitField)-1); _i++ {
					k = uint16(_i)
					tex.print(int32(tex.buffer[k]))
				}
			}
			tex.first = tex.curInput.limitField
			tex.print(618)
			tex.termInput()
			if tex.last > tex.first {
				for _i := int64(tex.first); _i <= int64(int32(tex.last)-1); _i++ {
					k = uint16(_i)
					tex.buffer[int32(k)+int32(tex.curInput.startField)-int32(tex.first)] = tex.buffer[k]
				}
				tex.curInput.limitField = uint16(int32(tex.curInput.startField) + int32(tex.last) - int32(tex.first))
			}
		}
	}
}

func (tex *Context) getToken() {
	tex.noNewControlSequence = false
	tex.getNext()
	tex.noNewControlSequence = true
	if tex.curCs == 0 {
		tex.curTok = uint16((int32(tex.curCmd) * 256) + int32(tex.curChr))
	} else {
		tex.curTok = uint16(4095 + int32(tex.curCs))
	}
}

func (tex *Context) macroCall() {
	var r uint16                // 0..65535
	var p uint16                // 0..65535
	var q uint16                // 0..65535
	var s uint16                // 0..65535
	var t uint16                // 0..65535
	var u, v uint16             // 0..65535
	var rbracePtr uint16        // 0..65535
	var n byte                  // 0..63
	var unbalance uint16        // 0..65535
	var m uint16                // 0..65535
	var refCount uint16         // 0..65535
	var saveScannerStatus byte  // 0..63
	var saveWarningIndex uint16 // 0..65535
	var matchChr byte           // 0..255
	saveScannerStatus = tex.scannerStatus
	saveWarningIndex = tex.warningIndex
	tex.warningIndex = tex.curCs
	refCount = tex.curChr
	r = tex.mem[refCount].hh().rh
	n = 0
	if tex.eqtb[5293-1].int() > 0 {
		tex.beginDiagnostic()
		tex.printLn()
		tex.printCs(int32(tex.warningIndex))
		tex.tokenShow(refCount)
		tex.endDiagnostic(false)
	}
	if tex.mem[r].hh().lh() != 3584 {
		tex.scannerStatus = 3
		unbalance = 0
		tex.longState = tex.eqtb[tex.curCs-1].hh().b0()
		if tex.longState >= 113 {
			tex.longState = byte(int32(tex.longState) - 2)
		}
		for {
			tex.mem[29997].pHh().rh = 0
			if (tex.mem[r].hh().lh() > 3583) || (tex.mem[r].hh().lh() < 3328) {
				s = 0
			} else {
				matchChr = byte(int32(tex.mem[r].hh().lh()) - 3328)
				s = tex.mem[r].hh().rh
				r = s
				p = 29997
				m = 0
			}
		label22:
			tex.getToken()
			if tex.curTok == tex.mem[r].hh().lh() {
				r = tex.mem[r].hh().rh
				if (tex.mem[r].hh().lh() >= 3328) && (tex.mem[r].hh().lh() <= 3584) {
					if tex.curTok < 512 {
						tex.alignState = tex.alignState - 1
					}
					goto label40
				} else {
					goto label22
				}
			}
			if s != r {
				if s == 0 {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(650)
					tex.sprintCs(tex.warningIndex)
					tex.print(651)
					tex.helpPtr = 4
					tex.helpLine[3] = 652
					tex.helpLine[2] = 653
					tex.helpLine[1] = 654
					tex.helpLine[0] = 655
					tex.error1()
					goto label10
				} else {
					t = s
					for {

						{
							q = tex.getAvail()
							tex.mem[p].pHh().rh = q
							*tex.mem[q].pHh().pLh() = tex.mem[t].hh().lh()
							p = q
						}
						m = uint16(int32(m) + 1)
						u = tex.mem[t].hh().rh
						v = s
						for true {
							if u == r {
								if tex.curTok != tex.mem[v].hh().lh() {
									goto label30
								} else {
									r = tex.mem[v].hh().rh
									goto label22
								}
							}
							if tex.mem[u].hh().lh() != tex.mem[v].hh().lh() {
								goto label30
							}
							u = tex.mem[u].hh().rh
							v = tex.mem[v].hh().rh
						}
					label30:
						t = tex.mem[t].hh().rh
						if t == r {
							break
						}
					}
					r = s
				}
			}
			if tex.curTok == tex.parToken {
				if tex.longState != 112 {
					if tex.longState == 111 {
						tex.runaway()
						if tex.interaction == 3 {
						}
						tex.printNl(262)
						tex.print(645)
						tex.sprintCs(tex.warningIndex)
						tex.print(646)
						tex.helpPtr = 3
						tex.helpLine[2] = 647
						tex.helpLine[1] = 648
						tex.helpLine[0] = 649
						tex.backError()
					}
					tex.pstack[n] = tex.mem[29997].hh().rh
					tex.alignState = tex.alignState - int32(unbalance)
					for _i := int64(0); _i <= int64(n); _i++ {
						m = uint16(_i)
						tex.flushList(tex.pstack[m])
					}
					goto label10
				}
			}
			if tex.curTok < 768 {
				if tex.curTok < 512 {
					unbalance = 1
					for true {
						q = tex.avail
						if q == 0 {
							q = tex.getAvail()
						} else {
							tex.avail = tex.mem[q].hh().rh
							tex.mem[q].pHh().rh = 0
						}
						tex.mem[p].pHh().rh = q
						*tex.mem[q].pHh().pLh() = tex.curTok
						p = q
						tex.getToken()
						if tex.curTok == tex.parToken {
							if tex.longState != 112 {
								if tex.longState == 111 {
									tex.runaway()
									if tex.interaction == 3 {
									}
									tex.printNl(262)
									tex.print(645)
									tex.sprintCs(tex.warningIndex)
									tex.print(646)
									tex.helpPtr = 3
									tex.helpLine[2] = 647
									tex.helpLine[1] = 648
									tex.helpLine[0] = 649
									tex.backError()
								}
								tex.pstack[n] = tex.mem[29997].hh().rh
								tex.alignState = tex.alignState - int32(unbalance)
								for _i := int64(0); _i <= int64(n); _i++ {
									m = uint16(_i)
									tex.flushList(tex.pstack[m])
								}
								goto label10
							}
						}
						if tex.curTok < 768 {
							if tex.curTok < 512 {
								unbalance = uint16(int32(unbalance) + 1)
							} else {
								unbalance = uint16(int32(unbalance) - 1)
								if unbalance == 0 {
									goto label31
								}
							}
						}
					}
				label31:
					rbracePtr = p
					q = tex.getAvail()
					tex.mem[p].pHh().rh = q
					*tex.mem[q].pHh().pLh() = tex.curTok
					p = q
				} else {
					tex.backInput()
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(637)
					tex.sprintCs(tex.warningIndex)
					tex.print(638)
					tex.helpPtr = 6
					tex.helpLine[5] = 639
					tex.helpLine[4] = 640
					tex.helpLine[3] = 641
					tex.helpLine[2] = 642
					tex.helpLine[1] = 643
					tex.helpLine[0] = 644
					tex.alignState = tex.alignState + 1
					tex.longState = 111
					tex.curTok = tex.parToken
					tex.insError()
					goto label22
				}
			} else {
				if tex.curTok == 2592 {
					if tex.mem[r].hh().lh() <= 3584 {
						if tex.mem[r].hh().lh() >= 3328 {
							goto label22
						}
					}
				}
				q = tex.getAvail()
				tex.mem[p].pHh().rh = q
				*tex.mem[q].pHh().pLh() = tex.curTok
				p = q
			}
			m = uint16(int32(m) + 1)
			if tex.mem[r].hh().lh() > 3584 {
				goto label22
			}
			if tex.mem[r].hh().lh() < 3328 {
				goto label22
			}
		label40:
			if s != 0 {
				if (m == 1) && (tex.mem[p].hh().lh() < 768) {
					tex.mem[rbracePtr].pHh().rh = 0
					tex.mem[p].pHh().rh = tex.avail
					tex.avail = p
					p = tex.mem[29997].hh().rh
					tex.pstack[n] = tex.mem[p].hh().rh
					tex.mem[p].pHh().rh = tex.avail
					tex.avail = p
				} else {
					tex.pstack[n] = tex.mem[29997].hh().rh
				}
				n = byte(int32(n) + 1)
				if tex.eqtb[5293-1].int() > 0 {
					tex.beginDiagnostic()
					tex.printNl(uint16(matchChr))
					tex.printInt(int32(n))
					tex.print(656)
					tex.showTokenList(int32(tex.pstack[int32(n)-1]), 0, 1000)
					tex.endDiagnostic(false)
				}
			}
			if tex.mem[r].hh().lh() == 3584 {
				break
			}
		}
	}
	for (tex.curInput.stateField == 0) && (tex.curInput.locField == 0) && (tex.curInput.indexField != 2) {
		tex.endTokenList()
	}
	tex.beginTokenList(refCount, 5)
	tex.curInput.nameField = tex.warningIndex
	tex.curInput.locField = tex.mem[r].hh().rh
	if n > 0 {
		if int32(tex.paramPtr)+int32(n) > tex.maxParamStack {
			tex.maxParamStack = int32(tex.paramPtr) + int32(n)
			if tex.maxParamStack > paramSize {
				tex.overflow(636, paramSize)
			}
		}
		for _i := int64(0); _i <= int64(int32(n)-1); _i++ {
			m = uint16(_i)
			tex.paramStack[int32(tex.paramPtr)+int32(m)] = tex.pstack[m]
		}
		tex.paramPtr = byte(int32(tex.paramPtr) + int32(n))
	}
label10:
	tex.scannerStatus = saveScannerStatus
	tex.warningIndex = saveWarningIndex
}

func (tex *Context) insertRelax() {
	tex.curTok = uint16(4095 + int32(tex.curCs))
	tex.backInput()
	tex.curTok = 6716
	tex.backInput()
	tex.curInput.indexField = 4
}

func (tex *Context) expand() {
	var t uint16                              // 0..65535
	var p, q, r uint16                        // 0..65535
	var j uint16                              // 0..500
	var cvBackup int32                        // integer
	var cvlBackup, radixBackup, coBackup byte // 0..63
	var backupBackup uint16                   // 0..65535
	var saveScannerStatus byte                // 0..63
	cvBackup = tex.curVal
	cvlBackup = tex.curValLevel
	radixBackup = tex.radix
	coBackup = tex.curOrder
	backupBackup = tex.mem[29987].hh().rh
	if tex.curCmd < 111 {
		if tex.eqtb[5299-1].int() > 1 {
			tex.showCurCmdChr()
		}
		switch tex.curCmd {
		case 110:
			if tex.curMark[tex.curChr] != 0 {
				tex.beginTokenList(tex.curMark[tex.curChr], 14)
			}
		case 102:
			tex.getToken()
			t = tex.curTok
			tex.getToken()
			if tex.curCmd > 100 {
				tex.expand()
			} else {
				tex.backInput()
			}
			tex.curTok = t
			tex.backInput()
		case 103:
			saveScannerStatus = tex.scannerStatus
			tex.scannerStatus = 0
			tex.getToken()
			tex.scannerStatus = saveScannerStatus
			t = tex.curTok
			tex.backInput()
			if t >= 4095 {
				p = tex.getAvail()
				*tex.mem[p].pHh().pLh() = 6718
				tex.mem[p].pHh().rh = tex.curInput.locField
				tex.curInput.startField = p
				tex.curInput.locField = p
			}
		case 107:
			r = tex.getAvail()
			p = r
			for {
				tex.getXToken()
				if tex.curCs == 0 {
					q = tex.getAvail()
					tex.mem[p].pHh().rh = q
					*tex.mem[q].pHh().pLh() = tex.curTok
					p = q
				}
				if tex.curCs != 0 {
					break
				}
			}
			if tex.curCmd != 67 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(625)
				tex.printEsc(505)
				tex.print(626)
				tex.helpPtr = 2
				tex.helpLine[1] = 627
				tex.helpLine[0] = 628
				tex.backError()
			}
			j = tex.first
			p = tex.mem[r].hh().rh
			for p != 0 {
				if j >= tex.maxBufStack {
					tex.maxBufStack = uint16(int32(j) + 1)
					if tex.maxBufStack == bufSize {
						tex.overflow(256, bufSize)
					}
				}
				tex.buffer[j] = byte((int32(tex.mem[p].hh().lh()) % 256))
				j = uint16(int32(j) + 1)
				p = tex.mem[p].hh().rh
			}
			if int32(j) > int32(tex.first)+1 {
				tex.noNewControlSequence = false
				tex.curCs = tex.idLookup(int32(tex.first), int32(j)-int32(tex.first))
				tex.noNewControlSequence = true
			} else if j == tex.first {
				tex.curCs = 513
			} else {
				tex.curCs = uint16(257 + int32(tex.buffer[tex.first]))
			}
			tex.flushList(r)
			if tex.eqtb[tex.curCs-1].hh().b0() == 101 {
				tex.eqDefine(tex.curCs, 0, 256)
			}
			tex.curTok = uint16(int32(tex.curCs) + 4095)
			tex.backInput()
		case 108:
			tex.convToks()
		case 109:
			tex.insTheToks()
		case 105:
			tex.conditional()
		case 106:
			if tex.curChr > uint16(tex.ifLimit) {
				if tex.ifLimit == 1 {
					tex.insertRelax()
				} else {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(777)
					tex.printCmdChr(106, tex.curChr)
					tex.helpPtr = 1
					tex.helpLine[0] = 778
					tex.error1()
				}
			} else {
				for tex.curChr != 2 {
					tex.passText()
				}
				p = tex.condPtr
				tex.ifLine = tex.mem[int32(p)+1].int()
				tex.curIf = tex.mem[p].hh().b1()
				tex.ifLimit = tex.mem[p].hh().b0()
				tex.condPtr = tex.mem[p].hh().rh
				tex.freeNode(p, 2)
			}
		case 104:
			if tex.curChr > 0 {
				tex.forceEof = true
			} else if tex.nameInProgress {
				tex.insertRelax()
			} else {
				tex.startInput()
			}
		default:
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(619)
			tex.helpPtr = 5
			tex.helpLine[4] = 620
			tex.helpLine[3] = 621
			tex.helpLine[2] = 622
			tex.helpLine[1] = 623
			tex.helpLine[0] = 624
			tex.error1()
		}
	} else if tex.curCmd < 115 {
		tex.macroCall()
	} else {
		tex.curTok = 6715
		tex.backInput()
	}
	tex.curVal = cvBackup
	tex.curValLevel = cvlBackup
	tex.radix = radixBackup
	tex.curOrder = coBackup
	tex.mem[29987].pHh().rh = backupBackup
}

func (tex *Context) getXToken() {
label20:
	tex.getNext()
	if tex.curCmd <= 100 {
		goto label30
	}
	if tex.curCmd >= 111 {
		if tex.curCmd < 115 {
			tex.macroCall()
		} else {
			tex.curCs = 2620
			tex.curCmd = 9
			goto label30
		}
	} else {
		tex.expand()
	}
	goto label20
label30:
	if tex.curCs == 0 {
		tex.curTok = uint16((int32(tex.curCmd) * 256) + int32(tex.curChr))
	} else {
		tex.curTok = uint16(4095 + int32(tex.curCs))
	}
}

func (tex *Context) xToken() {
	for tex.curCmd > 100 {
		tex.expand()
		tex.getNext()
	}
	if tex.curCs == 0 {
		tex.curTok = uint16((int32(tex.curCmd) * 256) + int32(tex.curChr))
	} else {
		tex.curTok = uint16(4095 + int32(tex.curCs))
	}
}

func (tex *Context) scanLeftBrace() {
	for {
		tex.getXToken()
		if (tex.curCmd != 10) && (tex.curCmd != 0) {
			break
		}
	}
	if tex.curCmd != 1 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(657)
		tex.helpPtr = 4
		tex.helpLine[3] = 658
		tex.helpLine[2] = 659
		tex.helpLine[1] = 660
		tex.helpLine[0] = 661
		tex.backError()
		tex.curTok = 379
		tex.curCmd = 1
		tex.curChr = 123
		tex.alignState = tex.alignState + 1
	}
}

func (tex *Context) scanOptionalEquals() {
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	if tex.curTok != 3133 {
		tex.backInput()
	}
}

func (tex *Context) scanKeyword(s uint16) (ret bool) {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	var k uint16 // 0..32000
	p = 29987
	tex.mem[p].pHh().rh = 0
	k = tex.strStart[s]
	for k < tex.strStart[int32(s)+1] {
		tex.getXToken()
		if (tex.curCs == 0) && ((tex.curChr == uint16(tex.strPool[k])) || (int32(tex.curChr) == (int32(tex.strPool[k]) - 32))) {
			q = tex.getAvail()
			tex.mem[p].pHh().rh = q
			*tex.mem[q].pHh().pLh() = tex.curTok
			p = q
			k = uint16(int32(k) + 1)
		} else if (tex.curCmd != 10) || (p != 29987) {
			tex.backInput()
			if p != 29987 {
				tex.beginTokenList(tex.mem[29987].hh().rh, 3)
			}
			ret = false
			goto label10
		}
	}
	tex.flushList(tex.mem[29987].hh().rh)
	ret = true
label10:
	return ret
}

func (tex *Context) muError() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(662)
	tex.helpPtr = 1
	tex.helpLine[0] = 663
	tex.error1()
}

func (tex *Context) scanEightBitInt() {
	tex.scanInt()
	if (tex.curVal < 0) || (tex.curVal > 255) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(687)
		tex.helpPtr = 2
		tex.helpLine[1] = 688
		tex.helpLine[0] = 689
		tex.intError(tex.curVal)
		tex.curVal = 0
	}
}

func (tex *Context) scanCharNum() {
	tex.scanInt()
	if (tex.curVal < 0) || (tex.curVal > 255) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(690)
		tex.helpPtr = 2
		tex.helpLine[1] = 691
		tex.helpLine[0] = 689
		tex.intError(tex.curVal)
		tex.curVal = 0
	}
}

func (tex *Context) scanFourBitInt() {
	tex.scanInt()
	if (tex.curVal < 0) || (tex.curVal > 15) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(692)
		tex.helpPtr = 2
		tex.helpLine[1] = 693
		tex.helpLine[0] = 689
		tex.intError(tex.curVal)
		tex.curVal = 0
	}
}

func (tex *Context) scanFifteenBitInt() {
	tex.scanInt()
	if (tex.curVal < 0) || (tex.curVal > 32767) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(694)
		tex.helpPtr = 2
		tex.helpLine[1] = 695
		tex.helpLine[0] = 689
		tex.intError(tex.curVal)
		tex.curVal = 0
	}
}

func (tex *Context) scanTwentySevenBitInt() {
	tex.scanInt()
	if (tex.curVal < 0) || (tex.curVal > 134217727) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(696)
		tex.helpPtr = 2
		tex.helpLine[1] = 697
		tex.helpLine[0] = 689
		tex.intError(tex.curVal)
		tex.curVal = 0
	}
}

func (tex *Context) scanFontIdent() {
	var f byte   // 0..75
	var m uint16 // 0..65535
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	if tex.curCmd == 88 {
		f = byte(tex.eqtb[3934-1].hh().rh)
	} else if tex.curCmd == 87 {
		f = byte(tex.curChr)
	} else if tex.curCmd == 86 {
		m = tex.curChr
		tex.scanFourBitInt()
		f = byte(tex.eqtb[int32(m)+tex.curVal-1].hh().rh)
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(817)
		tex.helpPtr = 2
		tex.helpLine[1] = 818
		tex.helpLine[0] = 819
		tex.backError()
		f = 0
	}
	tex.curVal = int32(f)
}

func (tex *Context) findFontDimen(writing bool) {
	var f byte  // 0..75
	var n int32 // integer
	tex.scanInt()
	n = tex.curVal
	tex.scanFontIdent()
	f = byte(tex.curVal)
	if n <= 0 {
		tex.curVal = int32(tex.fmemPtr)
	} else {
		if writing && (n <= 4) && (n >= 2) && (tex.fontGlue[f] != 0) {
			tex.deleteGlueRef(tex.fontGlue[f])
			tex.fontGlue[f] = 0
		}
		if n > int32(tex.fontParams[f]) {
			if f < tex.fontPtr {
				tex.curVal = int32(tex.fmemPtr)
			} else {
				for {
					if tex.fmemPtr == fontMemSize {
						tex.overflow(824, fontMemSize)
					}
					*tex.fontInfo[tex.fmemPtr].pInt() = 0
					tex.fmemPtr = uint16(int32(tex.fmemPtr) + 1)
					tex.fontParams[f] = uint16(int32(tex.fontParams[f]) + 1)
					if n == int32(tex.fontParams[f]) {
						break
					}
				}
				tex.curVal = int32(tex.fmemPtr) - 1
			}
		} else {
			tex.curVal = n + tex.paramBase[f]
		}
	}
	if tex.curVal == int32(tex.fmemPtr) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(802)
		tex.printEsc(tex.hash[2624+int32(f)-514].rh)
		tex.print(820)
		tex.printInt(int32(tex.fontParams[f]))
		tex.print(821)
		tex.helpPtr = 2
		tex.helpLine[1] = 822
		tex.helpLine[0] = 823
		tex.error1()
	}
}

func (tex *Context) scanSomethingInternal(level byte, negative bool) {
	var m uint16 // 0..65535
	var p byte   // 0..40
	m = tex.curChr
	switch tex.curCmd {
	case 85:
		tex.scanCharNum()
		if m == 5007 {
			tex.curVal = int32(tex.eqtb[5007+tex.curVal-1].hh().rh) - 0
			tex.curValLevel = 0
		} else if m < 5007 {
			tex.curVal = int32(tex.eqtb[int32(m)+tex.curVal-1].hh().rh)
			tex.curValLevel = 0
		} else {
			tex.curVal = tex.eqtb[int32(m)+tex.curVal-1].int()
			tex.curValLevel = 0
		}
	case 71, 72, 86, 87, 88:
		if level != 5 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(664)
			tex.helpPtr = 3
			tex.helpLine[2] = 665
			tex.helpLine[1] = 666
			tex.helpLine[0] = 667
			tex.backError()
			tex.curVal = 0
			tex.curValLevel = 1
		} else if tex.curCmd <= 72 {
			if tex.curCmd < 72 {
				tex.scanEightBitInt()
				m = uint16(3422 + tex.curVal)
			}
			tex.curVal = int32(tex.eqtb[m-1].hh().rh)
			tex.curValLevel = 5
		} else {
			tex.backInput()
			tex.scanFontIdent()
			tex.curVal = 2624 + tex.curVal
			tex.curValLevel = 4
		}
	case 73:
		tex.curVal = tex.eqtb[m-1].int()
		tex.curValLevel = 0
	case 74:
		tex.curVal = tex.eqtb[m-1].int()
		tex.curValLevel = 1
	case 75:
		tex.curVal = int32(tex.eqtb[m-1].hh().rh)
		tex.curValLevel = 2
	case 76:
		tex.curVal = int32(tex.eqtb[m-1].hh().rh)
		tex.curValLevel = 3
	case 79:
		if iabs(int32(tex.curList.modeField)) != int32(m) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(680)
			tex.printCmdChr(79, m)
			tex.helpPtr = 4
			tex.helpLine[3] = 681
			tex.helpLine[2] = 682
			tex.helpLine[1] = 683
			tex.helpLine[0] = 684
			tex.error1()
			if level != 5 {
				tex.curVal = 0
				tex.curValLevel = 1
			} else {
				tex.curVal = 0
				tex.curValLevel = 0
			}
		} else if m == 1 {
			tex.curVal = tex.curList.auxField.int()
			tex.curValLevel = 1
		} else {
			tex.curVal = int32(tex.curList.auxField.hh().lh())
			tex.curValLevel = 0
		}
	case 80:
		if tex.curList.modeField == 0 {
			tex.curVal = 0
			tex.curValLevel = 0
		} else {
			tex.nest[tex.nestPtr] = tex.curList
			p = tex.nestPtr
			for iabs(int32(tex.nest[p].modeField)) != 1 {
				p = byte(int32(p) - 1)
			}
			tex.curVal = tex.nest[p].pgField
			tex.curValLevel = 0
		}
	case 82:
		if m == 0 {
			tex.curVal = tex.deadCycles
		} else {
			tex.curVal = tex.insertPenalties
		}
		tex.curValLevel = 0
	case 81:
		if (tex.pageContents == 0) && !tex.outputActive {
			if m == 0 {
				tex.curVal = 1073741823
			} else {
				tex.curVal = 0
			}
		} else {
			tex.curVal = tex.pageSoFar[m]
		}
		tex.curValLevel = 1
	case 84:
		if tex.eqtb[3412-1].hh().rh == 0 {
			tex.curVal = 0
		} else {
			tex.curVal = int32(tex.mem[tex.eqtb[3412-1].hh().rh].hh().lh())
		}
		tex.curValLevel = 0
	case 83:
		tex.scanEightBitInt()
		if tex.eqtb[3678+tex.curVal-1].hh().rh == 0 {
			tex.curVal = 0
		} else {
			tex.curVal = tex.mem[int32(tex.eqtb[3678+tex.curVal-1].hh().rh)+int32(m)].int()
		}
		tex.curValLevel = 1
	case 68, 69:
		tex.curVal = int32(tex.curChr)
		tex.curValLevel = 0
	case 77:
		tex.findFontDimen(false)
		*tex.fontInfo[tex.fmemPtr].pInt() = 0
		tex.curVal = tex.fontInfo[tex.curVal].int()
		tex.curValLevel = 1
	case 78:
		tex.scanFontIdent()
		if m == 0 {
			tex.curVal = tex.hyphenChar[tex.curVal]
			tex.curValLevel = 0
		} else {
			tex.curVal = tex.skewChar[tex.curVal]
			tex.curValLevel = 0
		}
	case 89:
		tex.scanEightBitInt()
		switch m {
		case 0:
			tex.curVal = tex.eqtb[5318+tex.curVal-1].int()
		case 1:
			tex.curVal = tex.eqtb[5851+tex.curVal-1].int()
		case 2:
			tex.curVal = int32(tex.eqtb[2900+tex.curVal-1].hh().rh)
		case 3:
			tex.curVal = int32(tex.eqtb[3156+tex.curVal-1].hh().rh)
		}
		tex.curValLevel = byte(m)
	case 70:
		if tex.curChr > 2 {
			if tex.curChr == 3 {
				tex.curVal = tex.line
			} else {
				tex.curVal = tex.lastBadness
			}
			tex.curValLevel = 0
		} else {
			if tex.curChr == 2 {
				tex.curVal = 0
			} else {
				tex.curVal = 0
			}
			tex.curValLevel = byte(tex.curChr)
			if !(tex.curList.tailField >= tex.hiMemMin) && (tex.curList.modeField != 0) {
				switch tex.curChr {
				case 0:
					if tex.mem[tex.curList.tailField].hh().b0() == 12 {
						tex.curVal = tex.mem[int32(tex.curList.tailField)+1].int()
					}
				case 1:
					if tex.mem[tex.curList.tailField].hh().b0() == 11 {
						tex.curVal = tex.mem[int32(tex.curList.tailField)+1].int()
					}
				case 2:
					if tex.mem[tex.curList.tailField].hh().b0() == 10 {
						tex.curVal = int32(tex.mem[int32(tex.curList.tailField)+1].hh().lh())
						if tex.mem[tex.curList.tailField].hh().b1() == 99 {
							tex.curValLevel = 3
						}
					}
				}
			} else if (tex.curList.modeField == 1) && (tex.curList.tailField == tex.curList.headField) {
				switch tex.curChr {
				case 0:
					tex.curVal = tex.lastPenalty
				case 1:
					tex.curVal = tex.lastKern
				case 2:
					if tex.lastGlue != 65535 {
						tex.curVal = int32(tex.lastGlue)
					}
				}
			}
		}
	default:
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(685)
		tex.printCmdChr(tex.curCmd, tex.curChr)
		tex.print(686)
		tex.printEsc(537)
		tex.helpPtr = 1
		tex.helpLine[0] = 684
		tex.error1()
		if level != 5 {
			tex.curVal = 0
			tex.curValLevel = 1
		} else {
			tex.curVal = 0
			tex.curValLevel = 0
		}
	}
	for tex.curValLevel > level {
		if tex.curValLevel == 2 {
			tex.curVal = tex.mem[tex.curVal+1].int()
		} else if tex.curValLevel == 3 {
			tex.muError()
		}
		tex.curValLevel = byte(int32(tex.curValLevel) - 1)
	}
	if negative {
		if tex.curValLevel >= 2 {
			tex.curVal = int32(tex.newSpec(uint16(tex.curVal)))
			*tex.mem[tex.curVal+1].pInt() = -tex.mem[tex.curVal+1].int()
			*tex.mem[tex.curVal+2].pInt() = -tex.mem[tex.curVal+2].int()
			*tex.mem[tex.curVal+3].pInt() = -tex.mem[tex.curVal+3].int()
		} else {
			tex.curVal = -tex.curVal
		}
	} else if (tex.curValLevel >= 2) && (tex.curValLevel <= 3) {
		tex.mem[tex.curVal].pHh().rh = uint16(int32(tex.mem[tex.curVal].hh().rh) + 1)
	}
}

func (tex *Context) scanInt() {
	var negative bool // boolean
	var m int32       // integer
	var d byte        // 0..63
	var vacuous bool  // boolean
	var OKSoFar bool  // boolean
	tex.radix = 0
	OKSoFar = true
	negative = false
	for {
		for {
			tex.getXToken()
			if tex.curCmd != 10 {
				break
			}
		}
		if tex.curTok == 3117 {
			negative = !negative
			tex.curTok = 3115
		}
		if tex.curTok != 3115 {
			break
		}
	}
	if tex.curTok == 3168 {
		tex.getToken()
		if tex.curTok < 4095 {
			tex.curVal = int32(tex.curChr)
			if tex.curCmd <= 2 {
				if tex.curCmd == 2 {
					tex.alignState = tex.alignState + 1
				} else {
					tex.alignState = tex.alignState - 1
				}
			}
		} else if tex.curTok < 4352 {
			tex.curVal = int32(tex.curTok) - 4096
		} else {
			tex.curVal = int32(tex.curTok) - 4352
		}
		if tex.curVal > 255 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(698)
			tex.helpPtr = 2
			tex.helpLine[1] = 699
			tex.helpLine[0] = 700
			tex.curVal = 48
			tex.backError()
		} else {
			tex.getXToken()
			if tex.curCmd != 10 {
				tex.backInput()
			}
		}
	} else if (tex.curCmd >= 68) && (tex.curCmd <= 89) {
		tex.scanSomethingInternal(0, false)
	} else {
		tex.radix = 10
		m = 214748364
		if tex.curTok == 3111 {
			tex.radix = 8
			m = 268435456
			tex.getXToken()
		} else if tex.curTok == 3106 {
			tex.radix = 16
			m = 134217728
			tex.getXToken()
		}
		vacuous = true
		tex.curVal = 0
		for true {
			if (int32(tex.curTok) < (3120 + int32(tex.radix))) && (tex.curTok >= 3120) && (tex.curTok <= 3129) {
				d = byte(int32(tex.curTok) - 3120)
			} else if tex.radix == 16 {
				if (tex.curTok <= 2886) && (tex.curTok >= 2881) {
					d = byte(int32(tex.curTok) - 2871)
				} else if (tex.curTok <= 3142) && (tex.curTok >= 3137) {
					d = byte(int32(tex.curTok) - 3127)
				} else {
					goto label30
				}
			} else {
				goto label30
			}
			vacuous = false
			if (tex.curVal >= m) && ((tex.curVal > m) || (d > 7) || (tex.radix != 10)) {
				if OKSoFar {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(701)
					tex.helpPtr = 2
					tex.helpLine[1] = 702
					tex.helpLine[0] = 703
					tex.error1()
					tex.curVal = 2147483647
					OKSoFar = false
				}
			} else {
				tex.curVal = (tex.curVal * int32(tex.radix)) + int32(d)
			}
			tex.getXToken()
		}
	label30:
		if vacuous {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(664)
			tex.helpPtr = 3
			tex.helpLine[2] = 665
			tex.helpLine[1] = 666
			tex.helpLine[0] = 667
			tex.backError()
		} else if tex.curCmd != 10 {
			tex.backInput()
		}
	}
	if negative {
		tex.curVal = -tex.curVal
	}
}

func (tex *Context) scanDimen(mu, inf, shortcut bool) {
	var negative bool     // boolean
	var f int32           // integer
	var num, denom uint32 // 1..65536
	var k, kk byte        // 0..63
	var p, q uint16       // 0..65535
	var v int32           // integer
	var saveCurVal int32  // integer
	f = 0
	tex.arithError = false
	tex.curOrder = 0
	negative = false
	if !shortcut {
		negative = false
		for {
			for {
				tex.getXToken()
				if tex.curCmd != 10 {
					break
				}
			}
			if tex.curTok == 3117 {
				negative = !negative
				tex.curTok = 3115
			}
			if tex.curTok != 3115 {
				break
			}
		}
		if (tex.curCmd >= 68) && (tex.curCmd <= 89) {
			if mu {
				tex.scanSomethingInternal(3, false)
				if tex.curValLevel >= 2 {
					v = tex.mem[tex.curVal+1].int()
					tex.deleteGlueRef(uint16(tex.curVal))
					tex.curVal = v
				}
				if tex.curValLevel == 3 {
					goto label89
				}
				if tex.curValLevel != 0 {
					tex.muError()
				}
			} else {
				tex.scanSomethingInternal(1, false)
				if tex.curValLevel == 1 {
					goto label89
				}
			}
		} else {
			tex.backInput()
			if tex.curTok == 3116 {
				tex.curTok = 3118
			}
			if tex.curTok != 3118 {
				tex.scanInt()
			} else {
				tex.radix = 10
				tex.curVal = 0
			}
			if tex.curTok == 3116 {
				tex.curTok = 3118
			}
			if (tex.radix == 10) && (tex.curTok == 3118) {
				k = 0
				p = 0
				tex.getToken()
				for true {
					tex.getXToken()
					if (tex.curTok > 3129) || (tex.curTok < 3120) {
						goto label31
					}
					if k < 17 {
						q = tex.getAvail()
						tex.mem[q].pHh().rh = p
						*tex.mem[q].pHh().pLh() = uint16(int32(tex.curTok) - 3120)
						p = q
						k = byte(int32(k) + 1)
					}
				}
			label31:
				for _i := int64(k); _i >= int64(1); _i-- {
					kk = byte(_i)
					tex.dig[int32(kk)-1] = byte(tex.mem[p].hh().lh())
					q = p
					p = tex.mem[p].hh().rh
					tex.mem[q].pHh().rh = tex.avail
					tex.avail = q
				}
				f = tex.roundDecimals(k)
				if tex.curCmd != 10 {
					tex.backInput()
				}
			}
		}
	}
	if tex.curVal < 0 {
		negative = !negative
		tex.curVal = -tex.curVal
	}
	if inf {
		if tex.scanKeyword(311) {
			tex.curOrder = 1
			for tex.scanKeyword(108) {
				if tex.curOrder == 3 {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(705)
					tex.print(706)
					tex.helpPtr = 1
					tex.helpLine[0] = 707
					tex.error1()
				} else {
					tex.curOrder = byte(int32(tex.curOrder) + 1)
				}
			}
			goto label88
		}
	}
	saveCurVal = tex.curVal
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	if (tex.curCmd < 68) || (tex.curCmd > 89) {
		tex.backInput()
	} else {
		if mu {
			tex.scanSomethingInternal(3, false)
			if tex.curValLevel >= 2 {
				v = tex.mem[tex.curVal+1].int()
				tex.deleteGlueRef(uint16(tex.curVal))
				tex.curVal = v
			}
			if tex.curValLevel != 3 {
				tex.muError()
			}
		} else {
			tex.scanSomethingInternal(1, false)
		}
		v = tex.curVal
		goto label40
	}
	if mu {
		goto label45
	}
	if tex.scanKeyword(708) {
		v = tex.fontInfo[6+tex.paramBase[tex.eqtb[3934-1].hh().rh]].int()
	} else if tex.scanKeyword(709) {
		v = tex.fontInfo[5+tex.paramBase[tex.eqtb[3934-1].hh().rh]].int()
	} else {
		goto label45
	}
	tex.getXToken()
	if tex.curCmd != 10 {
		tex.backInput()
	}
label40:
	tex.curVal = tex.multAndAdd(saveCurVal, v, tex.xnOverD(v, f, 65536), 1073741823)
	goto label89
label45:
	if mu {
		if tex.scanKeyword(337) {
			goto label88
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(705)
			tex.print(710)
			tex.helpPtr = 4
			tex.helpLine[3] = 711
			tex.helpLine[2] = 712
			tex.helpLine[1] = 713
			tex.helpLine[0] = 714
			tex.error1()
			goto label88
		}
	}
	if tex.scanKeyword(704) {
		tex.prepareMag()
		if tex.eqtb[5280-1].int() != 1000 {
			tex.curVal = tex.xnOverD(tex.curVal, 1000, tex.eqtb[5280-1].int())
			f = (((1000 * f) + (65536 * tex.remainder)) / tex.eqtb[5280-1].int())
			tex.curVal = tex.curVal + (f / 65536)
			f = (f % 65536)
		}
	}
	if tex.scanKeyword(397) {
		goto label88
	}
	if tex.scanKeyword(715) {
		num = 7227
		denom = 100
	} else if tex.scanKeyword(716) {
		num = 12
		denom = 1
	} else if tex.scanKeyword(717) {
		num = 7227
		denom = 254
	} else if tex.scanKeyword(718) {
		num = 7227
		denom = 2540
	} else if tex.scanKeyword(719) {
		num = 7227
		denom = 7200
	} else if tex.scanKeyword(720) {
		num = 1238
		denom = 1157
	} else if tex.scanKeyword(721) {
		num = 14856
		denom = 1157
	} else if tex.scanKeyword(722) {
		goto label30
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(705)
		tex.print(723)
		tex.helpPtr = 6
		tex.helpLine[5] = 724
		tex.helpLine[4] = 725
		tex.helpLine[3] = 726
		tex.helpLine[2] = 712
		tex.helpLine[1] = 713
		tex.helpLine[0] = 714
		tex.error1()
		goto label32
	}
	tex.curVal = tex.xnOverD(tex.curVal, int32(num), int32(denom))
	f = (((int32(num) * f) + (65536 * tex.remainder)) / int32(denom))
	tex.curVal = tex.curVal + (f / 65536)
	f = (f % 65536)
label32:
label88:
	if tex.curVal >= 16384 {
		tex.arithError = true
	} else {
		tex.curVal = (tex.curVal * 65536) + f
	}
label30:
	tex.getXToken()
	if tex.curCmd != 10 {
		tex.backInput()
	}
label89:
	if tex.arithError || (iabs(tex.curVal) >= 1073741824) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(727)
		tex.helpPtr = 2
		tex.helpLine[1] = 728
		tex.helpLine[0] = 729
		tex.error1()
		tex.curVal = 1073741823
		tex.arithError = false
	}
	if negative {
		tex.curVal = -tex.curVal
	}
}

func (tex *Context) scanGlue(level byte) {
	var negative bool // boolean
	var q uint16      // 0..65535
	var mu bool       // boolean
	mu = (level == 3)
	negative = false
	for {
		for {
			tex.getXToken()
			if tex.curCmd != 10 {
				break
			}
		}
		if tex.curTok == 3117 {
			negative = !negative
			tex.curTok = 3115
		}
		if tex.curTok != 3115 {
			break
		}
	}
	if (tex.curCmd >= 68) && (tex.curCmd <= 89) {
		tex.scanSomethingInternal(level, negative)
		if tex.curValLevel >= 2 {
			if tex.curValLevel != level {
				tex.muError()
			}
			goto label10
		}
		if tex.curValLevel == 0 {
			tex.scanDimen(mu, false, true)
		} else if level == 3 {
			tex.muError()
		}
	} else {
		tex.backInput()
		tex.scanDimen(mu, false, false)
		if negative {
			tex.curVal = -tex.curVal
		}
	}
	q = tex.newSpec(0)
	*tex.mem[int32(q)+1].pInt() = tex.curVal
	if tex.scanKeyword(730) {
		tex.scanDimen(mu, true, false)
		*tex.mem[int32(q)+2].pInt() = tex.curVal
		*tex.mem[q].pHh().pB0() = tex.curOrder
	}
	if tex.scanKeyword(731) {
		tex.scanDimen(mu, true, false)
		*tex.mem[int32(q)+3].pInt() = tex.curVal
		*tex.mem[q].pHh().pB1() = tex.curOrder
	}
	tex.curVal = int32(q)
label10:
}

func (tex *Context) scanRuleSpec() (ret uint16) {
	var q uint16 // 0..65535
	q = tex.newRule()
	if tex.curCmd == 35 {
		*tex.mem[int32(q)+1].pInt() = 26214
	} else {
		*tex.mem[int32(q)+3].pInt() = 26214
		*tex.mem[int32(q)+2].pInt() = 0
	}
label21:
	if tex.scanKeyword(732) {
		tex.scanDimen(false, false, false)
		*tex.mem[int32(q)+1].pInt() = tex.curVal
		goto label21
	}
	if tex.scanKeyword(733) {
		tex.scanDimen(false, false, false)
		*tex.mem[int32(q)+3].pInt() = tex.curVal
		goto label21
	}
	if tex.scanKeyword(734) {
		tex.scanDimen(false, false, false)
		*tex.mem[int32(q)+2].pInt() = tex.curVal
		goto label21
	}
	ret = q
	return ret
}

func (tex *Context) strToks(b uint16) (ret uint16) {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	var t uint16 // 0..65535
	var k uint16 // 0..32000
	if int32(tex.poolPtr)+1 > poolSize {
		tex.overflow(257, poolSize-int32(tex.initPoolPtr))
	}
	p = 29997
	tex.mem[p].pHh().rh = 0
	k = b
	for k < tex.poolPtr {
		t = uint16(tex.strPool[k])
		if t == 32 {
			t = 2592
		} else {
			t = uint16(3072 + int32(t))
		}
		q = tex.avail
		if q == 0 {
			q = tex.getAvail()
		} else {
			tex.avail = tex.mem[q].hh().rh
			tex.mem[q].pHh().rh = 0
		}
		tex.mem[p].pHh().rh = q
		*tex.mem[q].pHh().pLh() = t
		p = q
		k = uint16(int32(k) + 1)
	}
	tex.poolPtr = b
	ret = p
	return ret
}

func (tex *Context) theToks() (ret uint16) {
	var oldSetting byte // 0..21
	var p, q, r uint16  // 0..65535
	var b uint16        // 0..32000
	tex.getXToken()
	tex.scanSomethingInternal(5, false)
	if tex.curValLevel >= 4 {
		p = 29997
		tex.mem[p].pHh().rh = 0
		if tex.curValLevel == 4 {
			q = tex.getAvail()
			tex.mem[p].pHh().rh = q
			*tex.mem[q].pHh().pLh() = uint16(4095 + tex.curVal)
			p = q
		} else if tex.curVal != 0 {
			r = tex.mem[tex.curVal].hh().rh
			for r != 0 {
				q = tex.avail
				if q == 0 {
					q = tex.getAvail()
				} else {
					tex.avail = tex.mem[q].hh().rh
					tex.mem[q].pHh().rh = 0
				}
				tex.mem[p].pHh().rh = q
				*tex.mem[q].pHh().pLh() = tex.mem[r].hh().lh()
				p = q
				r = tex.mem[r].hh().rh
			}
		}
		ret = p
	} else {
		oldSetting = tex.selector
		tex.selector = 21
		b = tex.poolPtr
		switch tex.curValLevel {
		case 0:
			tex.printInt(tex.curVal)
		case 1:
			tex.printScaled(tex.curVal)
			tex.print(397)
		case 2:
			tex.printSpec(tex.curVal, 397)
			tex.deleteGlueRef(uint16(tex.curVal))
		case 3:
			tex.printSpec(tex.curVal, 337)
			tex.deleteGlueRef(uint16(tex.curVal))
		}
		tex.selector = oldSetting
		ret = tex.strToks(b)
	}
	return ret
}

func (tex *Context) insTheToks() {
	tex.mem[29988].pHh().rh = tex.theToks()
	tex.beginTokenList(tex.mem[29997].hh().rh, 4)
}

func (tex *Context) convToks() {
	var oldSetting byte        // 0..21
	var c byte                 // 0..5
	var saveScannerStatus byte // 0..63
	var b uint16               // 0..32000
	c = byte(tex.curChr)
	switch c {
	case 0, 1:
		tex.scanInt()
	case 2, 3:
		saveScannerStatus = tex.scannerStatus
		tex.scannerStatus = 0
		tex.getToken()
		tex.scannerStatus = saveScannerStatus
	case 4:
		tex.scanFontIdent()
	case 5:
		if tex.jobName == 0 {
			tex.openLogFile()
		}
	}
	oldSetting = tex.selector
	tex.selector = 21
	b = tex.poolPtr
	switch c {
	case 0:
		tex.printInt(tex.curVal)
	case 1:
		tex.printRomanInt(tex.curVal)
	case 2:
		if tex.curCs != 0 {
			tex.sprintCs(tex.curCs)
		} else {
			tex.printChar(byte(tex.curChr))
		}
	case 3:
		tex.printMeaning()
	case 4:
		tex.print(int32(tex.fontName[tex.curVal]))
		if tex.fontSize[tex.curVal] != tex.fontDsize[tex.curVal] {
			tex.print(741)
			tex.printScaled(tex.fontSize[tex.curVal])
			tex.print(397)
		}
	case 5:
		tex.print(int32(tex.jobName))
	}
	tex.selector = oldSetting
	tex.mem[29988].pHh().rh = tex.strToks(b)
	tex.beginTokenList(tex.mem[29997].hh().rh, 4)
}

func (tex *Context) scanToks(macroDef, xpand bool) (ret uint16) {
	var t uint16         // 0..65535
	var s uint16         // 0..65535
	var p uint16         // 0..65535
	var q uint16         // 0..65535
	var unbalance uint16 // 0..65535
	var hashBrace uint16 // 0..65535
	if macroDef {
		tex.scannerStatus = 2
	} else {
		tex.scannerStatus = 5
	}
	tex.warningIndex = tex.curCs
	tex.defRef = tex.getAvail()
	*tex.mem[tex.defRef].pHh().pLh() = 0
	p = tex.defRef
	hashBrace = 0
	t = 3120
	if macroDef {
		for true {
		label22:
			tex.getToken()
			if tex.curTok < 768 {
				goto label31
			}
			if tex.curCmd == 6 {
				s = uint16(3328 + int32(tex.curChr))
				tex.getToken()
				if tex.curTok < 512 {
					hashBrace = tex.curTok
					q = tex.getAvail()
					tex.mem[p].pHh().rh = q
					*tex.mem[q].pHh().pLh() = tex.curTok
					p = q
					q = tex.getAvail()
					tex.mem[p].pHh().rh = q
					*tex.mem[q].pHh().pLh() = 3584
					p = q
					goto label30
				}
				if t == 3129 {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(744)
					tex.helpPtr = 2
					tex.helpLine[1] = 745
					tex.helpLine[0] = 746
					tex.error1()
					goto label22
				} else {
					t = uint16(int32(t) + 1)
					if tex.curTok != t {
						if tex.interaction == 3 {
						}
						tex.printNl(262)
						tex.print(747)
						tex.helpPtr = 2
						tex.helpLine[1] = 748
						tex.helpLine[0] = 749
						tex.backError()
					}
					tex.curTok = s
				}
			}
			q = tex.getAvail()
			tex.mem[p].pHh().rh = q
			*tex.mem[q].pHh().pLh() = tex.curTok
			p = q
		}
	label31:
		q = tex.getAvail()
		tex.mem[p].pHh().rh = q
		*tex.mem[q].pHh().pLh() = 3584
		p = q
		if tex.curCmd == 2 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(657)
			tex.alignState = tex.alignState + 1
			tex.helpPtr = 2
			tex.helpLine[1] = 742
			tex.helpLine[0] = 743
			tex.error1()
			goto label40
		}
	label30:
		;
	} else {
		tex.scanLeftBrace()
	}
	unbalance = 1
	for true {
		if xpand {
			for true {
				tex.getNext()
				if tex.curCmd <= 100 {
					goto label32
				}
				if tex.curCmd != 109 {
					tex.expand()
				} else {
					q = tex.theToks()
					if tex.mem[29997].hh().rh != 0 {
						tex.mem[p].pHh().rh = tex.mem[29997].hh().rh
						p = q
					}
				}
			}
		label32:
			tex.xToken()
		} else {
			tex.getToken()
		}
		if tex.curTok < 768 {
			if tex.curCmd < 2 {
				unbalance = uint16(int32(unbalance) + 1)
			} else {
				unbalance = uint16(int32(unbalance) - 1)
				if unbalance == 0 {
					goto label40
				}
			}
		} else if tex.curCmd == 6 {
			if macroDef {
				s = tex.curTok
				if xpand {
					tex.getXToken()
				} else {
					tex.getToken()
				}
				if tex.curCmd != 6 {
					if (tex.curTok <= 3120) || (tex.curTok > t) {
						if tex.interaction == 3 {
						}
						tex.printNl(262)
						tex.print(750)
						tex.sprintCs(tex.warningIndex)
						tex.helpPtr = 3
						tex.helpLine[2] = 751
						tex.helpLine[1] = 752
						tex.helpLine[0] = 753
						tex.backError()
						tex.curTok = s
					} else {
						tex.curTok = uint16(1232 + int32(tex.curChr))
					}
				}
			}
		}
		q = tex.getAvail()
		tex.mem[p].pHh().rh = q
		*tex.mem[q].pHh().pLh() = tex.curTok
		p = q
	}
label40:
	tex.scannerStatus = 0
	if hashBrace != 0 {
		q = tex.getAvail()
		tex.mem[p].pHh().rh = q
		*tex.mem[q].pHh().pLh() = hashBrace
		p = q
	}
	ret = p
	return ret
}

func (tex *Context) readToks(n int32, r uint16) {
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	var s int32  // integer
	var m byte   // 0..63
	tex.scannerStatus = 2
	tex.warningIndex = r
	tex.defRef = tex.getAvail()
	*tex.mem[tex.defRef].pHh().pLh() = 0
	p = tex.defRef
	q = tex.getAvail()
	tex.mem[p].pHh().rh = q
	*tex.mem[q].pHh().pLh() = 3584
	p = q
	if (n < 0) || (n > 15) {
		m = 16
	} else {
		m = byte(n)
	}
	s = tex.alignState
	tex.alignState = 1000000
	for {
		tex.beginFileReading()
		tex.curInput.nameField = uint16(int32(m) + 1)
		if tex.readOpen[m] == 2 {
			if tex.interaction > 1 {
				if n < 0 {
					tex.print(338)
					tex.termInput()
				} else {
					tex.printLn()
					tex.sprintCs(r)
					tex.print(61)
					tex.termInput()
					n = -1
				}
			} else {
				tex.fatalError(754)
			}
		} else if tex.readOpen[m] == 1 {
			if tex.inputLn(&tex.readFile[m], false) {
				tex.readOpen[m] = 0
			} else {
				tex.aClose(&tex.readFile[m])
				tex.readOpen[m] = 2
			}
		} else {
			if !tex.inputLn(&tex.readFile[m], true) {
				tex.aClose(&tex.readFile[m])
				tex.readOpen[m] = 2
				if tex.alignState != 1000000 {
					tex.runaway()
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(755)
					tex.printEsc(534)
					tex.helpPtr = 1
					tex.helpLine[0] = 756
					tex.alignState = 1000000
					tex.curInput.limitField = 0
					tex.error1()
				}
			}
		}
		tex.curInput.limitField = tex.last
		if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
			tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - 1)
		} else {
			tex.buffer[tex.curInput.limitField] = byte(tex.eqtb[5311-1].int())
		}
		tex.first = uint16(int32(tex.curInput.limitField) + 1)
		tex.curInput.locField = tex.curInput.startField
		tex.curInput.stateField = 33
		for true {
			tex.getToken()
			if tex.curTok == 0 {
				goto label30
			}
			if tex.alignState < 1000000 {
				for {
					tex.getToken()
					if tex.curTok == 0 {
						break
					}
				}
				tex.alignState = 1000000
				goto label30
			}
			q = tex.getAvail()
			tex.mem[p].pHh().rh = q
			*tex.mem[q].pHh().pLh() = tex.curTok
			p = q
		}
	label30:
		tex.endFileReading()
		if tex.alignState == 1000000 {
			break
		}
	}
	tex.curVal = int32(tex.defRef)
	tex.scannerStatus = 0
	tex.alignState = s
}

func (tex *Context) passText() {
	var l int32                // integer
	var saveScannerStatus byte // 0..63
	saveScannerStatus = tex.scannerStatus
	tex.scannerStatus = 1
	l = 0
	tex.skipLine = tex.line
	for true {
		tex.getNext()
		if tex.curCmd == 106 {
			if l == 0 {
				goto label30
			}
			if tex.curChr == 2 {
				l = l - 1
			}
		} else if tex.curCmd == 105 {
			l = l + 1
		}
	}
label30:
	tex.scannerStatus = saveScannerStatus
}

func (tex *Context) changeIfLimit(l byte, p uint16) {
	var q uint16 // 0..65535
	if p == tex.condPtr {
		tex.ifLimit = l
	} else {
		q = tex.condPtr
		for true {
			if q == 0 {
				tex.confusion(757)
			}
			if tex.mem[q].hh().rh == p {
				*tex.mem[q].pHh().pB0() = l
				goto label10
			}
			q = tex.mem[q].hh().rh
		}
	}
label10:
}

func (tex *Context) conditional() {
	var b bool                 // boolean
	var r byte                 // 60..62
	var m, n int32             // integer
	var p, q uint16            // 0..65535
	var saveScannerStatus byte // 0..63
	var saveCondPtr uint16     // 0..65535
	var thisIf byte            // 0..63
	p = tex.getNode(2)
	tex.mem[p].pHh().rh = tex.condPtr
	*tex.mem[p].pHh().pB0() = tex.ifLimit
	*tex.mem[p].pHh().pB1() = tex.curIf
	*tex.mem[int32(p)+1].pInt() = tex.ifLine
	tex.condPtr = p
	tex.curIf = byte(tex.curChr)
	tex.ifLimit = 1
	tex.ifLine = tex.line
	saveCondPtr = tex.condPtr
	thisIf = byte(tex.curChr)
	switch thisIf {
	case 0, 1:
		tex.getXToken()
		if tex.curCmd == 0 {
			if tex.curChr == 257 {
				tex.curCmd = 13
				tex.curChr = uint16(int32(tex.curTok) - 4096)
			}
		}
		if (tex.curCmd > 13) || (tex.curChr > 255) {
			m = 0
			n = 256
		} else {
			m = int32(tex.curCmd)
			n = int32(tex.curChr)
		}
		tex.getXToken()
		if tex.curCmd == 0 {
			if tex.curChr == 257 {
				tex.curCmd = 13
				tex.curChr = uint16(int32(tex.curTok) - 4096)
			}
		}
		if (tex.curCmd > 13) || (tex.curChr > 255) {
			tex.curCmd = 0
			tex.curChr = 256
		}
		if thisIf == 0 {
			b = (n == int32(tex.curChr))
		} else {
			b = (m == int32(tex.curCmd))
		}
	case 2, 3:
		if thisIf == 2 {
			tex.scanInt()
		} else {
			tex.scanDimen(false, false, false)
		}
		n = tex.curVal
		for {
			tex.getXToken()
			if tex.curCmd != 10 {
				break
			}
		}
		if (tex.curTok >= 3132) && (tex.curTok <= 3134) {
			r = byte(int32(tex.curTok) - 3072)
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(781)
			tex.printCmdChr(105, uint16(thisIf))
			tex.helpPtr = 1
			tex.helpLine[0] = 782
			tex.backError()
			r = 61
		}
		if thisIf == 2 {
			tex.scanInt()
		} else {
			tex.scanDimen(false, false, false)
		}
		switch r {
		case 60:
			b = (n < tex.curVal)
		case 61:
			b = (n == tex.curVal)
		case 62:
			b = (n > tex.curVal)
		}
	case 4:
		tex.scanInt()
		b = odd(tex.curVal)
	case 5:
		b = (iabs(int32(tex.curList.modeField)) == 1)
	case 6:
		b = (iabs(int32(tex.curList.modeField)) == 102)
	case 7:
		b = (iabs(int32(tex.curList.modeField)) == 203)
	case 8:
		b = (tex.curList.modeField < 0)
	case 9, 10, 11:
		tex.scanEightBitInt()
		p = tex.eqtb[3678+tex.curVal-1].hh().rh
		if thisIf == 9 {
			b = (p == 0)
		} else if p == 0 {
			b = false
		} else if thisIf == 10 {
			b = (tex.mem[p].hh().b0() == 0)
		} else {
			b = (tex.mem[p].hh().b0() == 1)
		}
	case 12:
		saveScannerStatus = tex.scannerStatus
		tex.scannerStatus = 0
		tex.getNext()
		n = int32(tex.curCs)
		p = uint16(tex.curCmd)
		q = tex.curChr
		tex.getNext()
		if uint16(tex.curCmd) != p {
			b = false
		} else if tex.curCmd < 111 {
			b = (tex.curChr == q)
		} else {
			p = tex.mem[tex.curChr].hh().rh
			q = tex.mem[tex.eqtb[n-1].hh().rh].hh().rh
			if p == q {
				b = true
			} else {
				for (p != 0) && (q != 0) {
					if tex.mem[p].hh().lh() != tex.mem[q].hh().lh() {
						p = 0
					} else {
						p = tex.mem[p].hh().rh
						q = tex.mem[q].hh().rh
					}
				}
				b = ((p == 0) && (q == 0))
			}
		}
		tex.scannerStatus = saveScannerStatus
	case 13:
		tex.scanFourBitInt()
		b = (tex.readOpen[tex.curVal] == 2)
	case 14:
		b = true
	case 15:
		b = false
	case 16:
		tex.scanInt()
		n = tex.curVal
		if tex.eqtb[5299-1].int() > 1 {
			tex.beginDiagnostic()
			tex.print(783)
			tex.printInt(n)
			tex.printChar(125)
			tex.endDiagnostic(false)
		}
		for n != 0 {
			tex.passText()
			if tex.condPtr == saveCondPtr {
				if tex.curChr == 4 {
					n = n - 1
				} else {
					goto label50
				}
			} else if tex.curChr == 2 {
				p = tex.condPtr
				tex.ifLine = tex.mem[int32(p)+1].int()
				tex.curIf = tex.mem[p].hh().b1()
				tex.ifLimit = tex.mem[p].hh().b0()
				tex.condPtr = tex.mem[p].hh().rh
				tex.freeNode(p, 2)
			}
		}
		tex.changeIfLimit(4, saveCondPtr)
		goto label10
	}
	if tex.eqtb[5299-1].int() > 1 {
		tex.beginDiagnostic()
		if b {
			tex.print(779)
		} else {
			tex.print(780)
		}
		tex.endDiagnostic(false)
	}
	if b {
		tex.changeIfLimit(3, saveCondPtr)
		goto label10
	}
	for true {
		tex.passText()
		if tex.condPtr == saveCondPtr {
			if tex.curChr != 4 {
				goto label50
			}
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(777)
			tex.printEsc(775)
			tex.helpPtr = 1
			tex.helpLine[0] = 778
			tex.error1()
		} else if tex.curChr == 2 {
			p = tex.condPtr
			tex.ifLine = tex.mem[int32(p)+1].int()
			tex.curIf = tex.mem[p].hh().b1()
			tex.ifLimit = tex.mem[p].hh().b0()
			tex.condPtr = tex.mem[p].hh().rh
			tex.freeNode(p, 2)
		}
	}
label50:
	if tex.curChr == 2 {
		p = tex.condPtr
		tex.ifLine = tex.mem[int32(p)+1].int()
		tex.curIf = tex.mem[p].hh().b1()
		tex.ifLimit = tex.mem[p].hh().b0()
		tex.condPtr = tex.mem[p].hh().rh
		tex.freeNode(p, 2)
	} else {
		tex.ifLimit = 2
	}
label10:
	;
}

func (tex *Context) beginName() {
	tex.areaDelimiter = 0
	tex.extDelimiter = 0
}

func (tex *Context) moreName(c byte) (ret bool) {
	if c == 32 {
		ret = false
	} else {
		if int32(tex.poolPtr)+1 > poolSize {
			tex.overflow(257, poolSize-int32(tex.initPoolPtr))
		}
		tex.strPool[tex.poolPtr] = c
		tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
		if (c == 62) || (c == 58) {
			tex.areaDelimiter = uint16((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])))
			tex.extDelimiter = 0
		} else if (c == 46) && (tex.extDelimiter == 0) {
			tex.extDelimiter = uint16((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])))
		}
		ret = true
	}
	return ret
}

func (tex *Context) endName() {
	if int32(tex.strPtr)+3 > maxStrings {
		tex.overflow(258, maxStrings-int32(tex.initStrPtr))
	}
	if tex.areaDelimiter == 0 {
		tex.curArea = 338
	} else {
		tex.curArea = tex.strPtr
		tex.strStart[int32(tex.strPtr)+1] = uint16(int32(tex.strStart[tex.strPtr]) + int32(tex.areaDelimiter))
		tex.strPtr = uint16(int32(tex.strPtr) + 1)
	}
	if tex.extDelimiter == 0 {
		tex.curExt = 338
		tex.curName = tex.makeString()
	} else {
		tex.curName = tex.strPtr
		tex.strStart[int32(tex.strPtr)+1] = uint16(int32(tex.strStart[tex.strPtr]) + int32(tex.extDelimiter) - int32(tex.areaDelimiter) - 1)
		tex.strPtr = uint16(int32(tex.strPtr) + 1)
		tex.curExt = tex.makeString()
	}
}

func (tex *Context) packFileName(n, a, e uint16) {
	var k int32  // integer
	var c byte   // 0..255
	var j uint16 // 0..32000
	k = 0
	for _i := int64(tex.strStart[a]); _i <= int64(int32(tex.strStart[int32(a)+1])-1); _i++ {
		j = uint16(_i)
		c = tex.strPool[j]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	for _i := int64(tex.strStart[n]); _i <= int64(int32(tex.strStart[int32(n)+1])-1); _i++ {
		j = uint16(_i)
		c = tex.strPool[j]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	for _i := int64(tex.strStart[e]); _i <= int64(int32(tex.strStart[int32(e)+1])-1); _i++ {
		j = uint16(_i)
		c = tex.strPool[j]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	if k <= fileNameSize {
		tex.nameLength = byte(k)
	} else {
		tex.nameLength = fileNameSize
	}
	for _i := int64(int32(tex.nameLength) + 1); _i <= int64(fileNameSize); _i++ {
		k = int32(_i)
		tex.nameOfFile[k-1] = ' '
	}
}

func (tex *Context) packBufferedName(n byte, a, b int32) {
	var k int32 // integer
	var c byte  // 0..255
	var j int32 // integer
	if int32(n)+b-a+5 > fileNameSize {
		b = a + fileNameSize - int32(n) - 5
	}
	k = 0
	for _i := int64(1); _i <= int64(n); _i++ {
		j = int32(_i)
		c = tex.xord[tex.TEXFormatDefault[j-1]]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	for _i := int64(a); _i <= int64(b); _i++ {
		j = int32(_i)
		c = tex.buffer[j]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	for _i := int64(17); _i <= int64(20); _i++ {
		j = int32(_i)
		c = tex.xord[tex.TEXFormatDefault[j-1]]
		k = k + 1
		if k <= fileNameSize {
			tex.nameOfFile[k-1] = tex.xchr[c]
		}
	}
	if k <= fileNameSize {
		tex.nameLength = byte(k)
	} else {
		tex.nameLength = fileNameSize
	}
	for _i := int64(int32(tex.nameLength) + 1); _i <= int64(fileNameSize); _i++ {
		k = int32(_i)
		tex.nameOfFile[k-1] = ' '
	}
}

func (tex *Context) makeNameString() (ret uint16) {
	var k byte // 1..40
	if ((int32(tex.poolPtr) + int32(tex.nameLength)) > poolSize) || (tex.strPtr == maxStrings) || ((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])) > 0) {
		ret = 63
	} else {
		for _i := int64(1); _i <= int64(tex.nameLength); _i++ {
			k = byte(_i)
			tex.strPool[tex.poolPtr] = tex.xord[tex.nameOfFile[k-1]]
			tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
		}
		ret = tex.makeString()
	}
	return ret
}

func (tex *Context) aMakeNameString(f *pasFile) (ret uint16) {
	ret = tex.makeNameString()
	return ret
}

func (tex *Context) bMakeNameString(f *pasFile) (ret uint16) {
	ret = tex.makeNameString()
	return ret
}

func (tex *Context) wMakeNameString(f *pasFile) (ret uint16) {
	ret = tex.makeNameString()
	return ret
}

func (tex *Context) scanFileName() {
	tex.nameInProgress = true
	tex.beginName()
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	for true {
		if (tex.curCmd > 12) || (tex.curChr > 255) {
			tex.backInput()
			goto label30
		}
		if !tex.moreName(byte(tex.curChr)) {
			goto label30
		}
		tex.getXToken()
	}
label30:
	tex.endName()
	tex.nameInProgress = false
}

func (tex *Context) packJobName(s uint16) {
	tex.curArea = 338
	tex.curExt = s
	tex.curName = tex.jobName
	tex.packFileName(tex.curName, tex.curArea, tex.curExt)
}

func (tex *Context) promptFileName(s, e uint16) {
	var k uint16 // 0..500
	if tex.interaction == 2 {
	}
	if s == 787 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(788)
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(789)
	}
	tex.printFileName(int32(tex.curName), int32(tex.curArea), int32(tex.curExt))
	tex.print(790)
	if e == 791 {
		tex.showContext()
	}
	tex.printNl(792)
	tex.print(int32(s))
	if tex.interaction < 2 {
		tex.fatalError(793)
	}
	breakIn(&tex.termIn, true)
	tex.print(568)
	tex.termInput()
	tex.beginName()
	k = tex.first
	for (tex.buffer[k] == 32) && (k < tex.last) {
		k = uint16(int32(k) + 1)
	}
	for true {
		if k == tex.last {
			goto label30
		}
		if !tex.moreName(tex.buffer[k]) {
			goto label30
		}
		k = uint16(int32(k) + 1)
	}
label30:
	tex.endName()
	if tex.curExt == 338 {
		tex.curExt = e
	}
	tex.packFileName(tex.curName, tex.curArea, tex.curExt)
}

func (tex *Context) openLogFile() {
	var oldSetting byte // 0..21
	var k uint16        // 0..500
	var l uint16        // 0..500
	var months [36]byte // array[1..36] of char
	oldSetting = tex.selector
	if tex.jobName == 0 {
		tex.jobName = 796
	}
	tex.packJobName(797)
	for !tex.aOpenOut(&tex.logFile) {
		tex.selector = 17
		tex.promptFileName(799, 797)
	}
	tex.logName = tex.aMakeNameString(&tex.logFile)
	tex.selector = 18
	tex.logOpened = true
	write(&tex.logFile, "This is TeX, Version 3.141592653")
	tex.slowPrint(int32(tex.formatIdent))
	tex.print(800)
	tex.printInt(pasSysDay())
	tex.printChar(32)
	setString(months[:], "JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC")
	for _i := int64((3 * pasSysMonth()) - 2); _i <= int64((3 * pasSysMonth())); _i++ {
		k = uint16(_i)
		write(&tex.logFile, months[k-1])
	}
	tex.printChar(32)
	tex.printInt(pasSysYear())
	tex.printChar(32)
	tex.printTwo((pasSysTime() / 60))
	tex.printChar(58)
	tex.printTwo((pasSysTime() % 60))
	tex.inputStack[tex.inputPtr] = tex.curInput
	tex.printNl(798)
	l = tex.inputStack[0].limitField
	if int32(tex.buffer[l]) == tex.eqtb[5311-1].int() {
		l = uint16(int32(l) - 1)
	}
	for _i := int64(1); _i <= int64(l); _i++ {
		k = uint16(_i)
		tex.print(int32(tex.buffer[k]))
	}
	tex.printLn()
	tex.selector = byte(int32(oldSetting) + 2)
}

func (tex *Context) startInput() {
	tex.scanFileName()
	if tex.curExt == 338 {
		tex.curExt = 791
	}
	tex.packFileName(tex.curName, tex.curArea, tex.curExt)
	for true {
		tex.beginFileReading()
		if tex.aOpenIn(&tex.inputFile[tex.curInput.indexField-1]) {
			goto label30
		}
		if tex.curArea == 338 {
			tex.packFileName(tex.curName, 784, tex.curExt)
			if tex.aOpenIn(&tex.inputFile[tex.curInput.indexField-1]) {
				goto label30
			}
		}
		tex.endFileReading()
		tex.promptFileName(787, 791)
	}
label30:
	tex.curInput.nameField = tex.aMakeNameString(&tex.inputFile[tex.curInput.indexField-1])
	if tex.jobName == 0 {
		tex.jobName = tex.curName
		tex.openLogFile()
	}
	if int32(tex.termOffset)+(int32(tex.strStart[int32(tex.curInput.nameField)+1])-int32(tex.strStart[tex.curInput.nameField])) > maxPrintLine-2 {
		tex.printLn()
	} else if (tex.termOffset > 0) || (tex.fileOffset > 0) {
		tex.printChar(32)
	}
	tex.printChar(40)
	tex.openParens = byte(int32(tex.openParens) + 1)
	tex.slowPrint(int32(tex.curInput.nameField))
	break1(&tex.termOut)
	tex.curInput.stateField = 33
	if int32(tex.curInput.nameField) == int32(tex.strPtr)-1 {
		tex.strPtr = uint16(int32(tex.strPtr) - 1)
		tex.poolPtr = tex.strStart[tex.strPtr]
		tex.curInput.nameField = tex.curName
	}
	tex.line = 1
	if tex.inputLn(&tex.inputFile[tex.curInput.indexField-1], false) {
	}
	tex.firmUpTheLine()
	if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
		tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - 1)
	} else {
		tex.buffer[tex.curInput.limitField] = byte(tex.eqtb[5311-1].int())
	}
	tex.first = uint16(int32(tex.curInput.limitField) + 1)
	tex.curInput.locField = tex.curInput.startField
}

func (tex *Context) readFontInfo(u uint16, nom, aire uint16, s int32) (ret byte) {
	var k uint16                                              // 0..20000
	var fileOpened bool                                       // boolean
	var lf, lh, bc, ec, nw, nh, nd, ni, nl, nk, ne, np uint16 // 0..65535
	var f byte                                                // 0..75
	var g byte                                                // 0..75
	var a, b, c, d byte                                       // 0..255
	var qw fourQuarters                                       // record fourQuarters
	var sw int32                                              // integer
	var bchLabel int32                                        // integer
	var bchar uint16                                          // 0..256
	var z int32                                               // integer
	var alpha int32                                           // integer
	var beta byte                                             // 1..16
	g = 0
	fileOpened = false
	if aire == 338 {
		tex.packFileName(nom, 785, 811)
	} else {
		tex.packFileName(nom, aire, 811)
	}
	if !tex.bOpenIn(&tex.tfmFile) {
		goto label11
	}
	fileOpened = true
	lf = uint16(tex.tfmFile.byte())
	if lf > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	lf = uint16((int32(lf) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	lh = uint16(tex.tfmFile.byte())
	if lh > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	lh = uint16((int32(lh) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	bc = uint16(tex.tfmFile.byte())
	if bc > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	bc = uint16((int32(bc) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	ec = uint16(tex.tfmFile.byte())
	if ec > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	ec = uint16((int32(ec) * 256) + int32(tex.tfmFile.byte()))
	if (int32(bc) > (int32(ec) + 1)) || (ec > 255) {
		goto label11
	}
	if bc > 255 {
		bc = 1
		ec = 0
	}
	get(&tex.tfmFile)
	nw = uint16(tex.tfmFile.byte())
	if nw > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	nw = uint16((int32(nw) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	nh = uint16(tex.tfmFile.byte())
	if nh > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	nh = uint16((int32(nh) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	nd = uint16(tex.tfmFile.byte())
	if nd > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	nd = uint16((int32(nd) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	ni = uint16(tex.tfmFile.byte())
	if ni > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	ni = uint16((int32(ni) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	nl = uint16(tex.tfmFile.byte())
	if nl > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	nl = uint16((int32(nl) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	nk = uint16(tex.tfmFile.byte())
	if nk > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	nk = uint16((int32(nk) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	ne = uint16(tex.tfmFile.byte())
	if ne > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	ne = uint16((int32(ne) * 256) + int32(tex.tfmFile.byte()))
	get(&tex.tfmFile)
	np = uint16(tex.tfmFile.byte())
	if np > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	np = uint16((int32(np) * 256) + int32(tex.tfmFile.byte()))
	if int32(lf) != 6+int32(lh)+(int32(ec)-int32(bc)+1)+int32(nw)+int32(nh)+int32(nd)+int32(ni)+int32(nl)+int32(nk)+int32(ne)+int32(np) {
		goto label11
	}
	if (nw == 0) || (nh == 0) || (nd == 0) || (ni == 0) {
		goto label11
	}
	lf = uint16(int32(lf) - 6 - int32(lh))
	if np < 7 {
		lf = uint16(int32(lf) + 7 - int32(np))
	}
	if (tex.fontPtr == fontMax) || ((int32(tex.fmemPtr) + int32(lf)) > fontMemSize) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(802)
		tex.sprintCs(u)
		tex.printChar(61)
		tex.printFileName(int32(nom), int32(aire), 338)
		if s >= 0 {
			tex.print(741)
			tex.printScaled(s)
			tex.print(397)
		} else if s != -1000 {
			tex.print(803)
			tex.printInt(-s)
		}
		tex.print(812)
		tex.helpPtr = 4
		tex.helpLine[3] = 813
		tex.helpLine[2] = 814
		tex.helpLine[1] = 815
		tex.helpLine[0] = 816
		tex.error1()
		goto label30
	}
	f = byte(int32(tex.fontPtr) + 1)
	tex.charBase[f] = int32(tex.fmemPtr) - int32(bc)
	tex.widthBase[f] = tex.charBase[f] + int32(ec) + 1
	tex.heightBase[f] = tex.widthBase[f] + int32(nw)
	tex.depthBase[f] = tex.heightBase[f] + int32(nh)
	tex.italicBase[f] = tex.depthBase[f] + int32(nd)
	tex.ligKernBase[f] = tex.italicBase[f] + int32(ni)
	tex.kernBase[f] = tex.ligKernBase[f] + int32(nl) - (256 * 128)
	tex.extenBase[f] = tex.kernBase[f] + (256 * 128) + int32(nk)
	tex.paramBase[f] = tex.extenBase[f] + int32(ne)
	if lh < 2 {
		goto label11
	}
	get(&tex.tfmFile)
	a = tex.tfmFile.byte()
	qw.b0 = byte(int32(a) + 0)
	get(&tex.tfmFile)
	b = tex.tfmFile.byte()
	qw.b1 = byte(int32(b) + 0)
	get(&tex.tfmFile)
	c = tex.tfmFile.byte()
	qw.b2 = byte(int32(c) + 0)
	get(&tex.tfmFile)
	d = tex.tfmFile.byte()
	qw.b3 = byte(int32(d) + 0)
	tex.fontCheck[f] = qw
	get(&tex.tfmFile)
	z = int32(tex.tfmFile.byte())
	if z > 127 {
		goto label11
	}
	get(&tex.tfmFile)
	z = (z * 256) + int32(tex.tfmFile.byte())
	get(&tex.tfmFile)
	z = (z * 256) + int32(tex.tfmFile.byte())
	get(&tex.tfmFile)
	z = (z * 16) + (int32(tex.tfmFile.byte()) / 16)
	if z < 65536 {
		goto label11
	}
	for lh > 2 {
		get(&tex.tfmFile)
		get(&tex.tfmFile)
		get(&tex.tfmFile)
		get(&tex.tfmFile)
		lh = uint16(int32(lh) - 1)
	}
	tex.fontDsize[f] = z
	if s != -1000 {
		if s >= 0 {
			z = s
		} else {
			z = tex.xnOverD(z, -s, 1000)
		}
	}
	tex.fontSize[f] = z
	for _i := int64(tex.fmemPtr); _i <= int64(tex.widthBase[f]-1); _i++ {
		k = uint16(_i)
		get(&tex.tfmFile)
		a = tex.tfmFile.byte()
		qw.b0 = byte(int32(a) + 0)
		get(&tex.tfmFile)
		b = tex.tfmFile.byte()
		qw.b1 = byte(int32(b) + 0)
		get(&tex.tfmFile)
		c = tex.tfmFile.byte()
		qw.b2 = byte(int32(c) + 0)
		get(&tex.tfmFile)
		d = tex.tfmFile.byte()
		qw.b3 = byte(int32(d) + 0)
		*tex.fontInfo[k].pQqqq() = qw
		if (uint16(a) >= nw) || ((int32(b) / 16) >= int32(nh)) || ((int32(b) % 16) >= int32(nd)) || ((int32(c) / 4) >= int32(ni)) {
			goto label11
		}
		switch int32(c) % 4 {
		case 1:
			if uint16(d) >= nl {
				goto label11
			}
		case 3:
			if uint16(d) >= ne {
				goto label11
			}
		case 2:
			if (uint16(d) < bc) || (uint16(d) > ec) {
				goto label11
			}
			for int32(d) < int32(k)+int32(bc)-int32(tex.fmemPtr) {
				qw = tex.fontInfo[tex.charBase[f]+int32(d)].qqqq()
				if ((int32(qw.b2) - 0) % 4) != 2 {
					goto label45
				}
				d = byte(int32(qw.b3) - 0)
			}
			if int32(d) == int32(k)+int32(bc)-int32(tex.fmemPtr) {
				goto label11
			}
		label45:
			;
		default:
		}
	}
	alpha = 16
	for z >= 8388608 {
		z = (z / 2)
		alpha = alpha + alpha
	}
	beta = byte((256 / alpha))
	alpha = (alpha * z)
	for _i := int64(tex.widthBase[f]); _i <= int64(tex.ligKernBase[f]-1); _i++ {
		k = uint16(_i)
		get(&tex.tfmFile)
		a = tex.tfmFile.byte()
		get(&tex.tfmFile)
		b = tex.tfmFile.byte()
		get(&tex.tfmFile)
		c = tex.tfmFile.byte()
		get(&tex.tfmFile)
		d = tex.tfmFile.byte()
		sw = ((((((int32(d) * z) / 256) + (int32(c) * z)) / 256) + (int32(b) * z)) / int32(beta))
		if a == 0 {
			*tex.fontInfo[k].pInt() = sw
		} else if a == 255 {
			*tex.fontInfo[k].pInt() = sw - alpha
		} else {
			goto label11
		}
	}
	if tex.fontInfo[tex.widthBase[f]].int() != 0 {
		goto label11
	}
	if tex.fontInfo[tex.heightBase[f]].int() != 0 {
		goto label11
	}
	if tex.fontInfo[tex.depthBase[f]].int() != 0 {
		goto label11
	}
	if tex.fontInfo[tex.italicBase[f]].int() != 0 {
		goto label11
	}
	bchLabel = 32767
	bchar = 256
	if nl > 0 {
		for _i := int64(tex.ligKernBase[f]); _i <= int64(tex.kernBase[f]+(256*128)-1); _i++ {
			k = uint16(_i)
			get(&tex.tfmFile)
			a = tex.tfmFile.byte()
			qw.b0 = byte(int32(a) + 0)
			get(&tex.tfmFile)
			b = tex.tfmFile.byte()
			qw.b1 = byte(int32(b) + 0)
			get(&tex.tfmFile)
			c = tex.tfmFile.byte()
			qw.b2 = byte(int32(c) + 0)
			get(&tex.tfmFile)
			d = tex.tfmFile.byte()
			qw.b3 = byte(int32(d) + 0)
			*tex.fontInfo[k].pQqqq() = qw
			if a > 128 {
				if (256*int32(c))+int32(d) >= int32(nl) {
					goto label11
				}
				if a == 255 {
					if int32(k) == tex.ligKernBase[f] {
						bchar = uint16(b)
					}
				}
			} else {
				if uint16(b) != bchar {
					if (uint16(b) < bc) || (uint16(b) > ec) {
						goto label11
					}
					qw = tex.fontInfo[tex.charBase[f]+int32(b)].qqqq()
					if !(qw.b0 > 0) {
						goto label11
					}
				}
				if c < 128 {
					if (uint16(d) < bc) || (uint16(d) > ec) {
						goto label11
					}
					qw = tex.fontInfo[tex.charBase[f]+int32(d)].qqqq()
					if !(qw.b0 > 0) {
						goto label11
					}
				} else if (256*(int32(c)-128))+int32(d) >= int32(nk) {
					goto label11
				}
				if a < 128 {
					if int32(k)-tex.ligKernBase[f]+int32(a)+1 >= int32(nl) {
						goto label11
					}
				}
			}
		}
		if a == 255 {
			bchLabel = (256 * int32(c)) + int32(d)
		}
	}
	for _i := int64(tex.kernBase[f] + (256 * 128)); _i <= int64(tex.extenBase[f]-1); _i++ {
		k = uint16(_i)
		get(&tex.tfmFile)
		a = tex.tfmFile.byte()
		get(&tex.tfmFile)
		b = tex.tfmFile.byte()
		get(&tex.tfmFile)
		c = tex.tfmFile.byte()
		get(&tex.tfmFile)
		d = tex.tfmFile.byte()
		sw = ((((((int32(d) * z) / 256) + (int32(c) * z)) / 256) + (int32(b) * z)) / int32(beta))
		if a == 0 {
			*tex.fontInfo[k].pInt() = sw
		} else if a == 255 {
			*tex.fontInfo[k].pInt() = sw - alpha
		} else {
			goto label11
		}
	}
	for _i := int64(tex.extenBase[f]); _i <= int64(tex.paramBase[f]-1); _i++ {
		k = uint16(_i)
		get(&tex.tfmFile)
		a = tex.tfmFile.byte()
		qw.b0 = byte(int32(a) + 0)
		get(&tex.tfmFile)
		b = tex.tfmFile.byte()
		qw.b1 = byte(int32(b) + 0)
		get(&tex.tfmFile)
		c = tex.tfmFile.byte()
		qw.b2 = byte(int32(c) + 0)
		get(&tex.tfmFile)
		d = tex.tfmFile.byte()
		qw.b3 = byte(int32(d) + 0)
		*tex.fontInfo[k].pQqqq() = qw
		if a != 0 {
			if (uint16(a) < bc) || (uint16(a) > ec) {
				goto label11
			}
			qw = tex.fontInfo[tex.charBase[f]+int32(a)].qqqq()
			if !(qw.b0 > 0) {
				goto label11
			}
		}
		if b != 0 {
			if (uint16(b) < bc) || (uint16(b) > ec) {
				goto label11
			}
			qw = tex.fontInfo[tex.charBase[f]+int32(b)].qqqq()
			if !(qw.b0 > 0) {
				goto label11
			}
		}
		if c != 0 {
			if (uint16(c) < bc) || (uint16(c) > ec) {
				goto label11
			}
			qw = tex.fontInfo[tex.charBase[f]+int32(c)].qqqq()
			if !(qw.b0 > 0) {
				goto label11
			}
		}
		if (uint16(d) < bc) || (uint16(d) > ec) {
			goto label11
		}
		qw = tex.fontInfo[tex.charBase[f]+int32(d)].qqqq()
		if !(qw.b0 > 0) {
			goto label11
		}
	}
	for _i := int64(1); _i <= int64(np); _i++ {
		k = uint16(_i)
		if k == 1 {
			get(&tex.tfmFile)
			sw = int32(tex.tfmFile.byte())
			if sw > 127 {
				sw = sw - 256
			}
			get(&tex.tfmFile)
			sw = (sw * 256) + int32(tex.tfmFile.byte())
			get(&tex.tfmFile)
			sw = (sw * 256) + int32(tex.tfmFile.byte())
			get(&tex.tfmFile)
			*tex.fontInfo[tex.paramBase[f]].pInt() = (sw * 16) + (int32(tex.tfmFile.byte()) / 16)
		} else {
			get(&tex.tfmFile)
			a = tex.tfmFile.byte()
			get(&tex.tfmFile)
			b = tex.tfmFile.byte()
			get(&tex.tfmFile)
			c = tex.tfmFile.byte()
			get(&tex.tfmFile)
			d = tex.tfmFile.byte()
			sw = ((((((int32(d) * z) / 256) + (int32(c) * z)) / 256) + (int32(b) * z)) / int32(beta))
			if a == 0 {
				*tex.fontInfo[tex.paramBase[f]+int32(k)-1].pInt() = sw
			} else if a == 255 {
				*tex.fontInfo[tex.paramBase[f]+int32(k)-1].pInt() = sw - alpha
			} else {
				goto label11
			}
		}
	}
	if eof(&tex.tfmFile) {
		goto label11
	}
	for _i := int64(int32(np) + 1); _i <= int64(7); _i++ {
		k = uint16(_i)
		*tex.fontInfo[tex.paramBase[f]+int32(k)-1].pInt() = 0
	}
	if np >= 7 {
		tex.fontParams[f] = np
	} else {
		tex.fontParams[f] = 7
	}
	tex.hyphenChar[f] = tex.eqtb[5309-1].int()
	tex.skewChar[f] = tex.eqtb[5310-1].int()
	if bchLabel < int32(nl) {
		tex.bcharLabel[f] = uint16(bchLabel + tex.ligKernBase[f])
	} else {
		tex.bcharLabel[f] = 0
	}
	tex.fontBchar[f] = uint16(int32(bchar) + 0)
	tex.fontFalseBchar[f] = uint16(int32(bchar) + 0)
	if bchar <= ec {
		if bchar >= bc {
			qw = tex.fontInfo[tex.charBase[f]+int32(bchar)].qqqq()
			if qw.b0 > 0 {
				tex.fontFalseBchar[f] = 256
			}
		}
	}
	tex.fontName[f] = nom
	tex.fontArea[f] = aire
	tex.fontBc[f] = byte(bc)
	tex.fontEc[f] = byte(ec)
	tex.fontGlue[f] = 0
	tex.charBase[f] = tex.charBase[f] - 0
	tex.widthBase[f] = tex.widthBase[f] - 0
	tex.ligKernBase[f] = tex.ligKernBase[f] - 0
	tex.kernBase[f] = tex.kernBase[f] - 0
	tex.extenBase[f] = tex.extenBase[f] - 0
	tex.paramBase[f] = tex.paramBase[f] - 1
	tex.fmemPtr = uint16(int32(tex.fmemPtr) + int32(lf))
	tex.fontPtr = f
	g = f
	goto label30
label11:
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(802)
	tex.sprintCs(u)
	tex.printChar(61)
	tex.printFileName(int32(nom), int32(aire), 338)
	if s >= 0 {
		tex.print(741)
		tex.printScaled(s)
		tex.print(397)
	} else if s != -1000 {
		tex.print(803)
		tex.printInt(-s)
	}
	if fileOpened {
		tex.print(804)
	} else {
		tex.print(805)
	}
	tex.helpPtr = 5
	tex.helpLine[4] = 806
	tex.helpLine[3] = 807
	tex.helpLine[2] = 808
	tex.helpLine[1] = 809
	tex.helpLine[0] = 810
	tex.error1()
label30:
	if fileOpened {
		tex.bClose(&tex.tfmFile)
	}
	ret = g
	return ret
}

func (tex *Context) charWarning(f byte, c byte) {
	if tex.eqtb[5298-1].int() > 0 {
		tex.beginDiagnostic()
		tex.printNl(825)
		tex.print(int32(c))
		tex.print(826)
		tex.slowPrint(int32(tex.fontName[f]))
		tex.printChar(33)
		tex.endDiagnostic(false)
	}
}

func (tex *Context) newCharacter(f byte, c byte) (ret uint16) {
	var p uint16 // 0..65535
	if tex.fontBc[f] <= c {
		if tex.fontEc[f] >= c {
			if tex.fontInfo[tex.charBase[f]+int32(c)+0].qqqq().b0 > 0 {
				p = tex.getAvail()
				*tex.mem[p].pHh().pB0() = f
				*tex.mem[p].pHh().pB1() = byte(int32(c) + 0)
				ret = p
				goto label10
			}
		}
	}
	tex.charWarning(f, c)
	ret = 0
label10:
	return ret
}

func (tex *Context) writeDvi(a, b uint16) {
	var k uint16 // 0..800
	for _i := int64(a); _i <= int64(b); _i++ {
		k = uint16(_i)
		write(&tex.dviFile, tex.dviBuf[k])
	}
}

func (tex *Context) dviSwap() {
	if tex.dviLimit == dviBufSize {
		tex.writeDvi(0, uint16(int32(tex.halfBuf)-1))
		tex.dviLimit = tex.halfBuf
		tex.dviOffset = tex.dviOffset + dviBufSize
		tex.dviPtr = 0
	} else {
		tex.writeDvi(tex.halfBuf, uint16(dviBufSize-1))
		tex.dviLimit = dviBufSize
	}
	tex.dviGone = tex.dviGone + int32(tex.halfBuf)
}

func (tex *Context) dviFour(x int32) {
	if x >= 0 {
		tex.dviBuf[tex.dviPtr] = byte((x / 16777216))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	} else {
		x = x + 1073741824
		x = x + 1073741824
		tex.dviBuf[tex.dviPtr] = byte((x / 16777216) + 128)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
	x = (x % 16777216)
	tex.dviBuf[tex.dviPtr] = byte((x / 65536))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	x = (x % 65536)
	tex.dviBuf[tex.dviPtr] = byte((x / 256))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte((x % 256))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
}

func (tex *Context) dviPop(l int32) {
	if (l == (tex.dviOffset + int32(tex.dviPtr))) && (tex.dviPtr > 0) {
		tex.dviPtr = uint16(int32(tex.dviPtr) - 1)
	} else {
		tex.dviBuf[tex.dviPtr] = 142
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
}

func (tex *Context) dviFontDef(f byte) {
	var k uint16 // 0..32000
	tex.dviBuf[tex.dviPtr] = 243
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte(int32(f) - 1)
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte(int32(tex.fontCheck[f].b0) - 0)
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte(int32(tex.fontCheck[f].b1) - 0)
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte(int32(tex.fontCheck[f].b2) - 0)
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte(int32(tex.fontCheck[f].b3) - 0)
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviFour(tex.fontSize[f])
	tex.dviFour(tex.fontDsize[f])
	tex.dviBuf[tex.dviPtr] = byte((int32(tex.strStart[int32(tex.fontArea[f])+1]) - int32(tex.strStart[tex.fontArea[f]])))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.dviBuf[tex.dviPtr] = byte((int32(tex.strStart[int32(tex.fontName[f])+1]) - int32(tex.strStart[tex.fontName[f]])))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	for _i := int64(tex.strStart[tex.fontArea[f]]); _i <= int64(int32(tex.strStart[int32(tex.fontArea[f])+1])-1); _i++ {
		k = uint16(_i)
		tex.dviBuf[tex.dviPtr] = tex.strPool[k]
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
	for _i := int64(tex.strStart[tex.fontName[f]]); _i <= int64(int32(tex.strStart[int32(tex.fontName[f])+1])-1); _i++ {
		k = uint16(_i)
		tex.dviBuf[tex.dviPtr] = tex.strPool[k]
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
}

func (tex *Context) movement(w int32, o byte) {
	var mstate byte // 0..63
	var p, q uint16 // 0..65535
	var k int32     // integer
	q = tex.getNode(3)
	*tex.mem[int32(q)+1].pInt() = w
	*tex.mem[int32(q)+2].pInt() = tex.dviOffset + int32(tex.dviPtr)
	if o == 157 {
		tex.mem[q].pHh().rh = tex.downPtr
		tex.downPtr = q
	} else {
		tex.mem[q].pHh().rh = tex.rightPtr
		tex.rightPtr = q
	}
	p = tex.mem[q].hh().rh
	mstate = 0
	for p != 0 {
		if tex.mem[int32(p)+1].int() == w {
			switch int32(mstate) + int32(tex.mem[p].hh().lh()) {
			case 3, 4, 15, 16:
				if tex.mem[int32(p)+2].int() < tex.dviGone {
					goto label45
				} else {
					k = tex.mem[int32(p)+2].int() - tex.dviOffset
					if k < 0 {
						k = k + dviBufSize
					}
					tex.dviBuf[k] = byte(int32(tex.dviBuf[k]) + 5)
					*tex.mem[p].pHh().pLh() = 1
					goto label40
				}
			case 5, 9, 11:
				if tex.mem[int32(p)+2].int() < tex.dviGone {
					goto label45
				} else {
					k = tex.mem[int32(p)+2].int() - tex.dviOffset
					if k < 0 {
						k = k + dviBufSize
					}
					tex.dviBuf[k] = byte(int32(tex.dviBuf[k]) + 10)
					*tex.mem[p].pHh().pLh() = 2
					goto label40
				}
			case 1, 2, 8, 13:
				goto label40
			default:
			}
		} else {
			switch int32(mstate) + int32(tex.mem[p].hh().lh()) {
			case 1:
				mstate = 6
			case 2:
				mstate = 12
			case 8, 13:
				goto label45
			default:
			}
		}
		p = tex.mem[p].hh().rh
	}
label45:
	*tex.mem[q].pHh().pLh() = 3
	if iabs(w) >= 8388608 {
		tex.dviBuf[tex.dviPtr] = byte(int32(o) + 3)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviFour(w)
		goto label10
	}
	if iabs(w) >= 32768 {
		tex.dviBuf[tex.dviPtr] = byte(int32(o) + 2)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		if w < 0 {
			w = w + 16777216
		}
		tex.dviBuf[tex.dviPtr] = byte((w / 65536))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		w = (w % 65536)
		goto label2
	}
	if iabs(w) >= 128 {
		tex.dviBuf[tex.dviPtr] = byte(int32(o) + 1)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		if w < 0 {
			w = w + 65536
		}
		goto label2
	}
	tex.dviBuf[tex.dviPtr] = o
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	if w < 0 {
		w = w + 256
	}
	goto label1
label2:
	tex.dviBuf[tex.dviPtr] = byte((w / 256))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
label1:
	tex.dviBuf[tex.dviPtr] = byte((w % 256))
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	goto label10
label40:
	*tex.mem[q].pHh().pLh() = tex.mem[p].hh().lh()
	if tex.mem[q].hh().lh() == 1 {
		tex.dviBuf[tex.dviPtr] = byte(int32(o) + 4)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		for tex.mem[q].hh().rh != p {
			q = tex.mem[q].hh().rh
			switch tex.mem[q].hh().lh() {
			case 3:
				*tex.mem[q].pHh().pLh() = 5
			case 4:
				*tex.mem[q].pHh().pLh() = 6
			default:
			}
		}
	} else {
		tex.dviBuf[tex.dviPtr] = byte(int32(o) + 9)
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		for tex.mem[q].hh().rh != p {
			q = tex.mem[q].hh().rh
			switch tex.mem[q].hh().lh() {
			case 3:
				*tex.mem[q].pHh().pLh() = 4
			case 5:
				*tex.mem[q].pHh().pLh() = 6
			default:
			}
		}
	}
label10:
	;
}

func (tex *Context) pruneMovements(l int32) {
	var p uint16 // 0..65535
	for tex.downPtr != 0 {
		if tex.mem[int32(tex.downPtr)+2].int() < l {
			goto label30
		}
		p = tex.downPtr
		tex.downPtr = tex.mem[p].hh().rh
		tex.freeNode(p, 3)
	}
label30:
	for tex.rightPtr != 0 {
		if tex.mem[int32(tex.rightPtr)+2].int() < l {
			goto label10
		}
		p = tex.rightPtr
		tex.rightPtr = tex.mem[p].hh().rh
		tex.freeNode(p, 3)
	}
label10:
}

func (tex *Context) specialOut(p uint16) {
	var oldSetting byte // 0..21
	var k uint16        // 0..32000
	if tex.curH != tex.dviH {
		tex.movement(tex.curH-tex.dviH, 143)
		tex.dviH = tex.curH
	}
	if tex.curV != tex.dviV {
		tex.movement(tex.curV-tex.dviV, 157)
		tex.dviV = tex.curV
	}
	oldSetting = tex.selector
	tex.selector = 21
	tex.showTokenList(int32(tex.mem[tex.mem[int32(p)+1].hh().rh].hh().rh), 0, poolSize-int32(tex.poolPtr))
	tex.selector = oldSetting
	if int32(tex.poolPtr)+1 > poolSize {
		tex.overflow(257, poolSize-int32(tex.initPoolPtr))
	}
	if (int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])) < 256 {
		tex.dviBuf[tex.dviPtr] = 239
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviBuf[tex.dviPtr] = byte((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	} else {
		tex.dviBuf[tex.dviPtr] = 242
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviFour((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])))
	}
	for _i := int64(tex.strStart[tex.strPtr]); _i <= int64(int32(tex.poolPtr)-1); _i++ {
		k = uint16(_i)
		tex.dviBuf[tex.dviPtr] = tex.strPool[k]
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
	tex.poolPtr = tex.strStart[tex.strPtr]
}

func (tex *Context) writeOut(p uint16) {
	var oldSetting byte // 0..21
	var oldMode int32   // integer
	var j byte          // 0..63
	var q, r uint16     // 0..65535
	q = tex.getAvail()
	*tex.mem[q].pHh().pLh() = 637
	r = tex.getAvail()
	tex.mem[q].pHh().rh = r
	*tex.mem[r].pHh().pLh() = 6717
	tex.beginTokenList(q, 4)
	tex.beginTokenList(tex.mem[int32(p)+1].hh().rh, 15)
	q = tex.getAvail()
	*tex.mem[q].pHh().pLh() = 379
	tex.beginTokenList(q, 4)
	oldMode = int32(tex.curList.modeField)
	tex.curList.modeField = 0
	tex.curCs = tex.writeLoc
	q = tex.scanToks(false, true)
	tex.getToken()
	if tex.curTok != 6717 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1297)
		tex.helpPtr = 2
		tex.helpLine[1] = 1298
		tex.helpLine[0] = 1012
		tex.error1()
		for {
			tex.getToken()
			if tex.curTok == 6717 {
				break
			}
		}
	}
	tex.curList.modeField = int16(oldMode)
	tex.endTokenList()
	oldSetting = tex.selector
	j = byte(tex.mem[int32(p)+1].hh().lh())
	if tex.writeOpen[j] {
		tex.selector = j
	} else {
		if (j == 17) && (tex.selector == 19) {
			tex.selector = 18
		}
		tex.printNl(338)
	}
	tex.tokenShow(tex.defRef)
	tex.printLn()
	tex.flushList(tex.defRef)
	tex.selector = oldSetting
}

func (tex *Context) outWhat(p uint16) {
	var j byte // 0..63
	switch tex.mem[p].hh().b1() {
	case 0, 1, 2:
		if !tex.doingLeaders {
			j = byte(tex.mem[int32(p)+1].hh().lh())
			if tex.mem[p].hh().b1() == 1 {
				tex.writeOut(p)
			} else {
				if tex.writeOpen[j] {
					tex.aClose(&tex.writeFile[j])
				}
				if tex.mem[p].hh().b1() == 2 {
					tex.writeOpen[j] = false
				} else if j < 16 {
					tex.curName = tex.mem[int32(p)+1].hh().rh
					tex.curArea = tex.mem[int32(p)+2].hh().lh()
					tex.curExt = tex.mem[int32(p)+2].hh().rh
					if tex.curExt == 338 {
						tex.curExt = 791
					}
					tex.packFileName(tex.curName, tex.curArea, tex.curExt)
					for !tex.aOpenOut(&tex.writeFile[j]) {
						tex.promptFileName(1300, 791)
					}
					tex.writeOpen[j] = true
				}
			}
		}
	case 3:
		tex.specialOut(p)
	case 4:
	default:
		tex.confusion(1299)
	}
}

func (tex *Context) hlistOut() {
	var baseLine int32         // integer
	var leftEdge int32         // integer
	var saveH, saveV int32     // integer
	var thisBox uint16         // 0..65535
	var gOrder byte            // 0..3
	var gSign byte             // 0..2
	var p uint16               // 0..65535
	var saveLoc int32          // integer
	var leaderBox uint16       // 0..65535
	var leaderWd int32         // integer
	var lx int32               // integer
	var outerDoingLeaders bool // boolean
	var edge int32             // integer
	var glueTemp float32       // real
	var curGlue float32        // real
	var curG int32             // integer
	curG = 0
	curGlue = 0
	thisBox = tex.tempPtr
	gOrder = tex.mem[int32(thisBox)+5].hh().b1()
	gSign = tex.mem[int32(thisBox)+5].hh().b0()
	p = tex.mem[int32(thisBox)+5].hh().rh
	tex.curS = tex.curS + 1
	if tex.curS > 0 {
		tex.dviBuf[tex.dviPtr] = 141
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
	if tex.curS > tex.maxPush {
		tex.maxPush = tex.curS
	}
	saveLoc = tex.dviOffset + int32(tex.dviPtr)
	baseLine = tex.curV
	leftEdge = tex.curH
	for p != 0 {
	label21:
		if p >= tex.hiMemMin {
			if tex.curH != tex.dviH {
				tex.movement(tex.curH-tex.dviH, 143)
				tex.dviH = tex.curH
			}
			if tex.curV != tex.dviV {
				tex.movement(tex.curV-tex.dviV, 157)
				tex.dviV = tex.curV
			}
			for {
				tex.f = tex.mem[p].hh().b0()
				tex.c = tex.mem[p].hh().b1()
				if tex.f != tex.dviF {
					if !tex.fontUsed[tex.f] {
						tex.dviFontDef(tex.f)
						tex.fontUsed[tex.f] = true
					}
					if tex.f <= 64 {
						tex.dviBuf[tex.dviPtr] = byte(int32(tex.f) + 170)
						tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
						if tex.dviPtr == tex.dviLimit {
							tex.dviSwap()
						}
					} else {
						tex.dviBuf[tex.dviPtr] = 235
						tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
						if tex.dviPtr == tex.dviLimit {
							tex.dviSwap()
						}
						tex.dviBuf[tex.dviPtr] = byte(int32(tex.f) - 1)
						tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
						if tex.dviPtr == tex.dviLimit {
							tex.dviSwap()
						}
					}
					tex.dviF = tex.f
				}
				if tex.c >= 128 {
					tex.dviBuf[tex.dviPtr] = 128
					tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
					if tex.dviPtr == tex.dviLimit {
						tex.dviSwap()
					}
				}

				{
					tex.dviBuf[tex.dviPtr] = byte(int32(tex.c) - 0)
					tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
					if tex.dviPtr == tex.dviLimit {
						tex.dviSwap()
					}
				}
				tex.curH = tex.curH + tex.fontInfo[tex.widthBase[tex.f]+int32(tex.fontInfo[tex.charBase[tex.f]+int32(tex.c)].qqqq().b0)].int()
				p = tex.mem[p].hh().rh
				if !(p >= tex.hiMemMin) {
					break
				}
			}
			tex.dviH = tex.curH
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1:
				if tex.mem[int32(p)+5].hh().rh == 0 {
					tex.curH = tex.curH + tex.mem[int32(p)+1].int()
				} else {
					saveH = tex.dviH
					saveV = tex.dviV
					tex.curV = baseLine + tex.mem[int32(p)+4].int()
					tex.tempPtr = p
					edge = tex.curH
					if tex.mem[p].hh().b0() == 1 {
						tex.vlistOut()
					} else {
						tex.hlistOut()
					}
					tex.dviH = saveH
					tex.dviV = saveV
					tex.curH = edge + tex.mem[int32(p)+1].int()
					tex.curV = baseLine
				}
			case 2:
				tex.ruleHt = tex.mem[int32(p)+3].int()
				tex.ruleDp = tex.mem[int32(p)+2].int()
				tex.ruleWd = tex.mem[int32(p)+1].int()
				goto label14
			case 8:
				tex.outWhat(p)
			case 10:
				tex.g = tex.mem[int32(p)+1].hh().lh()
				tex.ruleWd = tex.mem[int32(tex.g)+1].int() - curG
				if gSign != 0 {
					if gSign == 1 {
						if tex.mem[tex.g].hh().b0() == gOrder {
							curGlue = curGlue + float32(tex.mem[int32(tex.g)+2].int())
							glueTemp = (tex.mem[int32(thisBox)+6].gr() * curGlue)
							if glueTemp > 1e+09 {
								glueTemp = 1e+09
							} else if glueTemp < -1e+09 {
								glueTemp = -1e+09
							}
							curG = round(glueTemp)
						}
					} else if tex.mem[tex.g].hh().b1() == gOrder {
						curGlue = curGlue - float32(tex.mem[int32(tex.g)+3].int())
						glueTemp = (tex.mem[int32(thisBox)+6].gr() * curGlue)
						if glueTemp > 1e+09 {
							glueTemp = 1e+09
						} else if glueTemp < -1e+09 {
							glueTemp = -1e+09
						}
						curG = round(glueTemp)
					}
				}
				tex.ruleWd = tex.ruleWd + curG
				if tex.mem[p].hh().b1() >= 100 {
					leaderBox = tex.mem[int32(p)+1].hh().rh
					if tex.mem[leaderBox].hh().b0() == 2 {
						tex.ruleHt = tex.mem[int32(leaderBox)+3].int()
						tex.ruleDp = tex.mem[int32(leaderBox)+2].int()
						goto label14
					}
					leaderWd = tex.mem[int32(leaderBox)+1].int()
					if (leaderWd > 0) && (tex.ruleWd > 0) {
						tex.ruleWd = tex.ruleWd + 10
						edge = tex.curH + tex.ruleWd
						lx = 0
						if tex.mem[p].hh().b1() == 100 {
							saveH = tex.curH
							tex.curH = leftEdge + (leaderWd * ((tex.curH - leftEdge) / leaderWd))
							if tex.curH < saveH {
								tex.curH = tex.curH + leaderWd
							}
						} else {
							tex.lq = (tex.ruleWd / leaderWd)
							tex.lr = (tex.ruleWd % leaderWd)
							if tex.mem[p].hh().b1() == 101 {
								tex.curH = tex.curH + (tex.lr / 2)
							} else {
								lx = (tex.lr / (tex.lq + 1))
								tex.curH = tex.curH + ((tex.lr - ((tex.lq - 1) * lx)) / 2)
							}
						}
						for tex.curH+leaderWd <= edge {
							tex.curV = baseLine + tex.mem[int32(leaderBox)+4].int()
							if tex.curV != tex.dviV {
								tex.movement(tex.curV-tex.dviV, 157)
								tex.dviV = tex.curV
							}
							saveV = tex.dviV
							if tex.curH != tex.dviH {
								tex.movement(tex.curH-tex.dviH, 143)
								tex.dviH = tex.curH
							}
							saveH = tex.dviH
							tex.tempPtr = leaderBox
							outerDoingLeaders = tex.doingLeaders
							tex.doingLeaders = true
							if tex.mem[leaderBox].hh().b0() == 1 {
								tex.vlistOut()
							} else {
								tex.hlistOut()
							}
							tex.doingLeaders = outerDoingLeaders
							tex.dviV = saveV
							tex.dviH = saveH
							tex.curV = baseLine
							tex.curH = saveH + leaderWd + lx
						}
						tex.curH = edge - 10
						goto label15
					}
				}
				goto label13
			case 11, 9:
				tex.curH = tex.curH + tex.mem[int32(p)+1].int()
			case 6:
				tex.mem[29988] = tex.mem[int32(p)+1]
				tex.mem[29988].pHh().rh = tex.mem[p].hh().rh
				p = 29988
				goto label21
			default:
			}
			goto label15
		label14:
			if tex.ruleHt == -1073741824 {
				tex.ruleHt = tex.mem[int32(thisBox)+3].int()
			}
			if tex.ruleDp == -1073741824 {
				tex.ruleDp = tex.mem[int32(thisBox)+2].int()
			}
			tex.ruleHt = tex.ruleHt + tex.ruleDp
			if (tex.ruleHt > 0) && (tex.ruleWd > 0) {
				if tex.curH != tex.dviH {
					tex.movement(tex.curH-tex.dviH, 143)
					tex.dviH = tex.curH
				}
				tex.curV = baseLine + tex.ruleDp
				if tex.curV != tex.dviV {
					tex.movement(tex.curV-tex.dviV, 157)
					tex.dviV = tex.curV
				}
				tex.dviBuf[tex.dviPtr] = 132
				tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
				if tex.dviPtr == tex.dviLimit {
					tex.dviSwap()
				}
				tex.dviFour(tex.ruleHt)
				tex.dviFour(tex.ruleWd)
				tex.curV = baseLine
				tex.dviH = tex.dviH + tex.ruleWd
			}
		label13:
			tex.curH = tex.curH + tex.ruleWd
		label15:
			p = tex.mem[p].hh().rh
		}
	}
	tex.pruneMovements(saveLoc)
	if tex.curS > 0 {
		tex.dviPop(saveLoc)
	}
	tex.curS = tex.curS - 1
}

func (tex *Context) vlistOut() {
	var leftEdge int32         // integer
	var topEdge int32          // integer
	var saveH, saveV int32     // integer
	var thisBox uint16         // 0..65535
	var gOrder byte            // 0..3
	var gSign byte             // 0..2
	var p uint16               // 0..65535
	var saveLoc int32          // integer
	var leaderBox uint16       // 0..65535
	var leaderHt int32         // integer
	var lx int32               // integer
	var outerDoingLeaders bool // boolean
	var edge int32             // integer
	var glueTemp float32       // real
	var curGlue float32        // real
	var curG int32             // integer
	curG = 0
	curGlue = 0
	thisBox = tex.tempPtr
	gOrder = tex.mem[int32(thisBox)+5].hh().b1()
	gSign = tex.mem[int32(thisBox)+5].hh().b0()
	p = tex.mem[int32(thisBox)+5].hh().rh
	tex.curS = tex.curS + 1
	if tex.curS > 0 {
		tex.dviBuf[tex.dviPtr] = 141
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
	}
	if tex.curS > tex.maxPush {
		tex.maxPush = tex.curS
	}
	saveLoc = tex.dviOffset + int32(tex.dviPtr)
	leftEdge = tex.curH
	tex.curV = tex.curV - tex.mem[int32(thisBox)+3].int()
	topEdge = tex.curV
	for p != 0 {
		if p >= tex.hiMemMin {
			tex.confusion(828)
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1:
				if tex.mem[int32(p)+5].hh().rh == 0 {
					tex.curV = tex.curV + tex.mem[int32(p)+3].int() + tex.mem[int32(p)+2].int()
				} else {
					tex.curV = tex.curV + tex.mem[int32(p)+3].int()
					if tex.curV != tex.dviV {
						tex.movement(tex.curV-tex.dviV, 157)
						tex.dviV = tex.curV
					}
					saveH = tex.dviH
					saveV = tex.dviV
					tex.curH = leftEdge + tex.mem[int32(p)+4].int()
					tex.tempPtr = p
					if tex.mem[p].hh().b0() == 1 {
						tex.vlistOut()
					} else {
						tex.hlistOut()
					}
					tex.dviH = saveH
					tex.dviV = saveV
					tex.curV = saveV + tex.mem[int32(p)+2].int()
					tex.curH = leftEdge
				}
			case 2:
				tex.ruleHt = tex.mem[int32(p)+3].int()
				tex.ruleDp = tex.mem[int32(p)+2].int()
				tex.ruleWd = tex.mem[int32(p)+1].int()
				goto label14
			case 8:
				tex.outWhat(p)
			case 10:
				tex.g = tex.mem[int32(p)+1].hh().lh()
				tex.ruleHt = tex.mem[int32(tex.g)+1].int() - curG
				if gSign != 0 {
					if gSign == 1 {
						if tex.mem[tex.g].hh().b0() == gOrder {
							curGlue = curGlue + float32(tex.mem[int32(tex.g)+2].int())
							glueTemp = (tex.mem[int32(thisBox)+6].gr() * curGlue)
							if glueTemp > 1e+09 {
								glueTemp = 1e+09
							} else if glueTemp < -1e+09 {
								glueTemp = -1e+09
							}
							curG = round(glueTemp)
						}
					} else if tex.mem[tex.g].hh().b1() == gOrder {
						curGlue = curGlue - float32(tex.mem[int32(tex.g)+3].int())
						glueTemp = (tex.mem[int32(thisBox)+6].gr() * curGlue)
						if glueTemp > 1e+09 {
							glueTemp = 1e+09
						} else if glueTemp < -1e+09 {
							glueTemp = -1e+09
						}
						curG = round(glueTemp)
					}
				}
				tex.ruleHt = tex.ruleHt + curG
				if tex.mem[p].hh().b1() >= 100 {
					leaderBox = tex.mem[int32(p)+1].hh().rh
					if tex.mem[leaderBox].hh().b0() == 2 {
						tex.ruleWd = tex.mem[int32(leaderBox)+1].int()
						tex.ruleDp = 0
						goto label14
					}
					leaderHt = tex.mem[int32(leaderBox)+3].int() + tex.mem[int32(leaderBox)+2].int()
					if (leaderHt > 0) && (tex.ruleHt > 0) {
						tex.ruleHt = tex.ruleHt + 10
						edge = tex.curV + tex.ruleHt
						lx = 0
						if tex.mem[p].hh().b1() == 100 {
							saveV = tex.curV
							tex.curV = topEdge + (leaderHt * ((tex.curV - topEdge) / leaderHt))
							if tex.curV < saveV {
								tex.curV = tex.curV + leaderHt
							}
						} else {
							tex.lq = (tex.ruleHt / leaderHt)
							tex.lr = (tex.ruleHt % leaderHt)
							if tex.mem[p].hh().b1() == 101 {
								tex.curV = tex.curV + (tex.lr / 2)
							} else {
								lx = (tex.lr / (tex.lq + 1))
								tex.curV = tex.curV + ((tex.lr - ((tex.lq - 1) * lx)) / 2)
							}
						}
						for tex.curV+leaderHt <= edge {
							tex.curH = leftEdge + tex.mem[int32(leaderBox)+4].int()
							if tex.curH != tex.dviH {
								tex.movement(tex.curH-tex.dviH, 143)
								tex.dviH = tex.curH
							}
							saveH = tex.dviH
							tex.curV = tex.curV + tex.mem[int32(leaderBox)+3].int()
							if tex.curV != tex.dviV {
								tex.movement(tex.curV-tex.dviV, 157)
								tex.dviV = tex.curV
							}
							saveV = tex.dviV
							tex.tempPtr = leaderBox
							outerDoingLeaders = tex.doingLeaders
							tex.doingLeaders = true
							if tex.mem[leaderBox].hh().b0() == 1 {
								tex.vlistOut()
							} else {
								tex.hlistOut()
							}
							tex.doingLeaders = outerDoingLeaders
							tex.dviV = saveV
							tex.dviH = saveH
							tex.curH = leftEdge
							tex.curV = saveV - tex.mem[int32(leaderBox)+3].int() + leaderHt + lx
						}
						tex.curV = edge - 10
						goto label15
					}
				}
				goto label13
			case 11:
				tex.curV = tex.curV + tex.mem[int32(p)+1].int()
			default:
			}
			goto label15
		label14:
			if tex.ruleWd == -1073741824 {
				tex.ruleWd = tex.mem[int32(thisBox)+1].int()
			}
			tex.ruleHt = tex.ruleHt + tex.ruleDp
			tex.curV = tex.curV + tex.ruleHt
			if (tex.ruleHt > 0) && (tex.ruleWd > 0) {
				if tex.curH != tex.dviH {
					tex.movement(tex.curH-tex.dviH, 143)
					tex.dviH = tex.curH
				}
				if tex.curV != tex.dviV {
					tex.movement(tex.curV-tex.dviV, 157)
					tex.dviV = tex.curV
				}
				tex.dviBuf[tex.dviPtr] = 137
				tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
				if tex.dviPtr == tex.dviLimit {
					tex.dviSwap()
				}
				tex.dviFour(tex.ruleHt)
				tex.dviFour(tex.ruleWd)
			}
			goto label15
		label13:
			tex.curV = tex.curV + tex.ruleHt
		}
	label15:
		p = tex.mem[p].hh().rh
	}
	tex.pruneMovements(saveLoc)
	if tex.curS > 0 {
		tex.dviPop(saveLoc)
	}
	tex.curS = tex.curS - 1
}

func (tex *Context) shipOut(p uint16) {
	var pageLoc int32   // integer
	var j, k byte       // 0..9
	var s uint16        // 0..32000
	var oldSetting byte // 0..21
	if tex.eqtb[5297-1].int() > 0 {
		tex.printNl(338)
		tex.printLn()
		tex.print(829)
	}
	if int32(tex.termOffset) > maxPrintLine-9 {
		tex.printLn()
	} else if (tex.termOffset > 0) || (tex.fileOffset > 0) {
		tex.printChar(32)
	}
	tex.printChar(91)
	j = 9
	for (tex.eqtb[5318+int32(j)-1].int() == 0) && (j > 0) {
		j = byte(int32(j) - 1)
	}
	for _i := int64(0); _i <= int64(j); _i++ {
		k = byte(_i)
		tex.printInt(tex.eqtb[5318+int32(k)-1].int())
		if k < j {
			tex.printChar(46)
		}
	}
	break1(&tex.termOut)
	if tex.eqtb[5297-1].int() > 0 {
		tex.printChar(93)
		tex.beginDiagnostic()
		tex.showBox(p)
		tex.endDiagnostic(true)
	}
	if (tex.mem[int32(p)+3].int() > 1073741823) || (tex.mem[int32(p)+2].int() > 1073741823) || ((tex.mem[int32(p)+3].int() + tex.mem[int32(p)+2].int() + tex.eqtb[5849-1].int()) > 1073741823) || ((tex.mem[int32(p)+1].int() + tex.eqtb[5848-1].int()) > 1073741823) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(833)
		tex.helpPtr = 2
		tex.helpLine[1] = 834
		tex.helpLine[0] = 835
		tex.error1()
		if tex.eqtb[5297-1].int() <= 0 {
			tex.beginDiagnostic()
			tex.printNl(836)
			tex.showBox(p)
			tex.endDiagnostic(true)
		}
		goto label30
	}
	if tex.mem[int32(p)+3].int()+tex.mem[int32(p)+2].int()+tex.eqtb[5849-1].int() > tex.maxV {
		tex.maxV = tex.mem[int32(p)+3].int() + tex.mem[int32(p)+2].int() + tex.eqtb[5849-1].int()
	}
	if tex.mem[int32(p)+1].int()+tex.eqtb[5848-1].int() > tex.maxH {
		tex.maxH = tex.mem[int32(p)+1].int() + tex.eqtb[5848-1].int()
	}
	tex.dviH = 0
	tex.dviV = 0
	tex.curH = tex.eqtb[5848-1].int()
	tex.dviF = 0
	if tex.outputFileName == 0 {
		if tex.jobName == 0 {
			tex.openLogFile()
		}
		tex.packJobName(794)
		for !tex.bOpenOut(&tex.dviFile) {
			tex.promptFileName(795, 794)
		}
		tex.outputFileName = tex.bMakeNameString(&tex.dviFile)
	}
	if tex.totalPages == 0 {
		tex.dviBuf[tex.dviPtr] = 247
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviBuf[tex.dviPtr] = 2
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviFour(25400000)
		tex.dviFour(473628672)
		tex.prepareMag()
		tex.dviFour(tex.eqtb[5280-1].int())
		oldSetting = tex.selector
		tex.selector = 21
		tex.print(827)
		tex.printInt(tex.eqtb[5286-1].int())
		tex.printChar(46)
		tex.printTwo(tex.eqtb[5285-1].int())
		tex.printChar(46)
		tex.printTwo(tex.eqtb[5284-1].int())
		tex.printChar(58)
		tex.printTwo((tex.eqtb[5283-1].int() / 60))
		tex.printTwo((tex.eqtb[5283-1].int() % 60))
		tex.selector = oldSetting
		tex.dviBuf[tex.dviPtr] = byte((int32(tex.poolPtr) - int32(tex.strStart[tex.strPtr])))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		for _i := int64(tex.strStart[tex.strPtr]); _i <= int64(int32(tex.poolPtr)-1); _i++ {
			s = uint16(_i)
			tex.dviBuf[tex.dviPtr] = tex.strPool[s]
			tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
			if tex.dviPtr == tex.dviLimit {
				tex.dviSwap()
			}
		}
		tex.poolPtr = tex.strStart[tex.strPtr]
	}
	pageLoc = tex.dviOffset + int32(tex.dviPtr)
	tex.dviBuf[tex.dviPtr] = 139
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	for _i := int64(0); _i <= int64(9); _i++ {
		k = byte(_i)
		tex.dviFour(tex.eqtb[5318+int32(k)-1].int())
	}
	tex.dviFour(tex.lastBop)
	tex.lastBop = pageLoc
	tex.curV = tex.mem[int32(p)+3].int() + tex.eqtb[5849-1].int()
	tex.tempPtr = p
	if tex.mem[p].hh().b0() == 1 {
		tex.vlistOut()
	} else {
		tex.hlistOut()
	}
	tex.dviBuf[tex.dviPtr] = 140
	tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
	if tex.dviPtr == tex.dviLimit {
		tex.dviSwap()
	}
	tex.totalPages = tex.totalPages + 1
	tex.curS = -1
label30:
	if tex.eqtb[5297-1].int() <= 0 {
		tex.printChar(93)
	}
	tex.deadCycles = 0
	break1(&tex.termOut)
	tex.flushNodeList(p)
}

func (tex *Context) scanSpec(c byte, threeCodes bool) {
	var s int32       // integer
	var specCode byte // 0..1
	if threeCodes {
		s = tex.saveStack[int32(tex.savePtr)+0].int()
	}
	if tex.scanKeyword(842) {
		specCode = 0
	} else if tex.scanKeyword(843) {
		specCode = 1
	} else {
		specCode = 1
		tex.curVal = 0
		goto label40
	}
	tex.scanDimen(false, false, false)
label40:
	if threeCodes {
		*tex.saveStack[int32(tex.savePtr)+0].pInt() = s
		tex.savePtr = uint16(int32(tex.savePtr) + 1)
	}
	*tex.saveStack[int32(tex.savePtr)+0].pInt() = int32(specCode)
	*tex.saveStack[int32(tex.savePtr)+1].pInt() = tex.curVal
	tex.savePtr = uint16(int32(tex.savePtr) + 2)
	tex.newSaveLevel(c)
	tex.scanLeftBrace()
}

func (tex *Context) hpack(p uint16, w int32, m byte) (ret uint16) {
	var r uint16       // 0..65535
	var q uint16       // 0..65535
	var h, d, x int32  // integer
	var s int32        // integer
	var g uint16       // 0..65535
	var o byte         // 0..3
	var f byte         // 0..75
	var i fourQuarters // record fourQuarters
	var hd byte        // 0..255
	tex.lastBadness = 0
	r = tex.getNode(7)
	*tex.mem[r].pHh().pB0() = 0
	*tex.mem[r].pHh().pB1() = 0
	*tex.mem[int32(r)+4].pInt() = 0
	q = uint16(int32(r) + 5)
	tex.mem[q].pHh().rh = p
	h = 0
	d = 0
	x = 0
	tex.totalStretch[0] = 0
	tex.totalShrink[0] = 0
	tex.totalStretch[1] = 0
	tex.totalShrink[1] = 0
	tex.totalStretch[2] = 0
	tex.totalShrink[2] = 0
	tex.totalStretch[3] = 0
	tex.totalShrink[3] = 0
	for p != 0 {
	label21:
		for p >= tex.hiMemMin {
			f = tex.mem[p].hh().b0()
			i = tex.fontInfo[tex.charBase[f]+int32(tex.mem[p].hh().b1())].qqqq()
			hd = byte(int32(i.b1) - 0)
			x = x + tex.fontInfo[tex.widthBase[f]+int32(i.b0)].int()
			s = tex.fontInfo[tex.heightBase[f]+(int32(hd)/16)].int()
			if s > h {
				h = s
			}
			s = tex.fontInfo[tex.depthBase[f]+(int32(hd)%16)].int()
			if s > d {
				d = s
			}
			p = tex.mem[p].hh().rh
		}
		if p != 0 {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 2, 13:
				x = x + tex.mem[int32(p)+1].int()
				if tex.mem[p].hh().b0() >= 2 {
					s = 0
				} else {
					s = tex.mem[int32(p)+4].int()
				}
				if tex.mem[int32(p)+3].int()-s > h {
					h = tex.mem[int32(p)+3].int() - s
				}
				if tex.mem[int32(p)+2].int()+s > d {
					d = tex.mem[int32(p)+2].int() + s
				}
			case 3, 4, 5:
				if tex.adjustTail != 0 {
					for tex.mem[q].hh().rh != p {
						q = tex.mem[q].hh().rh
					}
					if tex.mem[p].hh().b0() == 5 {
						tex.mem[tex.adjustTail].pHh().rh = uint16(tex.mem[int32(p)+1].int())
						for tex.mem[tex.adjustTail].hh().rh != 0 {
							tex.adjustTail = tex.mem[tex.adjustTail].hh().rh
						}
						p = tex.mem[p].hh().rh
						tex.freeNode(tex.mem[q].hh().rh, 2)
					} else {
						tex.mem[tex.adjustTail].pHh().rh = p
						tex.adjustTail = p
						p = tex.mem[p].hh().rh
					}
					tex.mem[q].pHh().rh = p
					p = q
				}
			case 8:
			case 10:
				g = tex.mem[int32(p)+1].hh().lh()
				x = x + tex.mem[int32(g)+1].int()
				o = tex.mem[g].hh().b0()
				tex.totalStretch[o] = tex.totalStretch[o] + tex.mem[int32(g)+2].int()
				o = tex.mem[g].hh().b1()
				tex.totalShrink[o] = tex.totalShrink[o] + tex.mem[int32(g)+3].int()
				if tex.mem[p].hh().b1() >= 100 {
					g = tex.mem[int32(p)+1].hh().rh
					if tex.mem[int32(g)+3].int() > h {
						h = tex.mem[int32(g)+3].int()
					}
					if tex.mem[int32(g)+2].int() > d {
						d = tex.mem[int32(g)+2].int()
					}
				}
			case 11, 9:
				x = x + tex.mem[int32(p)+1].int()
			case 6:
				tex.mem[29988] = tex.mem[int32(p)+1]
				tex.mem[29988].pHh().rh = tex.mem[p].hh().rh
				p = 29988
				goto label21
			default:
			}
			p = tex.mem[p].hh().rh
		}
	}
	if tex.adjustTail != 0 {
		tex.mem[tex.adjustTail].pHh().rh = 0
	}
	*tex.mem[int32(r)+3].pInt() = h
	*tex.mem[int32(r)+2].pInt() = d
	if m == 1 {
		w = x + w
	}
	*tex.mem[int32(r)+1].pInt() = w
	x = w - x
	if x == 0 {
		*tex.mem[int32(r)+5].pHh().pB0() = 0
		*tex.mem[int32(r)+5].pHh().pB1() = 0
		*tex.mem[int32(r)+6].pGr() = 0
		goto label10
	} else if x > 0 {
		if tex.totalStretch[3] != 0 {
			o = 3
		} else if tex.totalStretch[2] != 0 {
			o = 2
		} else if tex.totalStretch[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(r)+5].pHh().pB1() = o
		*tex.mem[int32(r)+5].pHh().pB0() = 1
		if tex.totalStretch[o] != 0 {
			*tex.mem[int32(r)+6].pGr() = (float32(x) / float32(tex.totalStretch[o]))
		} else {
			*tex.mem[int32(r)+5].pHh().pB0() = 0
			*tex.mem[int32(r)+6].pGr() = 0
		}
		if o == 0 {
			if tex.mem[int32(r)+5].hh().rh != 0 {
				tex.lastBadness = int32(tex.badness(x, tex.totalStretch[0]))
				if tex.lastBadness > tex.eqtb[5289-1].int() {
					tex.printLn()
					if tex.lastBadness > 100 {
						tex.printNl(844)
					} else {
						tex.printNl(845)
					}
					tex.print(846)
					tex.printInt(tex.lastBadness)
					goto label50
				}
			}
		}
		goto label10
	} else {
		if tex.totalShrink[3] != 0 {
			o = 3
		} else if tex.totalShrink[2] != 0 {
			o = 2
		} else if tex.totalShrink[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(r)+5].pHh().pB1() = o
		*tex.mem[int32(r)+5].pHh().pB0() = 2
		if tex.totalShrink[o] != 0 {
			*tex.mem[int32(r)+6].pGr() = (float32(-x) / float32(tex.totalShrink[o]))
		} else {
			*tex.mem[int32(r)+5].pHh().pB0() = 0
			*tex.mem[int32(r)+6].pGr() = 0
		}
		if (tex.totalShrink[o] < -x) && (o == 0) && (tex.mem[int32(r)+5].hh().rh != 0) {
			tex.lastBadness = 1000000
			*tex.mem[int32(r)+6].pGr() = 1
			if ((-x - tex.totalShrink[0]) > tex.eqtb[5838-1].int()) || (tex.eqtb[5289-1].int() < 100) {
				if (tex.eqtb[5846-1].int() > 0) && ((-x - tex.totalShrink[0]) > tex.eqtb[5838-1].int()) {
					for tex.mem[q].hh().rh != 0 {
						q = tex.mem[q].hh().rh
					}
					tex.mem[q].pHh().rh = tex.newRule()
					*tex.mem[int32(tex.mem[q].hh().rh)+1].pInt() = tex.eqtb[5846-1].int()
				}
				tex.printLn()
				tex.printNl(852)
				tex.printScaled(-x - tex.totalShrink[0])
				tex.print(853)
				goto label50
			}
		} else if o == 0 {
			if tex.mem[int32(r)+5].hh().rh != 0 {
				tex.lastBadness = int32(tex.badness(-x, tex.totalShrink[0]))
				if tex.lastBadness > tex.eqtb[5289-1].int() {
					tex.printLn()
					tex.printNl(854)
					tex.printInt(tex.lastBadness)
					goto label50
				}
			}
		}
		goto label10
	}
label50:
	if tex.outputActive {
		tex.print(847)
	} else {
		if tex.packBeginLine != 0 {
			if tex.packBeginLine > 0 {
				tex.print(848)
			} else {
				tex.print(849)
			}
			tex.printInt(iabs(tex.packBeginLine))
			tex.print(850)
		} else {
			tex.print(851)
		}
		tex.printInt(tex.line)
	}
	tex.printLn()
	tex.fontInShortDisplay = 0
	tex.shortDisplay(int32(tex.mem[int32(r)+5].hh().rh))
	tex.printLn()
	tex.beginDiagnostic()
	tex.showBox(r)
	tex.endDiagnostic(true)
label10:
	ret = r
	return ret
}

func (tex *Context) vpackage(p uint16, h int32, m byte, l int32) (ret uint16) {
	var r uint16      // 0..65535
	var w, d, x int32 // integer
	var s int32       // integer
	var g uint16      // 0..65535
	var o byte        // 0..3
	tex.lastBadness = 0
	r = tex.getNode(7)
	*tex.mem[r].pHh().pB0() = 1
	*tex.mem[r].pHh().pB1() = 0
	*tex.mem[int32(r)+4].pInt() = 0
	tex.mem[int32(r)+5].pHh().rh = p
	w = 0
	d = 0
	x = 0
	tex.totalStretch[0] = 0
	tex.totalShrink[0] = 0
	tex.totalStretch[1] = 0
	tex.totalShrink[1] = 0
	tex.totalStretch[2] = 0
	tex.totalShrink[2] = 0
	tex.totalStretch[3] = 0
	tex.totalShrink[3] = 0
	for p != 0 {
		if p >= tex.hiMemMin {
			tex.confusion(855)
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 2, 13:
				x = x + d + tex.mem[int32(p)+3].int()
				d = tex.mem[int32(p)+2].int()
				if tex.mem[p].hh().b0() >= 2 {
					s = 0
				} else {
					s = tex.mem[int32(p)+4].int()
				}
				if tex.mem[int32(p)+1].int()+s > w {
					w = tex.mem[int32(p)+1].int() + s
				}
			case 8:
			case 10:
				x = x + d
				d = 0
				g = tex.mem[int32(p)+1].hh().lh()
				x = x + tex.mem[int32(g)+1].int()
				o = tex.mem[g].hh().b0()
				tex.totalStretch[o] = tex.totalStretch[o] + tex.mem[int32(g)+2].int()
				o = tex.mem[g].hh().b1()
				tex.totalShrink[o] = tex.totalShrink[o] + tex.mem[int32(g)+3].int()
				if tex.mem[p].hh().b1() >= 100 {
					g = tex.mem[int32(p)+1].hh().rh
					if tex.mem[int32(g)+1].int() > w {
						w = tex.mem[int32(g)+1].int()
					}
				}
			case 11:
				x = x + d + tex.mem[int32(p)+1].int()
				d = 0
			default:
			}
		}
		p = tex.mem[p].hh().rh
	}
	*tex.mem[int32(r)+1].pInt() = w
	if d > l {
		x = x + d - l
		*tex.mem[int32(r)+2].pInt() = l
	} else {
		*tex.mem[int32(r)+2].pInt() = d
	}
	if m == 1 {
		h = x + h
	}
	*tex.mem[int32(r)+3].pInt() = h
	x = h - x
	if x == 0 {
		*tex.mem[int32(r)+5].pHh().pB0() = 0
		*tex.mem[int32(r)+5].pHh().pB1() = 0
		*tex.mem[int32(r)+6].pGr() = 0
		goto label10
	} else if x > 0 {
		if tex.totalStretch[3] != 0 {
			o = 3
		} else if tex.totalStretch[2] != 0 {
			o = 2
		} else if tex.totalStretch[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(r)+5].pHh().pB1() = o
		*tex.mem[int32(r)+5].pHh().pB0() = 1
		if tex.totalStretch[o] != 0 {
			*tex.mem[int32(r)+6].pGr() = (float32(x) / float32(tex.totalStretch[o]))
		} else {
			*tex.mem[int32(r)+5].pHh().pB0() = 0
			*tex.mem[int32(r)+6].pGr() = 0
		}
		if o == 0 {
			if tex.mem[int32(r)+5].hh().rh != 0 {
				tex.lastBadness = int32(tex.badness(x, tex.totalStretch[0]))
				if tex.lastBadness > tex.eqtb[5290-1].int() {
					tex.printLn()
					if tex.lastBadness > 100 {
						tex.printNl(844)
					} else {
						tex.printNl(845)
					}
					tex.print(856)
					tex.printInt(tex.lastBadness)
					goto label50
				}
			}
		}
		goto label10
	} else {
		if tex.totalShrink[3] != 0 {
			o = 3
		} else if tex.totalShrink[2] != 0 {
			o = 2
		} else if tex.totalShrink[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(r)+5].pHh().pB1() = o
		*tex.mem[int32(r)+5].pHh().pB0() = 2
		if tex.totalShrink[o] != 0 {
			*tex.mem[int32(r)+6].pGr() = (float32(-x) / float32(tex.totalShrink[o]))
		} else {
			*tex.mem[int32(r)+5].pHh().pB0() = 0
			*tex.mem[int32(r)+6].pGr() = 0
		}
		if (tex.totalShrink[o] < -x) && (o == 0) && (tex.mem[int32(r)+5].hh().rh != 0) {
			tex.lastBadness = 1000000
			*tex.mem[int32(r)+6].pGr() = 1
			if ((-x - tex.totalShrink[0]) > tex.eqtb[5839-1].int()) || (tex.eqtb[5290-1].int() < 100) {
				tex.printLn()
				tex.printNl(857)
				tex.printScaled(-x - tex.totalShrink[0])
				tex.print(858)
				goto label50
			}
		} else if o == 0 {
			if tex.mem[int32(r)+5].hh().rh != 0 {
				tex.lastBadness = int32(tex.badness(-x, tex.totalShrink[0]))
				if tex.lastBadness > tex.eqtb[5290-1].int() {
					tex.printLn()
					tex.printNl(859)
					tex.printInt(tex.lastBadness)
					goto label50
				}
			}
		}
		goto label10
	}
label50:
	if tex.outputActive {
		tex.print(847)
	} else {
		if tex.packBeginLine != 0 {
			tex.print(849)
			tex.printInt(iabs(tex.packBeginLine))
			tex.print(850)
		} else {
			tex.print(851)
		}
		tex.printInt(tex.line)
		tex.printLn()
	}
	tex.beginDiagnostic()
	tex.showBox(r)
	tex.endDiagnostic(true)
label10:
	ret = r
	return ret
}

func (tex *Context) appendToVlist(b uint16) {
	var d int32  // integer
	var p uint16 // 0..65535
	if tex.curList.auxField.int() > -65536000 {
		d = tex.mem[int32(tex.eqtb[2883-1].hh().rh)+1].int() - tex.curList.auxField.int() - tex.mem[int32(b)+3].int()
		if d < tex.eqtb[5832-1].int() {
			p = tex.newParamGlue(0)
		} else {
			p = tex.newSkipParam(1)
			*tex.mem[int32(tex.tempPtr)+1].pInt() = d
		}
		tex.mem[tex.curList.tailField].pHh().rh = p
		tex.curList.tailField = p
	}
	tex.mem[tex.curList.tailField].pHh().rh = b
	tex.curList.tailField = b
	*tex.curList.auxField.pInt() = tex.mem[int32(b)+2].int()
}

func (tex *Context) newNoad() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(4)
	*tex.mem[p].pHh().pB0() = 16
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pHh() = tex.emptyField
	*tex.mem[int32(p)+3].pHh() = tex.emptyField
	*tex.mem[int32(p)+2].pHh() = tex.emptyField
	ret = p
	return ret
}

func (tex *Context) newStyle(s byte) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(3)
	*tex.mem[p].pHh().pB0() = 14
	*tex.mem[p].pHh().pB1() = s
	*tex.mem[int32(p)+1].pInt() = 0
	*tex.mem[int32(p)+2].pInt() = 0
	ret = p
	return ret
}

func (tex *Context) newChoice() (ret uint16) {
	var p uint16 // 0..65535
	p = tex.getNode(3)
	*tex.mem[p].pHh().pB0() = 15
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pHh().pLh() = 0
	tex.mem[int32(p)+1].pHh().rh = 0
	*tex.mem[int32(p)+2].pHh().pLh() = 0
	tex.mem[int32(p)+2].pHh().rh = 0
	ret = p
	return ret
}

func (tex *Context) showInfo() {
	tex.showNodeList(int32(tex.mem[tex.tempPtr].hh().lh()))
}

func (tex *Context) fractionRule(t int32) (ret uint16) {
	var p uint16 // 0..65535
	p = tex.newRule()
	*tex.mem[int32(p)+3].pInt() = t
	*tex.mem[int32(p)+2].pInt() = 0
	ret = p
	return ret
}

func (tex *Context) overbar(b uint16, k, t int32) (ret uint16) {
	var p, q uint16 // 0..65535
	p = tex.newKern(k)
	tex.mem[p].pHh().rh = b
	q = tex.fractionRule(t)
	tex.mem[q].pHh().rh = p
	p = tex.newKern(t)
	tex.mem[p].pHh().rh = q
	ret = tex.vpackage(p, 0, 1, 1073741823)
	return ret
}

func (tex *Context) charBox(f byte, c byte) (ret uint16) {
	var q fourQuarters // record fourQuarters
	var hd byte        // 0..255
	var b, p uint16    // 0..65535
	q = tex.fontInfo[tex.charBase[f]+int32(c)].qqqq()
	hd = byte(int32(q.b1) - 0)
	b = tex.newNullBox()
	*tex.mem[int32(b)+1].pInt() = tex.fontInfo[tex.widthBase[f]+int32(q.b0)].int() + tex.fontInfo[tex.italicBase[f]+((int32(q.b2)-0)/4)].int()
	*tex.mem[int32(b)+3].pInt() = tex.fontInfo[tex.heightBase[f]+(int32(hd)/16)].int()
	*tex.mem[int32(b)+2].pInt() = tex.fontInfo[tex.depthBase[f]+(int32(hd)%16)].int()
	p = tex.getAvail()
	*tex.mem[p].pHh().pB1() = c
	*tex.mem[p].pHh().pB0() = f
	tex.mem[int32(b)+5].pHh().rh = p
	ret = b
	return ret
}

func (tex *Context) stackIntoBox(b uint16, f byte, c byte) {
	var p uint16 // 0..65535
	p = tex.charBox(f, c)
	tex.mem[p].pHh().rh = tex.mem[int32(b)+5].hh().rh
	tex.mem[int32(b)+5].pHh().rh = p
	*tex.mem[int32(b)+3].pInt() = tex.mem[int32(p)+3].int()
}

func (tex *Context) heightPlusDepth(f byte, c byte) (ret int32) {
	var q fourQuarters // record fourQuarters
	var hd byte        // 0..255
	q = tex.fontInfo[tex.charBase[f]+int32(c)].qqqq()
	hd = byte(int32(q.b1) - 0)
	ret = tex.fontInfo[tex.heightBase[f]+(int32(hd)/16)].int() + tex.fontInfo[tex.depthBase[f]+(int32(hd)%16)].int()
	return ret
}

func (tex *Context) varDelimiter(d uint16, s byte, v int32) (ret uint16) {
	var b uint16          // 0..65535
	var f, g byte         // 0..75
	var c, x, y byte      // 0..255
	var n int32           // integer
	var u int32           // integer
	var w int32           // integer
	var q fourQuarters    // record fourQuarters
	var hd byte           // 0..255
	var r fourQuarters    // record fourQuarters
	var z byte            // 0..63
	var largeAttempt bool // boolean
	f = 0
	w = 0
	largeAttempt = false
	z = tex.mem[d].qqqq().b0
	x = tex.mem[d].qqqq().b1
	for true {
		if (z != 0) || (x != 0) {
			z = byte(int32(z) + int32(s) + 16)
			for {
				z = byte(int32(z) - 16)
				g = byte(tex.eqtb[3935+int32(z)-1].hh().rh)
				if g != 0 {
					y = x
					if ((int32(y) - 0) >= int32(tex.fontBc[g])) && ((int32(y) - 0) <= int32(tex.fontEc[g])) {
					label22:
						q = tex.fontInfo[tex.charBase[g]+int32(y)].qqqq()
						if q.b0 > 0 {
							if ((int32(q.b2) - 0) % 4) == 3 {
								f = g
								c = y
								goto label40
							}
							hd = byte(int32(q.b1) - 0)
							u = tex.fontInfo[tex.heightBase[g]+(int32(hd)/16)].int() + tex.fontInfo[tex.depthBase[g]+(int32(hd)%16)].int()
							if u > w {
								f = g
								c = y
								w = u
								if u >= v {
									goto label40
								}
							}
							if ((int32(q.b2) - 0) % 4) == 2 {
								y = q.b3
								goto label22
							}
						}
					}
				}
				if z < 16 {
					break
				}
			}
		}
		if largeAttempt {
			goto label40
		}
		largeAttempt = true
		z = tex.mem[d].qqqq().b2
		x = tex.mem[d].qqqq().b3
	}
label40:
	if f != 0 {
		if ((int32(q.b2) - 0) % 4) == 3 {
			b = tex.newNullBox()
			*tex.mem[b].pHh().pB0() = 1
			r = tex.fontInfo[tex.extenBase[f]+int32(q.b3)].qqqq()
			c = r.b3
			u = tex.heightPlusDepth(f, c)
			w = 0
			q = tex.fontInfo[tex.charBase[f]+int32(c)].qqqq()
			*tex.mem[int32(b)+1].pInt() = tex.fontInfo[tex.widthBase[f]+int32(q.b0)].int() + tex.fontInfo[tex.italicBase[f]+((int32(q.b2)-0)/4)].int()
			c = r.b2
			if c != 0 {
				w = w + tex.heightPlusDepth(f, c)
			}
			c = r.b1
			if c != 0 {
				w = w + tex.heightPlusDepth(f, c)
			}
			c = r.b0
			if c != 0 {
				w = w + tex.heightPlusDepth(f, c)
			}
			n = 0
			if u > 0 {
				for w < v {
					w = w + u
					n = n + 1
					if r.b1 != 0 {
						w = w + u
					}
				}
			}
			c = r.b2
			if c != 0 {
				tex.stackIntoBox(b, f, c)
			}
			c = r.b3
			for _i := int64(1); _i <= int64(n); _i++ {
				tex.stackIntoBox(b, f, c)
			}
			c = r.b1
			if c != 0 {
				tex.stackIntoBox(b, f, c)
				c = r.b3
				for _i := int64(1); _i <= int64(n); _i++ {
					tex.stackIntoBox(b, f, c)
				}
			}
			c = r.b0
			if c != 0 {
				tex.stackIntoBox(b, f, c)
			}
			*tex.mem[int32(b)+2].pInt() = w - tex.mem[int32(b)+3].int()
		} else {
			b = tex.charBox(f, c)
		}
	} else {
		b = tex.newNullBox()
		*tex.mem[int32(b)+1].pInt() = tex.eqtb[5841-1].int()
	}
	*tex.mem[int32(b)+4].pInt() = tex.half(tex.mem[int32(b)+3].int()-tex.mem[int32(b)+2].int()) - tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(s)-1].hh().rh]].int()
	ret = b
	return ret
}

func (tex *Context) rebox(b uint16, w int32) (ret uint16) {
	var p uint16 // 0..65535
	var f byte   // 0..75
	var v int32  // integer
	if (tex.mem[int32(b)+1].int() != w) && (tex.mem[int32(b)+5].hh().rh != 0) {
		if tex.mem[b].hh().b0() == 1 {
			b = tex.hpack(b, 0, 1)
		}
		p = tex.mem[int32(b)+5].hh().rh
		if (p >= tex.hiMemMin) && (tex.mem[p].hh().rh == 0) {
			f = tex.mem[p].hh().b0()
			v = tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[p].hh().b1())].qqqq().b0)].int()
			if v != tex.mem[int32(b)+1].int() {
				tex.mem[p].pHh().rh = tex.newKern(tex.mem[int32(b)+1].int() - v)
			}
		}
		tex.freeNode(b, 7)
		b = tex.newGlue(12)
		tex.mem[b].pHh().rh = p
		for tex.mem[p].hh().rh != 0 {
			p = tex.mem[p].hh().rh
		}
		tex.mem[p].pHh().rh = tex.newGlue(12)
		ret = tex.hpack(b, w, 0)
	} else {
		*tex.mem[int32(b)+1].pInt() = w
		ret = b
	}
	return ret
}

func (tex *Context) mathGlue(g uint16, m int32) (ret uint16) {
	var p uint16 // 0..65535
	var n int32  // integer
	var f int32  // integer
	n = tex.xOverN(m, 65536)
	f = tex.remainder
	if f < 0 {
		n = n - 1
		f = f + 65536
	}
	p = tex.getNode(4)
	*tex.mem[int32(p)+1].pInt() = tex.multAndAdd(n, tex.mem[int32(g)+1].int(), tex.xnOverD(tex.mem[int32(g)+1].int(), f, 65536), 1073741823)
	*tex.mem[p].pHh().pB0() = tex.mem[g].hh().b0()
	if tex.mem[p].hh().b0() == 0 {
		*tex.mem[int32(p)+2].pInt() = tex.multAndAdd(n, tex.mem[int32(g)+2].int(), tex.xnOverD(tex.mem[int32(g)+2].int(), f, 65536), 1073741823)
	} else {
		*tex.mem[int32(p)+2].pInt() = tex.mem[int32(g)+2].int()
	}
	*tex.mem[p].pHh().pB1() = tex.mem[g].hh().b1()
	if tex.mem[p].hh().b1() == 0 {
		*tex.mem[int32(p)+3].pInt() = tex.multAndAdd(n, tex.mem[int32(g)+3].int(), tex.xnOverD(tex.mem[int32(g)+3].int(), f, 65536), 1073741823)
	} else {
		*tex.mem[int32(p)+3].pInt() = tex.mem[int32(g)+3].int()
	}
	ret = p
	return ret
}

func (tex *Context) mathKern(p uint16, m int32) {
	var n int32 // integer
	var f int32 // integer
	if tex.mem[p].hh().b1() == 99 {
		n = tex.xOverN(m, 65536)
		f = tex.remainder
		if f < 0 {
			n = n - 1
			f = f + 65536
		}
		*tex.mem[int32(p)+1].pInt() = tex.multAndAdd(n, tex.mem[int32(p)+1].int(), tex.xnOverD(tex.mem[int32(p)+1].int(), f, 65536), 1073741823)
		*tex.mem[p].pHh().pB1() = 1
	}
}

func (tex *Context) flushMath() {
	tex.flushNodeList(tex.mem[tex.curList.headField].hh().rh)
	tex.flushNodeList(uint16(tex.curList.auxField.int()))
	tex.mem[tex.curList.headField].pHh().rh = 0
	tex.curList.tailField = tex.curList.headField
	*tex.curList.auxField.pInt() = 0
}

func (tex *Context) cleanBox(p uint16, s byte) (ret uint16) {
	var q uint16       // 0..65535
	var saveStyle byte // 0..63
	var x uint16       // 0..65535
	var r uint16       // 0..65535
	switch tex.mem[p].hh().rh {
	case 1:
		tex.curMlist = tex.newNoad()
		tex.mem[int32(tex.curMlist)+1] = tex.mem[p]
	case 2:
		q = tex.mem[p].hh().lh()
		goto label40
	case 3:
		tex.curMlist = tex.mem[p].hh().lh()
	default:
		q = tex.newNullBox()
		goto label40
	}
	saveStyle = tex.curStyle
	tex.curStyle = s
	tex.mlistPenalties = false
	tex.mlistToHlist()
	q = tex.mem[29997].hh().rh
	tex.curStyle = saveStyle
	if tex.curStyle < 4 {
		tex.curSize = 0
	} else {
		tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
	}
	tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
label40:
	if (q >= tex.hiMemMin) || (q == 0) {
		x = tex.hpack(q, 0, 1)
	} else if (tex.mem[q].hh().rh == 0) && (tex.mem[q].hh().b0() <= 1) && (tex.mem[int32(q)+4].int() == 0) {
		x = q
	} else {
		x = tex.hpack(q, 0, 1)
	}
	q = tex.mem[int32(x)+5].hh().rh
	if q >= tex.hiMemMin {
		r = tex.mem[q].hh().rh
		if r != 0 {
			if tex.mem[r].hh().rh == 0 {
				if !(r >= tex.hiMemMin) {
					if tex.mem[r].hh().b0() == 11 {
						tex.freeNode(r, 2)
						tex.mem[q].pHh().rh = 0
					}
				}
			}
		}
	}
	ret = x
	return ret
}

func (tex *Context) fetch(a uint16) {
	tex.curC = tex.mem[a].hh().b1()
	tex.curF = byte(tex.eqtb[3935+int32(tex.mem[a].hh().b0())+int32(tex.curSize)-1].hh().rh)
	if tex.curF == 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(338)
		tex.printSize(int32(tex.curSize))
		tex.printChar(32)
		tex.printInt(int32(tex.mem[a].hh().b0()))
		tex.print(884)
		tex.print(int32(tex.curC) - 0)
		tex.printChar(41)
		tex.helpPtr = 4
		tex.helpLine[3] = 885
		tex.helpLine[2] = 886
		tex.helpLine[1] = 887
		tex.helpLine[0] = 888
		tex.error1()
		tex.curI = tex.nullCharacter
		tex.mem[a].pHh().rh = 0
	} else {
		if ((int32(tex.curC) - 0) >= int32(tex.fontBc[tex.curF])) && ((int32(tex.curC) - 0) <= int32(tex.fontEc[tex.curF])) {
			tex.curI = tex.fontInfo[tex.charBase[tex.curF]+int32(tex.curC)].qqqq()
		} else {
			tex.curI = tex.nullCharacter
		}
		if !(tex.curI.b0 > 0) {
			tex.charWarning(tex.curF, byte(int32(tex.curC)-0))
			tex.mem[a].pHh().rh = 0
			tex.curI = tex.nullCharacter
		}
	}
}

func (tex *Context) makeOver(q uint16) {
	*tex.mem[int32(q)+1].pHh().pLh() = tex.overbar(tex.cleanBox(uint16(int32(q)+1), byte((2*(int32(tex.curStyle)/2))+1)), (3 * tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()), tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
	tex.mem[int32(q)+1].pHh().rh = 2
}

func (tex *Context) makeUnder(q uint16) {
	var p, x, y uint16 // 0..65535
	var delta int32    // integer
	x = tex.cleanBox(uint16(int32(q)+1), tex.curStyle)
	p = tex.newKern((3 * tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()))
	tex.mem[x].pHh().rh = p
	tex.mem[p].pHh().rh = tex.fractionRule(tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
	y = tex.vpackage(x, 0, 1, 1073741823)
	delta = tex.mem[int32(y)+3].int() + tex.mem[int32(y)+2].int() + tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()
	*tex.mem[int32(y)+3].pInt() = tex.mem[int32(x)+3].int()
	*tex.mem[int32(y)+2].pInt() = delta - tex.mem[int32(y)+3].int()
	*tex.mem[int32(q)+1].pHh().pLh() = y
	tex.mem[int32(q)+1].pHh().rh = 2
}

func (tex *Context) makeVcenter(q uint16) {
	var v uint16    // 0..65535
	var delta int32 // integer
	v = tex.mem[int32(q)+1].hh().lh()
	if tex.mem[v].hh().b0() != 1 {
		tex.confusion(539)
	}
	delta = tex.mem[int32(v)+3].int() + tex.mem[int32(v)+2].int()
	*tex.mem[int32(v)+3].pInt() = tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() + tex.half(delta)
	*tex.mem[int32(v)+2].pInt() = delta - tex.mem[int32(v)+3].int()
}

func (tex *Context) makeRadical(q uint16) {
	var x, y uint16      // 0..65535
	var delta, clr int32 // integer
	x = tex.cleanBox(uint16(int32(q)+1), byte((2*(int32(tex.curStyle)/2))+1))
	if tex.curStyle < 2 {
		clr = tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() + (iabs(tex.fontInfo[5+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()) / 4)
	} else {
		clr = tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()
		clr = clr + (iabs(clr) / 4)
	}
	y = tex.varDelimiter(uint16(int32(q)+4), tex.curSize, tex.mem[int32(x)+3].int()+tex.mem[int32(x)+2].int()+clr+tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
	delta = tex.mem[int32(y)+2].int() - (tex.mem[int32(x)+3].int() + tex.mem[int32(x)+2].int() + clr)
	if delta > 0 {
		clr = clr + tex.half(delta)
	}
	*tex.mem[int32(y)+4].pInt() = -(tex.mem[int32(x)+3].int() + clr)
	tex.mem[y].pHh().rh = tex.overbar(x, clr, tex.mem[int32(y)+3].int())
	*tex.mem[int32(q)+1].pHh().pLh() = tex.hpack(y, 0, 1)
	tex.mem[int32(q)+1].pHh().rh = 2
}

func (tex *Context) makeMathAccent(q uint16) {
	var p, x, y uint16 // 0..65535
	var a int32        // integer
	var c byte         // 0..255
	var f byte         // 0..75
	var i fourQuarters // record fourQuarters
	var s int32        // integer
	var h int32        // integer
	var delta int32    // integer
	var w int32        // integer
	tex.fetch(uint16(int32(q) + 4))
	if tex.curI.b0 > 0 {
		i = tex.curI
		c = tex.curC
		f = tex.curF
		s = 0
		if tex.mem[int32(q)+1].hh().rh == 1 {
			tex.fetch(uint16(int32(q) + 1))
			if ((int32(tex.curI.b2) - 0) % 4) == 1 {
				a = tex.ligKernBase[tex.curF] + int32(tex.curI.b3)
				tex.curI = tex.fontInfo[a].qqqq()
				if tex.curI.b0 > 128 {
					a = tex.ligKernBase[tex.curF] + (256 * int32(tex.curI.b2)) + int32(tex.curI.b3) + 32768 - (256 * 128)
					tex.curI = tex.fontInfo[a].qqqq()
				}
				for true {
					if int32(tex.curI.b1)-0 == tex.skewChar[tex.curF] {
						if tex.curI.b2 >= 128 {
							if tex.curI.b0 <= 128 {
								s = tex.fontInfo[tex.kernBase[tex.curF]+(256*int32(tex.curI.b2))+int32(tex.curI.b3)].int()
							}
						}
						goto label31
					}
					if tex.curI.b0 >= 128 {
						goto label31
					}
					a = a + int32(tex.curI.b0) + 1
					tex.curI = tex.fontInfo[a].qqqq()
				}
			}
		}
	label31:
		x = tex.cleanBox(uint16(int32(q)+1), byte((2*(int32(tex.curStyle)/2))+1))
		w = tex.mem[int32(x)+1].int()
		h = tex.mem[int32(x)+3].int()
		for true {
			if ((int32(i.b2) - 0) % 4) != 2 {
				goto label30
			}
			y = uint16(i.b3)
			i = tex.fontInfo[tex.charBase[f]+int32(y)].qqqq()
			if !(i.b0 > 0) {
				goto label30
			}
			if tex.fontInfo[tex.widthBase[f]+int32(i.b0)].int() > w {
				goto label30
			}
			c = byte(y)
		}
	label30:
		if h < tex.fontInfo[5+tex.paramBase[f]].int() {
			delta = h
		} else {
			delta = tex.fontInfo[5+tex.paramBase[f]].int()
		}
		if (tex.mem[int32(q)+2].hh().rh != 0) || (tex.mem[int32(q)+3].hh().rh != 0) {
			if tex.mem[int32(q)+1].hh().rh == 1 {
				tex.flushNodeList(x)
				x = tex.newNoad()
				tex.mem[int32(x)+1] = tex.mem[int32(q)+1]
				tex.mem[int32(x)+2] = tex.mem[int32(q)+2]
				tex.mem[int32(x)+3] = tex.mem[int32(q)+3]
				*tex.mem[int32(q)+2].pHh() = tex.emptyField
				*tex.mem[int32(q)+3].pHh() = tex.emptyField
				tex.mem[int32(q)+1].pHh().rh = 3
				*tex.mem[int32(q)+1].pHh().pLh() = x
				x = tex.cleanBox(uint16(int32(q)+1), tex.curStyle)
				delta = delta + tex.mem[int32(x)+3].int() - h
				h = tex.mem[int32(x)+3].int()
			}
		}
		y = tex.charBox(f, c)
		*tex.mem[int32(y)+4].pInt() = s + tex.half(w-tex.mem[int32(y)+1].int())
		*tex.mem[int32(y)+1].pInt() = 0
		p = tex.newKern(-delta)
		tex.mem[p].pHh().rh = x
		tex.mem[y].pHh().rh = p
		y = tex.vpackage(y, 0, 1, 1073741823)
		*tex.mem[int32(y)+1].pInt() = tex.mem[int32(x)+1].int()
		if tex.mem[int32(y)+3].int() < h {
			p = tex.newKern(h - tex.mem[int32(y)+3].int())
			tex.mem[p].pHh().rh = tex.mem[int32(y)+5].hh().rh
			tex.mem[int32(y)+5].pHh().rh = p
			*tex.mem[int32(y)+3].pInt() = h
		}
		*tex.mem[int32(q)+1].pHh().pLh() = y
		tex.mem[int32(q)+1].pHh().rh = 2
	}
}

func (tex *Context) makeFraction(q uint16) {
	var p, v, x, y, z uint16                                 // 0..65535
	var delta, delta1, delta2, shiftUp, shiftDown, clr int32 // integer
	if tex.mem[int32(q)+1].int() == 1073741824 {
		*tex.mem[int32(q)+1].pInt() = tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()
	}
	x = tex.cleanBox(uint16(int32(q)+2), byte(int32(tex.curStyle)+2-(2*(int32(tex.curStyle)/6))))
	z = tex.cleanBox(uint16(int32(q)+3), byte((2*(int32(tex.curStyle)/2))+3-(2*(int32(tex.curStyle)/6))))
	if tex.mem[int32(x)+1].int() < tex.mem[int32(z)+1].int() {
		x = tex.rebox(x, tex.mem[int32(z)+1].int())
	} else {
		z = tex.rebox(z, tex.mem[int32(x)+1].int())
	}
	if tex.curStyle < 2 {
		shiftUp = tex.fontInfo[8+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		shiftDown = tex.fontInfo[11+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
	} else {
		shiftDown = tex.fontInfo[12+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		if tex.mem[int32(q)+1].int() != 0 {
			shiftUp = tex.fontInfo[9+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		} else {
			shiftUp = tex.fontInfo[10+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		}
	}
	if tex.mem[int32(q)+1].int() == 0 {
		if tex.curStyle < 2 {
			clr = (7 * tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
		} else {
			clr = (3 * tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
		}
		delta = tex.half(clr - ((shiftUp - tex.mem[int32(x)+2].int()) - (tex.mem[int32(z)+3].int() - shiftDown)))
		if delta > 0 {
			shiftUp = shiftUp + delta
			shiftDown = shiftDown + delta
		}
	} else {
		if tex.curStyle < 2 {
			clr = (3 * tex.mem[int32(q)+1].int())
		} else {
			clr = tex.mem[int32(q)+1].int()
		}
		delta = tex.half(tex.mem[int32(q)+1].int())
		delta1 = clr - ((shiftUp - tex.mem[int32(x)+2].int()) - (tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() + delta))
		delta2 = clr - ((tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() - delta) - (tex.mem[int32(z)+3].int() - shiftDown))
		if delta1 > 0 {
			shiftUp = shiftUp + delta1
		}
		if delta2 > 0 {
			shiftDown = shiftDown + delta2
		}
	}
	v = tex.newNullBox()
	*tex.mem[v].pHh().pB0() = 1
	*tex.mem[int32(v)+3].pInt() = shiftUp + tex.mem[int32(x)+3].int()
	*tex.mem[int32(v)+2].pInt() = tex.mem[int32(z)+2].int() + shiftDown
	*tex.mem[int32(v)+1].pInt() = tex.mem[int32(x)+1].int()
	if tex.mem[int32(q)+1].int() == 0 {
		p = tex.newKern((shiftUp - tex.mem[int32(x)+2].int()) - (tex.mem[int32(z)+3].int() - shiftDown))
		tex.mem[p].pHh().rh = z
	} else {
		y = tex.fractionRule(tex.mem[int32(q)+1].int())
		p = tex.newKern((tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() - delta) - (tex.mem[int32(z)+3].int() - shiftDown))
		tex.mem[y].pHh().rh = p
		tex.mem[p].pHh().rh = z
		p = tex.newKern((shiftUp - tex.mem[int32(x)+2].int()) - (tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() + delta))
		tex.mem[p].pHh().rh = y
	}
	tex.mem[x].pHh().rh = p
	tex.mem[int32(v)+5].pHh().rh = x
	if tex.curStyle < 2 {
		delta = tex.fontInfo[20+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
	} else {
		delta = tex.fontInfo[21+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
	}
	x = tex.varDelimiter(uint16(int32(q)+4), tex.curSize, delta)
	tex.mem[x].pHh().rh = v
	z = tex.varDelimiter(uint16(int32(q)+5), tex.curSize, delta)
	tex.mem[v].pHh().rh = z
	*tex.mem[int32(q)+1].pInt() = int32(tex.hpack(x, 0, 1))
}

func (tex *Context) makeOp(q uint16) (ret int32) {
	var delta int32              // integer
	var p, v, x, y, z uint16     // 0..65535
	var c byte                   // 0..255
	var i fourQuarters           // record fourQuarters
	var shiftUp, shiftDown int32 // integer
	if (tex.mem[q].hh().b1() == 0) && (tex.curStyle < 2) {
		*tex.mem[q].pHh().pB1() = 1
	}
	if tex.mem[int32(q)+1].hh().rh == 1 {
		tex.fetch(uint16(int32(q) + 1))
		if (tex.curStyle < 2) && (((int32(tex.curI.b2) - 0) % 4) == 2) {
			c = tex.curI.b3
			i = tex.fontInfo[tex.charBase[tex.curF]+int32(c)].qqqq()
			if i.b0 > 0 {
				tex.curC = c
				tex.curI = i
				*tex.mem[int32(q)+1].pHh().pB1() = c
			}
		}
		delta = tex.fontInfo[tex.italicBase[tex.curF]+((int32(tex.curI.b2)-0)/4)].int()
		x = tex.cleanBox(uint16(int32(q)+1), tex.curStyle)
		if (tex.mem[int32(q)+3].hh().rh != 0) && (tex.mem[q].hh().b1() != 1) {
			*tex.mem[int32(x)+1].pInt() = tex.mem[int32(x)+1].int() - delta
		}
		*tex.mem[int32(x)+4].pInt() = tex.half(tex.mem[int32(x)+3].int()-tex.mem[int32(x)+2].int()) - tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		tex.mem[int32(q)+1].pHh().rh = 2
		*tex.mem[int32(q)+1].pHh().pLh() = x
	} else {
		delta = 0
	}
	if tex.mem[q].hh().b1() == 1 {
		x = tex.cleanBox(uint16(int32(q)+2), byte((2*(int32(tex.curStyle)/4))+4+(int32(tex.curStyle)%2)))
		y = tex.cleanBox(uint16(int32(q)+1), tex.curStyle)
		z = tex.cleanBox(uint16(int32(q)+3), byte((2*(int32(tex.curStyle)/4))+5))
		v = tex.newNullBox()
		*tex.mem[v].pHh().pB0() = 1
		*tex.mem[int32(v)+1].pInt() = tex.mem[int32(y)+1].int()
		if tex.mem[int32(x)+1].int() > tex.mem[int32(v)+1].int() {
			*tex.mem[int32(v)+1].pInt() = tex.mem[int32(x)+1].int()
		}
		if tex.mem[int32(z)+1].int() > tex.mem[int32(v)+1].int() {
			*tex.mem[int32(v)+1].pInt() = tex.mem[int32(z)+1].int()
		}
		x = tex.rebox(x, tex.mem[int32(v)+1].int())
		y = tex.rebox(y, tex.mem[int32(v)+1].int())
		z = tex.rebox(z, tex.mem[int32(v)+1].int())
		*tex.mem[int32(x)+4].pInt() = tex.half(delta)
		*tex.mem[int32(z)+4].pInt() = -tex.mem[int32(x)+4].int()
		*tex.mem[int32(v)+3].pInt() = tex.mem[int32(y)+3].int()
		*tex.mem[int32(v)+2].pInt() = tex.mem[int32(y)+2].int()
		if tex.mem[int32(q)+2].hh().rh == 0 {
			tex.freeNode(x, 7)
			tex.mem[int32(v)+5].pHh().rh = y
		} else {
			shiftUp = tex.fontInfo[11+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() - tex.mem[int32(x)+2].int()
			if shiftUp < tex.fontInfo[9+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() {
				shiftUp = tex.fontInfo[9+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()
			}
			p = tex.newKern(shiftUp)
			tex.mem[p].pHh().rh = y
			tex.mem[x].pHh().rh = p
			p = tex.newKern(tex.fontInfo[13+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
			tex.mem[p].pHh().rh = x
			tex.mem[int32(v)+5].pHh().rh = p
			*tex.mem[int32(v)+3].pInt() = tex.mem[int32(v)+3].int() + tex.fontInfo[13+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() + tex.mem[int32(x)+3].int() + tex.mem[int32(x)+2].int() + shiftUp
		}
		if tex.mem[int32(q)+3].hh().rh == 0 {
			tex.freeNode(z, 7)
		} else {
			shiftDown = tex.fontInfo[12+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() - tex.mem[int32(z)+3].int()
			if shiftDown < tex.fontInfo[10+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() {
				shiftDown = tex.fontInfo[10+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()
			}
			p = tex.newKern(shiftDown)
			tex.mem[y].pHh().rh = p
			tex.mem[p].pHh().rh = z
			p = tex.newKern(tex.fontInfo[13+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int())
			tex.mem[z].pHh().rh = p
			*tex.mem[int32(v)+2].pInt() = tex.mem[int32(v)+2].int() + tex.fontInfo[13+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int() + tex.mem[int32(z)+3].int() + tex.mem[int32(z)+2].int() + shiftDown
		}
		*tex.mem[int32(q)+1].pInt() = int32(v)
	}
	ret = delta
	return ret
}

func (tex *Context) makeOrd(q uint16) {
	var a int32     // integer
	var p, r uint16 // 0..65535
label20:
	if tex.mem[int32(q)+3].hh().rh == 0 {
		if tex.mem[int32(q)+2].hh().rh == 0 {
			if tex.mem[int32(q)+1].hh().rh == 1 {
				p = tex.mem[q].hh().rh
				if p != 0 {
					if (tex.mem[p].hh().b0() >= 16) && (tex.mem[p].hh().b0() <= 22) {
						if tex.mem[int32(p)+1].hh().rh == 1 {
							if tex.mem[int32(p)+1].hh().b0() == tex.mem[int32(q)+1].hh().b0() {
								tex.mem[int32(q)+1].pHh().rh = 4
								tex.fetch(uint16(int32(q) + 1))
								if ((int32(tex.curI.b2) - 0) % 4) == 1 {
									a = tex.ligKernBase[tex.curF] + int32(tex.curI.b3)
									tex.curC = tex.mem[int32(p)+1].hh().b1()
									tex.curI = tex.fontInfo[a].qqqq()
									if tex.curI.b0 > 128 {
										a = tex.ligKernBase[tex.curF] + (256 * int32(tex.curI.b2)) + int32(tex.curI.b3) + 32768 - (256 * 128)
										tex.curI = tex.fontInfo[a].qqqq()
									}
									for true {
										if tex.curI.b1 == tex.curC {
											if tex.curI.b0 <= 128 {
												if tex.curI.b2 >= 128 {
													p = tex.newKern(tex.fontInfo[tex.kernBase[tex.curF]+(256*int32(tex.curI.b2))+int32(tex.curI.b3)].int())
													tex.mem[p].pHh().rh = tex.mem[q].hh().rh
													tex.mem[q].pHh().rh = p
													goto label10
												} else {
													if tex.interrupt != 0 {
														tex.pauseForInstructions()
													}
													switch tex.curI.b2 {
													case 1, 5:
														*tex.mem[int32(q)+1].pHh().pB1() = tex.curI.b3
													case 2, 6:
														*tex.mem[int32(p)+1].pHh().pB1() = tex.curI.b3
													case 3, 7, 11:
														r = tex.newNoad()
														*tex.mem[int32(r)+1].pHh().pB1() = tex.curI.b3
														*tex.mem[int32(r)+1].pHh().pB0() = tex.mem[int32(q)+1].hh().b0()
														tex.mem[q].pHh().rh = r
														tex.mem[r].pHh().rh = p
														if tex.curI.b2 < 11 {
															tex.mem[int32(r)+1].pHh().rh = 1
														} else {
															tex.mem[int32(r)+1].pHh().rh = 4
														}
													default:
														tex.mem[q].pHh().rh = tex.mem[p].hh().rh
														*tex.mem[int32(q)+1].pHh().pB1() = tex.curI.b3
														tex.mem[int32(q)+3] = tex.mem[int32(p)+3]
														tex.mem[int32(q)+2] = tex.mem[int32(p)+2]
														tex.freeNode(p, 4)
													}
													if tex.curI.b2 > 3 {
														goto label10
													}
													tex.mem[int32(q)+1].pHh().rh = 1
													goto label20
												}
											}
										}
										if tex.curI.b0 >= 128 {
											goto label10
										}
										a = a + int32(tex.curI.b0) + 1
										tex.curI = tex.fontInfo[a].qqqq()
									}
								}
							}
						}
					}
				}
			}
		}
	}
label10:
}

func (tex *Context) makeScripts(q uint16, delta int32) {
	var p, x, y, z uint16             // 0..65535
	var shiftUp, shiftDown, clr int32 // integer
	var t byte                        // 0..63
	p = uint16(tex.mem[int32(q)+1].int())
	if p >= tex.hiMemMin {
		shiftUp = 0
		shiftDown = 0
	} else {
		z = tex.hpack(p, 0, 1)
		if tex.curStyle < 4 {
			t = 16
		} else {
			t = 32
		}
		shiftUp = tex.mem[int32(z)+3].int() - tex.fontInfo[18+tex.paramBase[tex.eqtb[3937+int32(t)-1].hh().rh]].int()
		shiftDown = tex.mem[int32(z)+2].int() + tex.fontInfo[19+tex.paramBase[tex.eqtb[3937+int32(t)-1].hh().rh]].int()
		tex.freeNode(z, 7)
	}
	if tex.mem[int32(q)+2].hh().rh == 0 {
		x = tex.cleanBox(uint16(int32(q)+3), byte((2*(int32(tex.curStyle)/4))+5))
		*tex.mem[int32(x)+1].pInt() = tex.mem[int32(x)+1].int() + tex.eqtb[5842-1].int()
		if shiftDown < tex.fontInfo[16+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() {
			shiftDown = tex.fontInfo[16+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		}
		clr = tex.mem[int32(x)+3].int() - (iabs((tex.fontInfo[5+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() * 4)) / 5)
		if shiftDown < clr {
			shiftDown = clr
		}
		*tex.mem[int32(x)+4].pInt() = shiftDown
	} else {
		x = tex.cleanBox(uint16(int32(q)+2), byte((2*(int32(tex.curStyle)/4))+4+(int32(tex.curStyle)%2)))
		*tex.mem[int32(x)+1].pInt() = tex.mem[int32(x)+1].int() + tex.eqtb[5842-1].int()
		if odd(int32(tex.curStyle)) {
			clr = tex.fontInfo[15+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		} else if tex.curStyle < 2 {
			clr = tex.fontInfo[13+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		} else {
			clr = tex.fontInfo[14+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
		}
		if shiftUp < clr {
			shiftUp = clr
		}
		clr = tex.mem[int32(x)+2].int() + (iabs(tex.fontInfo[5+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()) / 4)
		if shiftUp < clr {
			shiftUp = clr
		}
		if tex.mem[int32(q)+3].hh().rh == 0 {
			*tex.mem[int32(x)+4].pInt() = -shiftUp
		} else {
			y = tex.cleanBox(uint16(int32(q)+3), byte((2*(int32(tex.curStyle)/4))+5))
			*tex.mem[int32(y)+1].pInt() = tex.mem[int32(y)+1].int() + tex.eqtb[5842-1].int()
			if shiftDown < tex.fontInfo[17+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() {
				shiftDown = tex.fontInfo[17+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
			}
			clr = (4 * tex.fontInfo[8+tex.paramBase[tex.eqtb[3938+int32(tex.curSize)-1].hh().rh]].int()) - ((shiftUp - tex.mem[int32(x)+2].int()) - (tex.mem[int32(y)+3].int() - shiftDown))
			if clr > 0 {
				shiftDown = shiftDown + clr
				clr = (iabs((tex.fontInfo[5+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int() * 4)) / 5) - (shiftUp - tex.mem[int32(x)+2].int())
				if clr > 0 {
					shiftUp = shiftUp + clr
					shiftDown = shiftDown - clr
				}
			}
			*tex.mem[int32(x)+4].pInt() = delta
			p = tex.newKern((shiftUp - tex.mem[int32(x)+2].int()) - (tex.mem[int32(y)+3].int() - shiftDown))
			tex.mem[x].pHh().rh = p
			tex.mem[p].pHh().rh = y
			x = tex.vpackage(x, 0, 1, 1073741823)
			*tex.mem[int32(x)+4].pInt() = shiftDown
		}
	}
	if tex.mem[int32(q)+1].int() == 0 {
		*tex.mem[int32(q)+1].pInt() = int32(x)
	} else {
		p = uint16(tex.mem[int32(q)+1].int())
		for tex.mem[p].hh().rh != 0 {
			p = tex.mem[p].hh().rh
		}
		tex.mem[p].pHh().rh = x
	}
}

func (tex *Context) makeLeftRight(q uint16, style byte, maxD, maxH int32) (ret byte) {
	var delta, delta1, delta2 int32 // integer
	if style < 4 {
		tex.curSize = 0
	} else {
		tex.curSize = byte((16 * ((int32(style) - 2) / 2)))
	}
	delta2 = maxD + tex.fontInfo[22+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int()
	delta1 = maxH + maxD - delta2
	if delta2 > delta1 {
		delta1 = delta2
	}
	delta = ((delta1 / 500) * tex.eqtb[5281-1].int())
	delta2 = delta1 + delta1 - tex.eqtb[5840-1].int()
	if delta < delta2 {
		delta = delta2
	}
	*tex.mem[int32(q)+1].pInt() = int32(tex.varDelimiter(uint16(int32(q)+1), tex.curSize, delta))
	ret = byte(int32(tex.mem[q].hh().b0()) - 10)
	return ret
}

func (tex *Context) mlistToHlist() {
	var mlist uint16      // 0..65535
	var penalties bool    // boolean
	var style byte        // 0..63
	var saveStyle byte    // 0..63
	var q uint16          // 0..65535
	var r uint16          // 0..65535
	var rType byte        // 0..63
	var t byte            // 0..63
	var p, x, y, z uint16 // 0..65535
	var pen int32         // integer
	var s byte            // 0..63
	var maxH, maxD int32  // integer
	var delta int32       // integer
	mlist = tex.curMlist
	penalties = tex.mlistPenalties
	style = tex.curStyle
	q = mlist
	r = 0
	rType = 17
	maxH = 0
	maxD = 0
	if tex.curStyle < 4 {
		tex.curSize = 0
	} else {
		tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
	}
	tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
	for q != 0 {
	label21:
		delta = 0
		switch tex.mem[q].hh().b0() {
		case 18:
			switch rType {
			case 18, 17, 19, 20, 22, 30:
				*tex.mem[q].pHh().pB0() = 16
				goto label21
			default:
			}
		case 19, 21, 22, 31:
			if rType == 18 {
				*tex.mem[r].pHh().pB0() = 16
			}
			if tex.mem[q].hh().b0() == 31 {
				goto label80
			}
		case 30:
			goto label80
		case 25:
			tex.makeFraction(q)
			goto label82
		case 17:
			delta = tex.makeOp(q)
			if tex.mem[q].hh().b1() == 1 {
				goto label82
			}
		case 16:
			tex.makeOrd(q)
		case 20, 23:
		case 24:
			tex.makeRadical(q)
		case 27:
			tex.makeOver(q)
		case 26:
			tex.makeUnder(q)
		case 28:
			tex.makeMathAccent(q)
		case 29:
			tex.makeVcenter(q)
		case 14:
			tex.curStyle = tex.mem[q].hh().b1()
			if tex.curStyle < 4 {
				tex.curSize = 0
			} else {
				tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
			}
			tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
			goto label81
		case 15:
			switch int32(tex.curStyle) / 2 {
			case 0:
				p = tex.mem[int32(q)+1].hh().lh()
				*tex.mem[int32(q)+1].pHh().pLh() = 0
			case 1:
				p = tex.mem[int32(q)+1].hh().rh
				tex.mem[int32(q)+1].pHh().rh = 0
			case 2:
				p = tex.mem[int32(q)+2].hh().lh()
				*tex.mem[int32(q)+2].pHh().pLh() = 0
			case 3:
				p = tex.mem[int32(q)+2].hh().rh
				tex.mem[int32(q)+2].pHh().rh = 0
			}
			tex.flushNodeList(tex.mem[int32(q)+1].hh().lh())
			tex.flushNodeList(tex.mem[int32(q)+1].hh().rh)
			tex.flushNodeList(tex.mem[int32(q)+2].hh().lh())
			tex.flushNodeList(tex.mem[int32(q)+2].hh().rh)
			*tex.mem[q].pHh().pB0() = 14
			*tex.mem[q].pHh().pB1() = tex.curStyle
			*tex.mem[int32(q)+1].pInt() = 0
			*tex.mem[int32(q)+2].pInt() = 0
			if p != 0 {
				z = tex.mem[q].hh().rh
				tex.mem[q].pHh().rh = p
				for tex.mem[p].hh().rh != 0 {
					p = tex.mem[p].hh().rh
				}
				tex.mem[p].pHh().rh = z
			}
			goto label81
		case 3, 4, 5, 8, 12, 7:
			goto label81
		case 2:
			if tex.mem[int32(q)+3].int() > maxH {
				maxH = tex.mem[int32(q)+3].int()
			}
			if tex.mem[int32(q)+2].int() > maxD {
				maxD = tex.mem[int32(q)+2].int()
			}
			goto label81
		case 10:
			if tex.mem[q].hh().b1() == 99 {
				x = tex.mem[int32(q)+1].hh().lh()
				y = tex.mathGlue(x, tex.curMu)
				tex.deleteGlueRef(x)
				*tex.mem[int32(q)+1].pHh().pLh() = y
				*tex.mem[q].pHh().pB1() = 0
			} else if (tex.curSize != 0) && (tex.mem[q].hh().b1() == 98) {
				p = tex.mem[q].hh().rh
				if p != 0 {
					if (tex.mem[p].hh().b0() == 10) || (tex.mem[p].hh().b0() == 11) {
						tex.mem[q].pHh().rh = tex.mem[p].hh().rh
						tex.mem[p].pHh().rh = 0
						tex.flushNodeList(p)
					}
				}
			}
			goto label81
		case 11:
			tex.mathKern(q, tex.curMu)
			goto label81
		default:
			tex.confusion(889)
		}
		switch tex.mem[int32(q)+1].hh().rh {
		case 1, 4:
			tex.fetch(uint16(int32(q) + 1))
			if tex.curI.b0 > 0 {
				delta = tex.fontInfo[tex.italicBase[tex.curF]+((int32(tex.curI.b2)-0)/4)].int()
				p = tex.newCharacter(tex.curF, byte(int32(tex.curC)-0))
				if (tex.mem[int32(q)+1].hh().rh == 4) && (tex.fontInfo[2+tex.paramBase[tex.curF]].int() != 0) {
					delta = 0
				}
				if (tex.mem[int32(q)+3].hh().rh == 0) && (delta != 0) {
					tex.mem[p].pHh().rh = tex.newKern(delta)
					delta = 0
				}
			} else {
				p = 0
			}
		case 0:
			p = 0
		case 2:
			p = tex.mem[int32(q)+1].hh().lh()
		case 3:
			tex.curMlist = tex.mem[int32(q)+1].hh().lh()
			saveStyle = tex.curStyle
			tex.mlistPenalties = false
			tex.mlistToHlist()
			tex.curStyle = saveStyle
			if tex.curStyle < 4 {
				tex.curSize = 0
			} else {
				tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
			}
			tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
			p = tex.hpack(tex.mem[29997].hh().rh, 0, 1)
		default:
			tex.confusion(890)
		}
		*tex.mem[int32(q)+1].pInt() = int32(p)
		if (tex.mem[int32(q)+3].hh().rh == 0) && (tex.mem[int32(q)+2].hh().rh == 0) {
			goto label82
		}
		tex.makeScripts(q, delta)
	label82:
		z = tex.hpack(uint16(tex.mem[int32(q)+1].int()), 0, 1)
		if tex.mem[int32(z)+3].int() > maxH {
			maxH = tex.mem[int32(z)+3].int()
		}
		if tex.mem[int32(z)+2].int() > maxD {
			maxD = tex.mem[int32(z)+2].int()
		}
		tex.freeNode(z, 7)
	label80:
		r = q
		rType = tex.mem[r].hh().b0()
	label81:
		q = tex.mem[q].hh().rh
	}
	if rType == 18 {
		*tex.mem[r].pHh().pB0() = 16
	}
	p = 29997
	tex.mem[p].pHh().rh = 0
	q = mlist
	rType = 0
	tex.curStyle = style
	if tex.curStyle < 4 {
		tex.curSize = 0
	} else {
		tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
	}
	tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
	for q != 0 {
		t = 16
		s = 4
		pen = 10000
		switch tex.mem[q].hh().b0() {
		case 17, 20, 21, 22, 23:
			t = tex.mem[q].hh().b0()
		case 18:
			t = 18
			pen = tex.eqtb[5272-1].int()
		case 19:
			t = 19
			pen = tex.eqtb[5273-1].int()
		case 16, 29, 27, 26:
		case 24:
			s = 5
		case 28:
			s = 5
		case 25:
			s = 6
		case 30, 31:
			t = tex.makeLeftRight(q, style, maxD, maxH)
		case 14:
			tex.curStyle = tex.mem[q].hh().b1()
			s = 3
			if tex.curStyle < 4 {
				tex.curSize = 0
			} else {
				tex.curSize = byte((16 * ((int32(tex.curStyle) - 2) / 2)))
			}
			tex.curMu = tex.xOverN(tex.fontInfo[6+tex.paramBase[tex.eqtb[3937+int32(tex.curSize)-1].hh().rh]].int(), 18)
			goto label83
		case 8, 12, 2, 7, 5, 3, 4, 10, 11:
			tex.mem[p].pHh().rh = q
			p = q
			q = tex.mem[q].hh().rh
			tex.mem[p].pHh().rh = 0
			goto label30
		default:
			tex.confusion(891)
		}
		if rType > 0 {
			switch tex.strPool[(int32(rType)*8)+int32(t)+tex.magicOffset] {
			case 48:
				x = 0
			case 49:
				if tex.curStyle < 4 {
					x = 15
				} else {
					x = 0
				}
			case 50:
				x = 15
			case 51:
				if tex.curStyle < 4 {
					x = 16
				} else {
					x = 0
				}
			case 52:
				if tex.curStyle < 4 {
					x = 17
				} else {
					x = 0
				}
			default:
				tex.confusion(893)
			}
			if x != 0 {
				y = tex.mathGlue(tex.eqtb[2882+int32(x)-1].hh().rh, tex.curMu)
				z = tex.newGlue(y)
				tex.mem[y].pHh().rh = 0
				tex.mem[p].pHh().rh = z
				p = z
				*tex.mem[z].pHh().pB1() = byte(int32(x) + 1)
			}
		}
		if tex.mem[int32(q)+1].int() != 0 {
			tex.mem[p].pHh().rh = uint16(tex.mem[int32(q)+1].int())
			for {
				p = tex.mem[p].hh().rh
				if tex.mem[p].hh().rh == 0 {
					break
				}
			}
		}
		if penalties {
			if tex.mem[q].hh().rh != 0 {
				if pen < 10000 {
					rType = tex.mem[tex.mem[q].hh().rh].hh().b0()
					if rType != 12 {
						if rType != 19 {
							z = tex.newPenalty(pen)
							tex.mem[p].pHh().rh = z
							p = z
						}
					}
				}
			}
		}
		rType = t
	label83:
		r = q
		q = tex.mem[q].hh().rh
		tex.freeNode(r, uint16(s))
	label30:
	}
}

func (tex *Context) pushAlignment() {
	var p uint16 // 0..65535
	p = tex.getNode(5)
	tex.mem[p].pHh().rh = tex.alignPtr
	*tex.mem[p].pHh().pLh() = tex.curAlign
	*tex.mem[int32(p)+1].pHh().pLh() = tex.mem[29992].hh().rh
	tex.mem[int32(p)+1].pHh().rh = tex.curSpan
	*tex.mem[int32(p)+2].pInt() = int32(tex.curLoop)
	*tex.mem[int32(p)+3].pInt() = tex.alignState
	*tex.mem[int32(p)+4].pHh().pLh() = tex.curHead
	tex.mem[int32(p)+4].pHh().rh = tex.curTail
	tex.alignPtr = p
	tex.curHead = tex.getAvail()
}

func (tex *Context) popAlignment() {
	var p uint16 // 0..65535
	tex.mem[tex.curHead].pHh().rh = tex.avail
	tex.avail = tex.curHead
	p = tex.alignPtr
	tex.curTail = tex.mem[int32(p)+4].hh().rh
	tex.curHead = tex.mem[int32(p)+4].hh().lh()
	tex.alignState = tex.mem[int32(p)+3].int()
	tex.curLoop = uint16(tex.mem[int32(p)+2].int())
	tex.curSpan = tex.mem[int32(p)+1].hh().rh
	tex.mem[29992].pHh().rh = tex.mem[int32(p)+1].hh().lh()
	tex.curAlign = tex.mem[p].hh().lh()
	tex.alignPtr = tex.mem[p].hh().rh
	tex.freeNode(p, 5)
}

func (tex *Context) getPreambleToken() {
label20:
	tex.getToken()
	for (tex.curChr == 256) && (tex.curCmd == 4) {
		tex.getToken()
		if tex.curCmd > 100 {
			tex.expand()
			tex.getToken()
		}
	}
	if tex.curCmd == 9 {
		tex.fatalError(595)
	}
	if (tex.curCmd == 75) && (tex.curChr == 2893) {
		tex.scanOptionalEquals()
		tex.scanGlue(2)
		if tex.eqtb[5306-1].int() > 0 {
			tex.geqDefine(2893, 117, uint16(tex.curVal))
		} else {
			tex.eqDefine(2893, 117, uint16(tex.curVal))
		}
		goto label20
	}
}

func (tex *Context) initAlign() {
	var saveCsPtr uint16 // 0..65535
	var p uint16         // 0..65535
	saveCsPtr = tex.curCs
	tex.pushAlignment()
	tex.alignState = -1000000
	if (tex.curList.modeField == 203) && ((tex.curList.tailField != tex.curList.headField) || (tex.curList.auxField.int() != 0)) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(680)
		tex.printEsc(520)
		tex.print(894)
		tex.helpPtr = 3
		tex.helpLine[2] = 895
		tex.helpLine[1] = 896
		tex.helpLine[0] = 897
		tex.error1()
		tex.flushMath()
	}
	tex.pushNest()
	if tex.curList.modeField == 203 {
		tex.curList.modeField = -1
		*tex.curList.auxField.pInt() = tex.nest[int32(tex.nestPtr)-2].auxField.int()
	} else if tex.curList.modeField > 0 {
		tex.curList.modeField = -tex.curList.modeField
	}
	tex.scanSpec(6, false)
	tex.mem[29992].pHh().rh = 0
	tex.curAlign = 29992
	tex.curLoop = 0
	tex.scannerStatus = 4
	tex.warningIndex = saveCsPtr
	tex.alignState = -1000000
	for true {
		tex.mem[tex.curAlign].pHh().rh = tex.newParamGlue(11)
		tex.curAlign = tex.mem[tex.curAlign].hh().rh
		if tex.curCmd == 5 {
			goto label30
		}
		p = 29996
		tex.mem[p].pHh().rh = 0
		for true {
			tex.getPreambleToken()
			if tex.curCmd == 6 {
				goto label31
			}
			if (tex.curCmd <= 5) && (tex.curCmd >= 4) && (tex.alignState == -1000000) {
				if (p == 29996) && (tex.curLoop == 0) && (tex.curCmd == 4) {
					tex.curLoop = tex.curAlign
				} else {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(903)
					tex.helpPtr = 3
					tex.helpLine[2] = 904
					tex.helpLine[1] = 905
					tex.helpLine[0] = 906
					tex.backError()
					goto label31
				}
			} else if (tex.curCmd != 10) || (p != 29996) {
				tex.mem[p].pHh().rh = tex.getAvail()
				p = tex.mem[p].hh().rh
				*tex.mem[p].pHh().pLh() = tex.curTok
			}
		}
	label31:
		tex.mem[tex.curAlign].pHh().rh = tex.newNullBox()
		tex.curAlign = tex.mem[tex.curAlign].hh().rh
		*tex.mem[tex.curAlign].pHh().pLh() = 29991
		*tex.mem[int32(tex.curAlign)+1].pInt() = -1073741824
		*tex.mem[int32(tex.curAlign)+3].pInt() = int32(tex.mem[29996].hh().rh)
		p = 29996
		tex.mem[p].pHh().rh = 0
		for true {
		label22:
			tex.getPreambleToken()
			if (tex.curCmd <= 5) && (tex.curCmd >= 4) && (tex.alignState == -1000000) {
				goto label32
			}
			if tex.curCmd == 6 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(907)
				tex.helpPtr = 3
				tex.helpLine[2] = 904
				tex.helpLine[1] = 905
				tex.helpLine[0] = 908
				tex.error1()
				goto label22
			}
			tex.mem[p].pHh().rh = tex.getAvail()
			p = tex.mem[p].hh().rh
			*tex.mem[p].pHh().pLh() = tex.curTok
		}
	label32:
		tex.mem[p].pHh().rh = tex.getAvail()
		p = tex.mem[p].hh().rh
		*tex.mem[p].pHh().pLh() = 6714
		*tex.mem[int32(tex.curAlign)+2].pInt() = int32(tex.mem[29996].hh().rh)
	}
label30:
	tex.scannerStatus = 0
	tex.newSaveLevel(6)
	if tex.eqtb[3420-1].hh().rh != 0 {
		tex.beginTokenList(tex.eqtb[3420-1].hh().rh, 13)
	}
	tex.alignPeek()
}

func (tex *Context) initSpan(p uint16) {
	tex.pushNest()
	if tex.curList.modeField == -102 {
		*tex.curList.auxField.pHh().pLh() = 1000
	} else {
		*tex.curList.auxField.pInt() = -65536000
		tex.normalParagraph()
	}
	tex.curSpan = p
}

func (tex *Context) initRow() {
	tex.pushNest()
	tex.curList.modeField = int16(-103 - int32(tex.curList.modeField))
	if tex.curList.modeField == -102 {
		*tex.curList.auxField.pHh().pLh() = 0
	} else {
		*tex.curList.auxField.pInt() = 0
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.newGlue(tex.mem[int32(tex.mem[29992].hh().rh)+1].hh().lh())
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	*tex.mem[tex.curList.tailField].pHh().pB1() = 12
	tex.curAlign = tex.mem[tex.mem[29992].hh().rh].hh().rh
	tex.curTail = tex.curHead
	tex.initSpan(tex.curAlign)
}

func (tex *Context) initCol() {
	*tex.mem[int32(tex.curAlign)+5].pHh().pLh() = uint16(tex.curCmd)
	if tex.curCmd == 63 {
		tex.alignState = 0
	} else {
		tex.backInput()
		tex.beginTokenList(uint16(tex.mem[int32(tex.curAlign)+3].int()), 1)
	}
}

func (tex *Context) finCol() (ret bool) {
	var p uint16    // 0..65535
	var q, r uint16 // 0..65535
	var s uint16    // 0..65535
	var u uint16    // 0..65535
	var w int32     // integer
	var o byte      // 0..3
	var n uint16    // 0..65535
	if tex.curAlign == 0 {
		tex.confusion(909)
	}
	q = tex.mem[tex.curAlign].hh().rh
	if q == 0 {
		tex.confusion(909)
	}
	if tex.alignState < 500000 {
		tex.fatalError(595)
	}
	p = tex.mem[q].hh().rh
	if (p == 0) && (tex.mem[int32(tex.curAlign)+5].hh().lh() < 257) {
		if tex.curLoop != 0 {
			tex.mem[q].pHh().rh = tex.newNullBox()
			p = tex.mem[q].hh().rh
			*tex.mem[p].pHh().pLh() = 29991
			*tex.mem[int32(p)+1].pInt() = -1073741824
			tex.curLoop = tex.mem[tex.curLoop].hh().rh
			q = 29996
			r = uint16(tex.mem[int32(tex.curLoop)+3].int())
			for r != 0 {
				tex.mem[q].pHh().rh = tex.getAvail()
				q = tex.mem[q].hh().rh
				*tex.mem[q].pHh().pLh() = tex.mem[r].hh().lh()
				r = tex.mem[r].hh().rh
			}
			tex.mem[q].pHh().rh = 0
			*tex.mem[int32(p)+3].pInt() = int32(tex.mem[29996].hh().rh)
			q = 29996
			r = uint16(tex.mem[int32(tex.curLoop)+2].int())
			for r != 0 {
				tex.mem[q].pHh().rh = tex.getAvail()
				q = tex.mem[q].hh().rh
				*tex.mem[q].pHh().pLh() = tex.mem[r].hh().lh()
				r = tex.mem[r].hh().rh
			}
			tex.mem[q].pHh().rh = 0
			*tex.mem[int32(p)+2].pInt() = int32(tex.mem[29996].hh().rh)
			tex.curLoop = tex.mem[tex.curLoop].hh().rh
			tex.mem[p].pHh().rh = tex.newGlue(tex.mem[int32(tex.curLoop)+1].hh().lh())
			*tex.mem[tex.mem[p].hh().rh].pHh().pB1() = 12
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(910)
			tex.printEsc(899)
			tex.helpPtr = 3
			tex.helpLine[2] = 911
			tex.helpLine[1] = 912
			tex.helpLine[0] = 913
			*tex.mem[int32(tex.curAlign)+5].pHh().pLh() = 257
			tex.error1()
		}
	}
	if tex.mem[int32(tex.curAlign)+5].hh().lh() != 256 {
		tex.unsave()
		tex.newSaveLevel(6)
		if tex.curList.modeField == -102 {
			tex.adjustTail = tex.curTail
			u = tex.hpack(tex.mem[tex.curList.headField].hh().rh, 0, 1)
			w = tex.mem[int32(u)+1].int()
			tex.curTail = tex.adjustTail
			tex.adjustTail = 0
		} else {
			u = tex.vpackage(tex.mem[tex.curList.headField].hh().rh, 0, 1, 0)
			w = tex.mem[int32(u)+3].int()
		}
		n = 0
		if tex.curSpan != tex.curAlign {
			q = tex.curSpan
			for {
				n = uint16(int32(n) + 1)
				q = tex.mem[tex.mem[q].hh().rh].hh().rh
				if q == tex.curAlign {
					break
				}
			}
			if n > 255 {
				tex.confusion(914)
			}
			q = tex.curSpan
			for tex.mem[tex.mem[q].hh().lh()].hh().rh < n {
				q = tex.mem[q].hh().lh()
			}
			if tex.mem[tex.mem[q].hh().lh()].hh().rh > n {
				s = tex.getNode(2)
				*tex.mem[s].pHh().pLh() = tex.mem[q].hh().lh()
				tex.mem[s].pHh().rh = n
				*tex.mem[q].pHh().pLh() = s
				*tex.mem[int32(s)+1].pInt() = w
			} else if tex.mem[int32(tex.mem[q].hh().lh())+1].int() < w {
				*tex.mem[int32(tex.mem[q].hh().lh())+1].pInt() = w
			}
		} else if w > tex.mem[int32(tex.curAlign)+1].int() {
			*tex.mem[int32(tex.curAlign)+1].pInt() = w
		}
		*tex.mem[u].pHh().pB0() = 13
		*tex.mem[u].pHh().pB1() = byte(n)
		if tex.totalStretch[3] != 0 {
			o = 3
		} else if tex.totalStretch[2] != 0 {
			o = 2
		} else if tex.totalStretch[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(u)+5].pHh().pB1() = o
		*tex.mem[int32(u)+6].pInt() = tex.totalStretch[o]
		if tex.totalShrink[3] != 0 {
			o = 3
		} else if tex.totalShrink[2] != 0 {
			o = 2
		} else if tex.totalShrink[1] != 0 {
			o = 1
		} else {
			o = 0
		}
		*tex.mem[int32(u)+5].pHh().pB0() = o
		*tex.mem[int32(u)+4].pInt() = tex.totalShrink[o]
		tex.popNest()
		tex.mem[tex.curList.tailField].pHh().rh = u
		tex.curList.tailField = u
		tex.mem[tex.curList.tailField].pHh().rh = tex.newGlue(tex.mem[int32(tex.mem[tex.curAlign].hh().rh)+1].hh().lh())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[tex.curList.tailField].pHh().pB1() = 12
		if tex.mem[int32(tex.curAlign)+5].hh().lh() >= 257 {
			ret = true
			goto label10
		}
		tex.initSpan(p)
	}
	tex.alignState = 1000000
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	tex.curAlign = p
	tex.initCol()
	ret = false
label10:
	return ret
}

func (tex *Context) finRow() {
	var p uint16 // 0..65535
	if tex.curList.modeField == -102 {
		p = tex.hpack(tex.mem[tex.curList.headField].hh().rh, 0, 1)
		tex.popNest()
		tex.appendToVlist(p)
		if tex.curHead != tex.curTail {
			tex.mem[tex.curList.tailField].pHh().rh = tex.mem[tex.curHead].hh().rh
			tex.curList.tailField = tex.curTail
		}
	} else {
		p = tex.vpackage(tex.mem[tex.curList.headField].hh().rh, 0, 1, 1073741823)
		tex.popNest()
		tex.mem[tex.curList.tailField].pHh().rh = p
		tex.curList.tailField = p
		*tex.curList.auxField.pHh().pLh() = 1000
	}
	*tex.mem[p].pHh().pB0() = 13
	*tex.mem[int32(p)+6].pInt() = 0
	if tex.eqtb[3420-1].hh().rh != 0 {
		tex.beginTokenList(tex.eqtb[3420-1].hh().rh, 13)
	}
	tex.alignPeek()
}

func (tex *Context) finAlign() {
	var p, q, r, s, u, v uint16 // 0..65535
	var t, w int32              // integer
	var o int32                 // integer
	var n uint16                // 0..65535
	var ruleSave int32          // integer
	var auxSave memoryWord      // record memoryWord
	if tex.curGroup != 6 {
		tex.confusion(915)
	}
	tex.unsave()
	if tex.curGroup != 6 {
		tex.confusion(916)
	}
	tex.unsave()
	if tex.nest[int32(tex.nestPtr)-1].modeField == 203 {
		o = tex.eqtb[5845-1].int()
	} else {
		o = 0
	}
	q = tex.mem[tex.mem[29992].hh().rh].hh().rh
	for {
		tex.flushList(uint16(tex.mem[int32(q)+3].int()))
		tex.flushList(uint16(tex.mem[int32(q)+2].int()))
		p = tex.mem[tex.mem[q].hh().rh].hh().rh
		if tex.mem[int32(q)+1].int() == -1073741824 {
			*tex.mem[int32(q)+1].pInt() = 0
			r = tex.mem[q].hh().rh
			s = tex.mem[int32(r)+1].hh().lh()
			if s != 0 {
				tex.mem[0].pHh().rh = uint16(int32(tex.mem[0].hh().rh) + 1)
				tex.deleteGlueRef(s)
				*tex.mem[int32(r)+1].pHh().pLh() = 0
			}
		}
		if tex.mem[q].hh().lh() != 29991 {
			t = tex.mem[int32(q)+1].int() + tex.mem[int32(tex.mem[int32(tex.mem[q].hh().rh)+1].hh().lh())+1].int()
			r = tex.mem[q].hh().lh()
			s = 29991
			*tex.mem[s].pHh().pLh() = p
			n = 1
			for {
				*tex.mem[int32(r)+1].pInt() = tex.mem[int32(r)+1].int() - t
				u = tex.mem[r].hh().lh()
				for tex.mem[r].hh().rh > n {
					s = tex.mem[s].hh().lh()
					n = uint16(int32(tex.mem[tex.mem[s].hh().lh()].hh().rh) + 1)
				}
				if tex.mem[r].hh().rh < n {
					*tex.mem[r].pHh().pLh() = tex.mem[s].hh().lh()
					*tex.mem[s].pHh().pLh() = r
					tex.mem[r].pHh().rh = uint16(int32(tex.mem[r].hh().rh) - 1)
					s = r
				} else {
					if tex.mem[int32(r)+1].int() > tex.mem[int32(tex.mem[s].hh().lh())+1].int() {
						*tex.mem[int32(tex.mem[s].hh().lh())+1].pInt() = tex.mem[int32(r)+1].int()
					}
					tex.freeNode(r, 2)
				}
				r = u
				if r == 29991 {
					break
				}
			}
		}
		*tex.mem[q].pHh().pB0() = 13
		*tex.mem[q].pHh().pB1() = 0
		*tex.mem[int32(q)+3].pInt() = 0
		*tex.mem[int32(q)+2].pInt() = 0
		*tex.mem[int32(q)+5].pHh().pB1() = 0
		*tex.mem[int32(q)+5].pHh().pB0() = 0
		*tex.mem[int32(q)+6].pInt() = 0
		*tex.mem[int32(q)+4].pInt() = 0
		q = p
		if q == 0 {
			break
		}
	}
	tex.savePtr = uint16(int32(tex.savePtr) - 2)
	tex.packBeginLine = -tex.curList.mlField
	if tex.curList.modeField == -1 {
		ruleSave = tex.eqtb[5846-1].int()
		*tex.eqtb[5846-1].pInt() = 0
		p = tex.hpack(tex.mem[29992].hh().rh, tex.saveStack[int32(tex.savePtr)+1].int(), byte(tex.saveStack[int32(tex.savePtr)+0].int()))
		*tex.eqtb[5846-1].pInt() = ruleSave
	} else {
		q = tex.mem[tex.mem[29992].hh().rh].hh().rh
		for {
			*tex.mem[int32(q)+3].pInt() = tex.mem[int32(q)+1].int()
			*tex.mem[int32(q)+1].pInt() = 0
			q = tex.mem[tex.mem[q].hh().rh].hh().rh
			if q == 0 {
				break
			}
		}
		p = tex.vpackage(tex.mem[29992].hh().rh, tex.saveStack[int32(tex.savePtr)+1].int(), byte(tex.saveStack[int32(tex.savePtr)+0].int()), 1073741823)
		q = tex.mem[tex.mem[29992].hh().rh].hh().rh
		for {
			*tex.mem[int32(q)+1].pInt() = tex.mem[int32(q)+3].int()
			*tex.mem[int32(q)+3].pInt() = 0
			q = tex.mem[tex.mem[q].hh().rh].hh().rh
			if q == 0 {
				break
			}
		}
	}
	tex.packBeginLine = 0
	q = tex.mem[tex.curList.headField].hh().rh
	s = tex.curList.headField
	for q != 0 {
		if !(q >= tex.hiMemMin) {
			if tex.mem[q].hh().b0() == 13 {
				if tex.curList.modeField == -1 {
					*tex.mem[q].pHh().pB0() = 0
					*tex.mem[int32(q)+1].pInt() = tex.mem[int32(p)+1].int()
				} else {
					*tex.mem[q].pHh().pB0() = 1
					*tex.mem[int32(q)+3].pInt() = tex.mem[int32(p)+3].int()
				}
				*tex.mem[int32(q)+5].pHh().pB1() = tex.mem[int32(p)+5].hh().b1()
				*tex.mem[int32(q)+5].pHh().pB0() = tex.mem[int32(p)+5].hh().b0()
				*tex.mem[int32(q)+6].pGr() = tex.mem[int32(p)+6].gr()
				*tex.mem[int32(q)+4].pInt() = o
				r = tex.mem[tex.mem[int32(q)+5].hh().rh].hh().rh
				s = tex.mem[tex.mem[int32(p)+5].hh().rh].hh().rh
				for {
					n = uint16(tex.mem[r].hh().b1())
					t = tex.mem[int32(s)+1].int()
					w = t
					u = 29996
					for n > 0 {
						n = uint16(int32(n) - 1)
						s = tex.mem[s].hh().rh
						v = tex.mem[int32(s)+1].hh().lh()
						tex.mem[u].pHh().rh = tex.newGlue(v)
						u = tex.mem[u].hh().rh
						*tex.mem[u].pHh().pB1() = 12
						t = t + tex.mem[int32(v)+1].int()
						if tex.mem[int32(p)+5].hh().b0() == 1 {
							if tex.mem[v].hh().b0() == tex.mem[int32(p)+5].hh().b1() {
								t = t + round((tex.mem[int32(p)+6].gr() * float32(tex.mem[int32(v)+2].int())))
							}
						} else if tex.mem[int32(p)+5].hh().b0() == 2 {
							if tex.mem[v].hh().b1() == tex.mem[int32(p)+5].hh().b1() {
								t = t - round((tex.mem[int32(p)+6].gr() * float32(tex.mem[int32(v)+3].int())))
							}
						}
						s = tex.mem[s].hh().rh
						tex.mem[u].pHh().rh = tex.newNullBox()
						u = tex.mem[u].hh().rh
						t = t + tex.mem[int32(s)+1].int()
						if tex.curList.modeField == -1 {
							*tex.mem[int32(u)+1].pInt() = tex.mem[int32(s)+1].int()
						} else {
							*tex.mem[u].pHh().pB0() = 1
							*tex.mem[int32(u)+3].pInt() = tex.mem[int32(s)+1].int()
						}
					}
					if tex.curList.modeField == -1 {
						*tex.mem[int32(r)+3].pInt() = tex.mem[int32(q)+3].int()
						*tex.mem[int32(r)+2].pInt() = tex.mem[int32(q)+2].int()
						if t == tex.mem[int32(r)+1].int() {
							*tex.mem[int32(r)+5].pHh().pB0() = 0
							*tex.mem[int32(r)+5].pHh().pB1() = 0
							*tex.mem[int32(r)+6].pGr() = 0
						} else if t > tex.mem[int32(r)+1].int() {
							*tex.mem[int32(r)+5].pHh().pB0() = 1
							if tex.mem[int32(r)+6].int() == 0 {
								*tex.mem[int32(r)+6].pGr() = 0
							} else {
								*tex.mem[int32(r)+6].pGr() = (float32((t - tex.mem[int32(r)+1].int())) / float32(tex.mem[int32(r)+6].int()))
							}
						} else {
							*tex.mem[int32(r)+5].pHh().pB1() = tex.mem[int32(r)+5].hh().b0()
							*tex.mem[int32(r)+5].pHh().pB0() = 2
							if tex.mem[int32(r)+4].int() == 0 {
								*tex.mem[int32(r)+6].pGr() = 0
							} else if (tex.mem[int32(r)+5].hh().b1() == 0) && ((tex.mem[int32(r)+1].int() - t) > tex.mem[int32(r)+4].int()) {
								*tex.mem[int32(r)+6].pGr() = 1
							} else {
								*tex.mem[int32(r)+6].pGr() = (float32((tex.mem[int32(r)+1].int() - t)) / float32(tex.mem[int32(r)+4].int()))
							}
						}
						*tex.mem[int32(r)+1].pInt() = w
						*tex.mem[r].pHh().pB0() = 0
					} else {
						*tex.mem[int32(r)+1].pInt() = tex.mem[int32(q)+1].int()
						if t == tex.mem[int32(r)+3].int() {
							*tex.mem[int32(r)+5].pHh().pB0() = 0
							*tex.mem[int32(r)+5].pHh().pB1() = 0
							*tex.mem[int32(r)+6].pGr() = 0
						} else if t > tex.mem[int32(r)+3].int() {
							*tex.mem[int32(r)+5].pHh().pB0() = 1
							if tex.mem[int32(r)+6].int() == 0 {
								*tex.mem[int32(r)+6].pGr() = 0
							} else {
								*tex.mem[int32(r)+6].pGr() = (float32((t - tex.mem[int32(r)+3].int())) / float32(tex.mem[int32(r)+6].int()))
							}
						} else {
							*tex.mem[int32(r)+5].pHh().pB1() = tex.mem[int32(r)+5].hh().b0()
							*tex.mem[int32(r)+5].pHh().pB0() = 2
							if tex.mem[int32(r)+4].int() == 0 {
								*tex.mem[int32(r)+6].pGr() = 0
							} else if (tex.mem[int32(r)+5].hh().b1() == 0) && ((tex.mem[int32(r)+3].int() - t) > tex.mem[int32(r)+4].int()) {
								*tex.mem[int32(r)+6].pGr() = 1
							} else {
								*tex.mem[int32(r)+6].pGr() = (float32((tex.mem[int32(r)+3].int() - t)) / float32(tex.mem[int32(r)+4].int()))
							}
						}
						*tex.mem[int32(r)+3].pInt() = w
						*tex.mem[r].pHh().pB0() = 1
					}
					*tex.mem[int32(r)+4].pInt() = 0
					if u != 29996 {
						tex.mem[u].pHh().rh = tex.mem[r].hh().rh
						tex.mem[r].pHh().rh = tex.mem[29996].hh().rh
						r = u
					}
					r = tex.mem[tex.mem[r].hh().rh].hh().rh
					s = tex.mem[tex.mem[s].hh().rh].hh().rh
					if r == 0 {
						break
					}
				}
			} else if tex.mem[q].hh().b0() == 2 {
				if tex.mem[int32(q)+1].int() == -1073741824 {
					*tex.mem[int32(q)+1].pInt() = tex.mem[int32(p)+1].int()
				}
				if tex.mem[int32(q)+3].int() == -1073741824 {
					*tex.mem[int32(q)+3].pInt() = tex.mem[int32(p)+3].int()
				}
				if tex.mem[int32(q)+2].int() == -1073741824 {
					*tex.mem[int32(q)+2].pInt() = tex.mem[int32(p)+2].int()
				}
				if o != 0 {
					r = tex.mem[q].hh().rh
					tex.mem[q].pHh().rh = 0
					q = tex.hpack(q, 0, 1)
					*tex.mem[int32(q)+4].pInt() = o
					tex.mem[q].pHh().rh = r
					tex.mem[s].pHh().rh = q
				}
			}
		}
		s = q
		q = tex.mem[q].hh().rh
	}
	tex.flushNodeList(p)
	tex.popAlignment()
	auxSave = tex.curList.auxField
	p = tex.mem[tex.curList.headField].hh().rh
	q = tex.curList.tailField
	tex.popNest()
	if tex.curList.modeField == 203 {
		tex.doAssignments()
		if tex.curCmd != 3 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1170)
			tex.helpPtr = 2
			tex.helpLine[1] = 895
			tex.helpLine[0] = 896
			tex.backError()
		} else {
			tex.getXToken()
			if tex.curCmd != 3 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1166)
				tex.helpPtr = 2
				tex.helpLine[1] = 1167
				tex.helpLine[0] = 1168
				tex.backError()
			}
		}
		tex.popNest()
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(tex.eqtb[5274-1].int())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(3)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.mem[tex.curList.tailField].pHh().rh = p
		if p != 0 {
			tex.curList.tailField = q
		}
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(tex.eqtb[5275-1].int())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(4)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.curList.auxField.pInt() = auxSave.int()
		tex.resumeAfterDisplay()
	} else {
		tex.curList.auxField = auxSave
		tex.mem[tex.curList.tailField].pHh().rh = p
		if p != 0 {
			tex.curList.tailField = q
		}
		if tex.curList.modeField == 1 {
			tex.buildPage()
		}
	}
}

func (tex *Context) alignPeek() {
label20:
	tex.alignState = 1000000
	for {
		tex.getXToken()
		if tex.curCmd != 10 {
			break
		}
	}
	if tex.curCmd == 34 {
		tex.scanLeftBrace()
		tex.newSaveLevel(7)
		if tex.curList.modeField == -1 {
			tex.normalParagraph()
		}
	} else if tex.curCmd == 2 {
		tex.finAlign()
	} else if (tex.curCmd == 5) && (tex.curChr == 258) {
		goto label20
	} else {
		tex.initRow()
		tex.initCol()
	}
}

func (tex *Context) finiteShrink(p uint16) (ret uint16) {
	var q uint16 // 0..65535
	if tex.noShrinkErrorYet {
		tex.noShrinkErrorYet = false
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(917)
		tex.helpPtr = 5
		tex.helpLine[4] = 918
		tex.helpLine[3] = 919
		tex.helpLine[2] = 920
		tex.helpLine[1] = 921
		tex.helpLine[0] = 922
		tex.error1()
	}
	q = tex.newSpec(p)
	*tex.mem[q].pHh().pB1() = 0
	tex.deleteGlueRef(p)
	ret = q
	return ret
}

func (tex *Context) tryBreak(pi int32, breakType byte) {
	var r uint16                // 0..65535
	var prevR uint16            // 0..65535
	var oldL uint16             // 0..65535
	var noBreakYet bool         // boolean
	var prevPrevR uint16        // 0..65535
	var s uint16                // 0..65535
	var q uint16                // 0..65535
	var v uint16                // 0..65535
	var t int32                 // integer
	var f byte                  // 0..75
	var l uint16                // 0..65535
	var nodeRStaysActive bool   // boolean
	var lineWidth int32         // integer
	var fitClass byte           // 0..3
	var b uint16                // 0..65535
	var d int32                 // integer
	var artificialDemerits bool // boolean
	var shortfall int32         // integer
	if iabs(pi) >= 10000 {
		if pi > 0 {
			goto label10
		} else {
			pi = -10000
		}
	}
	noBreakYet = true
	prevR = 29993
	oldL = 0
	tex.curActiveWidth[1-1] = tex.activeWidth[1-1]
	tex.curActiveWidth[2-1] = tex.activeWidth[2-1]
	tex.curActiveWidth[3-1] = tex.activeWidth[3-1]
	tex.curActiveWidth[4-1] = tex.activeWidth[4-1]
	tex.curActiveWidth[5-1] = tex.activeWidth[5-1]
	tex.curActiveWidth[6-1] = tex.activeWidth[6-1]
	for true {
	label22:
		r = tex.mem[prevR].hh().rh
		if tex.mem[r].hh().b0() == 2 {
			tex.curActiveWidth[1-1] = tex.curActiveWidth[1-1] + tex.mem[int32(r)+1].int()
			tex.curActiveWidth[2-1] = tex.curActiveWidth[2-1] + tex.mem[int32(r)+2].int()
			tex.curActiveWidth[3-1] = tex.curActiveWidth[3-1] + tex.mem[int32(r)+3].int()
			tex.curActiveWidth[4-1] = tex.curActiveWidth[4-1] + tex.mem[int32(r)+4].int()
			tex.curActiveWidth[5-1] = tex.curActiveWidth[5-1] + tex.mem[int32(r)+5].int()
			tex.curActiveWidth[6-1] = tex.curActiveWidth[6-1] + tex.mem[int32(r)+6].int()
			prevPrevR = prevR
			prevR = r
			goto label22
		}
		l = tex.mem[int32(r)+1].hh().lh()
		if l > oldL {
			if (tex.minimumDemerits < 1073741823) && ((oldL != tex.easyLine) || (r == 29993)) {
				if noBreakYet {
					noBreakYet = false
					tex.breakWidth[1-1] = tex.background[1-1]
					tex.breakWidth[2-1] = tex.background[2-1]
					tex.breakWidth[3-1] = tex.background[3-1]
					tex.breakWidth[4-1] = tex.background[4-1]
					tex.breakWidth[5-1] = tex.background[5-1]
					tex.breakWidth[6-1] = tex.background[6-1]
					s = tex.curP
					if breakType > 0 {
						if tex.curP != 0 {
							t = int32(tex.mem[tex.curP].hh().b1())
							v = tex.curP
							s = tex.mem[int32(tex.curP)+1].hh().rh
							for t > 0 {
								t = t - 1
								v = tex.mem[v].hh().rh
								if v >= tex.hiMemMin {
									f = tex.mem[v].hh().b0()
									tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[v].hh().b1())].qqqq().b0)].int()
								} else {
									switch tex.mem[v].hh().b0() {
									case 6:
										f = tex.mem[int32(v)+1].hh().b0()
										tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[int32(v)+1].hh().b1())].qqqq().b0)].int()
									case 0, 1, 2, 11:
										tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.mem[int32(v)+1].int()
									default:
										tex.confusion(923)
									}
								}
							}
							for s != 0 {
								if s >= tex.hiMemMin {
									f = tex.mem[s].hh().b0()
									tex.breakWidth[1-1] = tex.breakWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[s].hh().b1())].qqqq().b0)].int()
								} else {
									switch tex.mem[s].hh().b0() {
									case 6:
										f = tex.mem[int32(s)+1].hh().b0()
										tex.breakWidth[1-1] = tex.breakWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[int32(s)+1].hh().b1())].qqqq().b0)].int()
									case 0, 1, 2, 11:
										tex.breakWidth[1-1] = tex.breakWidth[1-1] + tex.mem[int32(s)+1].int()
									default:
										tex.confusion(924)
									}
								}
								s = tex.mem[s].hh().rh
							}
							tex.breakWidth[1-1] = tex.breakWidth[1-1] + tex.discWidth
							if tex.mem[int32(tex.curP)+1].hh().rh == 0 {
								s = tex.mem[v].hh().rh
							}
						}
					}
					for s != 0 {
						if s >= tex.hiMemMin {
							goto label30
						}
						switch tex.mem[s].hh().b0() {
						case 10:
							v = tex.mem[int32(s)+1].hh().lh()
							tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.mem[int32(v)+1].int()
							tex.breakWidth[2+int32(tex.mem[v].hh().b0())-1] = tex.breakWidth[2+int32(tex.mem[v].hh().b0())-1] - tex.mem[int32(v)+2].int()
							tex.breakWidth[6-1] = tex.breakWidth[6-1] - tex.mem[int32(v)+3].int()
						case 12:
						case 9:
							tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.mem[int32(s)+1].int()
						case 11:
							if tex.mem[s].hh().b1() != 1 {
								goto label30
							} else {
								tex.breakWidth[1-1] = tex.breakWidth[1-1] - tex.mem[int32(s)+1].int()
							}
						default:
							goto label30
						}
						s = tex.mem[s].hh().rh
					}
				label30:
				}
				if tex.mem[prevR].hh().b0() == 2 {
					*tex.mem[int32(prevR)+1].pInt() = tex.mem[int32(prevR)+1].int() - tex.curActiveWidth[1-1] + tex.breakWidth[1-1]
					*tex.mem[int32(prevR)+2].pInt() = tex.mem[int32(prevR)+2].int() - tex.curActiveWidth[2-1] + tex.breakWidth[2-1]
					*tex.mem[int32(prevR)+3].pInt() = tex.mem[int32(prevR)+3].int() - tex.curActiveWidth[3-1] + tex.breakWidth[3-1]
					*tex.mem[int32(prevR)+4].pInt() = tex.mem[int32(prevR)+4].int() - tex.curActiveWidth[4-1] + tex.breakWidth[4-1]
					*tex.mem[int32(prevR)+5].pInt() = tex.mem[int32(prevR)+5].int() - tex.curActiveWidth[5-1] + tex.breakWidth[5-1]
					*tex.mem[int32(prevR)+6].pInt() = tex.mem[int32(prevR)+6].int() - tex.curActiveWidth[6-1] + tex.breakWidth[6-1]
				} else if prevR == 29993 {
					tex.activeWidth[1-1] = tex.breakWidth[1-1]
					tex.activeWidth[2-1] = tex.breakWidth[2-1]
					tex.activeWidth[3-1] = tex.breakWidth[3-1]
					tex.activeWidth[4-1] = tex.breakWidth[4-1]
					tex.activeWidth[5-1] = tex.breakWidth[5-1]
					tex.activeWidth[6-1] = tex.breakWidth[6-1]
				} else {
					q = tex.getNode(7)
					tex.mem[q].pHh().rh = r
					*tex.mem[q].pHh().pB0() = 2
					*tex.mem[q].pHh().pB1() = 0
					*tex.mem[int32(q)+1].pInt() = tex.breakWidth[1-1] - tex.curActiveWidth[1-1]
					*tex.mem[int32(q)+2].pInt() = tex.breakWidth[2-1] - tex.curActiveWidth[2-1]
					*tex.mem[int32(q)+3].pInt() = tex.breakWidth[3-1] - tex.curActiveWidth[3-1]
					*tex.mem[int32(q)+4].pInt() = tex.breakWidth[4-1] - tex.curActiveWidth[4-1]
					*tex.mem[int32(q)+5].pInt() = tex.breakWidth[5-1] - tex.curActiveWidth[5-1]
					*tex.mem[int32(q)+6].pInt() = tex.breakWidth[6-1] - tex.curActiveWidth[6-1]
					tex.mem[prevR].pHh().rh = q
					prevPrevR = prevR
					prevR = q
				}
				if iabs(tex.eqtb[5279-1].int()) >= 1073741823-tex.minimumDemerits {
					tex.minimumDemerits = 1073741822
				} else {
					tex.minimumDemerits = tex.minimumDemerits + iabs(tex.eqtb[5279-1].int())
				}
				for _i := int64(0); _i <= int64(3); _i++ {
					fitClass = byte(_i)
					if tex.minimalDemerits[fitClass] <= tex.minimumDemerits {
						q = tex.getNode(2)
						tex.mem[q].pHh().rh = tex.passive
						tex.passive = q
						tex.mem[int32(q)+1].pHh().rh = tex.curP
						*tex.mem[int32(q)+1].pHh().pLh() = tex.bestPlace[fitClass]
						q = tex.getNode(3)
						tex.mem[int32(q)+1].pHh().rh = tex.passive
						*tex.mem[int32(q)+1].pHh().pLh() = uint16(int32(tex.bestPlLine[fitClass]) + 1)
						*tex.mem[q].pHh().pB1() = fitClass
						*tex.mem[q].pHh().pB0() = breakType
						*tex.mem[int32(q)+2].pInt() = tex.minimalDemerits[fitClass]
						tex.mem[q].pHh().rh = r
						tex.mem[prevR].pHh().rh = q
						prevR = q
					}
					tex.minimalDemerits[fitClass] = 1073741823
				}
				tex.minimumDemerits = 1073741823
				if r != 29993 {
					q = tex.getNode(7)
					tex.mem[q].pHh().rh = r
					*tex.mem[q].pHh().pB0() = 2
					*tex.mem[q].pHh().pB1() = 0
					*tex.mem[int32(q)+1].pInt() = tex.curActiveWidth[1-1] - tex.breakWidth[1-1]
					*tex.mem[int32(q)+2].pInt() = tex.curActiveWidth[2-1] - tex.breakWidth[2-1]
					*tex.mem[int32(q)+3].pInt() = tex.curActiveWidth[3-1] - tex.breakWidth[3-1]
					*tex.mem[int32(q)+4].pInt() = tex.curActiveWidth[4-1] - tex.breakWidth[4-1]
					*tex.mem[int32(q)+5].pInt() = tex.curActiveWidth[5-1] - tex.breakWidth[5-1]
					*tex.mem[int32(q)+6].pInt() = tex.curActiveWidth[6-1] - tex.breakWidth[6-1]
					tex.mem[prevR].pHh().rh = q
					prevPrevR = prevR
					prevR = q
				}
			}
			if r == 29993 {
				goto label10
			}
			if l > tex.easyLine {
				lineWidth = tex.secondWidth
				oldL = 65534
			} else {
				oldL = l
				if l > tex.lastSpecialLine {
					lineWidth = tex.secondWidth
				} else if tex.eqtb[3412-1].hh().rh == 0 {
					lineWidth = tex.firstWidth
				} else {
					lineWidth = tex.mem[int32(tex.eqtb[3412-1].hh().rh)+(2*int32(l))].int()
				}
			}
		}
		artificialDemerits = false
		shortfall = lineWidth - tex.curActiveWidth[1-1]
		if shortfall > 0 {
			if (tex.curActiveWidth[3-1] != 0) || (tex.curActiveWidth[4-1] != 0) || (tex.curActiveWidth[5-1] != 0) {
				b = 0
				fitClass = 2
			} else {
				if shortfall > 7230584 {
					if tex.curActiveWidth[2-1] < 1663497 {
						b = 10000
						fitClass = 0
						goto label31
					}
				}
				b = tex.badness(shortfall, tex.curActiveWidth[2-1])
				if b > 12 {
					if b > 99 {
						fitClass = 0
					} else {
						fitClass = 1
					}
				} else {
					fitClass = 2
				}
			label31:
			}
		} else {
			if -shortfall > tex.curActiveWidth[6-1] {
				b = 10001
			} else {
				b = tex.badness(-shortfall, tex.curActiveWidth[6-1])
			}
			if b > 12 {
				fitClass = 3
			} else {
				fitClass = 2
			}
		}
		if (b > 10000) || (pi == -10000) {
			if tex.finalPass && (tex.minimumDemerits == 1073741823) && (tex.mem[r].hh().rh == 29993) && (prevR == 29993) {
				artificialDemerits = true
			} else if int32(b) > tex.threshold {
				goto label60
			}
			nodeRStaysActive = false
		} else {
			prevR = r
			if int32(b) > tex.threshold {
				goto label22
			}
			nodeRStaysActive = true
		}
		if artificialDemerits {
			d = 0
		} else {
			d = tex.eqtb[5265-1].int() + int32(b)
			if iabs(d) >= 10000 {
				d = 100000000
			} else {
				d = (d * d)
			}
			if pi != 0 {
				if pi > 0 {
					d = d + (pi * pi)
				} else if pi > -10000 {
					d = d - (pi * pi)
				}
			}
			if (breakType == 1) && (tex.mem[r].hh().b0() == 1) {
				if tex.curP != 0 {
					d = d + tex.eqtb[5277-1].int()
				} else {
					d = d + tex.eqtb[5278-1].int()
				}
			}
			if iabs(int32(fitClass)-int32(tex.mem[r].hh().b1())) > 1 {
				d = d + tex.eqtb[5279-1].int()
			}
		}
		d = d + tex.mem[int32(r)+2].int()
		if d <= tex.minimalDemerits[fitClass] {
			tex.minimalDemerits[fitClass] = d
			tex.bestPlace[fitClass] = tex.mem[int32(r)+1].hh().rh
			tex.bestPlLine[fitClass] = l
			if d < tex.minimumDemerits {
				tex.minimumDemerits = d
			}
		}
		if nodeRStaysActive {
			goto label22
		}
	label60:
		tex.mem[prevR].pHh().rh = tex.mem[r].hh().rh
		tex.freeNode(r, 3)
		if prevR == 29993 {
			r = tex.mem[29993].hh().rh
			if tex.mem[r].hh().b0() == 2 {
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(r)+1].int()
				tex.activeWidth[2-1] = tex.activeWidth[2-1] + tex.mem[int32(r)+2].int()
				tex.activeWidth[3-1] = tex.activeWidth[3-1] + tex.mem[int32(r)+3].int()
				tex.activeWidth[4-1] = tex.activeWidth[4-1] + tex.mem[int32(r)+4].int()
				tex.activeWidth[5-1] = tex.activeWidth[5-1] + tex.mem[int32(r)+5].int()
				tex.activeWidth[6-1] = tex.activeWidth[6-1] + tex.mem[int32(r)+6].int()
				tex.curActiveWidth[1-1] = tex.activeWidth[1-1]
				tex.curActiveWidth[2-1] = tex.activeWidth[2-1]
				tex.curActiveWidth[3-1] = tex.activeWidth[3-1]
				tex.curActiveWidth[4-1] = tex.activeWidth[4-1]
				tex.curActiveWidth[5-1] = tex.activeWidth[5-1]
				tex.curActiveWidth[6-1] = tex.activeWidth[6-1]
				tex.mem[29993].pHh().rh = tex.mem[r].hh().rh
				tex.freeNode(r, 7)
			}
		} else if tex.mem[prevR].hh().b0() == 2 {
			r = tex.mem[prevR].hh().rh
			if r == 29993 {
				tex.curActiveWidth[1-1] = tex.curActiveWidth[1-1] - tex.mem[int32(prevR)+1].int()
				tex.curActiveWidth[2-1] = tex.curActiveWidth[2-1] - tex.mem[int32(prevR)+2].int()
				tex.curActiveWidth[3-1] = tex.curActiveWidth[3-1] - tex.mem[int32(prevR)+3].int()
				tex.curActiveWidth[4-1] = tex.curActiveWidth[4-1] - tex.mem[int32(prevR)+4].int()
				tex.curActiveWidth[5-1] = tex.curActiveWidth[5-1] - tex.mem[int32(prevR)+5].int()
				tex.curActiveWidth[6-1] = tex.curActiveWidth[6-1] - tex.mem[int32(prevR)+6].int()
				tex.mem[prevPrevR].pHh().rh = 29993
				tex.freeNode(prevR, 7)
				prevR = prevPrevR
			} else if tex.mem[r].hh().b0() == 2 {
				tex.curActiveWidth[1-1] = tex.curActiveWidth[1-1] + tex.mem[int32(r)+1].int()
				tex.curActiveWidth[2-1] = tex.curActiveWidth[2-1] + tex.mem[int32(r)+2].int()
				tex.curActiveWidth[3-1] = tex.curActiveWidth[3-1] + tex.mem[int32(r)+3].int()
				tex.curActiveWidth[4-1] = tex.curActiveWidth[4-1] + tex.mem[int32(r)+4].int()
				tex.curActiveWidth[5-1] = tex.curActiveWidth[5-1] + tex.mem[int32(r)+5].int()
				tex.curActiveWidth[6-1] = tex.curActiveWidth[6-1] + tex.mem[int32(r)+6].int()
				*tex.mem[int32(prevR)+1].pInt() = tex.mem[int32(prevR)+1].int() + tex.mem[int32(r)+1].int()
				*tex.mem[int32(prevR)+2].pInt() = tex.mem[int32(prevR)+2].int() + tex.mem[int32(r)+2].int()
				*tex.mem[int32(prevR)+3].pInt() = tex.mem[int32(prevR)+3].int() + tex.mem[int32(r)+3].int()
				*tex.mem[int32(prevR)+4].pInt() = tex.mem[int32(prevR)+4].int() + tex.mem[int32(r)+4].int()
				*tex.mem[int32(prevR)+5].pInt() = tex.mem[int32(prevR)+5].int() + tex.mem[int32(r)+5].int()
				*tex.mem[int32(prevR)+6].pInt() = tex.mem[int32(prevR)+6].int() + tex.mem[int32(r)+6].int()
				tex.mem[prevR].pHh().rh = tex.mem[r].hh().rh
				tex.freeNode(r, 7)
			}
		}
	}
label10:
}

func (tex *Context) postLineBreak(finalWidowPenalty int32) {
	var q, r, s uint16     // 0..65535
	var discBreak bool     // boolean
	var postDiscBreak bool // boolean
	var curWidth int32     // integer
	var curIndent int32    // integer
	var t byte             // 0..255
	var pen int32          // integer
	var curLine uint16     // 0..65535
	q = tex.mem[int32(tex.bestBet)+1].hh().rh
	tex.curP = 0
	for {
		r = q
		q = tex.mem[int32(q)+1].hh().lh()
		*tex.mem[int32(r)+1].pHh().pLh() = tex.curP
		tex.curP = r
		if q == 0 {
			break
		}
	}
	curLine = uint16(tex.curList.pgField + 1)
	for {
		q = tex.mem[int32(tex.curP)+1].hh().rh
		discBreak = false
		postDiscBreak = false
		if q != 0 {
			if tex.mem[q].hh().b0() == 10 {
				tex.deleteGlueRef(tex.mem[int32(q)+1].hh().lh())
				*tex.mem[int32(q)+1].pHh().pLh() = tex.eqtb[2890-1].hh().rh
				*tex.mem[q].pHh().pB1() = 9
				tex.mem[tex.eqtb[2890-1].hh().rh].pHh().rh = uint16(int32(tex.mem[tex.eqtb[2890-1].hh().rh].hh().rh) + 1)
				goto label30
			} else {
				if tex.mem[q].hh().b0() == 7 {
					t = tex.mem[q].hh().b1()
					if t == 0 {
						r = tex.mem[q].hh().rh
					} else {
						r = q
						for t > 1 {
							r = tex.mem[r].hh().rh
							t = byte(int32(t) - 1)
						}
						s = tex.mem[r].hh().rh
						r = tex.mem[s].hh().rh
						tex.mem[s].pHh().rh = 0
						tex.flushNodeList(tex.mem[q].hh().rh)
						*tex.mem[q].pHh().pB1() = 0
					}
					if tex.mem[int32(q)+1].hh().rh != 0 {
						s = tex.mem[int32(q)+1].hh().rh
						for tex.mem[s].hh().rh != 0 {
							s = tex.mem[s].hh().rh
						}
						tex.mem[s].pHh().rh = r
						r = tex.mem[int32(q)+1].hh().rh
						tex.mem[int32(q)+1].pHh().rh = 0
						postDiscBreak = true
					}
					if tex.mem[int32(q)+1].hh().lh() != 0 {
						s = tex.mem[int32(q)+1].hh().lh()
						tex.mem[q].pHh().rh = s
						for tex.mem[s].hh().rh != 0 {
							s = tex.mem[s].hh().rh
						}
						*tex.mem[int32(q)+1].pHh().pLh() = 0
						q = s
					}
					tex.mem[q].pHh().rh = r
					discBreak = true
				} else if (tex.mem[q].hh().b0() == 9) || (tex.mem[q].hh().b0() == 11) {
					*tex.mem[int32(q)+1].pInt() = 0
				}
			}
		} else {
			q = 29997
			for tex.mem[q].hh().rh != 0 {
				q = tex.mem[q].hh().rh
			}
		}
		r = tex.newParamGlue(8)
		tex.mem[r].pHh().rh = tex.mem[q].hh().rh
		tex.mem[q].pHh().rh = r
		q = r
	label30:
		r = tex.mem[q].hh().rh
		tex.mem[q].pHh().rh = 0
		q = tex.mem[29997].hh().rh
		tex.mem[29997].pHh().rh = r
		if tex.eqtb[2889-1].hh().rh != 0 {
			r = tex.newParamGlue(7)
			tex.mem[r].pHh().rh = q
			q = r
		}
		if curLine > tex.lastSpecialLine {
			curWidth = tex.secondWidth
			curIndent = tex.secondIndent
		} else if tex.eqtb[3412-1].hh().rh == 0 {
			curWidth = tex.firstWidth
			curIndent = tex.firstIndent
		} else {
			curWidth = tex.mem[int32(tex.eqtb[3412-1].hh().rh)+(2*int32(curLine))].int()
			curIndent = tex.mem[int32(tex.eqtb[3412-1].hh().rh)+(2*int32(curLine))-1].int()
		}
		tex.adjustTail = 29995
		tex.justBox = tex.hpack(q, curWidth, 0)
		*tex.mem[int32(tex.justBox)+4].pInt() = curIndent
		tex.appendToVlist(tex.justBox)
		if 29995 != int32(tex.adjustTail) {
			tex.mem[tex.curList.tailField].pHh().rh = tex.mem[29995].hh().rh
			tex.curList.tailField = tex.adjustTail
		}
		tex.adjustTail = 0
		if int32(curLine)+1 != int32(tex.bestLine) {
			pen = tex.eqtb[5276-1].int()
			if int32(curLine) == tex.curList.pgField+1 {
				pen = pen + tex.eqtb[5268-1].int()
			}
			if int32(curLine)+2 == int32(tex.bestLine) {
				pen = pen + finalWidowPenalty
			}
			if discBreak {
				pen = pen + tex.eqtb[5271-1].int()
			}
			if pen != 0 {
				r = tex.newPenalty(pen)
				tex.mem[tex.curList.tailField].pHh().rh = r
				tex.curList.tailField = r
			}
		}
		curLine = uint16(int32(curLine) + 1)
		tex.curP = tex.mem[int32(tex.curP)+1].hh().lh()
		if tex.curP != 0 {
			if !postDiscBreak {
				r = 29997
				for true {
					q = tex.mem[r].hh().rh
					if q == tex.mem[int32(tex.curP)+1].hh().rh {
						goto label31
					}
					if q >= tex.hiMemMin {
						goto label31
					}
					if tex.mem[q].hh().b0() < 9 {
						goto label31
					}
					if tex.mem[q].hh().b0() == 11 {
						if tex.mem[q].hh().b1() != 1 {
							goto label31
						}
					}
					r = q
				}
			label31:
				if r != 29997 {
					tex.mem[r].pHh().rh = 0
					tex.flushNodeList(tex.mem[29997].hh().rh)
					tex.mem[29997].pHh().rh = q
				}
			}
		}
		if tex.curP == 0 {
			break
		}
	}
	if (curLine != tex.bestLine) || (tex.mem[29997].hh().rh != 0) {
		tex.confusion(939)
	}
	tex.curList.pgField = int32(tex.bestLine) - 1
}

func (tex *Context) reconstitute(j, n byte, bchar, hchar uint16) (ret byte) {
	var p uint16        // 0..65535
	var t uint16        // 0..65535
	var q fourQuarters  // record fourQuarters
	var curRh uint16    // 0..65535
	var testChar uint16 // 0..65535
	var w int32         // integer
	var k uint16        // 0..20000
	tex.hyphenPassed = 0
	t = 29996
	w = 0
	tex.mem[29996].pHh().rh = 0
	tex.curL = uint16(int32(tex.hu[j]) + 0)
	tex.curQ = t
	if j == 0 {
		tex.ligaturePresent = tex.initLig
		p = tex.initList
		if tex.ligaturePresent {
			tex.lftHit = tex.initLft
		}
		for p > 0 {
			tex.mem[t].pHh().rh = tex.getAvail()
			t = tex.mem[t].hh().rh
			*tex.mem[t].pHh().pB0() = tex.hf
			*tex.mem[t].pHh().pB1() = tex.mem[p].hh().b1()
			p = tex.mem[p].hh().rh
		}
	} else if tex.curL < 256 {
		tex.mem[t].pHh().rh = tex.getAvail()
		t = tex.mem[t].hh().rh
		*tex.mem[t].pHh().pB0() = tex.hf
		*tex.mem[t].pHh().pB1() = byte(tex.curL)
	}
	tex.ligStack = 0
	if j < n {
		tex.curR = uint16(int32(tex.hu[int32(j)+1]) + 0)
	} else {
		tex.curR = bchar
	}
	if odd(int32(tex.hyf[j])) {
		curRh = hchar
	} else {
		curRh = 256
	}
label22:
	if tex.curL == 256 {
		k = tex.bcharLabel[tex.hf]
		if k == 0 {
			goto label30
		} else {
			q = tex.fontInfo[k].qqqq()
		}
	} else {
		q = tex.fontInfo[tex.charBase[tex.hf]+int32(tex.curL)].qqqq()
		if ((int32(q.b2) - 0) % 4) != 1 {
			goto label30
		}
		k = uint16(tex.ligKernBase[tex.hf] + int32(q.b3))
		q = tex.fontInfo[k].qqqq()
		if q.b0 > 128 {
			k = uint16(tex.ligKernBase[tex.hf] + (256 * int32(q.b2)) + int32(q.b3) + 32768 - (256 * 128))
			q = tex.fontInfo[k].qqqq()
		}
	}
	if curRh < 256 {
		testChar = curRh
	} else {
		testChar = tex.curR
	}
	for true {
		if uint16(q.b1) == testChar {
			if q.b0 <= 128 {
				if curRh < 256 {
					tex.hyphenPassed = j
					hchar = 256
					curRh = 256
					goto label22
				} else {
					if hchar < 256 {
						if odd(int32(tex.hyf[j])) {
							tex.hyphenPassed = j
							hchar = 256
						}
					}
					if q.b2 < 128 {
						if tex.curL == 256 {
							tex.lftHit = true
						}
						if j == n {
							if tex.ligStack == 0 {
								tex.rtHit = true
							}
						}
						if tex.interrupt != 0 {
							tex.pauseForInstructions()
						}
						switch q.b2 {
						case 1, 5:
							tex.curL = uint16(q.b3)
							tex.ligaturePresent = true
						case 2, 6:
							tex.curR = uint16(q.b3)
							if tex.ligStack > 0 {
								*tex.mem[tex.ligStack].pHh().pB1() = byte(tex.curR)
							} else {
								tex.ligStack = tex.newLigItem(byte(tex.curR))
								if j == n {
									bchar = 256
								} else {
									p = tex.getAvail()
									tex.mem[int32(tex.ligStack)+1].pHh().rh = p
									*tex.mem[p].pHh().pB1() = byte(int32(tex.hu[int32(j)+1]) + 0)
									*tex.mem[p].pHh().pB0() = tex.hf
								}
							}
						case 3:
							tex.curR = uint16(q.b3)
							p = tex.ligStack
							tex.ligStack = tex.newLigItem(byte(tex.curR))
							tex.mem[tex.ligStack].pHh().rh = p
						case 7, 11:
							if tex.ligaturePresent {
								p = tex.newLigature(tex.hf, byte(tex.curL), tex.mem[tex.curQ].hh().rh)
								if tex.lftHit {
									*tex.mem[p].pHh().pB1() = 2
									tex.lftHit = false
								}
								if false {
									if tex.ligStack == 0 {
										*tex.mem[p].pHh().pB1() = byte(int32(tex.mem[p].hh().b1()) + 1)
										tex.rtHit = false
									}
								}
								tex.mem[tex.curQ].pHh().rh = p
								t = p
								tex.ligaturePresent = false
							}
							tex.curQ = t
							tex.curL = uint16(q.b3)
							tex.ligaturePresent = true
						default:
							tex.curL = uint16(q.b3)
							tex.ligaturePresent = true
							if tex.ligStack > 0 {
								if tex.mem[int32(tex.ligStack)+1].hh().rh > 0 {
									tex.mem[t].pHh().rh = tex.mem[int32(tex.ligStack)+1].hh().rh
									t = tex.mem[t].hh().rh
									j = byte(int32(j) + 1)
								}
								p = tex.ligStack
								tex.ligStack = tex.mem[p].hh().rh
								tex.freeNode(p, 2)
								if tex.ligStack == 0 {
									if j < n {
										tex.curR = uint16(int32(tex.hu[int32(j)+1]) + 0)
									} else {
										tex.curR = bchar
									}
									if odd(int32(tex.hyf[j])) {
										curRh = hchar
									} else {
										curRh = 256
									}
								} else {
									tex.curR = uint16(tex.mem[tex.ligStack].hh().b1())
								}
							} else if j == n {
								goto label30
							} else {
								tex.mem[t].pHh().rh = tex.getAvail()
								t = tex.mem[t].hh().rh
								*tex.mem[t].pHh().pB0() = tex.hf
								*tex.mem[t].pHh().pB1() = byte(tex.curR)
								j = byte(int32(j) + 1)
								if j < n {
									tex.curR = uint16(int32(tex.hu[int32(j)+1]) + 0)
								} else {
									tex.curR = bchar
								}
								if odd(int32(tex.hyf[j])) {
									curRh = hchar
								} else {
									curRh = 256
								}
							}
						}
						if q.b2 > 4 {
							if q.b2 != 7 {
								goto label30
							}
						}
						goto label22
					}
					w = tex.fontInfo[tex.kernBase[tex.hf]+(256*int32(q.b2))+int32(q.b3)].int()
					goto label30
				}
			}
		}
		if q.b0 >= 128 {
			if curRh == 256 {
				goto label30
			} else {
				curRh = 256
				goto label22
			}
		}
		k = uint16(int32(k) + int32(q.b0) + 1)
		q = tex.fontInfo[k].qqqq()
	}
label30:
	if tex.ligaturePresent {
		p = tex.newLigature(tex.hf, byte(tex.curL), tex.mem[tex.curQ].hh().rh)
		if tex.lftHit {
			*tex.mem[p].pHh().pB1() = 2
			tex.lftHit = false
		}
		if tex.rtHit {
			if tex.ligStack == 0 {
				*tex.mem[p].pHh().pB1() = byte(int32(tex.mem[p].hh().b1()) + 1)
				tex.rtHit = false
			}
		}
		tex.mem[tex.curQ].pHh().rh = p
		t = p
		tex.ligaturePresent = false
	}
	if w != 0 {
		tex.mem[t].pHh().rh = tex.newKern(w)
		t = tex.mem[t].hh().rh
		w = 0
	}
	if tex.ligStack > 0 {
		tex.curQ = t
		tex.curL = uint16(tex.mem[tex.ligStack].hh().b1())
		tex.ligaturePresent = true
		if tex.mem[int32(tex.ligStack)+1].hh().rh > 0 {
			tex.mem[t].pHh().rh = tex.mem[int32(tex.ligStack)+1].hh().rh
			t = tex.mem[t].hh().rh
			j = byte(int32(j) + 1)
		}
		p = tex.ligStack
		tex.ligStack = tex.mem[p].hh().rh
		tex.freeNode(p, 2)
		if tex.ligStack == 0 {
			if j < n {
				tex.curR = uint16(int32(tex.hu[int32(j)+1]) + 0)
			} else {
				tex.curR = bchar
			}
			if odd(int32(tex.hyf[j])) {
				curRh = hchar
			} else {
				curRh = 256
			}
		} else {
			tex.curR = uint16(tex.mem[tex.ligStack].hh().b1())
		}
		goto label22
	}
	ret = j
	return ret
}

func (tex *Context) hyphenate() {
	var i, j, l byte                // 0..65
	var q, r, s uint16              // 0..65535
	var bchar uint16                // 0..65535
	var majorTail, minorTail uint16 // 0..65535
	var c byte                      // 0..255
	var cLoc byte                   // 0..63
	var rCount int32                // integer
	var hyfNode uint16              // 0..65535
	var z uint16                    // 0..8000
	var v int32                     // integer
	var h uint16                    // 0..307
	var k uint16                    // 0..3000
	var u uint16                    // 0..32000
	for _i := int64(0); _i <= int64(tex.hn); _i++ {
		j = byte(_i)
		tex.hyf[j] = 0
	}
	h = tex.hc[1]
	tex.hn = byte(int32(tex.hn) + 1)
	tex.hc[tex.hn] = uint16(tex.curLang)
	for _i := int64(2); _i <= int64(tex.hn); _i++ {
		j = byte(_i)
		h = uint16(((int32(h) + int32(h) + int32(tex.hc[j])) % 307))
	}
	for true {
		k = tex.hyphWord[h]
		if k == 0 {
			goto label45
		}
		if (int32(tex.strStart[int32(k)+1]) - int32(tex.strStart[k])) < int32(tex.hn) {
			goto label45
		}
		if (int32(tex.strStart[int32(k)+1]) - int32(tex.strStart[k])) == int32(tex.hn) {
			j = 1
			u = tex.strStart[k]
			for {
				if uint16(tex.strPool[u]) < tex.hc[j] {
					goto label45
				}
				if uint16(tex.strPool[u]) > tex.hc[j] {
					goto label30
				}
				j = byte(int32(j) + 1)
				u = uint16(int32(u) + 1)
				if j > tex.hn {
					break
				}
			}
			s = tex.hyphList[h]
			for s != 0 {
				tex.hyf[tex.mem[s].hh().lh()] = 1
				s = tex.mem[s].hh().rh
			}
			tex.hn = byte(int32(tex.hn) - 1)
			goto label40
		}
	label30:
		if h > 0 {
			h = uint16(int32(h) - 1)
		} else {
			h = 307
		}
	}
label45:
	tex.hn = byte(int32(tex.hn) - 1)
	if int32(tex.trie[int32(tex.curLang)+1].b1()) != int32(tex.curLang)+0 {
		goto label10
	}
	tex.hc[0] = 0
	tex.hc[int32(tex.hn)+1] = 0
	tex.hc[int32(tex.hn)+2] = 256
	for _i := int64(0); _i <= int64(int32(tex.hn)-tex.rHyf+1); _i++ {
		j = byte(_i)
		z = uint16(int32(tex.trie[int32(tex.curLang)+1].rh) + int32(tex.hc[j]))
		l = j
		for int32(tex.hc[l]) == int32(tex.trie[z].b1())-0 {
			if tex.trie[z].b0() != 0 {
				v = int32(tex.trie[z].b0())
				for {
					v = v + int32(tex.opStart[tex.curLang])
					i = byte(int32(l) - int32(tex.hyfDistance[v-1]))
					if tex.hyfNum[v-1] > tex.hyf[i] {
						tex.hyf[i] = tex.hyfNum[v-1]
					}
					v = int32(tex.hyfNext[v-1])
					if v == 0 {
						break
					}
				}
			}
			l = byte(int32(l) + 1)
			z = uint16(int32(tex.trie[z].rh) + int32(tex.hc[l]))
		}
	}
label40:
	for _i := int64(0); _i <= int64(tex.lHyf-1); _i++ {
		j = byte(_i)
		tex.hyf[j] = 0
	}
	for _i := int64(0); _i <= int64(tex.rHyf-1); _i++ {
		j = byte(_i)
		tex.hyf[int32(tex.hn)-int32(j)] = 0
	}
	for _i := int64(tex.lHyf); _i <= int64(int32(tex.hn)-tex.rHyf); _i++ {
		j = byte(_i)
		if odd(int32(tex.hyf[j])) {
			goto label41
		}
	}
	goto label10
label41:
	q = tex.mem[tex.hb].hh().rh
	tex.mem[tex.hb].pHh().rh = 0
	r = tex.mem[tex.ha].hh().rh
	tex.mem[tex.ha].pHh().rh = 0
	bchar = tex.hyfBchar
	if tex.ha >= tex.hiMemMin {
		if tex.mem[tex.ha].hh().b0() != tex.hf {
			goto label42
		} else {
			tex.initList = tex.ha
			tex.initLig = false
			tex.hu[0] = uint16(int32(tex.mem[tex.ha].hh().b1()) - 0)
		}
	} else if tex.mem[tex.ha].hh().b0() == 6 {
		if tex.mem[int32(tex.ha)+1].hh().b0() != tex.hf {
			goto label42
		} else {
			tex.initList = tex.mem[int32(tex.ha)+1].hh().rh
			tex.initLig = true
			tex.initLft = (tex.mem[tex.ha].hh().b1() > 1)
			tex.hu[0] = uint16(int32(tex.mem[int32(tex.ha)+1].hh().b1()) - 0)
			if tex.initList == 0 {
				if tex.initLft {
					tex.hu[0] = 256
					tex.initLig = false
				}
			}
			tex.freeNode(tex.ha, 2)
		}
	} else {
		if !(r >= tex.hiMemMin) {
			if tex.mem[r].hh().b0() == 6 {
				if tex.mem[r].hh().b1() > 1 {
					goto label42
				}
			}
		}
		j = 1
		s = tex.ha
		tex.initList = 0
		goto label50
	}
	s = tex.curP
	for tex.mem[s].hh().rh != tex.ha {
		s = tex.mem[s].hh().rh
	}
	j = 0
	goto label50
label42:
	s = tex.ha
	j = 0
	tex.hu[0] = 256
	tex.initLig = false
	tex.initList = 0
label50:
	tex.flushNodeList(r)
	for {
		l = j
		j = byte(int32(tex.reconstitute(j, tex.hn, bchar, uint16(tex.hyfChar+0))) + 1)
		if tex.hyphenPassed == 0 {
			tex.mem[s].pHh().rh = tex.mem[29996].hh().rh
			for tex.mem[s].hh().rh > 0 {
				s = tex.mem[s].hh().rh
			}
			if odd(int32(tex.hyf[int32(j)-1])) {
				l = j
				tex.hyphenPassed = byte(int32(j) - 1)
				tex.mem[29996].pHh().rh = 0
			}
		}
		if tex.hyphenPassed > 0 {
			for {
				r = tex.getNode(2)
				tex.mem[r].pHh().rh = tex.mem[29996].hh().rh
				*tex.mem[r].pHh().pB0() = 7
				majorTail = r
				rCount = 0
				for tex.mem[majorTail].hh().rh > 0 {
					majorTail = tex.mem[majorTail].hh().rh
					rCount = rCount + 1
				}
				i = tex.hyphenPassed
				tex.hyf[i] = 0
				minorTail = 0
				*tex.mem[int32(r)+1].pHh().pLh() = 0
				hyfNode = tex.newCharacter(tex.hf, byte(tex.hyfChar))
				if hyfNode != 0 {
					i = byte(int32(i) + 1)
					c = byte(tex.hu[i])
					tex.hu[i] = uint16(tex.hyfChar)
					tex.mem[hyfNode].pHh().rh = tex.avail
					tex.avail = hyfNode
				}
				for l <= i {
					l = byte(int32(tex.reconstitute(l, i, tex.fontBchar[tex.hf], 256)) + 1)
					if tex.mem[29996].hh().rh > 0 {
						if minorTail == 0 {
							*tex.mem[int32(r)+1].pHh().pLh() = tex.mem[29996].hh().rh
						} else {
							tex.mem[minorTail].pHh().rh = tex.mem[29996].hh().rh
						}
						minorTail = tex.mem[29996].hh().rh
						for tex.mem[minorTail].hh().rh > 0 {
							minorTail = tex.mem[minorTail].hh().rh
						}
					}
				}
				if hyfNode != 0 {
					tex.hu[i] = uint16(c)
					l = i
					i = byte(int32(i) - 1)
				}
				minorTail = 0
				tex.mem[int32(r)+1].pHh().rh = 0
				cLoc = 0
				if tex.bcharLabel[tex.hf] != 0 {
					l = byte(int32(l) - 1)
					c = byte(tex.hu[l])
					cLoc = l
					tex.hu[l] = 256
				}
				for l < j {
					for {
						l = byte(int32(tex.reconstitute(l, tex.hn, bchar, 256)) + 1)
						if cLoc > 0 {
							tex.hu[cLoc] = uint16(c)
							cLoc = 0
						}
						if tex.mem[29996].hh().rh > 0 {
							if minorTail == 0 {
								tex.mem[int32(r)+1].pHh().rh = tex.mem[29996].hh().rh
							} else {
								tex.mem[minorTail].pHh().rh = tex.mem[29996].hh().rh
							}
							minorTail = tex.mem[29996].hh().rh
							for tex.mem[minorTail].hh().rh > 0 {
								minorTail = tex.mem[minorTail].hh().rh
							}
						}
						if l >= j {
							break
						}
					}
					for l > j {
						j = byte(int32(tex.reconstitute(j, tex.hn, bchar, 256)) + 1)
						tex.mem[majorTail].pHh().rh = tex.mem[29996].hh().rh
						for tex.mem[majorTail].hh().rh > 0 {
							majorTail = tex.mem[majorTail].hh().rh
							rCount = rCount + 1
						}
					}
				}
				if rCount > 127 {
					tex.mem[s].pHh().rh = tex.mem[r].hh().rh
					tex.mem[r].pHh().rh = 0
					tex.flushNodeList(r)
				} else {
					tex.mem[s].pHh().rh = r
					*tex.mem[r].pHh().pB1() = byte(rCount)
				}
				s = majorTail
				tex.hyphenPassed = byte(int32(j) - 1)
				tex.mem[29996].pHh().rh = 0
				if !odd(int32(tex.hyf[int32(j)-1])) {
					break
				}
			}
		}
		if j > tex.hn {
			break
		}
	}
	tex.mem[s].pHh().rh = q
	tex.flushList(tex.initList)
label10:
	;
}

func (tex *Context) newTrieOp(d, n byte, v byte) (ret byte) {
	var h int16  // -500..500
	var u byte   // 0..255
	var l uint16 // 0..500
	h = int16((iabs(int32(n)+(313*int32(d))+(361*int32(v))+(1009*int32(tex.curLang))) % (trieOpSize + trieOpSize)) - trieOpSize)
	for true {
		l = tex.trieOpHash[h+500]
		if l == 0 {
			if tex.trieOpPtr == trieOpSize {
				tex.overflow(949, trieOpSize)
			}
			u = tex.trieUsed[tex.curLang]
			if u == 255 {
				tex.overflow(950, 255)
			}
			tex.trieOpPtr = uint16(int32(tex.trieOpPtr) + 1)
			u = byte(int32(u) + 1)
			tex.trieUsed[tex.curLang] = u
			tex.hyfDistance[tex.trieOpPtr-1] = d
			tex.hyfNum[tex.trieOpPtr-1] = n
			tex.hyfNext[tex.trieOpPtr-1] = v
			tex.trieOpLang[tex.trieOpPtr-1] = tex.curLang
			tex.trieOpHash[h+500] = tex.trieOpPtr
			tex.trieOpVal[tex.trieOpPtr-1] = u
			ret = u
			goto label10
		}
		if (tex.hyfDistance[l-1] == d) && (tex.hyfNum[l-1] == n) && (tex.hyfNext[l-1] == v) && (tex.trieOpLang[l-1] == tex.curLang) {
			ret = tex.trieOpVal[l-1]
			goto label10
		}
		if h > -trieOpSize {
			h = int16(int32(h) - 1)
		} else {
			h = trieOpSize
		}
	}
label10:
	return ret
}

func (tex *Context) trieNode(p uint16) (ret uint16) {
	var h uint16 // 0..8000
	var q uint16 // 0..8000
	h = uint16((iabs(int32(tex.trieC[p])+(1009*int32(tex.trieO[p]))+(2718*int32(tex.trieL[p]))+(3142*int32(tex.trieR[p]))) % trieSize))
	for true {
		q = tex.trieHash[h]
		if q == 0 {
			tex.trieHash[h] = p
			ret = p
			goto label10
		}
		if (tex.trieC[q] == tex.trieC[p]) && (tex.trieO[q] == tex.trieO[p]) && (tex.trieL[q] == tex.trieL[p]) && (tex.trieR[q] == tex.trieR[p]) {
			ret = q
			goto label10
		}
		if h > 0 {
			h = uint16(int32(h) - 1)
		} else {
			h = trieSize
		}
	}
label10:
	return ret
}

func (tex *Context) compressTrie(p uint16) (ret uint16) {
	if p == 0 {
		ret = 0
	} else {
		tex.trieL[p] = tex.compressTrie(tex.trieL[p])
		tex.trieR[p] = tex.compressTrie(tex.trieR[p])
		ret = tex.trieNode(p)
	}
	return ret
}

func (tex *Context) firstFit(p uint16) {
	var h uint16    // 0..8000
	var z uint16    // 0..8000
	var q uint16    // 0..8000
	var c byte      // 0..255
	var l, r uint16 // 0..8000
	var ll uint16   // 1..256
	c = tex.trieC[p]
	z = tex.trieMin[c]
	for true {
		h = uint16(int32(z) - int32(c))
		if int32(tex.trieMax) < int32(h)+256 {
			if trieSize <= int32(h)+256 {
				tex.overflow(951, trieSize)
			}
			for {
				tex.trieMax = uint16(int32(tex.trieMax) + 1)
				tex.trieTaken[tex.trieMax-1] = false
				tex.trie[tex.trieMax].rh = uint16(int32(tex.trieMax) + 1)
				*tex.trie[tex.trieMax].pLh() = uint16(int32(tex.trieMax) - 1)
				if int32(tex.trieMax) == int32(h)+256 {
					break
				}
			}
		}
		if tex.trieTaken[h-1] {
			goto label45
		}
		q = tex.trieR[p]
		for q > 0 {
			if tex.trie[int32(h)+int32(tex.trieC[q])].rh == 0 {
				goto label45
			}
			q = tex.trieR[q]
		}
		goto label40
	label45:
		z = tex.trie[z].rh
	}
label40:
	tex.trieTaken[h-1] = true
	tex.trieHash[p] = h
	q = p
	for {
		z = uint16(int32(h) + int32(tex.trieC[q]))
		l = tex.trie[z].lh()
		r = tex.trie[z].rh
		*tex.trie[r].pLh() = l
		tex.trie[l].rh = r
		tex.trie[z].rh = 0
		if l < 256 {
			if z < 256 {
				ll = z
			} else {
				ll = 256
			}
			for {
				tex.trieMin[l] = r
				l = uint16(int32(l) + 1)
				if l == ll {
					break
				}
			}
		}
		q = tex.trieR[q]
		if q == 0 {
			break
		}
	}
}

func (tex *Context) triePack(p uint16) {
	var q uint16 // 0..8000
	for {
		q = tex.trieL[p]
		if (q > 0) && (tex.trieHash[q] == 0) {
			tex.firstFit(q)
			tex.triePack(q)
		}
		p = tex.trieR[p]
		if p == 0 {
			break
		}
	}
}

func (tex *Context) trieFix(p uint16) {
	var q uint16 // 0..8000
	var c byte   // 0..255
	var z uint16 // 0..8000
	z = tex.trieHash[p]
	for {
		q = tex.trieL[p]
		c = tex.trieC[p]
		tex.trie[int32(z)+int32(c)].rh = tex.trieHash[q]
		*tex.trie[int32(z)+int32(c)].pB1() = byte(int32(c) + 0)
		*tex.trie[int32(z)+int32(c)].pB0() = tex.trieO[p]
		if q > 0 {
			tex.trieFix(q)
		}
		p = tex.trieR[p]
		if p == 0 {
			break
		}
	}
}

func (tex *Context) newPatterns() {
	var k, l byte        // 0..64
	var digitSensed bool // boolean
	var v byte           // 0..255
	var p, q uint16      // 0..8000
	var firstChild bool  // boolean
	var c byte           // 0..255
	if tex.trieNotReady {
		if tex.eqtb[5313-1].int() <= 0 {
			tex.curLang = 0
		} else if tex.eqtb[5313-1].int() > 255 {
			tex.curLang = 0
		} else {
			tex.curLang = byte(tex.eqtb[5313-1].int())
		}
		tex.scanLeftBrace()
		k = 0
		tex.hyf[0] = 0
		digitSensed = false
		for true {
			tex.getXToken()
			switch tex.curCmd {
			case 11, 12:
				if digitSensed || (tex.curChr < 48) || (tex.curChr > 57) {
					if tex.curChr == 46 {
						tex.curChr = 0
					} else {
						tex.curChr = tex.eqtb[4239+int32(tex.curChr)-1].hh().rh
						if tex.curChr == 0 {
							if tex.interaction == 3 {
							}
							tex.printNl(262)
							tex.print(957)
							tex.helpPtr = 1
							tex.helpLine[0] = 956
							tex.error1()
						}
					}
					if k < 63 {
						k = byte(int32(k) + 1)
						tex.hc[k] = tex.curChr
						tex.hyf[k] = 0
						digitSensed = false
					}
				} else if k < 63 {
					tex.hyf[k] = byte(int32(tex.curChr) - 48)
					digitSensed = true
				}
			case 10, 2:
				if k > 0 {
					if tex.hc[1] == 0 {
						tex.hyf[0] = 0
					}
					if tex.hc[k] == 0 {
						tex.hyf[k] = 0
					}
					l = k
					v = 0
					for true {
						if tex.hyf[l] != 0 {
							v = tex.newTrieOp(byte(int32(k)-int32(l)), tex.hyf[l], v)
						}
						if l > 0 {
							l = byte(int32(l) - 1)
						} else {
							goto label31
						}
					}
				label31:
					q = 0
					tex.hc[0] = uint16(tex.curLang)
					for l <= k {
						c = byte(tex.hc[l])
						l = byte(int32(l) + 1)
						p = tex.trieL[q]
						firstChild = true
						for (p > 0) && (c > tex.trieC[p]) {
							q = p
							p = tex.trieR[q]
							firstChild = false
						}
						if (p == 0) || (c < tex.trieC[p]) {
							if tex.triePtr == trieSize {
								tex.overflow(951, trieSize)
							}
							tex.triePtr = uint16(int32(tex.triePtr) + 1)
							tex.trieR[tex.triePtr] = p
							p = tex.triePtr
							tex.trieL[p] = 0
							if firstChild {
								tex.trieL[q] = p
							} else {
								tex.trieR[q] = p
							}
							tex.trieC[p] = c
							tex.trieO[p] = 0
						}
						q = p
					}
					if tex.trieO[q] != 0 {
						if tex.interaction == 3 {
						}
						tex.printNl(262)
						tex.print(958)
						tex.helpPtr = 1
						tex.helpLine[0] = 956
						tex.error1()
					}
					tex.trieO[q] = v
				}
				if tex.curCmd == 2 {
					goto label30
				}
				k = 0
				tex.hyf[0] = 0
				digitSensed = false
			default:
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(955)
				tex.printEsc(953)
				tex.helpPtr = 1
				tex.helpLine[0] = 956
				tex.error1()
			}
		}
	label30:
		;
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(952)
		tex.printEsc(953)
		tex.helpPtr = 1
		tex.helpLine[0] = 954
		tex.error1()
		tex.mem[29988].pHh().rh = tex.scanToks(false, false)
		tex.flushList(tex.defRef)
	}
}

func (tex *Context) initTrie() {
	var p uint16      // 0..8000
	var j, k, t int32 // integer
	var r, s uint16   // 0..8000
	var h twoHalves   // record twoHalves
	tex.opStart[0] = -0
	for _i := int64(1); _i <= int64(255); _i++ {
		j = int32(_i)
		tex.opStart[j] = uint16(int32(tex.opStart[j-1]) + int32(tex.trieUsed[j-1]) - 0)
	}
	for _i := int64(1); _i <= int64(tex.trieOpPtr); _i++ {
		j = int32(_i)
		tex.trieOpHash[j+500] = uint16(int32(tex.opStart[tex.trieOpLang[j-1]]) + int32(tex.trieOpVal[j-1]))
	}
	for _i := int64(1); _i <= int64(tex.trieOpPtr); _i++ {
		j = int32(_i)
		for int32(tex.trieOpHash[j+500]) > j {
			k = int32(tex.trieOpHash[j+500])
			t = int32(tex.hyfDistance[k-1])
			tex.hyfDistance[k-1] = tex.hyfDistance[j-1]
			tex.hyfDistance[j-1] = byte(t)
			t = int32(tex.hyfNum[k-1])
			tex.hyfNum[k-1] = tex.hyfNum[j-1]
			tex.hyfNum[j-1] = byte(t)
			t = int32(tex.hyfNext[k-1])
			tex.hyfNext[k-1] = tex.hyfNext[j-1]
			tex.hyfNext[j-1] = byte(t)
			tex.trieOpHash[j+500] = tex.trieOpHash[k+500]
			tex.trieOpHash[k+500] = uint16(k)
		}
	}
	for _i := int64(0); _i <= int64(trieSize); _i++ {
		p = uint16(_i)
		tex.trieHash[p] = 0
	}
	tex.trieL[0] = tex.compressTrie(tex.trieL[0])
	for _i := int64(0); _i <= int64(tex.triePtr); _i++ {
		p = uint16(_i)
		tex.trieHash[p] = 0
	}
	for _i := int64(0); _i <= int64(255); _i++ {
		p = uint16(_i)
		tex.trieMin[p] = uint16(int32(p) + 1)
	}
	tex.trie[0].rh = 1
	tex.trieMax = 0
	if tex.trieL[0] != 0 {
		tex.firstFit(tex.trieL[0])
		tex.triePack(tex.trieL[0])
	}
	h.rh = 0
	*h.pB0() = 0
	*h.pB1() = 0
	if tex.trieL[0] == 0 {
		for _i := int64(0); _i <= int64(256); _i++ {
			r = uint16(_i)
			tex.trie[r] = h
		}
		tex.trieMax = 256
	} else {
		tex.trieFix(tex.trieL[0])
		r = 0
		for {
			s = tex.trie[r].rh
			tex.trie[r] = h
			r = s
			if r > tex.trieMax {
				break
			}
		}
	}
	*tex.trie[0].pB1() = 63
	tex.trieNotReady = false
}

func (tex *Context) lineBreak(finalWidowPenalty int32) {
	var autoBreaking bool     // boolean
	var prevP uint16          // 0..65535
	var q, r, s, prevS uint16 // 0..65535
	var f byte                // 0..75
	var j byte                // 0..63
	var c byte                // 0..255
	tex.packBeginLine = tex.curList.mlField
	tex.mem[29997].pHh().rh = tex.mem[tex.curList.headField].hh().rh
	if tex.curList.tailField >= tex.hiMemMin {
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(10000)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	} else if tex.mem[tex.curList.tailField].hh().b0() != 10 {
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(10000)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	} else {
		*tex.mem[tex.curList.tailField].pHh().pB0() = 12
		tex.deleteGlueRef(tex.mem[int32(tex.curList.tailField)+1].hh().lh())
		tex.flushNodeList(tex.mem[int32(tex.curList.tailField)+1].hh().rh)
		*tex.mem[int32(tex.curList.tailField)+1].pInt() = 10000
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(14)
	tex.initCurLang = byte((tex.curList.pgField % 65536))
	tex.initLHyf = (tex.curList.pgField / 4194304)
	tex.initRHyf = ((tex.curList.pgField / 65536) % 64)
	tex.popNest()
	tex.noShrinkErrorYet = true
	if (tex.mem[tex.eqtb[2889-1].hh().rh].hh().b1() != 0) && (tex.mem[int32(tex.eqtb[2889-1].hh().rh)+3].int() != 0) {
		tex.eqtb[2889-1].pHh().rh = tex.finiteShrink(tex.eqtb[2889-1].hh().rh)
	}
	if (tex.mem[tex.eqtb[2890-1].hh().rh].hh().b1() != 0) && (tex.mem[int32(tex.eqtb[2890-1].hh().rh)+3].int() != 0) {
		tex.eqtb[2890-1].pHh().rh = tex.finiteShrink(tex.eqtb[2890-1].hh().rh)
	}
	q = tex.eqtb[2889-1].hh().rh
	r = tex.eqtb[2890-1].hh().rh
	tex.background[1-1] = tex.mem[int32(q)+1].int() + tex.mem[int32(r)+1].int()
	tex.background[2-1] = 0
	tex.background[3-1] = 0
	tex.background[4-1] = 0
	tex.background[5-1] = 0
	tex.background[2+int32(tex.mem[q].hh().b0())-1] = tex.mem[int32(q)+2].int()
	tex.background[2+int32(tex.mem[r].hh().b0())-1] = tex.background[2+int32(tex.mem[r].hh().b0())-1] + tex.mem[int32(r)+2].int()
	tex.background[6-1] = tex.mem[int32(q)+3].int() + tex.mem[int32(r)+3].int()
	tex.minimumDemerits = 1073741823
	tex.minimalDemerits[3] = 1073741823
	tex.minimalDemerits[2] = 1073741823
	tex.minimalDemerits[1] = 1073741823
	tex.minimalDemerits[0] = 1073741823
	if tex.eqtb[3412-1].hh().rh == 0 {
		if tex.eqtb[5847-1].int() == 0 {
			tex.lastSpecialLine = 0
			tex.secondWidth = tex.eqtb[5833-1].int()
			tex.secondIndent = 0
		} else {
			tex.lastSpecialLine = uint16(iabs(tex.eqtb[5304-1].int()))
			if tex.eqtb[5304-1].int() < 0 {
				tex.firstWidth = tex.eqtb[5833-1].int() - iabs(tex.eqtb[5847-1].int())
				if tex.eqtb[5847-1].int() >= 0 {
					tex.firstIndent = tex.eqtb[5847-1].int()
				} else {
					tex.firstIndent = 0
				}
				tex.secondWidth = tex.eqtb[5833-1].int()
				tex.secondIndent = 0
			} else {
				tex.firstWidth = tex.eqtb[5833-1].int()
				tex.firstIndent = 0
				tex.secondWidth = tex.eqtb[5833-1].int() - iabs(tex.eqtb[5847-1].int())
				if tex.eqtb[5847-1].int() >= 0 {
					tex.secondIndent = tex.eqtb[5847-1].int()
				} else {
					tex.secondIndent = 0
				}
			}
		}
	} else {
		tex.lastSpecialLine = uint16(int32(tex.mem[tex.eqtb[3412-1].hh().rh].hh().lh()) - 1)
		tex.secondWidth = tex.mem[int32(tex.eqtb[3412-1].hh().rh)+(2*(int32(tex.lastSpecialLine)+1))].int()
		tex.secondIndent = tex.mem[int32(tex.eqtb[3412-1].hh().rh)+(2*int32(tex.lastSpecialLine))+1].int()
	}
	if tex.eqtb[5282-1].int() == 0 {
		tex.easyLine = tex.lastSpecialLine
	} else {
		tex.easyLine = 65535
	}
	tex.threshold = tex.eqtb[5263-1].int()
	if tex.threshold >= 0 {
		tex.secondPass = false
		tex.finalPass = false
	} else {
		tex.threshold = tex.eqtb[5264-1].int()
		tex.secondPass = true
		tex.finalPass = (tex.eqtb[5850-1].int() <= 0)
	}
	for true {
		if tex.threshold > 10000 {
			tex.threshold = 10000
		}
		if tex.secondPass {
			if tex.trieNotReady {
				tex.initTrie()
			}
			tex.curLang = tex.initCurLang
			tex.lHyf = tex.initLHyf
			tex.rHyf = tex.initRHyf
		}
		q = tex.getNode(3)
		*tex.mem[q].pHh().pB0() = 0
		*tex.mem[q].pHh().pB1() = 2
		tex.mem[q].pHh().rh = 29993
		tex.mem[int32(q)+1].pHh().rh = 0
		*tex.mem[int32(q)+1].pHh().pLh() = uint16(tex.curList.pgField + 1)
		*tex.mem[int32(q)+2].pInt() = 0
		tex.mem[29993].pHh().rh = q
		tex.activeWidth[1-1] = tex.background[1-1]
		tex.activeWidth[2-1] = tex.background[2-1]
		tex.activeWidth[3-1] = tex.background[3-1]
		tex.activeWidth[4-1] = tex.background[4-1]
		tex.activeWidth[5-1] = tex.background[5-1]
		tex.activeWidth[6-1] = tex.background[6-1]
		tex.passive = 0
		tex.printedNode = 29997
		tex.passNumber = 0
		tex.fontInShortDisplay = 0
		tex.curP = tex.mem[29997].hh().rh
		autoBreaking = true
		prevP = tex.curP
		for (tex.curP != 0) && (tex.mem[29993].hh().rh != 29993) {
			if tex.curP >= tex.hiMemMin {
				prevP = tex.curP
				for {
					f = tex.mem[tex.curP].hh().b0()
					tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[tex.curP].hh().b1())].qqqq().b0)].int()
					tex.curP = tex.mem[tex.curP].hh().rh
					if !(tex.curP >= tex.hiMemMin) {
						break
					}
				}
			}
			switch tex.mem[tex.curP].hh().b0() {
			case 0, 1, 2:
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(tex.curP)+1].int()
			case 8:
				if tex.mem[tex.curP].hh().b1() == 4 {
					tex.curLang = byte(tex.mem[int32(tex.curP)+1].hh().rh)
					tex.lHyf = int32(tex.mem[int32(tex.curP)+1].hh().b0())
					tex.rHyf = int32(tex.mem[int32(tex.curP)+1].hh().b1())
				}
			case 10:
				if autoBreaking {
					if prevP >= tex.hiMemMin {
						tex.tryBreak(0, 0)
					} else if tex.mem[prevP].hh().b0() < 9 {
						tex.tryBreak(0, 0)
					} else if (tex.mem[prevP].hh().b0() == 11) && (tex.mem[prevP].hh().b1() != 1) {
						tex.tryBreak(0, 0)
					}
				}
				if (tex.mem[tex.mem[int32(tex.curP)+1].hh().lh()].hh().b1() != 0) && (tex.mem[int32(tex.mem[int32(tex.curP)+1].hh().lh())+3].int() != 0) {
					*tex.mem[int32(tex.curP)+1].pHh().pLh() = tex.finiteShrink(tex.mem[int32(tex.curP)+1].hh().lh())
				}
				q = tex.mem[int32(tex.curP)+1].hh().lh()
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(q)+1].int()
				tex.activeWidth[2+int32(tex.mem[q].hh().b0())-1] = tex.activeWidth[2+int32(tex.mem[q].hh().b0())-1] + tex.mem[int32(q)+2].int()
				tex.activeWidth[6-1] = tex.activeWidth[6-1] + tex.mem[int32(q)+3].int()
				if tex.secondPass && autoBreaking {
					prevS = tex.curP
					s = tex.mem[prevS].hh().rh
					if s != 0 {
						for true {
							if s >= tex.hiMemMin {
								c = byte(int32(tex.mem[s].hh().b1()) - 0)
								tex.hf = tex.mem[s].hh().b0()
							} else if tex.mem[s].hh().b0() == 6 {
								if tex.mem[int32(s)+1].hh().rh == 0 {
									goto label22
								} else {
									q = tex.mem[int32(s)+1].hh().rh
									c = byte(int32(tex.mem[q].hh().b1()) - 0)
									tex.hf = tex.mem[q].hh().b0()
								}
							} else if (tex.mem[s].hh().b0() == 11) && (tex.mem[s].hh().b1() == 0) {
								goto label22
							} else if tex.mem[s].hh().b0() == 8 {
								if tex.mem[s].hh().b1() == 4 {
									tex.curLang = byte(tex.mem[int32(s)+1].hh().rh)
									tex.lHyf = int32(tex.mem[int32(s)+1].hh().b0())
									tex.rHyf = int32(tex.mem[int32(s)+1].hh().b1())
								}
								goto label22
							} else {
								goto label31
							}
							if tex.eqtb[4239+int32(c)-1].hh().rh != 0 {
								if (tex.eqtb[4239+int32(c)-1].hh().rh == uint16(c)) || (tex.eqtb[5301-1].int() > 0) {
									goto label32
								} else {
									goto label31
								}
							}
						label22:
							prevS = s
							s = tex.mem[prevS].hh().rh
						}
					label32:
						tex.hyfChar = tex.hyphenChar[tex.hf]
						if tex.hyfChar < 0 {
							goto label31
						}
						if tex.hyfChar > 255 {
							goto label31
						}
						tex.ha = prevS
						if tex.lHyf+tex.rHyf > 63 {
							goto label31
						}
						tex.hn = 0
						for true {
							if s >= tex.hiMemMin {
								if tex.mem[s].hh().b0() != tex.hf {
									goto label33
								}
								tex.hyfBchar = uint16(tex.mem[s].hh().b1())
								c = byte(int32(tex.hyfBchar) - 0)
								if tex.eqtb[4239+int32(c)-1].hh().rh == 0 {
									goto label33
								}
								if tex.hn == 63 {
									goto label33
								}
								tex.hb = s
								tex.hn = byte(int32(tex.hn) + 1)
								tex.hu[tex.hn] = uint16(c)
								tex.hc[tex.hn] = tex.eqtb[4239+int32(c)-1].hh().rh
								tex.hyfBchar = 256
							} else if tex.mem[s].hh().b0() == 6 {
								if tex.mem[int32(s)+1].hh().b0() != tex.hf {
									goto label33
								}
								j = tex.hn
								q = tex.mem[int32(s)+1].hh().rh
								if q > 0 {
									tex.hyfBchar = uint16(tex.mem[q].hh().b1())
								}
								for q > 0 {
									c = byte(int32(tex.mem[q].hh().b1()) - 0)
									if tex.eqtb[4239+int32(c)-1].hh().rh == 0 {
										goto label33
									}
									if j == 63 {
										goto label33
									}
									j = byte(int32(j) + 1)
									tex.hu[j] = uint16(c)
									tex.hc[j] = tex.eqtb[4239+int32(c)-1].hh().rh
									q = tex.mem[q].hh().rh
								}
								tex.hb = s
								tex.hn = j
								if odd(int32(tex.mem[s].hh().b1())) {
									tex.hyfBchar = tex.fontBchar[tex.hf]
								} else {
									tex.hyfBchar = 256
								}
							} else if (tex.mem[s].hh().b0() == 11) && (tex.mem[s].hh().b1() == 0) {
								tex.hb = s
								tex.hyfBchar = tex.fontBchar[tex.hf]
							} else {
								goto label33
							}
							s = tex.mem[s].hh().rh
						}
					label33:
						if int32(tex.hn) < tex.lHyf+tex.rHyf {
							goto label31
						}
						for true {
							if !(s >= tex.hiMemMin) {
								switch tex.mem[s].hh().b0() {
								case 6:
								case 11:
									if tex.mem[s].hh().b1() != 0 {
										goto label34
									}
								case 8, 10, 12, 3, 5, 4:
									goto label34
								default:
									goto label31
								}
							}
							s = tex.mem[s].hh().rh
						}
					label34:
						tex.hyphenate()
					}
				label31:
				}
			case 11:
				if tex.mem[tex.curP].hh().b1() == 1 {
					if !(tex.mem[tex.curP].hh().rh >= tex.hiMemMin) && autoBreaking {
						if tex.mem[tex.mem[tex.curP].hh().rh].hh().b0() == 10 {
							tex.tryBreak(0, 0)
						}
					}
					tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(tex.curP)+1].int()
				} else {
					tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(tex.curP)+1].int()
				}
			case 6:
				f = tex.mem[int32(tex.curP)+1].hh().b0()
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[int32(tex.curP)+1].hh().b1())].qqqq().b0)].int()
			case 7:
				s = tex.mem[int32(tex.curP)+1].hh().lh()
				tex.discWidth = 0
				if s == 0 {
					tex.tryBreak(tex.eqtb[5267-1].int(), 1)
				} else {
					for {
						if s >= tex.hiMemMin {
							f = tex.mem[s].hh().b0()
							tex.discWidth = tex.discWidth + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[s].hh().b1())].qqqq().b0)].int()
						} else {
							switch tex.mem[s].hh().b0() {
							case 6:
								f = tex.mem[int32(s)+1].hh().b0()
								tex.discWidth = tex.discWidth + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[int32(s)+1].hh().b1())].qqqq().b0)].int()
							case 0, 1, 2, 11:
								tex.discWidth = tex.discWidth + tex.mem[int32(s)+1].int()
							default:
								tex.confusion(937)
							}
						}
						s = tex.mem[s].hh().rh
						if s == 0 {
							break
						}
					}
					tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.discWidth
					tex.tryBreak(tex.eqtb[5266-1].int(), 1)
					tex.activeWidth[1-1] = tex.activeWidth[1-1] - tex.discWidth
				}
				r = uint16(tex.mem[tex.curP].hh().b1())
				s = tex.mem[tex.curP].hh().rh
				for r > 0 {
					if s >= tex.hiMemMin {
						f = tex.mem[s].hh().b0()
						tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[s].hh().b1())].qqqq().b0)].int()
					} else {
						switch tex.mem[s].hh().b0() {
						case 6:
							f = tex.mem[int32(s)+1].hh().b0()
							tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[int32(s)+1].hh().b1())].qqqq().b0)].int()
						case 0, 1, 2, 11:
							tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(s)+1].int()
						default:
							tex.confusion(938)
						}
					}
					r = uint16(int32(r) - 1)
					s = tex.mem[s].hh().rh
				}
				prevP = tex.curP
				tex.curP = s
				goto label35
			case 9:
				autoBreaking = (tex.mem[tex.curP].hh().b1() == 1)
				if !(tex.mem[tex.curP].hh().rh >= tex.hiMemMin) && autoBreaking {
					if tex.mem[tex.mem[tex.curP].hh().rh].hh().b0() == 10 {
						tex.tryBreak(0, 0)
					}
				}
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + tex.mem[int32(tex.curP)+1].int()
			case 12:
				tex.tryBreak(tex.mem[int32(tex.curP)+1].int(), 0)
			case 4, 3, 5:
			default:
				tex.confusion(936)
			}
			prevP = tex.curP
			tex.curP = tex.mem[tex.curP].hh().rh
		label35:
		}
		if tex.curP == 0 {
			tex.tryBreak(-10000, 1)
			if tex.mem[29993].hh().rh != 29993 {
				r = tex.mem[29993].hh().rh
				tex.fewestDemerits = 1073741823
				for {
					if tex.mem[r].hh().b0() != 2 {
						if tex.mem[int32(r)+2].int() < tex.fewestDemerits {
							tex.fewestDemerits = tex.mem[int32(r)+2].int()
							tex.bestBet = r
						}
					}
					r = tex.mem[r].hh().rh
					if r == 29993 {
						break
					}
				}
				tex.bestLine = tex.mem[int32(tex.bestBet)+1].hh().lh()
				if tex.eqtb[5282-1].int() == 0 {
					goto label30
				}
				r = tex.mem[29993].hh().rh
				tex.actualLooseness = 0
				for {
					if tex.mem[r].hh().b0() != 2 {
						tex.lineDiff = int32(tex.mem[int32(r)+1].hh().lh()) - int32(tex.bestLine)
						if ((tex.lineDiff < tex.actualLooseness) && (tex.eqtb[5282-1].int() <= tex.lineDiff)) || ((tex.lineDiff > tex.actualLooseness) && (tex.eqtb[5282-1].int() >= tex.lineDiff)) {
							tex.bestBet = r
							tex.actualLooseness = tex.lineDiff
							tex.fewestDemerits = tex.mem[int32(r)+2].int()
						} else if (tex.lineDiff == tex.actualLooseness) && (tex.mem[int32(r)+2].int() < tex.fewestDemerits) {
							tex.bestBet = r
							tex.fewestDemerits = tex.mem[int32(r)+2].int()
						}
					}
					r = tex.mem[r].hh().rh
					if r == 29993 {
						break
					}
				}
				tex.bestLine = tex.mem[int32(tex.bestBet)+1].hh().lh()
				if (tex.actualLooseness == tex.eqtb[5282-1].int()) || tex.finalPass {
					goto label30
				}
			}
		}
		q = tex.mem[29993].hh().rh
		for q != 29993 {
			tex.curP = tex.mem[q].hh().rh
			if tex.mem[q].hh().b0() == 2 {
				tex.freeNode(q, 7)
			} else {
				tex.freeNode(q, 3)
			}
			q = tex.curP
		}
		q = tex.passive
		for q != 0 {
			tex.curP = tex.mem[q].hh().rh
			tex.freeNode(q, 2)
			q = tex.curP
		}
		if !tex.secondPass {
			tex.threshold = tex.eqtb[5264-1].int()
			tex.secondPass = true
			tex.finalPass = (tex.eqtb[5850-1].int() <= 0)
		} else {
			tex.background[2-1] = tex.background[2-1] + tex.eqtb[5850-1].int()
			tex.finalPass = true
		}
	}
label30:
	tex.postLineBreak(finalWidowPenalty)
	q = tex.mem[29993].hh().rh
	for q != 29993 {
		tex.curP = tex.mem[q].hh().rh
		if tex.mem[q].hh().b0() == 2 {
			tex.freeNode(q, 7)
		} else {
			tex.freeNode(q, 3)
		}
		q = tex.curP
	}
	q = tex.passive
	for q != 0 {
		tex.curP = tex.mem[q].hh().rh
		tex.freeNode(q, 2)
		q = tex.curP
	}
	tex.packBeginLine = 0
}

func (tex *Context) newHyphExceptions() {
	var n byte      // 0..64
	var j byte      // 0..64
	var h uint16    // 0..307
	var k uint16    // 0..3000
	var p uint16    // 0..65535
	var q uint16    // 0..65535
	var s, t uint16 // 0..3000
	var u, v uint16 // 0..32000
	tex.scanLeftBrace()
	if tex.eqtb[5313-1].int() <= 0 {
		tex.curLang = 0
	} else if tex.eqtb[5313-1].int() > 255 {
		tex.curLang = 0
	} else {
		tex.curLang = byte(tex.eqtb[5313-1].int())
	}
	n = 0
	p = 0
	for true {
		tex.getXToken()
	label21:
		switch tex.curCmd {
		case 11, 12, 68:
			if tex.curChr == 45 {
				if n < 63 {
					q = tex.getAvail()
					tex.mem[q].pHh().rh = p
					*tex.mem[q].pHh().pLh() = uint16(n)
					p = q
				}
			} else {
				if tex.eqtb[4239+int32(tex.curChr)-1].hh().rh == 0 {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(945)
					tex.helpPtr = 2
					tex.helpLine[1] = 946
					tex.helpLine[0] = 947
					tex.error1()
				} else if n < 63 {
					n = byte(int32(n) + 1)
					tex.hc[n] = tex.eqtb[4239+int32(tex.curChr)-1].hh().rh
				}
			}
		case 16:
			tex.scanCharNum()
			tex.curChr = uint16(tex.curVal)
			tex.curCmd = 68
			goto label21
		case 10, 2:
			if n > 1 {
				n = byte(int32(n) + 1)
				tex.hc[n] = uint16(tex.curLang)
				if int32(tex.poolPtr)+int32(n) > poolSize {
					tex.overflow(257, poolSize-int32(tex.initPoolPtr))
				}
				h = 0
				for _i := int64(1); _i <= int64(n); _i++ {
					j = byte(_i)
					h = uint16(((int32(h) + int32(h) + int32(tex.hc[j])) % 307))
					tex.strPool[tex.poolPtr] = byte(tex.hc[j])
					tex.poolPtr = uint16(int32(tex.poolPtr) + 1)
				}
				s = tex.makeString()
				if tex.hyphCount == 307 {
					tex.overflow(948, 307)
				}
				tex.hyphCount = uint16(int32(tex.hyphCount) + 1)
				for tex.hyphWord[h] != 0 {
					k = tex.hyphWord[h]
					if (int32(tex.strStart[int32(k)+1]) - int32(tex.strStart[k])) < (int32(tex.strStart[int32(s)+1]) - int32(tex.strStart[s])) {
						goto label40
					}
					if (int32(tex.strStart[int32(k)+1]) - int32(tex.strStart[k])) > (int32(tex.strStart[int32(s)+1]) - int32(tex.strStart[s])) {
						goto label45
					}
					u = tex.strStart[k]
					v = tex.strStart[s]
					for {
						if tex.strPool[u] < tex.strPool[v] {
							goto label40
						}
						if tex.strPool[u] > tex.strPool[v] {
							goto label45
						}
						u = uint16(int32(u) + 1)
						v = uint16(int32(v) + 1)
						if u == tex.strStart[int32(k)+1] {
							break
						}
					}
				label40:
					q = tex.hyphList[h]
					tex.hyphList[h] = p
					p = q
					t = tex.hyphWord[h]
					tex.hyphWord[h] = s
					s = t
				label45:
					if h > 0 {
						h = uint16(int32(h) - 1)
					} else {
						h = 307
					}
				}
				tex.hyphWord[h] = s
				tex.hyphList[h] = p
			}
			if tex.curCmd == 2 {
				goto label10
			}
			n = 0
			p = 0
		default:
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(680)
			tex.printEsc(941)
			tex.print(942)
			tex.helpPtr = 2
			tex.helpLine[1] = 943
			tex.helpLine[0] = 944
			tex.error1()
		}
	}
label10:
	;
}

func (tex *Context) prunePageTop(p uint16) (ret uint16) {
	var prevP uint16 // 0..65535
	var q uint16     // 0..65535
	prevP = 29997
	tex.mem[29997].pHh().rh = p
	for p != 0 {
		switch tex.mem[p].hh().b0() {
		case 0, 1, 2:
			q = tex.newSkipParam(10)
			tex.mem[prevP].pHh().rh = q
			tex.mem[q].pHh().rh = p
			if tex.mem[int32(tex.tempPtr)+1].int() > tex.mem[int32(p)+3].int() {
				*tex.mem[int32(tex.tempPtr)+1].pInt() = tex.mem[int32(tex.tempPtr)+1].int() - tex.mem[int32(p)+3].int()
			} else {
				*tex.mem[int32(tex.tempPtr)+1].pInt() = 0
			}
			p = 0
		case 8, 4, 3:
			prevP = p
			p = tex.mem[prevP].hh().rh
		case 10, 11, 12:
			q = p
			p = tex.mem[q].hh().rh
			tex.mem[q].pHh().rh = 0
			tex.mem[prevP].pHh().rh = p
			tex.flushNodeList(q)
		default:
			tex.confusion(959)
		}
	}
	ret = tex.mem[29997].hh().rh
	return ret
}

func (tex *Context) vertBreak(p uint16, h, d int32) (ret uint16) {
	var prevP uint16     // 0..65535
	var q, r uint16      // 0..65535
	var pi int32         // integer
	var b int32          // integer
	var leastCost int32  // integer
	var bestPlace uint16 // 0..65535
	var prevDp int32     // integer
	var t byte           // 0..63
	prevP = p
	leastCost = 1073741823
	tex.activeWidth[1-1] = 0
	tex.activeWidth[2-1] = 0
	tex.activeWidth[3-1] = 0
	tex.activeWidth[4-1] = 0
	tex.activeWidth[5-1] = 0
	tex.activeWidth[6-1] = 0
	prevDp = 0
	for true {
		if p == 0 {
			pi = -10000
		} else {
			switch tex.mem[p].hh().b0() {
			case 0, 1, 2:
				tex.activeWidth[1-1] = tex.activeWidth[1-1] + prevDp + tex.mem[int32(p)+3].int()
				prevDp = tex.mem[int32(p)+2].int()
				goto label45
			case 8:
				goto label45
			case 10:
				if tex.mem[prevP].hh().b0() < 9 {
					pi = 0
				} else {
					goto label90
				}
			case 11:
				if tex.mem[p].hh().rh == 0 {
					t = 12
				} else {
					t = tex.mem[tex.mem[p].hh().rh].hh().b0()
				}
				if t == 10 {
					pi = 0
				} else {
					goto label90
				}
			case 12:
				pi = tex.mem[int32(p)+1].int()
			case 4, 3:
				goto label45
			default:
				tex.confusion(960)
			}
		}
		if pi < 10000 {
			if tex.activeWidth[1-1] < h {
				if (tex.activeWidth[3-1] != 0) || (tex.activeWidth[4-1] != 0) || (tex.activeWidth[5-1] != 0) {
					b = 0
				} else {
					b = int32(tex.badness(h-tex.activeWidth[1-1], tex.activeWidth[2-1]))
				}
			} else if tex.activeWidth[1-1]-h > tex.activeWidth[6-1] {
				b = 1073741823
			} else {
				b = int32(tex.badness(tex.activeWidth[1-1]-h, tex.activeWidth[6-1]))
			}
			if b < 1073741823 {
				if pi <= -10000 {
					b = pi
				} else if b < 10000 {
					b = b + pi
				} else {
					b = 100000
				}
			}
			if b <= leastCost {
				bestPlace = p
				leastCost = b
				tex.bestHeightPlusDepth = tex.activeWidth[1-1] + prevDp
			}
			if (b == 1073741823) || (pi <= -10000) {
				goto label30
			}
		}
		if (tex.mem[p].hh().b0() < 10) || (tex.mem[p].hh().b0() > 11) {
			goto label45
		}
	label90:
		if tex.mem[p].hh().b0() == 11 {
			q = p
		} else {
			q = tex.mem[int32(p)+1].hh().lh()
			tex.activeWidth[2+int32(tex.mem[q].hh().b0())-1] = tex.activeWidth[2+int32(tex.mem[q].hh().b0())-1] + tex.mem[int32(q)+2].int()
			tex.activeWidth[6-1] = tex.activeWidth[6-1] + tex.mem[int32(q)+3].int()
			if (tex.mem[q].hh().b1() != 0) && (tex.mem[int32(q)+3].int() != 0) {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(961)
				tex.helpPtr = 4
				tex.helpLine[3] = 962
				tex.helpLine[2] = 963
				tex.helpLine[1] = 964
				tex.helpLine[0] = 922
				tex.error1()
				r = tex.newSpec(q)
				*tex.mem[r].pHh().pB1() = 0
				tex.deleteGlueRef(q)
				*tex.mem[int32(p)+1].pHh().pLh() = r
				q = r
			}
		}
		tex.activeWidth[1-1] = tex.activeWidth[1-1] + prevDp + tex.mem[int32(q)+1].int()
		prevDp = 0
	label45:
		if prevDp > d {
			tex.activeWidth[1-1] = tex.activeWidth[1-1] + prevDp - d
			prevDp = d
		}
		prevP = p
		p = tex.mem[prevP].hh().rh
	}
label30:
	ret = bestPlace
	return ret
}

func (tex *Context) vsplit(n byte, h int32) (ret uint16) {
	var v uint16 // 0..65535
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	v = tex.eqtb[3678+int32(n)-1].hh().rh
	if tex.curMark[3] != 0 {
		tex.deleteTokenRef(tex.curMark[3])
		tex.curMark[3] = 0
		tex.deleteTokenRef(tex.curMark[4])
		tex.curMark[4] = 0
	}
	if v == 0 {
		ret = 0
		goto label10
	}
	if tex.mem[v].hh().b0() != 1 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(338)
		tex.printEsc(965)
		tex.print(966)
		tex.printEsc(967)
		tex.helpPtr = 2
		tex.helpLine[1] = 968
		tex.helpLine[0] = 969
		tex.error1()
		ret = 0
		goto label10
	}
	q = tex.vertBreak(tex.mem[int32(v)+5].hh().rh, h, tex.eqtb[5836-1].int())
	p = tex.mem[int32(v)+5].hh().rh
	if p == q {
		tex.mem[int32(v)+5].pHh().rh = 0
	} else {
		for true {
			if tex.mem[p].hh().b0() == 4 {
				if tex.curMark[3] == 0 {
					tex.curMark[3] = uint16(tex.mem[int32(p)+1].int())
					tex.curMark[4] = tex.curMark[3]
					*tex.mem[tex.curMark[3]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[3]].hh().lh()) + 2)
				} else {
					tex.deleteTokenRef(tex.curMark[4])
					tex.curMark[4] = uint16(tex.mem[int32(p)+1].int())
					*tex.mem[tex.curMark[4]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[4]].hh().lh()) + 1)
				}
			}
			if tex.mem[p].hh().rh == q {
				tex.mem[p].pHh().rh = 0
				goto label30
			}
			p = tex.mem[p].hh().rh
		}
	}
label30:
	q = tex.prunePageTop(q)
	p = tex.mem[int32(v)+5].hh().rh
	tex.freeNode(v, 7)
	if q == 0 {
		tex.eqtb[3678+int32(n)-1].pHh().rh = 0
	} else {
		tex.eqtb[3678+int32(n)-1].pHh().rh = tex.vpackage(q, 0, 1, 1073741823)
	}
	ret = tex.vpackage(p, h, 0, tex.eqtb[5836-1].int())
label10:
	return ret
}

func (tex *Context) printTotals() {
	tex.printScaled(tex.pageSoFar[1])
	if tex.pageSoFar[2] != 0 {
		tex.print(312)
		tex.printScaled(tex.pageSoFar[2])
		tex.print(338)
	}
	if tex.pageSoFar[3] != 0 {
		tex.print(312)
		tex.printScaled(tex.pageSoFar[3])
		tex.print(311)
	}
	if tex.pageSoFar[4] != 0 {
		tex.print(312)
		tex.printScaled(tex.pageSoFar[4])
		tex.print(978)
	}
	if tex.pageSoFar[5] != 0 {
		tex.print(312)
		tex.printScaled(tex.pageSoFar[5])
		tex.print(979)
	}
	if tex.pageSoFar[6] != 0 {
		tex.print(313)
		tex.printScaled(tex.pageSoFar[6])
	}
}

func (tex *Context) freezePageSpecs(s byte) {
	tex.pageContents = s
	tex.pageSoFar[0] = tex.eqtb[5834-1].int()
	tex.pageMaxDepth = tex.eqtb[5835-1].int()
	tex.pageSoFar[7] = 0
	tex.pageSoFar[1] = 0
	tex.pageSoFar[2] = 0
	tex.pageSoFar[3] = 0
	tex.pageSoFar[4] = 0
	tex.pageSoFar[5] = 0
	tex.pageSoFar[6] = 0
	tex.leastPageCost = 1073741823
}

func (tex *Context) boxError(n byte) {
	tex.error1()
	tex.beginDiagnostic()
	tex.printNl(836)
	tex.showBox(tex.eqtb[3678+int32(n)-1].hh().rh)
	tex.endDiagnostic(true)
	tex.flushNodeList(tex.eqtb[3678+int32(n)-1].hh().rh)
	tex.eqtb[3678+int32(n)-1].pHh().rh = 0
}

func (tex *Context) ensureVbox(n byte) {
	var p uint16 // 0..65535
	p = tex.eqtb[3678+int32(n)-1].hh().rh
	if p != 0 {
		if tex.mem[p].hh().b0() == 0 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(989)
			tex.helpPtr = 3
			tex.helpLine[2] = 990
			tex.helpLine[1] = 991
			tex.helpLine[0] = 992
			tex.boxError(n)
		}
	}
}

func (tex *Context) fireUp(c uint16) {
	var p, q, r, s uint16       // 0..65535
	var prevP uint16            // 0..65535
	var n byte                  // 0..255
	var wait bool               // boolean
	var saveVbadness int32      // integer
	var saveVfuzz int32         // integer
	var saveSplitTopSkip uint16 // 0..65535
	if tex.mem[tex.bestPageBreak].hh().b0() == 12 {
		tex.geqWordDefine(5302, tex.mem[int32(tex.bestPageBreak)+1].int())
		*tex.mem[int32(tex.bestPageBreak)+1].pInt() = 10000
	} else {
		tex.geqWordDefine(5302, 10000)
	}
	if tex.curMark[2] != 0 {
		if tex.curMark[0] != 0 {
			tex.deleteTokenRef(tex.curMark[0])
		}
		tex.curMark[0] = tex.curMark[2]
		*tex.mem[tex.curMark[0]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[0]].hh().lh()) + 1)
		tex.deleteTokenRef(tex.curMark[1])
		tex.curMark[1] = 0
	}
	if c == tex.bestPageBreak {
		tex.bestPageBreak = 0
	}
	if tex.eqtb[3933-1].hh().rh != 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(338)
		tex.printEsc(409)
		tex.print(1003)
		tex.helpPtr = 2
		tex.helpLine[1] = 1004
		tex.helpLine[0] = 992
		tex.boxError(255)
	}
	tex.insertPenalties = 0
	saveSplitTopSkip = tex.eqtb[2892-1].hh().rh
	if tex.eqtb[5316-1].int() <= 0 {
		r = tex.mem[30000].hh().rh
		for r != 30000 {
			if tex.mem[int32(r)+2].hh().lh() != 0 {
				n = byte(int32(tex.mem[r].hh().b1()) - 0)
				tex.ensureVbox(n)
				if tex.eqtb[3678+int32(n)-1].hh().rh == 0 {
					tex.eqtb[3678+int32(n)-1].pHh().rh = tex.newNullBox()
				}
				p = uint16(int32(tex.eqtb[3678+int32(n)-1].hh().rh) + 5)
				for tex.mem[p].hh().rh != 0 {
					p = tex.mem[p].hh().rh
				}
				tex.mem[int32(r)+2].pHh().rh = p
			}
			r = tex.mem[r].hh().rh
		}
	}
	q = 29996
	tex.mem[q].pHh().rh = 0
	prevP = 29998
	p = tex.mem[prevP].hh().rh
	for p != tex.bestPageBreak {
		if tex.mem[p].hh().b0() == 3 {
			if tex.eqtb[5316-1].int() <= 0 {
				r = tex.mem[30000].hh().rh
				for tex.mem[r].hh().b1() != tex.mem[p].hh().b1() {
					r = tex.mem[r].hh().rh
				}
				if tex.mem[int32(r)+2].hh().lh() == 0 {
					wait = true
				} else {
					wait = false
					s = tex.mem[int32(r)+2].hh().rh
					tex.mem[s].pHh().rh = tex.mem[int32(p)+4].hh().lh()
					if tex.mem[int32(r)+2].hh().lh() == p {
						if tex.mem[r].hh().b0() == 1 {
							if (tex.mem[int32(r)+1].hh().lh() == p) && (tex.mem[int32(r)+1].hh().rh != 0) {
								for tex.mem[s].hh().rh != tex.mem[int32(r)+1].hh().rh {
									s = tex.mem[s].hh().rh
								}
								tex.mem[s].pHh().rh = 0
								tex.eqtb[2892-1].pHh().rh = tex.mem[int32(p)+4].hh().rh
								*tex.mem[int32(p)+4].pHh().pLh() = tex.prunePageTop(tex.mem[int32(r)+1].hh().rh)
								if tex.mem[int32(p)+4].hh().lh() != 0 {
									tex.tempPtr = tex.vpackage(tex.mem[int32(p)+4].hh().lh(), 0, 1, 1073741823)
									*tex.mem[int32(p)+3].pInt() = tex.mem[int32(tex.tempPtr)+3].int() + tex.mem[int32(tex.tempPtr)+2].int()
									tex.freeNode(tex.tempPtr, 7)
									wait = true
								}
							}
						}
						*tex.mem[int32(r)+2].pHh().pLh() = 0
						n = byte(int32(tex.mem[r].hh().b1()) - 0)
						tex.tempPtr = tex.mem[int32(tex.eqtb[3678+int32(n)-1].hh().rh)+5].hh().rh
						tex.freeNode(tex.eqtb[3678+int32(n)-1].hh().rh, 7)
						tex.eqtb[3678+int32(n)-1].pHh().rh = tex.vpackage(tex.tempPtr, 0, 1, 1073741823)
					} else {
						for tex.mem[s].hh().rh != 0 {
							s = tex.mem[s].hh().rh
						}
						tex.mem[int32(r)+2].pHh().rh = s
					}
				}
				tex.mem[prevP].pHh().rh = tex.mem[p].hh().rh
				tex.mem[p].pHh().rh = 0
				if wait {
					tex.mem[q].pHh().rh = p
					q = p
					tex.insertPenalties = tex.insertPenalties + 1
				} else {
					tex.deleteGlueRef(tex.mem[int32(p)+4].hh().rh)
					tex.freeNode(p, 5)
				}
				p = prevP
			}
		} else if tex.mem[p].hh().b0() == 4 {
			if tex.curMark[1] == 0 {
				tex.curMark[1] = uint16(tex.mem[int32(p)+1].int())
				*tex.mem[tex.curMark[1]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[1]].hh().lh()) + 1)
			}
			if tex.curMark[2] != 0 {
				tex.deleteTokenRef(tex.curMark[2])
			}
			tex.curMark[2] = uint16(tex.mem[int32(p)+1].int())
			*tex.mem[tex.curMark[2]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[2]].hh().lh()) + 1)
		}
		prevP = p
		p = tex.mem[prevP].hh().rh
	}
	tex.eqtb[2892-1].pHh().rh = saveSplitTopSkip
	if p != 0 {
		if tex.mem[29999].hh().rh == 0 {
			if tex.nestPtr == 0 {
				tex.curList.tailField = tex.pageTail
			} else {
				tex.nest[0].tailField = tex.pageTail
			}
		}
		tex.mem[tex.pageTail].pHh().rh = tex.mem[29999].hh().rh
		tex.mem[29999].pHh().rh = p
		tex.mem[prevP].pHh().rh = 0
	}
	saveVbadness = tex.eqtb[5290-1].int()
	*tex.eqtb[5290-1].pInt() = 10000
	saveVfuzz = tex.eqtb[5839-1].int()
	*tex.eqtb[5839-1].pInt() = 1073741823
	tex.eqtb[3933-1].pHh().rh = tex.vpackage(tex.mem[29998].hh().rh, tex.bestSize, 0, tex.pageMaxDepth)
	*tex.eqtb[5290-1].pInt() = saveVbadness
	*tex.eqtb[5839-1].pInt() = saveVfuzz
	if tex.lastGlue != 65535 {
		tex.deleteGlueRef(tex.lastGlue)
	}
	tex.pageContents = 0
	tex.pageTail = 29998
	tex.mem[29998].pHh().rh = 0
	tex.lastGlue = 65535
	tex.lastPenalty = 0
	tex.lastKern = 0
	tex.pageSoFar[7] = 0
	tex.pageMaxDepth = 0
	if q != 29996 {
		tex.mem[29998].pHh().rh = tex.mem[29996].hh().rh
		tex.pageTail = q
	}
	r = tex.mem[30000].hh().rh
	for r != 30000 {
		q = tex.mem[r].hh().rh
		tex.freeNode(r, 4)
		r = q
	}
	tex.mem[30000].pHh().rh = 30000
	if (tex.curMark[0] != 0) && (tex.curMark[1] == 0) {
		tex.curMark[1] = tex.curMark[0]
		*tex.mem[tex.curMark[0]].pHh().pLh() = uint16(int32(tex.mem[tex.curMark[0]].hh().lh()) + 1)
	}
	if tex.eqtb[3413-1].hh().rh != 0 {
		if tex.deadCycles >= tex.eqtb[5303-1].int() {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1005)
			tex.printInt(tex.deadCycles)
			tex.print(1006)
			tex.helpPtr = 3
			tex.helpLine[2] = 1007
			tex.helpLine[1] = 1008
			tex.helpLine[0] = 1009
			tex.error1()
		} else {
			tex.outputActive = true
			tex.deadCycles = tex.deadCycles + 1
			tex.pushNest()
			tex.curList.modeField = -1
			*tex.curList.auxField.pInt() = -65536000
			tex.curList.mlField = -tex.line
			tex.beginTokenList(tex.eqtb[3413-1].hh().rh, 6)
			tex.newSaveLevel(8)
			tex.normalParagraph()
			tex.scanLeftBrace()
			goto label10
		}
	}
	if tex.mem[29998].hh().rh != 0 {
		if tex.mem[29999].hh().rh == 0 {
			if tex.nestPtr == 0 {
				tex.curList.tailField = tex.pageTail
			} else {
				tex.nest[0].tailField = tex.pageTail
			}
		} else {
			tex.mem[tex.pageTail].pHh().rh = tex.mem[29999].hh().rh
		}
		tex.mem[29999].pHh().rh = tex.mem[29998].hh().rh
		tex.mem[29998].pHh().rh = 0
		tex.pageTail = 29998
	}
	tex.shipOut(tex.eqtb[3933-1].hh().rh)
	tex.eqtb[3933-1].pHh().rh = 0
label10:
	;
}

func (tex *Context) buildPage() {
	var p uint16          // 0..65535
	var q, r uint16       // 0..65535
	var b, c int32        // integer
	var pi int32          // integer
	var n byte            // 0..255
	var delta, h, w int32 // integer
	if (tex.mem[29999].hh().rh == 0) || tex.outputActive {
		goto label10
	}
	for {
	label22:
		p = tex.mem[29999].hh().rh
		if tex.lastGlue != 65535 {
			tex.deleteGlueRef(tex.lastGlue)
		}
		tex.lastPenalty = 0
		tex.lastKern = 0
		if tex.mem[p].hh().b0() == 10 {
			tex.lastGlue = tex.mem[int32(p)+1].hh().lh()
			tex.mem[tex.lastGlue].pHh().rh = uint16(int32(tex.mem[tex.lastGlue].hh().rh) + 1)
		} else {
			tex.lastGlue = 65535
			if tex.mem[p].hh().b0() == 12 {
				tex.lastPenalty = tex.mem[int32(p)+1].int()
			} else if tex.mem[p].hh().b0() == 11 {
				tex.lastKern = tex.mem[int32(p)+1].int()
			}
		}
		switch tex.mem[p].hh().b0() {
		case 0, 1, 2:
			if tex.pageContents < 2 {
				if tex.pageContents == 0 {
					tex.freezePageSpecs(2)
				} else {
					tex.pageContents = 2
				}
				q = tex.newSkipParam(9)
				if tex.mem[int32(tex.tempPtr)+1].int() > tex.mem[int32(p)+3].int() {
					*tex.mem[int32(tex.tempPtr)+1].pInt() = tex.mem[int32(tex.tempPtr)+1].int() - tex.mem[int32(p)+3].int()
				} else {
					*tex.mem[int32(tex.tempPtr)+1].pInt() = 0
				}
				tex.mem[q].pHh().rh = p
				tex.mem[29999].pHh().rh = q
				goto label22
			} else {
				tex.pageSoFar[1] = tex.pageSoFar[1] + tex.pageSoFar[7] + tex.mem[int32(p)+3].int()
				tex.pageSoFar[7] = tex.mem[int32(p)+2].int()
				goto label80
			}
		case 8:
			goto label80
		case 10:
			if tex.pageContents < 2 {
				goto label31
			} else if tex.mem[tex.pageTail].hh().b0() < 9 {
				pi = 0
			} else {
				goto label90
			}
		case 11:
			if tex.pageContents < 2 {
				goto label31
			} else if tex.mem[p].hh().rh == 0 {
				goto label10
			} else if tex.mem[tex.mem[p].hh().rh].hh().b0() == 10 {
				pi = 0
			} else {
				goto label90
			}
		case 12:
			if tex.pageContents < 2 {
				goto label31
			} else {
				pi = tex.mem[int32(p)+1].int()
			}
		case 4:
			goto label80
		case 3:
			if tex.pageContents == 0 {
				tex.freezePageSpecs(1)
			}
			n = tex.mem[p].hh().b1()
			r = 30000
			for n >= tex.mem[tex.mem[r].hh().rh].hh().b1() {
				r = tex.mem[r].hh().rh
			}
			n = byte(int32(n) - 0)
			if int32(tex.mem[r].hh().b1()) != int32(n)+0 {
				q = tex.getNode(4)
				tex.mem[q].pHh().rh = tex.mem[r].hh().rh
				tex.mem[r].pHh().rh = q
				r = q
				*tex.mem[r].pHh().pB1() = byte(int32(n) + 0)
				*tex.mem[r].pHh().pB0() = 0
				tex.ensureVbox(n)
				if tex.eqtb[3678+int32(n)-1].hh().rh == 0 {
					*tex.mem[int32(r)+3].pInt() = 0
				} else {
					*tex.mem[int32(r)+3].pInt() = tex.mem[int32(tex.eqtb[3678+int32(n)-1].hh().rh)+3].int() + tex.mem[int32(tex.eqtb[3678+int32(n)-1].hh().rh)+2].int()
				}
				*tex.mem[int32(r)+2].pHh().pLh() = 0
				q = tex.eqtb[2900+int32(n)-1].hh().rh
				if tex.eqtb[5318+int32(n)-1].int() == 1000 {
					h = tex.mem[int32(r)+3].int()
				} else {
					h = (tex.xOverN(tex.mem[int32(r)+3].int(), 1000) * tex.eqtb[5318+int32(n)-1].int())
				}
				tex.pageSoFar[0] = tex.pageSoFar[0] - h - tex.mem[int32(q)+1].int()
				tex.pageSoFar[2+int32(tex.mem[q].hh().b0())] = tex.pageSoFar[2+int32(tex.mem[q].hh().b0())] + tex.mem[int32(q)+2].int()
				tex.pageSoFar[6] = tex.pageSoFar[6] + tex.mem[int32(q)+3].int()
				if (tex.mem[q].hh().b1() != 0) && (tex.mem[int32(q)+3].int() != 0) {
					if tex.interaction == 3 {
					}
					tex.printNl(262)
					tex.print(998)
					tex.printEsc(395)
					tex.printInt(int32(n))
					tex.helpPtr = 3
					tex.helpLine[2] = 999
					tex.helpLine[1] = 1000
					tex.helpLine[0] = 922
					tex.error1()
				}
			}
			if tex.mem[r].hh().b0() == 1 {
				tex.insertPenalties = tex.insertPenalties + tex.mem[int32(p)+1].int()
			} else {
				tex.mem[int32(r)+2].pHh().rh = p
				delta = tex.pageSoFar[0] - tex.pageSoFar[1] - tex.pageSoFar[7] + tex.pageSoFar[6]
				if tex.eqtb[5318+int32(n)-1].int() == 1000 {
					h = tex.mem[int32(p)+3].int()
				} else {
					h = (tex.xOverN(tex.mem[int32(p)+3].int(), 1000) * tex.eqtb[5318+int32(n)-1].int())
				}
				if ((h <= 0) || (h <= delta)) && ((tex.mem[int32(p)+3].int() + tex.mem[int32(r)+3].int()) <= tex.eqtb[5851+int32(n)-1].int()) {
					tex.pageSoFar[0] = tex.pageSoFar[0] - h
					*tex.mem[int32(r)+3].pInt() = tex.mem[int32(r)+3].int() + tex.mem[int32(p)+3].int()
				} else {
					if tex.eqtb[5318+int32(n)-1].int() <= 0 {
						w = 1073741823
					} else {
						w = tex.pageSoFar[0] - tex.pageSoFar[1] - tex.pageSoFar[7]
						if tex.eqtb[5318+int32(n)-1].int() != 1000 {
							w = (tex.xOverN(w, tex.eqtb[5318+int32(n)-1].int()) * 1000)
						}
					}
					if w > tex.eqtb[5851+int32(n)-1].int()-tex.mem[int32(r)+3].int() {
						w = tex.eqtb[5851+int32(n)-1].int() - tex.mem[int32(r)+3].int()
					}
					q = tex.vertBreak(tex.mem[int32(p)+4].hh().lh(), w, tex.mem[int32(p)+2].int())
					*tex.mem[int32(r)+3].pInt() = tex.mem[int32(r)+3].int() + tex.bestHeightPlusDepth
					if tex.eqtb[5318+int32(n)-1].int() != 1000 {
						tex.bestHeightPlusDepth = (tex.xOverN(tex.bestHeightPlusDepth, 1000) * tex.eqtb[5318+int32(n)-1].int())
					}
					tex.pageSoFar[0] = tex.pageSoFar[0] - tex.bestHeightPlusDepth
					*tex.mem[r].pHh().pB0() = 1
					tex.mem[int32(r)+1].pHh().rh = q
					*tex.mem[int32(r)+1].pHh().pLh() = p
					if q == 0 {
						tex.insertPenalties = tex.insertPenalties - 10000
					} else if tex.mem[q].hh().b0() == 12 {
						tex.insertPenalties = tex.insertPenalties + tex.mem[int32(q)+1].int()
					}
				}
			}
			goto label80
		default:
			tex.confusion(993)
		}
		if pi < 10000 {
			if tex.pageSoFar[1] < tex.pageSoFar[0] {
				if (tex.pageSoFar[3] != 0) || (tex.pageSoFar[4] != 0) || (tex.pageSoFar[5] != 0) {
					b = 0
				} else {
					b = int32(tex.badness(tex.pageSoFar[0]-tex.pageSoFar[1], tex.pageSoFar[2]))
				}
			} else if tex.pageSoFar[1]-tex.pageSoFar[0] > tex.pageSoFar[6] {
				b = 1073741823
			} else {
				b = int32(tex.badness(tex.pageSoFar[1]-tex.pageSoFar[0], tex.pageSoFar[6]))
			}
			if b < 1073741823 {
				if pi <= -10000 {
					c = pi
				} else if b < 10000 {
					c = b + pi + tex.insertPenalties
				} else {
					c = 100000
				}
			} else {
				c = b
			}
			if tex.insertPenalties >= 10000 {
				c = 1073741823
			}
			if c <= tex.leastPageCost {
				tex.bestPageBreak = p
				tex.bestSize = tex.pageSoFar[0]
				tex.leastPageCost = c
				r = tex.mem[30000].hh().rh
				for r != 30000 {
					*tex.mem[int32(r)+2].pHh().pLh() = tex.mem[int32(r)+2].hh().rh
					r = tex.mem[r].hh().rh
				}
			}
			if (c == 1073741823) || (pi <= -10000) {
				tex.fireUp(p)
				if tex.outputActive {
					goto label10
				}
				goto label30
			}
		}
		if (tex.mem[p].hh().b0() < 10) || (tex.mem[p].hh().b0() > 11) {
			goto label80
		}
	label90:
		if tex.mem[p].hh().b0() == 11 {
			q = p
		} else {
			q = tex.mem[int32(p)+1].hh().lh()
			tex.pageSoFar[2+int32(tex.mem[q].hh().b0())] = tex.pageSoFar[2+int32(tex.mem[q].hh().b0())] + tex.mem[int32(q)+2].int()
			tex.pageSoFar[6] = tex.pageSoFar[6] + tex.mem[int32(q)+3].int()
			if (tex.mem[q].hh().b1() != 0) && (tex.mem[int32(q)+3].int() != 0) {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(994)
				tex.helpPtr = 4
				tex.helpLine[3] = 995
				tex.helpLine[2] = 963
				tex.helpLine[1] = 964
				tex.helpLine[0] = 922
				tex.error1()
				r = tex.newSpec(q)
				*tex.mem[r].pHh().pB1() = 0
				tex.deleteGlueRef(q)
				*tex.mem[int32(p)+1].pHh().pLh() = r
				q = r
			}
		}
		tex.pageSoFar[1] = tex.pageSoFar[1] + tex.pageSoFar[7] + tex.mem[int32(q)+1].int()
		tex.pageSoFar[7] = 0
	label80:
		if tex.pageSoFar[7] > tex.pageMaxDepth {
			tex.pageSoFar[1] = tex.pageSoFar[1] + tex.pageSoFar[7] - tex.pageMaxDepth
			tex.pageSoFar[7] = tex.pageMaxDepth
		}
		tex.mem[tex.pageTail].pHh().rh = p
		tex.pageTail = p
		tex.mem[29999].pHh().rh = tex.mem[p].hh().rh
		tex.mem[p].pHh().rh = 0
		goto label30
	label31:
		tex.mem[29999].pHh().rh = tex.mem[p].hh().rh
		tex.mem[p].pHh().rh = 0
		tex.flushNodeList(p)
	label30:
		if tex.mem[29999].hh().rh == 0 {
			break
		}
	}
	if tex.nestPtr == 0 {
		tex.curList.tailField = 29999
	} else {
		tex.nest[0].tailField = 29999
	}
label10:
}

func (tex *Context) appSpace() {
	var q uint16 // 0..65535
	if (tex.curList.auxField.hh().lh() >= 2000) && (tex.eqtb[2895-1].hh().rh != 0) {
		q = tex.newParamGlue(13)
	} else {
		if tex.eqtb[2894-1].hh().rh != 0 {
			tex.mainP = tex.eqtb[2894-1].hh().rh
		} else {
			tex.mainP = tex.fontGlue[tex.eqtb[3934-1].hh().rh]
			if tex.mainP == 0 {
				tex.mainP = tex.newSpec(0)
				tex.mainK = uint16(tex.paramBase[tex.eqtb[3934-1].hh().rh] + 2)
				*tex.mem[int32(tex.mainP)+1].pInt() = tex.fontInfo[tex.mainK].int()
				*tex.mem[int32(tex.mainP)+2].pInt() = tex.fontInfo[int32(tex.mainK)+1].int()
				*tex.mem[int32(tex.mainP)+3].pInt() = tex.fontInfo[int32(tex.mainK)+2].int()
				tex.fontGlue[tex.eqtb[3934-1].hh().rh] = tex.mainP
			}
		}
		tex.mainP = tex.newSpec(tex.mainP)
		if tex.curList.auxField.hh().lh() >= 2000 {
			*tex.mem[int32(tex.mainP)+1].pInt() = tex.mem[int32(tex.mainP)+1].int() + tex.fontInfo[7+tex.paramBase[tex.eqtb[3934-1].hh().rh]].int()
		}
		*tex.mem[int32(tex.mainP)+2].pInt() = tex.xnOverD(tex.mem[int32(tex.mainP)+2].int(), int32(tex.curList.auxField.hh().lh()), 1000)
		*tex.mem[int32(tex.mainP)+3].pInt() = tex.xnOverD(tex.mem[int32(tex.mainP)+3].int(), 1000, int32(tex.curList.auxField.hh().lh()))
		q = tex.newGlue(tex.mainP)
		tex.mem[tex.mainP].pHh().rh = 0
	}
	tex.mem[tex.curList.tailField].pHh().rh = q
	tex.curList.tailField = q
}

func (tex *Context) insertDollarSign() {
	tex.backInput()
	tex.curTok = 804
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1017)
	tex.helpPtr = 2
	tex.helpLine[1] = 1018
	tex.helpLine[0] = 1019
	tex.insError()
}

func (tex *Context) youCant() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(685)
	tex.printCmdChr(tex.curCmd, tex.curChr)
	tex.print(1020)
	tex.printMode(int32(tex.curList.modeField))
}

func (tex *Context) reportIllegalCase() {
	tex.youCant()
	tex.helpPtr = 4
	tex.helpLine[3] = 1021
	tex.helpLine[2] = 1022
	tex.helpLine[1] = 1023
	tex.helpLine[0] = 1024
	tex.error1()
}

func (tex *Context) privileged() (ret bool) {
	if tex.curList.modeField > 0 {
		ret = true
	} else {
		tex.reportIllegalCase()
		ret = false
	}
	return ret
}

func (tex *Context) itsAllOver() (ret bool) {
	if tex.privileged() {
		if (29998 == int32(tex.pageTail)) && (tex.curList.headField == tex.curList.tailField) && (tex.deadCycles == 0) {
			ret = true
			goto label10
		}
		tex.backInput()
		tex.mem[tex.curList.tailField].pHh().rh = tex.newNullBox()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[int32(tex.curList.tailField)+1].pInt() = tex.eqtb[5833-1].int()
		tex.mem[tex.curList.tailField].pHh().rh = tex.newGlue(8)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(-1073741824)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.buildPage()
	}
	ret = false
label10:
	return ret
}

func (tex *Context) appendGlue() {
	var s byte // 0..63
	s = byte(tex.curChr)
	switch s {
	case 0:
		tex.curVal = 4
	case 1:
		tex.curVal = 8
	case 2:
		tex.curVal = 12
	case 3:
		tex.curVal = 16
	case 4:
		tex.scanGlue(2)
	case 5:
		tex.scanGlue(3)
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.newGlue(uint16(tex.curVal))
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	if s >= 4 {
		tex.mem[tex.curVal].pHh().rh = uint16(int32(tex.mem[tex.curVal].hh().rh) - 1)
		if s > 4 {
			*tex.mem[tex.curList.tailField].pHh().pB1() = 99
		}
	}
}

func (tex *Context) appendKern() {
	var s byte // 0..255
	s = byte(tex.curChr)
	tex.scanDimen(s == 99, false, false)
	tex.mem[tex.curList.tailField].pHh().rh = tex.newKern(tex.curVal)
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	*tex.mem[tex.curList.tailField].pHh().pB1() = s
}

func (tex *Context) offSave() {
	var p uint16 // 0..65535
	if tex.curGroup == 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(777)
		tex.printCmdChr(tex.curCmd, tex.curChr)
		tex.helpPtr = 1
		tex.helpLine[0] = 1043
		tex.error1()
	} else {
		tex.backInput()
		p = tex.getAvail()
		tex.mem[29997].pHh().rh = p
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(625)
		switch tex.curGroup {
		case 14:
			*tex.mem[p].pHh().pLh() = 6711
			tex.printEsc(516)
		case 15:
			*tex.mem[p].pHh().pLh() = 804
			tex.printChar(36)
		case 16:
			*tex.mem[p].pHh().pLh() = 6712
			tex.mem[p].pHh().rh = tex.getAvail()
			p = tex.mem[p].hh().rh
			*tex.mem[p].pHh().pLh() = 3118
			tex.printEsc(1042)
		default:
			*tex.mem[p].pHh().pLh() = 637
			tex.printChar(125)
		}
		tex.print(626)
		tex.beginTokenList(tex.mem[29997].hh().rh, 4)
		tex.helpPtr = 5
		tex.helpLine[4] = 1037
		tex.helpLine[3] = 1038
		tex.helpLine[2] = 1039
		tex.helpLine[1] = 1040
		tex.helpLine[0] = 1041
		tex.error1()
	}
}

func (tex *Context) extraRightBrace() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1048)
	switch tex.curGroup {
	case 14:
		tex.printEsc(516)
	case 15:
		tex.printChar(36)
	case 16:
		tex.printEsc(877)
	}
	tex.helpPtr = 5
	tex.helpLine[4] = 1049
	tex.helpLine[3] = 1050
	tex.helpLine[2] = 1051
	tex.helpLine[1] = 1052
	tex.helpLine[0] = 1053
	tex.error1()
	tex.alignState = tex.alignState + 1
}

func (tex *Context) normalParagraph() {
	if tex.eqtb[5282-1].int() != 0 {
		tex.eqWordDefine(5282, 0)
	}
	if tex.eqtb[5847-1].int() != 0 {
		tex.eqWordDefine(5847, 0)
	}
	if tex.eqtb[5304-1].int() != 1 {
		tex.eqWordDefine(5304, 1)
	}
	if tex.eqtb[3412-1].hh().rh != 0 {
		tex.eqDefine(3412, 118, 0)
	}
}

func (tex *Context) boxEnd(boxContext int32) {
	var p uint16 // 0..65535
	if boxContext < 1073741824 {
		if tex.curBox != 0 {
			*tex.mem[int32(tex.curBox)+4].pInt() = boxContext
			if iabs(int32(tex.curList.modeField)) == 1 {
				tex.appendToVlist(tex.curBox)
				if tex.adjustTail != 0 {
					if 29995 != int32(tex.adjustTail) {
						tex.mem[tex.curList.tailField].pHh().rh = tex.mem[29995].hh().rh
						tex.curList.tailField = tex.adjustTail
					}
					tex.adjustTail = 0
				}
				if tex.curList.modeField > 0 {
					tex.buildPage()
				}
			} else {
				if iabs(int32(tex.curList.modeField)) == 102 {
					*tex.curList.auxField.pHh().pLh() = 1000
				} else {
					p = tex.newNoad()
					tex.mem[int32(p)+1].pHh().rh = 2
					*tex.mem[int32(p)+1].pHh().pLh() = tex.curBox
					tex.curBox = p
				}
				tex.mem[tex.curList.tailField].pHh().rh = tex.curBox
				tex.curList.tailField = tex.curBox
			}
		}
	} else if boxContext < 1073742336 {
		if boxContext < 1073742080 {
			tex.eqDefine(uint16(-1073738146+boxContext), 119, tex.curBox)
		} else {
			tex.geqDefine(uint16(-1073738402+boxContext), 119, tex.curBox)
		}
	} else if tex.curBox != 0 {
		if boxContext > 1073742336 {
			for {
				tex.getXToken()
				if (tex.curCmd != 10) && (tex.curCmd != 0) {
					break
				}
			}
			if ((tex.curCmd == 26) && (iabs(int32(tex.curList.modeField)) != 1)) || ((tex.curCmd == 27) && (iabs(int32(tex.curList.modeField)) == 1)) {
				tex.appendGlue()
				*tex.mem[tex.curList.tailField].pHh().pB1() = byte(boxContext - 1073742237)
				tex.mem[int32(tex.curList.tailField)+1].pHh().rh = tex.curBox
			} else {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1066)
				tex.helpPtr = 3
				tex.helpLine[2] = 1067
				tex.helpLine[1] = 1068
				tex.helpLine[0] = 1069
				tex.backError()
				tex.flushNodeList(tex.curBox)
			}
		} else {
			tex.shipOut(tex.curBox)
		}
	}
}

func (tex *Context) beginBox(boxContext int32) {
	var p, q uint16 // 0..65535
	var k uint16    // 0..65535
	var n byte      // 0..255
	switch tex.curChr {
	case 0:
		tex.scanEightBitInt()
		tex.curBox = tex.eqtb[3678+tex.curVal-1].hh().rh
		tex.eqtb[3678+tex.curVal-1].pHh().rh = 0
	case 1:
		tex.scanEightBitInt()
		tex.curBox = tex.copyNodeList(tex.eqtb[3678+tex.curVal-1].hh().rh)
	case 2:
		tex.curBox = 0
		if iabs(int32(tex.curList.modeField)) == 203 {
			tex.youCant()
			tex.helpPtr = 1
			tex.helpLine[0] = 1070
			tex.error1()
		} else if (tex.curList.modeField == 1) && (tex.curList.headField == tex.curList.tailField) {
			tex.youCant()
			tex.helpPtr = 2
			tex.helpLine[1] = 1071
			tex.helpLine[0] = 1072
			tex.error1()
		} else {
			if !(tex.curList.tailField >= tex.hiMemMin) {
				if (tex.mem[tex.curList.tailField].hh().b0() == 0) || (tex.mem[tex.curList.tailField].hh().b0() == 1) {
					q = tex.curList.headField
					for {
						p = q
						if !(q >= tex.hiMemMin) {
							if tex.mem[q].hh().b0() == 7 {
								for _i := int64(1); _i <= int64(tex.mem[q].hh().b1()); _i++ {
									p = tex.mem[p].hh().rh
								}
								if p == tex.curList.tailField {
									goto label30
								}
							}
						}
						q = tex.mem[p].hh().rh
						if q == tex.curList.tailField {
							break
						}
					}
					tex.curBox = tex.curList.tailField
					*tex.mem[int32(tex.curBox)+4].pInt() = 0
					tex.curList.tailField = p
					tex.mem[p].pHh().rh = 0
				label30:
				}
			}
		}
	case 3:
		tex.scanEightBitInt()
		n = byte(tex.curVal)
		if !tex.scanKeyword(842) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1073)
			tex.helpPtr = 2
			tex.helpLine[1] = 1074
			tex.helpLine[0] = 1075
			tex.error1()
		}
		tex.scanDimen(false, false, false)
		tex.curBox = tex.vsplit(n, tex.curVal)
	default:
		k = uint16(int32(tex.curChr) - 4)
		*tex.saveStack[int32(tex.savePtr)+0].pInt() = boxContext
		if k == 102 {
			if (boxContext < 1073741824) && (iabs(int32(tex.curList.modeField)) == 1) {
				tex.scanSpec(3, true)
			} else {
				tex.scanSpec(2, true)
			}
		} else {
			if k == 1 {
				tex.scanSpec(4, true)
			} else {
				tex.scanSpec(5, true)
				k = 1
			}
			tex.normalParagraph()
		}
		tex.pushNest()
		tex.curList.modeField = int16(-k)
		if k == 1 {
			*tex.curList.auxField.pInt() = -65536000
			if tex.eqtb[3418-1].hh().rh != 0 {
				tex.beginTokenList(tex.eqtb[3418-1].hh().rh, 11)
			}
		} else {
			*tex.curList.auxField.pHh().pLh() = 1000
			if tex.eqtb[3417-1].hh().rh != 0 {
				tex.beginTokenList(tex.eqtb[3417-1].hh().rh, 10)
			}
		}
		goto label10
	}
	tex.boxEnd(boxContext)
label10:
}

func (tex *Context) scanBox(boxContext int32) {
	for {
		tex.getXToken()
		if (tex.curCmd != 10) && (tex.curCmd != 0) {
			break
		}
	}
	if tex.curCmd == 20 {
		tex.beginBox(boxContext)
	} else if (boxContext >= 1073742337) && ((tex.curCmd == 36) || (tex.curCmd == 35)) {
		tex.curBox = tex.scanRuleSpec()
		tex.boxEnd(boxContext)
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1076)
		tex.helpPtr = 3
		tex.helpLine[2] = 1077
		tex.helpLine[1] = 1078
		tex.helpLine[0] = 1079
		tex.backError()
	}
}

func (tex *Context) package1(c byte) {
	var h int32  // integer
	var p uint16 // 0..65535
	var d int32  // integer
	d = tex.eqtb[5837-1].int()
	tex.unsave()
	tex.savePtr = uint16(int32(tex.savePtr) - 3)
	if tex.curList.modeField == -102 {
		tex.curBox = tex.hpack(tex.mem[tex.curList.headField].hh().rh, tex.saveStack[int32(tex.savePtr)+2].int(), byte(tex.saveStack[int32(tex.savePtr)+1].int()))
	} else {
		tex.curBox = tex.vpackage(tex.mem[tex.curList.headField].hh().rh, tex.saveStack[int32(tex.savePtr)+2].int(), byte(tex.saveStack[int32(tex.savePtr)+1].int()), d)
		if c == 4 {
			h = 0
			p = tex.mem[int32(tex.curBox)+5].hh().rh
			if p != 0 {
				if tex.mem[p].hh().b0() <= 2 {
					h = tex.mem[int32(p)+3].int()
				}
			}
			*tex.mem[int32(tex.curBox)+2].pInt() = tex.mem[int32(tex.curBox)+2].int() - h + tex.mem[int32(tex.curBox)+3].int()
			*tex.mem[int32(tex.curBox)+3].pInt() = h
		}
	}
	tex.popNest()
	tex.boxEnd(tex.saveStack[int32(tex.savePtr)+0].int())
}

func (tex *Context) normMin(h int32) (ret byte) {
	if h <= 0 {
		ret = 1
	} else if h >= 63 {
		ret = 63
	} else {
		ret = byte(h)
	}
	return ret
}

func (tex *Context) newGraf(indented bool) {
	tex.curList.pgField = 0
	if (tex.curList.modeField == 1) || (tex.curList.headField != tex.curList.tailField) {
		tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(2)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	}
	tex.pushNest()
	tex.curList.modeField = 102
	*tex.curList.auxField.pHh().pLh() = 1000
	if tex.eqtb[5313-1].int() <= 0 {
		tex.curLang = 0
	} else if tex.eqtb[5313-1].int() > 255 {
		tex.curLang = 0
	} else {
		tex.curLang = byte(tex.eqtb[5313-1].int())
	}
	tex.curList.auxField.pHh().rh = uint16(tex.curLang)
	tex.curList.pgField = (((int32(tex.normMin(tex.eqtb[5314-1].int())) * 64) + int32(tex.normMin(tex.eqtb[5315-1].int()))) * 65536) + int32(tex.curLang)
	if indented {
		tex.curList.tailField = tex.newNullBox()
		tex.mem[tex.curList.headField].pHh().rh = tex.curList.tailField
		*tex.mem[int32(tex.curList.tailField)+1].pInt() = tex.eqtb[5830-1].int()
	}
	if tex.eqtb[3414-1].hh().rh != 0 {
		tex.beginTokenList(tex.eqtb[3414-1].hh().rh, 7)
	}
	if tex.nestPtr == 1 {
		tex.buildPage()
	}
}

func (tex *Context) indentInHmode() {
	var p, q uint16 // 0..65535
	if tex.curChr > 0 {
		p = tex.newNullBox()
		*tex.mem[int32(p)+1].pInt() = tex.eqtb[5830-1].int()
		if iabs(int32(tex.curList.modeField)) == 102 {
			*tex.curList.auxField.pHh().pLh() = 1000
		} else {
			q = tex.newNoad()
			tex.mem[int32(q)+1].pHh().rh = 2
			*tex.mem[int32(q)+1].pHh().pLh() = p
			p = q
		}
		tex.mem[tex.curList.tailField].pHh().rh = p
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	}
}

func (tex *Context) headForVmode() {
	if tex.curList.modeField < 0 {
		if tex.curCmd != 36 {
			tex.offSave()
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(685)
			tex.printEsc(521)
			tex.print(1082)
			tex.helpPtr = 2
			tex.helpLine[1] = 1083
			tex.helpLine[0] = 1084
			tex.error1()
		}
	} else {
		tex.backInput()
		tex.curTok = tex.parToken
		tex.backInput()
		tex.curInput.indexField = 4
	}
}

func (tex *Context) endGraf() {
	if tex.curList.modeField == 102 {
		if tex.curList.headField == tex.curList.tailField {
			tex.popNest()
		} else {
			tex.lineBreak(tex.eqtb[5269-1].int())
		}
		tex.normalParagraph()
		tex.errorCount = 0
	}
}

func (tex *Context) beginInsertOrAdjust() {
	if tex.curCmd == 38 {
		tex.curVal = 255
	} else {
		tex.scanEightBitInt()
		if tex.curVal == 255 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1085)
			tex.printEsc(330)
			tex.printInt(255)
			tex.helpPtr = 1
			tex.helpLine[0] = 1086
			tex.error1()
			tex.curVal = 0
		}
	}
	*tex.saveStack[int32(tex.savePtr)+0].pInt() = tex.curVal
	tex.savePtr = uint16(int32(tex.savePtr) + 1)
	tex.newSaveLevel(11)
	tex.scanLeftBrace()
	tex.normalParagraph()
	tex.pushNest()
	tex.curList.modeField = -1
	*tex.curList.auxField.pInt() = -65536000
}

func (tex *Context) makeMark() {
	var p uint16 // 0..65535
	p = tex.scanToks(false, true)
	p = tex.getNode(2)
	*tex.mem[p].pHh().pB0() = 4
	*tex.mem[p].pHh().pB1() = 0
	*tex.mem[int32(p)+1].pInt() = int32(tex.defRef)
	tex.mem[tex.curList.tailField].pHh().rh = p
	tex.curList.tailField = p
}

func (tex *Context) appendPenalty() {
	tex.scanInt()
	tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(tex.curVal)
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	if tex.curList.modeField == 1 {
		tex.buildPage()
	}
}

func (tex *Context) deleteLast() {
	var p, q uint16 // 0..65535
	if (tex.curList.modeField == 1) && (tex.curList.tailField == tex.curList.headField) {
		if (tex.curChr != 10) || (tex.lastGlue != 65535) {
			tex.youCant()
			tex.helpPtr = 2
			tex.helpLine[1] = 1071
			tex.helpLine[0] = 1087
			if tex.curChr == 11 {
				tex.helpLine[0] = uint16(1088)
			} else if tex.curChr != 10 {
				tex.helpLine[0] = uint16(1089)
			}
			tex.error1()
		}
	} else {
		if !(tex.curList.tailField >= tex.hiMemMin) {
			if uint16(tex.mem[tex.curList.tailField].hh().b0()) == tex.curChr {
				q = tex.curList.headField
				for {
					p = q
					if !(q >= tex.hiMemMin) {
						if tex.mem[q].hh().b0() == 7 {
							for _i := int64(1); _i <= int64(tex.mem[q].hh().b1()); _i++ {
								p = tex.mem[p].hh().rh
							}
							if p == tex.curList.tailField {
								goto label10
							}
						}
					}
					q = tex.mem[p].hh().rh
					if q == tex.curList.tailField {
						break
					}
				}
				tex.mem[p].pHh().rh = 0
				tex.flushNodeList(tex.curList.tailField)
				tex.curList.tailField = p
			}
		}
	}
label10:
}

func (tex *Context) unpackage() {
	var p uint16 // 0..65535
	var c byte   // 0..1
	c = byte(tex.curChr)
	tex.scanEightBitInt()
	p = tex.eqtb[3678+tex.curVal-1].hh().rh
	if p == 0 {
		goto label10
	}
	if (iabs(int32(tex.curList.modeField)) == 203) || ((iabs(int32(tex.curList.modeField)) == 1) && (tex.mem[p].hh().b0() != 1)) || ((iabs(int32(tex.curList.modeField)) == 102) && (tex.mem[p].hh().b0() != 0)) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1097)
		tex.helpPtr = 3
		tex.helpLine[2] = 1098
		tex.helpLine[1] = 1099
		tex.helpLine[0] = 1100
		tex.error1()
		goto label10
	}
	if c == 1 {
		tex.mem[tex.curList.tailField].pHh().rh = tex.copyNodeList(tex.mem[int32(p)+5].hh().rh)
	} else {
		tex.mem[tex.curList.tailField].pHh().rh = tex.mem[int32(p)+5].hh().rh
		tex.eqtb[3678+tex.curVal-1].pHh().rh = 0
		tex.freeNode(p, 7)
	}
	for tex.mem[tex.curList.tailField].hh().rh != 0 {
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	}
label10:
}

func (tex *Context) appendItalicCorrection() {
	var p uint16 // 0..65535
	var f byte   // 0..75
	if tex.curList.tailField != tex.curList.headField {
		if tex.curList.tailField >= tex.hiMemMin {
			p = tex.curList.tailField
		} else if tex.mem[tex.curList.tailField].hh().b0() == 6 {
			p = uint16(int32(tex.curList.tailField) + 1)
		} else {
			goto label10
		}
		f = tex.mem[p].hh().b0()
		tex.mem[tex.curList.tailField].pHh().rh = tex.newKern(tex.fontInfo[tex.italicBase[f]+((int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[p].hh().b1())].qqqq().b2)-0)/4)].int())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[tex.curList.tailField].pHh().pB1() = 1
	}
label10:
}

func (tex *Context) appendDiscretionary() {
	var c int32 // integer
	tex.mem[tex.curList.tailField].pHh().rh = tex.newDisc()
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	if tex.curChr == 1 {
		c = tex.hyphenChar[tex.eqtb[3934-1].hh().rh]
		if c >= 0 {
			if c < 256 {
				*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = tex.newCharacter(byte(tex.eqtb[3934-1].hh().rh), byte(c))
			}
		}
	} else {
		tex.savePtr = uint16(int32(tex.savePtr) + 1)
		*tex.saveStack[int32(tex.savePtr)-1].pInt() = 0
		tex.newSaveLevel(10)
		tex.scanLeftBrace()
		tex.pushNest()
		tex.curList.modeField = -102
		*tex.curList.auxField.pHh().pLh() = 1000
	}
}

func (tex *Context) buildDiscretionary() {
	var p, q uint16 // 0..65535
	var n int32     // integer
	tex.unsave()
	q = tex.curList.headField
	p = tex.mem[q].hh().rh
	n = 0
	for p != 0 {
		if !(p >= tex.hiMemMin) {
			if tex.mem[p].hh().b0() > 2 {
				if tex.mem[p].hh().b0() != 11 {
					if tex.mem[p].hh().b0() != 6 {
						if tex.interaction == 3 {
						}
						tex.printNl(262)
						tex.print(1107)
						tex.helpPtr = 1
						tex.helpLine[0] = 1108
						tex.error1()
						tex.beginDiagnostic()
						tex.printNl(1109)
						tex.showBox(p)
						tex.endDiagnostic(true)
						tex.flushNodeList(p)
						tex.mem[q].pHh().rh = 0
						goto label30
					}
				}
			}
		}
		q = p
		p = tex.mem[q].hh().rh
		n = n + 1
	}
label30:
	p = tex.mem[tex.curList.headField].hh().rh
	tex.popNest()
	switch tex.saveStack[int32(tex.savePtr)-1].int() {
	case 0:
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = p
	case 1:
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = p
	case 2:
		if (n > 0) && (iabs(int32(tex.curList.modeField)) == 203) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1101)
			tex.printEsc(349)
			tex.helpPtr = 2
			tex.helpLine[1] = 1102
			tex.helpLine[0] = 1103
			tex.flushNodeList(p)
			n = 0
			tex.error1()
		} else {
			tex.mem[tex.curList.tailField].pHh().rh = p
		}
		if n <= 255 {
			*tex.mem[tex.curList.tailField].pHh().pB1() = byte(n)
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1104)
			tex.helpPtr = 2
			tex.helpLine[1] = 1105
			tex.helpLine[0] = 1106
			tex.error1()
		}
		if n > 0 {
			tex.curList.tailField = q
		}
		tex.savePtr = uint16(int32(tex.savePtr) - 1)
		goto label10
	}
	*tex.saveStack[int32(tex.savePtr)-1].pInt() = tex.saveStack[int32(tex.savePtr)-1].int() + 1
	tex.newSaveLevel(10)
	tex.scanLeftBrace()
	tex.pushNest()
	tex.curList.modeField = -102
	*tex.curList.auxField.pHh().pLh() = 1000
label10:
}

func (tex *Context) makeAccent() {
	var s, t float32            // real
	var p, q, r uint16          // 0..65535
	var f byte                  // 0..75
	var a, h, x, w, delta int32 // integer
	var i fourQuarters          // record fourQuarters
	tex.scanCharNum()
	f = byte(tex.eqtb[3934-1].hh().rh)
	p = tex.newCharacter(f, byte(tex.curVal))
	if p != 0 {
		x = tex.fontInfo[5+tex.paramBase[f]].int()
		s = (float32(tex.fontInfo[1+tex.paramBase[f]].int()) / 65536)
		a = tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[p].hh().b1())].qqqq().b0)].int()
		tex.doAssignments()
		q = 0
		f = byte(tex.eqtb[3934-1].hh().rh)
		if (tex.curCmd == 11) || (tex.curCmd == 12) || (tex.curCmd == 68) {
			q = tex.newCharacter(f, byte(tex.curChr))
		} else if tex.curCmd == 16 {
			tex.scanCharNum()
			q = tex.newCharacter(f, byte(tex.curVal))
		} else {
			tex.backInput()
		}
		if q != 0 {
			t = (float32(tex.fontInfo[1+tex.paramBase[f]].int()) / 65536)
			i = tex.fontInfo[tex.charBase[f]+int32(tex.mem[q].hh().b1())].qqqq()
			w = tex.fontInfo[tex.widthBase[f]+int32(i.b0)].int()
			h = tex.fontInfo[tex.heightBase[f]+((int32(i.b1)-0)/16)].int()
			if h != x {
				p = tex.hpack(p, 0, 1)
				*tex.mem[int32(p)+4].pInt() = x - h
			}
			delta = round((float32((w - a)) / 2) + (float32(h) * t) - (float32(x) * s))
			r = tex.newKern(delta)
			*tex.mem[r].pHh().pB1() = 2
			tex.mem[tex.curList.tailField].pHh().rh = r
			tex.mem[r].pHh().rh = p
			tex.curList.tailField = tex.newKern(-a - delta)
			*tex.mem[tex.curList.tailField].pHh().pB1() = 2
			tex.mem[p].pHh().rh = tex.curList.tailField
			p = q
		}
		tex.mem[tex.curList.tailField].pHh().rh = p
		tex.curList.tailField = p
		*tex.curList.auxField.pHh().pLh() = 1000
	}
}

func (tex *Context) alignError() {
	if iabs(tex.alignState) > 2 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1114)
		tex.printCmdChr(tex.curCmd, tex.curChr)
		if tex.curTok == 1062 {
			tex.helpPtr = 6
			tex.helpLine[5] = 1115
			tex.helpLine[4] = 1116
			tex.helpLine[3] = 1117
			tex.helpLine[2] = 1118
			tex.helpLine[1] = 1119
			tex.helpLine[0] = 1120
		} else {
			tex.helpPtr = 5
			tex.helpLine[4] = 1115
			tex.helpLine[3] = 1121
			tex.helpLine[2] = 1118
			tex.helpLine[1] = 1119
			tex.helpLine[0] = 1120
		}
		tex.error1()
	} else {
		tex.backInput()
		if tex.alignState < 0 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(657)
			tex.alignState = tex.alignState + 1
			tex.curTok = 379
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1110)
			tex.alignState = tex.alignState - 1
			tex.curTok = 637
		}
		tex.helpPtr = 3
		tex.helpLine[2] = 1111
		tex.helpLine[1] = 1112
		tex.helpLine[0] = 1113
		tex.insError()
	}
}

func (tex *Context) noAlignError() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1114)
	tex.printEsc(527)
	tex.helpPtr = 2
	tex.helpLine[1] = 1122
	tex.helpLine[0] = 1123
	tex.error1()
}

func (tex *Context) omitError() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1114)
	tex.printEsc(530)
	tex.helpPtr = 2
	tex.helpLine[1] = 1124
	tex.helpLine[0] = 1123
	tex.error1()
}

func (tex *Context) doEndv() {
	tex.basePtr = tex.inputPtr
	tex.inputStack[tex.basePtr] = tex.curInput
	for (tex.inputStack[tex.basePtr].indexField != 2) && (tex.inputStack[tex.basePtr].locField == 0) && (tex.inputStack[tex.basePtr].stateField == 0) {
		tex.basePtr = byte(int32(tex.basePtr) - 1)
	}
	if (tex.inputStack[tex.basePtr].indexField != 2) || (tex.inputStack[tex.basePtr].locField != 0) || (tex.inputStack[tex.basePtr].stateField != 0) {
		tex.fatalError(595)
	}
	if tex.curGroup == 6 {
		tex.endGraf()
		if tex.finCol() {
			tex.finRow()
		}
	} else {
		tex.offSave()
	}
}

func (tex *Context) csError() {
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(777)
	tex.printEsc(505)
	tex.helpPtr = 1
	tex.helpLine[0] = 1126
	tex.error1()
}

func (tex *Context) pushMath(c byte) {
	tex.pushNest()
	tex.curList.modeField = -203
	*tex.curList.auxField.pInt() = 0
	tex.newSaveLevel(c)
}

func (tex *Context) initMath() {
	var w int32  // integer
	var l int32  // integer
	var s int32  // integer
	var p uint16 // 0..65535
	var q uint16 // 0..65535
	var f byte   // 0..75
	var n int32  // integer
	var v int32  // integer
	var d int32  // integer
	tex.getToken()
	if (tex.curCmd == 3) && (tex.curList.modeField > 0) {
		if tex.curList.headField == tex.curList.tailField {
			tex.popNest()
			w = -1073741823
		} else {
			tex.lineBreak(tex.eqtb[5270-1].int())
			v = tex.mem[int32(tex.justBox)+4].int() + (2 * tex.fontInfo[6+tex.paramBase[tex.eqtb[3934-1].hh().rh]].int())
			w = -1073741823
			p = tex.mem[int32(tex.justBox)+5].hh().rh
			for p != 0 {
			label21:
				if p >= tex.hiMemMin {
					f = tex.mem[p].hh().b0()
					d = tex.fontInfo[tex.widthBase[f]+int32(tex.fontInfo[tex.charBase[f]+int32(tex.mem[p].hh().b1())].qqqq().b0)].int()
					goto label40
				}
				switch tex.mem[p].hh().b0() {
				case 0, 1, 2:
					d = tex.mem[int32(p)+1].int()
					goto label40
				case 6:
					tex.mem[29988] = tex.mem[int32(p)+1]
					tex.mem[29988].pHh().rh = tex.mem[p].hh().rh
					p = 29988
					goto label21
				case 11, 9:
					d = tex.mem[int32(p)+1].int()
				case 10:
					q = tex.mem[int32(p)+1].hh().lh()
					d = tex.mem[int32(q)+1].int()
					if tex.mem[int32(tex.justBox)+5].hh().b0() == 1 {
						if (tex.mem[int32(tex.justBox)+5].hh().b1() == tex.mem[q].hh().b0()) && (tex.mem[int32(q)+2].int() != 0) {
							v = 1073741823
						}
					} else if tex.mem[int32(tex.justBox)+5].hh().b0() == 2 {
						if (tex.mem[int32(tex.justBox)+5].hh().b1() == tex.mem[q].hh().b1()) && (tex.mem[int32(q)+3].int() != 0) {
							v = 1073741823
						}
					}
					if tex.mem[p].hh().b1() >= 100 {
						goto label40
					}
				case 8:
					d = 0
				default:
					d = 0
				}
				if v < 1073741823 {
					v = v + d
				}
				goto label45
			label40:
				if v < 1073741823 {
					v = v + d
					w = v
				} else {
					w = 1073741823
					goto label30
				}
			label45:
				p = tex.mem[p].hh().rh
			}
		label30:
		}
		if tex.eqtb[3412-1].hh().rh == 0 {
			if (tex.eqtb[5847-1].int() != 0) && (((tex.eqtb[5304-1].int() >= 0) && ((tex.curList.pgField + 2) > tex.eqtb[5304-1].int())) || ((tex.curList.pgField + 1) < -tex.eqtb[5304-1].int())) {
				l = tex.eqtb[5833-1].int() - iabs(tex.eqtb[5847-1].int())
				if tex.eqtb[5847-1].int() > 0 {
					s = tex.eqtb[5847-1].int()
				} else {
					s = 0
				}
			} else {
				l = tex.eqtb[5833-1].int()
				s = 0
			}
		} else {
			n = int32(tex.mem[tex.eqtb[3412-1].hh().rh].hh().lh())
			if tex.curList.pgField+2 >= n {
				p = uint16(int32(tex.eqtb[3412-1].hh().rh) + (2 * n))
			} else {
				p = uint16(int32(tex.eqtb[3412-1].hh().rh) + (2 * (tex.curList.pgField + 2)))
			}
			s = tex.mem[int32(p)-1].int()
			l = tex.mem[p].int()
		}
		tex.pushMath(15)
		tex.curList.modeField = 203
		tex.eqWordDefine(5307, -1)
		tex.eqWordDefine(5843, w)
		tex.eqWordDefine(5844, l)
		tex.eqWordDefine(5845, s)
		if tex.eqtb[3416-1].hh().rh != 0 {
			tex.beginTokenList(tex.eqtb[3416-1].hh().rh, 9)
		}
		if tex.nestPtr == 1 {
			tex.buildPage()
		}
	} else {
		tex.backInput()
		tex.pushMath(15)
		tex.eqWordDefine(5307, -1)
		if tex.eqtb[3415-1].hh().rh != 0 {
			tex.beginTokenList(tex.eqtb[3415-1].hh().rh, 8)
		}
	}
}

func (tex *Context) startEqNo() {
	*tex.saveStack[int32(tex.savePtr)+0].pInt() = int32(tex.curChr)
	tex.savePtr = uint16(int32(tex.savePtr) + 1)
	tex.pushMath(15)
	tex.eqWordDefine(5307, -1)
	if tex.eqtb[3415-1].hh().rh != 0 {
		tex.beginTokenList(tex.eqtb[3415-1].hh().rh, 8)
	}
}

func (tex *Context) scanMath(p uint16) {
	var c int32 // integer
label20:
	for {
		tex.getXToken()
		if (tex.curCmd != 10) && (tex.curCmd != 0) {
			break
		}
	}
label21:
	switch tex.curCmd {
	case 11, 12, 68:
		c = int32(tex.eqtb[5007+int32(tex.curChr)-1].hh().rh) - 0
		if c == 32768 {
			tex.curCs = uint16(int32(tex.curChr) + 1)
			tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
			tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
			tex.xToken()
			tex.backInput()
			goto label20
		}
	case 16:
		tex.scanCharNum()
		tex.curChr = uint16(tex.curVal)
		tex.curCmd = 68
		goto label21
	case 17:
		tex.scanFifteenBitInt()
		c = tex.curVal
	case 69:
		c = int32(tex.curChr)
	case 15:
		tex.scanTwentySevenBitInt()
		c = (tex.curVal / 4096)
	default:
		tex.backInput()
		tex.scanLeftBrace()
		*tex.saveStack[int32(tex.savePtr)+0].pInt() = int32(p)
		tex.savePtr = uint16(int32(tex.savePtr) + 1)
		tex.pushMath(9)
		goto label10
	}
	tex.mem[p].pHh().rh = 1
	*tex.mem[p].pHh().pB1() = byte((c % 256) + 0)
	if (c >= 28672) && ((tex.eqtb[5307-1].int() >= 0) && (tex.eqtb[5307-1].int() < 16)) {
		*tex.mem[p].pHh().pB0() = byte(tex.eqtb[5307-1].int())
	} else {
		*tex.mem[p].pHh().pB0() = byte(((c / 256) % 16))
	}
label10:
}

func (tex *Context) setMathChar(c int32) {
	var p uint16 // 0..65535
	if c >= 32768 {
		tex.curCs = uint16(int32(tex.curChr) + 1)
		tex.curCmd = tex.eqtb[tex.curCs-1].hh().b0()
		tex.curChr = tex.eqtb[tex.curCs-1].hh().rh
		tex.xToken()
		tex.backInput()
	} else {
		p = tex.newNoad()
		tex.mem[int32(p)+1].pHh().rh = 1
		*tex.mem[int32(p)+1].pHh().pB1() = byte((c % 256) + 0)
		*tex.mem[int32(p)+1].pHh().pB0() = byte(((c / 256) % 16))
		if c >= 28672 {
			if (tex.eqtb[5307-1].int() >= 0) && (tex.eqtb[5307-1].int() < 16) {
				*tex.mem[int32(p)+1].pHh().pB0() = byte(tex.eqtb[5307-1].int())
			}
			*tex.mem[p].pHh().pB0() = 16
		} else {
			*tex.mem[p].pHh().pB0() = byte(16 + (c / 4096))
		}
		tex.mem[tex.curList.tailField].pHh().rh = p
		tex.curList.tailField = p
	}
}

func (tex *Context) mathLimitSwitch() {
	if tex.curList.headField != tex.curList.tailField {
		if tex.mem[tex.curList.tailField].hh().b0() == 17 {
			*tex.mem[tex.curList.tailField].pHh().pB1() = byte(tex.curChr)
			goto label10
		}
	}
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1130)
	tex.helpPtr = 1
	tex.helpLine[0] = 1131
	tex.error1()
label10:
	;
}

func (tex *Context) scanDelimiter(p uint16, r bool) {
	if r {
		tex.scanTwentySevenBitInt()
	} else {
		for {
			tex.getXToken()
			if (tex.curCmd != 10) && (tex.curCmd != 0) {
				break
			}
		}
		switch tex.curCmd {
		case 11, 12:
			tex.curVal = tex.eqtb[5574+int32(tex.curChr)-1].int()
		case 15:
			tex.scanTwentySevenBitInt()
		default:
			tex.curVal = -1
		}
	}
	if tex.curVal < 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1132)
		tex.helpPtr = 6
		tex.helpLine[5] = 1133
		tex.helpLine[4] = 1134
		tex.helpLine[3] = 1135
		tex.helpLine[2] = 1136
		tex.helpLine[1] = 1137
		tex.helpLine[0] = 1138
		tex.backError()
		tex.curVal = 0
	}
	tex.mem[p].pQqqq().b0 = byte(((tex.curVal / 1048576) % 16))
	tex.mem[p].pQqqq().b1 = byte(((tex.curVal / 4096) % 256) + 0)
	tex.mem[p].pQqqq().b2 = byte(((tex.curVal / 256) % 16))
	tex.mem[p].pQqqq().b3 = byte((tex.curVal % 256) + 0)
}

func (tex *Context) mathRadical() {
	tex.mem[tex.curList.tailField].pHh().rh = tex.getNode(5)
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	*tex.mem[tex.curList.tailField].pHh().pB0() = 24
	*tex.mem[tex.curList.tailField].pHh().pB1() = 0
	*tex.mem[int32(tex.curList.tailField)+1].pHh() = tex.emptyField
	*tex.mem[int32(tex.curList.tailField)+3].pHh() = tex.emptyField
	*tex.mem[int32(tex.curList.tailField)+2].pHh() = tex.emptyField
	tex.scanDelimiter(uint16(int32(tex.curList.tailField)+4), true)
	tex.scanMath(uint16(int32(tex.curList.tailField) + 1))
}

func (tex *Context) mathAc() {
	if tex.curCmd == 45 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1139)
		tex.printEsc(523)
		tex.print(1140)
		tex.helpPtr = 2
		tex.helpLine[1] = 1141
		tex.helpLine[0] = 1142
		tex.error1()
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.getNode(5)
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	*tex.mem[tex.curList.tailField].pHh().pB0() = 28
	*tex.mem[tex.curList.tailField].pHh().pB1() = 0
	*tex.mem[int32(tex.curList.tailField)+1].pHh() = tex.emptyField
	*tex.mem[int32(tex.curList.tailField)+3].pHh() = tex.emptyField
	*tex.mem[int32(tex.curList.tailField)+2].pHh() = tex.emptyField
	tex.mem[int32(tex.curList.tailField)+4].pHh().rh = 1
	tex.scanFifteenBitInt()
	*tex.mem[int32(tex.curList.tailField)+4].pHh().pB1() = byte((tex.curVal % 256) + 0)
	if (tex.curVal >= 28672) && ((tex.eqtb[5307-1].int() >= 0) && (tex.eqtb[5307-1].int() < 16)) {
		*tex.mem[int32(tex.curList.tailField)+4].pHh().pB0() = byte(tex.eqtb[5307-1].int())
	} else {
		*tex.mem[int32(tex.curList.tailField)+4].pHh().pB0() = byte(((tex.curVal / 256) % 16))
	}
	tex.scanMath(uint16(int32(tex.curList.tailField) + 1))
}

func (tex *Context) appendChoices() {
	tex.mem[tex.curList.tailField].pHh().rh = tex.newChoice()
	tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	tex.savePtr = uint16(int32(tex.savePtr) + 1)
	*tex.saveStack[int32(tex.savePtr)-1].pInt() = 0
	tex.pushMath(13)
	tex.scanLeftBrace()
}

func (tex *Context) finMlist(p uint16) (ret uint16) {
	var q uint16 // 0..65535
	if tex.curList.auxField.int() != 0 {
		tex.mem[tex.curList.auxField.int()+3].pHh().rh = 3
		*tex.mem[tex.curList.auxField.int()+3].pHh().pLh() = tex.mem[tex.curList.headField].hh().rh
		if p == 0 {
			q = uint16(tex.curList.auxField.int())
		} else {
			q = tex.mem[tex.curList.auxField.int()+2].hh().lh()
			if tex.mem[q].hh().b0() != 30 {
				tex.confusion(877)
			}
			*tex.mem[tex.curList.auxField.int()+2].pHh().pLh() = tex.mem[q].hh().rh
			tex.mem[q].pHh().rh = uint16(tex.curList.auxField.int())
			tex.mem[tex.curList.auxField.int()].pHh().rh = p
		}
	} else {
		tex.mem[tex.curList.tailField].pHh().rh = p
		q = tex.mem[tex.curList.headField].hh().rh
	}
	tex.popNest()
	ret = q
	return ret
}

func (tex *Context) buildChoices() {
	var p uint16 // 0..65535
	tex.unsave()
	p = tex.finMlist(0)
	switch tex.saveStack[int32(tex.savePtr)-1].int() {
	case 0:
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = p
	case 1:
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = p
	case 2:
		*tex.mem[int32(tex.curList.tailField)+2].pHh().pLh() = p
	case 3:
		tex.mem[int32(tex.curList.tailField)+2].pHh().rh = p
		tex.savePtr = uint16(int32(tex.savePtr) - 1)
		goto label10
	}
	*tex.saveStack[int32(tex.savePtr)-1].pInt() = tex.saveStack[int32(tex.savePtr)-1].int() + 1
	tex.pushMath(13)
	tex.scanLeftBrace()
label10:
}

func (tex *Context) subSup() {
	var t byte   // 0..63
	var p uint16 // 0..65535
	t = 0
	p = 0
	if tex.curList.tailField != tex.curList.headField {
		if (tex.mem[tex.curList.tailField].hh().b0() >= 16) && (tex.mem[tex.curList.tailField].hh().b0() < 30) {
			p = uint16(int32(tex.curList.tailField) + 2 + int32(tex.curCmd) - 7)
			t = byte(tex.mem[p].hh().rh)
		}
	}
	if (p == 0) || (t != 0) {
		tex.mem[tex.curList.tailField].pHh().rh = tex.newNoad()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		p = uint16(int32(tex.curList.tailField) + 2 + int32(tex.curCmd) - 7)
		if t != 0 {
			if tex.curCmd == 7 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1143)
				tex.helpPtr = 1
				tex.helpLine[0] = 1144
			} else {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1145)
				tex.helpPtr = 1
				tex.helpLine[0] = 1146
			}
			tex.error1()
		}
	}
	tex.scanMath(p)
}

func (tex *Context) mathFraction() {
	var c byte // 0..63
	c = byte(tex.curChr)
	if tex.curList.auxField.int() != 0 {
		if c >= 3 {
			tex.scanDelimiter(29988, false)
			tex.scanDelimiter(29988, false)
		}
		if (int32(c) % 3) == 0 {
			tex.scanDimen(false, false, false)
		}
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1153)
		tex.helpPtr = 3
		tex.helpLine[2] = 1154
		tex.helpLine[1] = 1155
		tex.helpLine[0] = 1156
		tex.error1()
	} else {
		*tex.curList.auxField.pInt() = int32(tex.getNode(6))
		*tex.mem[tex.curList.auxField.int()].pHh().pB0() = 25
		*tex.mem[tex.curList.auxField.int()].pHh().pB1() = 0
		tex.mem[tex.curList.auxField.int()+2].pHh().rh = 3
		*tex.mem[tex.curList.auxField.int()+2].pHh().pLh() = tex.mem[tex.curList.headField].hh().rh
		*tex.mem[tex.curList.auxField.int()+3].pHh() = tex.emptyField
		*tex.mem[tex.curList.auxField.int()+4].pQqqq() = tex.nullDelimiter
		*tex.mem[tex.curList.auxField.int()+5].pQqqq() = tex.nullDelimiter
		tex.mem[tex.curList.headField].pHh().rh = 0
		tex.curList.tailField = tex.curList.headField
		if c >= 3 {
			tex.scanDelimiter(uint16(tex.curList.auxField.int()+4), false)
			tex.scanDelimiter(uint16(tex.curList.auxField.int()+5), false)
		}
		switch int32(c) % 3 {
		case 0:
			tex.scanDimen(false, false, false)
			*tex.mem[tex.curList.auxField.int()+1].pInt() = tex.curVal
		case 1:
			*tex.mem[tex.curList.auxField.int()+1].pInt() = 1073741824
		case 2:
			*tex.mem[tex.curList.auxField.int()+1].pInt() = 0
		}
	}
}

func (tex *Context) mathLeftRight() {
	var t byte   // 0..63
	var p uint16 // 0..65535
	t = byte(tex.curChr)
	if (t == 31) && (tex.curGroup != 16) {
		if tex.curGroup == 15 {
			tex.scanDelimiter(29988, false)
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(777)
			tex.printEsc(877)
			tex.helpPtr = 1
			tex.helpLine[0] = 1157
			tex.error1()
		} else {
			tex.offSave()
		}
	} else {
		p = tex.newNoad()
		*tex.mem[p].pHh().pB0() = t
		tex.scanDelimiter(uint16(int32(p)+1), false)
		if t == 30 {
			tex.pushMath(16)
			tex.mem[tex.curList.headField].pHh().rh = p
			tex.curList.tailField = p
		} else {
			p = tex.finMlist(p)
			tex.unsave()
			tex.mem[tex.curList.tailField].pHh().rh = tex.newNoad()
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
			*tex.mem[tex.curList.tailField].pHh().pB0() = 23
			tex.mem[int32(tex.curList.tailField)+1].pHh().rh = 3
			*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = p
		}
	}
}

func (tex *Context) afterMath() {
	var l bool      // boolean
	var danger bool // boolean
	var m int32     // integer
	var p uint16    // 0..65535
	var a uint16    // 0..65535
	var b uint16    // 0..65535
	var w int32     // integer
	var z int32     // integer
	var e int32     // integer
	var q int32     // integer
	var d int32     // integer
	var s int32     // integer
	var g1, g2 byte // 0..63
	var r uint16    // 0..65535
	var t uint16    // 0..65535
	danger = false
	if (tex.fontParams[tex.eqtb[3937-1].hh().rh] < 22) || (tex.fontParams[tex.eqtb[3953-1].hh().rh] < 22) || (tex.fontParams[tex.eqtb[3969-1].hh().rh] < 22) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1158)
		tex.helpPtr = 3
		tex.helpLine[2] = 1159
		tex.helpLine[1] = 1160
		tex.helpLine[0] = 1161
		tex.error1()
		tex.flushMath()
		danger = true
	} else if (tex.fontParams[tex.eqtb[3938-1].hh().rh] < 13) || (tex.fontParams[tex.eqtb[3954-1].hh().rh] < 13) || (tex.fontParams[tex.eqtb[3970-1].hh().rh] < 13) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1162)
		tex.helpPtr = 3
		tex.helpLine[2] = 1163
		tex.helpLine[1] = 1164
		tex.helpLine[0] = 1165
		tex.error1()
		tex.flushMath()
		danger = true
	}
	m = int32(tex.curList.modeField)
	l = false
	p = tex.finMlist(0)
	if int32(tex.curList.modeField) == -m {
		tex.getXToken()
		if tex.curCmd != 3 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1166)
			tex.helpPtr = 2
			tex.helpLine[1] = 1167
			tex.helpLine[0] = 1168
			tex.backError()
		}
		tex.curMlist = p
		tex.curStyle = 2
		tex.mlistPenalties = false
		tex.mlistToHlist()
		a = tex.hpack(tex.mem[29997].hh().rh, 0, 1)
		tex.unsave()
		tex.savePtr = uint16(int32(tex.savePtr) - 1)
		if tex.saveStack[int32(tex.savePtr)+0].int() == 1 {
			l = true
		}
		danger = false
		if (tex.fontParams[tex.eqtb[3937-1].hh().rh] < 22) || (tex.fontParams[tex.eqtb[3953-1].hh().rh] < 22) || (tex.fontParams[tex.eqtb[3969-1].hh().rh] < 22) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1158)
			tex.helpPtr = 3
			tex.helpLine[2] = 1159
			tex.helpLine[1] = 1160
			tex.helpLine[0] = 1161
			tex.error1()
			tex.flushMath()
			danger = true
		} else if (tex.fontParams[tex.eqtb[3938-1].hh().rh] < 13) || (tex.fontParams[tex.eqtb[3954-1].hh().rh] < 13) || (tex.fontParams[tex.eqtb[3970-1].hh().rh] < 13) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1162)
			tex.helpPtr = 3
			tex.helpLine[2] = 1163
			tex.helpLine[1] = 1164
			tex.helpLine[0] = 1165
			tex.error1()
			tex.flushMath()
			danger = true
		}
		m = int32(tex.curList.modeField)
		p = tex.finMlist(0)
	} else {
		a = 0
	}
	if m < 0 {
		tex.mem[tex.curList.tailField].pHh().rh = tex.newMath(tex.eqtb[5831-1].int(), 0)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.curMlist = p
		tex.curStyle = 2
		tex.mlistPenalties = (tex.curList.modeField > 0)
		tex.mlistToHlist()
		tex.mem[tex.curList.tailField].pHh().rh = tex.mem[29997].hh().rh
		for tex.mem[tex.curList.tailField].hh().rh != 0 {
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		}
		tex.mem[tex.curList.tailField].pHh().rh = tex.newMath(tex.eqtb[5831-1].int(), 1)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.curList.auxField.pHh().pLh() = 1000
		tex.unsave()
	} else {
		if a == 0 {
			tex.getXToken()
			if tex.curCmd != 3 {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1166)
				tex.helpPtr = 2
				tex.helpLine[1] = 1167
				tex.helpLine[0] = 1168
				tex.backError()
			}
		}
		tex.curMlist = p
		tex.curStyle = 0
		tex.mlistPenalties = false
		tex.mlistToHlist()
		p = tex.mem[29997].hh().rh
		tex.adjustTail = 29995
		b = tex.hpack(p, 0, 1)
		p = tex.mem[int32(b)+5].hh().rh
		t = tex.adjustTail
		tex.adjustTail = 0
		w = tex.mem[int32(b)+1].int()
		z = tex.eqtb[5844-1].int()
		s = tex.eqtb[5845-1].int()
		if (a == 0) || danger {
			e = 0
			q = 0
		} else {
			e = tex.mem[int32(a)+1].int()
			q = e + tex.fontInfo[6+tex.paramBase[tex.eqtb[3937-1].hh().rh]].int()
		}
		if w+q > z {
			if (e != 0) && (((w - tex.totalShrink[0] + q) <= z) || (tex.totalShrink[1] != 0) || (tex.totalShrink[2] != 0) || (tex.totalShrink[3] != 0)) {
				tex.freeNode(b, 7)
				b = tex.hpack(p, z-q, 0)
			} else {
				e = 0
				if w > z {
					tex.freeNode(b, 7)
					b = tex.hpack(p, z, 0)
				}
			}
			w = tex.mem[int32(b)+1].int()
		}
		d = tex.half(z - w)
		if (e > 0) && (d < (2 * e)) {
			d = tex.half(z - w - e)
			if p != 0 {
				if !(p >= tex.hiMemMin) {
					if tex.mem[p].hh().b0() == 10 {
						d = 0
					}
				}
			}
		}
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(tex.eqtb[5274-1].int())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		if ((d + s) <= tex.eqtb[5843-1].int()) || l {
			g1 = 3
			g2 = 4
		} else {
			g1 = 5
			g2 = 6
		}
		if l && (e == 0) {
			*tex.mem[int32(a)+4].pInt() = s
			tex.appendToVlist(a)
			tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(10000)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		} else {
			tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(g1)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		}
		if e != 0 {
			r = tex.newKern(z - w - e - d)
			if l {
				tex.mem[a].pHh().rh = r
				tex.mem[r].pHh().rh = b
				b = a
				d = 0
			} else {
				tex.mem[b].pHh().rh = r
				tex.mem[r].pHh().rh = a
			}
			b = tex.hpack(b, 0, 1)
		}
		*tex.mem[int32(b)+4].pInt() = s + d
		tex.appendToVlist(b)
		if (a != 0) && (e == 0) && !l {
			tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(10000)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
			*tex.mem[int32(a)+4].pInt() = s + z - tex.mem[int32(a)+1].int()
			tex.appendToVlist(a)
			g2 = 0
		}
		if t != 29995 {
			tex.mem[tex.curList.tailField].pHh().rh = tex.mem[29995].hh().rh
			tex.curList.tailField = t
		}
		tex.mem[tex.curList.tailField].pHh().rh = tex.newPenalty(tex.eqtb[5275-1].int())
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		if g2 > 0 {
			tex.mem[tex.curList.tailField].pHh().rh = tex.newParamGlue(g2)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		}
		tex.resumeAfterDisplay()
	}
}

func (tex *Context) resumeAfterDisplay() {
	if tex.curGroup != 15 {
		tex.confusion(1169)
	}
	tex.unsave()
	tex.curList.pgField = tex.curList.pgField + 3
	tex.pushNest()
	tex.curList.modeField = 102
	*tex.curList.auxField.pHh().pLh() = 1000
	if tex.eqtb[5313-1].int() <= 0 {
		tex.curLang = 0
	} else if tex.eqtb[5313-1].int() > 255 {
		tex.curLang = 0
	} else {
		tex.curLang = byte(tex.eqtb[5313-1].int())
	}
	tex.curList.auxField.pHh().rh = uint16(tex.curLang)
	tex.curList.pgField = (((int32(tex.normMin(tex.eqtb[5314-1].int())) * 64) + int32(tex.normMin(tex.eqtb[5315-1].int()))) * 65536) + int32(tex.curLang)
	tex.getXToken()
	if tex.curCmd != 10 {
		tex.backInput()
	}
	if tex.nestPtr == 1 {
		tex.buildPage()
	}
}

func (tex *Context) getRToken() {
label20:
	for {
		tex.getToken()
		if tex.curTok != 2592 {
			break
		}
	}
	if (tex.curCs == 0) || (tex.curCs > 2614) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1184)
		tex.helpPtr = 5
		tex.helpLine[4] = 1185
		tex.helpLine[3] = 1186
		tex.helpLine[2] = 1187
		tex.helpLine[1] = 1188
		tex.helpLine[0] = 1189
		if tex.curCs == 0 {
			tex.backInput()
		}
		tex.curTok = 6709
		tex.insError()
		goto label20
	}
}

func (tex *Context) trapZeroGlue() {
	if (tex.mem[tex.curVal+1].int() == 0) && (tex.mem[tex.curVal+2].int() == 0) && (tex.mem[tex.curVal+3].int() == 0) {
		tex.mem[0].pHh().rh = uint16(int32(tex.mem[0].hh().rh) + 1)
		tex.deleteGlueRef(uint16(tex.curVal))
		tex.curVal = 0
	}
}

func (tex *Context) doRegisterCommand(a byte) {
	var l, q, r, s uint16 // 0..65535
	var p byte            // 0..3
	q = uint16(tex.curCmd)
	if q != 89 {
		tex.getXToken()
		if (tex.curCmd >= 73) && (tex.curCmd <= 76) {
			l = tex.curChr
			p = byte(int32(tex.curCmd) - 73)
			goto label40
		}
		if tex.curCmd != 89 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(685)
			tex.printCmdChr(tex.curCmd, tex.curChr)
			tex.print(686)
			tex.printCmdChr(byte(q), 0)
			tex.helpPtr = 1
			tex.helpLine[0] = 1210
			tex.error1()
			goto label10
		}
	}
	p = byte(tex.curChr)
	tex.scanEightBitInt()
	switch p {
	case 0:
		l = uint16(tex.curVal + 5318)
	case 1:
		l = uint16(tex.curVal + 5851)
	case 2:
		l = uint16(tex.curVal + 2900)
	case 3:
		l = uint16(tex.curVal + 3156)
	}
label40:
	if q == 89 {
		tex.scanOptionalEquals()
	} else if tex.scanKeyword(1206) {
	}
	tex.arithError = false
	if q < 91 {
		if p < 2 {
			if p == 0 {
				tex.scanInt()
			} else {
				tex.scanDimen(false, false, false)
			}
			if q == 90 {
				tex.curVal = tex.curVal + tex.eqtb[l-1].int()
			}
		} else {
			tex.scanGlue(p)
			if q == 90 {
				q = tex.newSpec(uint16(tex.curVal))
				r = tex.eqtb[l-1].hh().rh
				tex.deleteGlueRef(uint16(tex.curVal))
				*tex.mem[int32(q)+1].pInt() = tex.mem[int32(q)+1].int() + tex.mem[int32(r)+1].int()
				if tex.mem[int32(q)+2].int() == 0 {
					*tex.mem[q].pHh().pB0() = 0
				}
				if tex.mem[q].hh().b0() == tex.mem[r].hh().b0() {
					*tex.mem[int32(q)+2].pInt() = tex.mem[int32(q)+2].int() + tex.mem[int32(r)+2].int()
				} else if (tex.mem[q].hh().b0() < tex.mem[r].hh().b0()) && (tex.mem[int32(r)+2].int() != 0) {
					*tex.mem[int32(q)+2].pInt() = tex.mem[int32(r)+2].int()
					*tex.mem[q].pHh().pB0() = tex.mem[r].hh().b0()
				}
				if tex.mem[int32(q)+3].int() == 0 {
					*tex.mem[q].pHh().pB1() = 0
				}
				if tex.mem[q].hh().b1() == tex.mem[r].hh().b1() {
					*tex.mem[int32(q)+3].pInt() = tex.mem[int32(q)+3].int() + tex.mem[int32(r)+3].int()
				} else if (tex.mem[q].hh().b1() < tex.mem[r].hh().b1()) && (tex.mem[int32(r)+3].int() != 0) {
					*tex.mem[int32(q)+3].pInt() = tex.mem[int32(r)+3].int()
					*tex.mem[q].pHh().pB1() = tex.mem[r].hh().b1()
				}
				tex.curVal = int32(q)
			}
		}
	} else {
		tex.scanInt()
		if p < 2 {
			if q == 91 {
				if p == 0 {
					tex.curVal = tex.multAndAdd(tex.eqtb[l-1].int(), tex.curVal, 0, 2147483647)
				} else {
					tex.curVal = tex.multAndAdd(tex.eqtb[l-1].int(), tex.curVal, 0, 1073741823)
				}
			} else {
				tex.curVal = tex.xOverN(tex.eqtb[l-1].int(), tex.curVal)
			}
		} else {
			s = tex.eqtb[l-1].hh().rh
			r = tex.newSpec(s)
			if q == 91 {
				*tex.mem[int32(r)+1].pInt() = tex.multAndAdd(tex.mem[int32(s)+1].int(), tex.curVal, 0, 1073741823)
				*tex.mem[int32(r)+2].pInt() = tex.multAndAdd(tex.mem[int32(s)+2].int(), tex.curVal, 0, 1073741823)
				*tex.mem[int32(r)+3].pInt() = tex.multAndAdd(tex.mem[int32(s)+3].int(), tex.curVal, 0, 1073741823)
			} else {
				*tex.mem[int32(r)+1].pInt() = tex.xOverN(tex.mem[int32(s)+1].int(), tex.curVal)
				*tex.mem[int32(r)+2].pInt() = tex.xOverN(tex.mem[int32(s)+2].int(), tex.curVal)
				*tex.mem[int32(r)+3].pInt() = tex.xOverN(tex.mem[int32(s)+3].int(), tex.curVal)
			}
			tex.curVal = int32(r)
		}
	}
	if tex.arithError {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1207)
		tex.helpPtr = 2
		tex.helpLine[1] = 1208
		tex.helpLine[0] = 1209
		if p >= 2 {
			tex.deleteGlueRef(uint16(tex.curVal))
		}
		tex.error1()
		goto label10
	}
	if p < 2 {
		if a >= 4 {
			tex.geqWordDefine(l, tex.curVal)
		} else {
			tex.eqWordDefine(l, tex.curVal)
		}
	} else {
		tex.trapZeroGlue()
		if a >= 4 {
			tex.geqDefine(l, 117, uint16(tex.curVal))
		} else {
			tex.eqDefine(l, 117, uint16(tex.curVal))
		}
	}
label10:
	;
}

func (tex *Context) alterAux() {
	var c uint16 // 0..65535
	if int32(tex.curChr) != iabs(int32(tex.curList.modeField)) {
		tex.reportIllegalCase()
	} else {
		c = tex.curChr
		tex.scanOptionalEquals()
		if c == 1 {
			tex.scanDimen(false, false, false)
			*tex.curList.auxField.pInt() = tex.curVal
		} else {
			tex.scanInt()
			if (tex.curVal <= 0) || (tex.curVal > 32767) {
				if tex.interaction == 3 {
				}
				tex.printNl(262)
				tex.print(1213)
				tex.helpPtr = 1
				tex.helpLine[0] = 1214
				tex.intError(tex.curVal)
			} else {
				*tex.curList.auxField.pHh().pLh() = uint16(tex.curVal)
			}
		}
	}
}

func (tex *Context) alterPrevGraf() {
	var p byte // 0..40
	tex.nest[tex.nestPtr] = tex.curList
	p = tex.nestPtr
	for iabs(int32(tex.nest[p].modeField)) != 1 {
		p = byte(int32(p) - 1)
	}
	tex.scanOptionalEquals()
	tex.scanInt()
	if tex.curVal < 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(955)
		tex.printEsc(532)
		tex.helpPtr = 1
		tex.helpLine[0] = 1215
		tex.intError(tex.curVal)
	} else {
		tex.nest[p].pgField = tex.curVal
		tex.curList = tex.nest[tex.nestPtr]
	}
}

func (tex *Context) alterPageSoFar() {
	var c byte // 0..7
	c = byte(tex.curChr)
	tex.scanOptionalEquals()
	tex.scanDimen(false, false, false)
	tex.pageSoFar[c] = tex.curVal
}

func (tex *Context) alterInteger() {
	var c byte // 0..1
	c = byte(tex.curChr)
	tex.scanOptionalEquals()
	tex.scanInt()
	if c == 0 {
		tex.deadCycles = tex.curVal
	} else {
		tex.insertPenalties = tex.curVal
	}
}

func (tex *Context) alterBoxDimen() {
	var c byte // 0..63
	var b byte // 0..255
	c = byte(tex.curChr)
	tex.scanEightBitInt()
	b = byte(tex.curVal)
	tex.scanOptionalEquals()
	tex.scanDimen(false, false, false)
	if tex.eqtb[3678+int32(b)-1].hh().rh != 0 {
		*tex.mem[int32(tex.eqtb[3678+int32(b)-1].hh().rh)+int32(c)].pInt() = tex.curVal
	}
}

func (tex *Context) newFont(a byte) {
	var u uint16               // 0..65535
	var s int32                // integer
	var f byte                 // 0..75
	var t uint16               // 0..3000
	var oldSetting byte        // 0..21
	var flushableString uint16 // 0..3000
	if tex.jobName == 0 {
		tex.openLogFile()
	}
	tex.getRToken()
	u = tex.curCs
	if u >= 514 {
		t = tex.hash[u-514].rh
	} else if u >= 257 {
		if u == 513 {
			t = 1219
		} else {
			t = uint16(int32(u) - 257)
		}
	} else {
		oldSetting = tex.selector
		tex.selector = 21
		tex.print(1219)
		tex.print(int32(u) - 1)
		tex.selector = oldSetting
		if int32(tex.poolPtr)+1 > poolSize {
			tex.overflow(257, poolSize-int32(tex.initPoolPtr))
		}
		t = tex.makeString()
	}
	if a >= 4 {
		tex.geqDefine(u, 87, 0)
	} else {
		tex.eqDefine(u, 87, 0)
	}
	tex.scanOptionalEquals()
	tex.scanFileName()
	tex.nameInProgress = true
	if tex.scanKeyword(1220) {
		tex.scanDimen(false, false, false)
		s = tex.curVal
		if (s <= 0) || (s >= 134217728) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1222)
			tex.printScaled(s)
			tex.print(1223)
			tex.helpPtr = 2
			tex.helpLine[1] = 1224
			tex.helpLine[0] = 1225
			tex.error1()
			s = (10 * 65536)
		}
	} else if tex.scanKeyword(1221) {
		tex.scanInt()
		s = -tex.curVal
		if (tex.curVal <= 0) || (tex.curVal > 32768) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(552)
			tex.helpPtr = 1
			tex.helpLine[0] = 553
			tex.intError(tex.curVal)
			s = -1000
		}
	} else {
		s = -1000
	}
	tex.nameInProgress = false
	flushableString = uint16(int32(tex.strPtr) - 1)
	for _i := int64(1); _i <= int64(tex.fontPtr); _i++ {
		f = byte(_i)
		if tex.strEqStr(tex.fontName[f], tex.curName) && tex.strEqStr(tex.fontArea[f], tex.curArea) {
			if tex.curName == flushableString {
				tex.strPtr = uint16(int32(tex.strPtr) - 1)
				tex.poolPtr = tex.strStart[tex.strPtr]
				tex.curName = tex.fontName[f]
			}
			if s > 0 {
				if s == tex.fontSize[f] {
					goto label50
				}
			} else if tex.fontSize[f] == tex.xnOverD(tex.fontDsize[f], -s, 1000) {
				goto label50
			}
		}
	}
	f = tex.readFontInfo(u, tex.curName, tex.curArea, s)
label50:
	tex.eqtb[u-1].pHh().rh = uint16(f)
	tex.eqtb[2624+int32(f)-1] = tex.eqtb[u-1]
	tex.hash[2624+int32(f)-514].rh = t
}

func (tex *Context) newInteraction() {
	tex.printLn()
	tex.interaction = byte(tex.curChr)
	if tex.interaction == 0 {
		tex.selector = 16
	} else {
		tex.selector = 17
	}
	if tex.logOpened {
		tex.selector = byte(int32(tex.selector) + 2)
	}
}

func (tex *Context) prefixedCommand() {
	var a byte      // 0..63
	var f byte      // 0..75
	var j uint16    // 0..65535
	var k uint16    // 0..20000
	var p, q uint16 // 0..65535
	var n int32     // integer
	var e bool      // boolean
	a = 0
	for tex.curCmd == 93 {
		if !odd((int32(a) / int32(tex.curChr))) {
			a = byte(int32(a) + int32(tex.curChr))
		}
		for {
			tex.getXToken()
			if (tex.curCmd != 10) && (tex.curCmd != 0) {
				break
			}
		}
		if tex.curCmd <= 70 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1179)
			tex.printCmdChr(tex.curCmd, tex.curChr)
			tex.printChar(39)
			tex.helpPtr = 1
			tex.helpLine[0] = 1180
			tex.backError()
			goto label10
		}
	}
	if (tex.curCmd != 97) && ((int32(a) % 4) != 0) {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(685)
		tex.printEsc(1171)
		tex.print(1181)
		tex.printEsc(1172)
		tex.print(1182)
		tex.printCmdChr(tex.curCmd, tex.curChr)
		tex.printChar(39)
		tex.helpPtr = 1
		tex.helpLine[0] = 1183
		tex.error1()
	}
	if tex.eqtb[5306-1].int() != 0 {
		if tex.eqtb[5306-1].int() < 0 {
			if a >= 4 {
				a = byte(int32(a) - 4)
			}
		} else {
			if !(a >= 4) {
				a = byte(int32(a) + 4)
			}
		}
	}
	switch tex.curCmd {
	case 87:
		if a >= 4 {
			tex.geqDefine(3934, 120, tex.curChr)
		} else {
			tex.eqDefine(3934, 120, tex.curChr)
		}
	case 97:
		if odd(int32(tex.curChr)) && !(a >= 4) && (tex.eqtb[5306-1].int() >= 0) {
			a = byte(int32(a) + 4)
		}
		e = (tex.curChr >= 2)
		tex.getRToken()
		p = tex.curCs
		q = tex.scanToks(true, e)
		if a >= 4 {
			tex.geqDefine(p, byte(111+(int32(a)%4)), tex.defRef)
		} else {
			tex.eqDefine(p, byte(111+(int32(a)%4)), tex.defRef)
		}
	case 94:
		n = int32(tex.curChr)
		tex.getRToken()
		p = tex.curCs
		if n == 0 {
			for {
				tex.getToken()
				if tex.curCmd != 10 {
					break
				}
			}
			if tex.curTok == 3133 {
				tex.getToken()
				if tex.curCmd == 10 {
					tex.getToken()
				}
			}
		} else {
			tex.getToken()
			q = tex.curTok
			tex.getToken()
			tex.backInput()
			tex.curTok = q
			tex.backInput()
		}
		if tex.curCmd >= 111 {
			*tex.mem[tex.curChr].pHh().pLh() = uint16(int32(tex.mem[tex.curChr].hh().lh()) + 1)
		}
		if a >= 4 {
			tex.geqDefine(p, tex.curCmd, tex.curChr)
		} else {
			tex.eqDefine(p, tex.curCmd, tex.curChr)
		}
	case 95:
		n = int32(tex.curChr)
		tex.getRToken()
		p = tex.curCs
		if a >= 4 {
			tex.geqDefine(p, 0, 256)
		} else {
			tex.eqDefine(p, 0, 256)
		}
		tex.scanOptionalEquals()
		switch n {
		case 0:
			tex.scanCharNum()
			if a >= 4 {
				tex.geqDefine(p, 68, uint16(tex.curVal))
			} else {
				tex.eqDefine(p, 68, uint16(tex.curVal))
			}
		case 1:
			tex.scanFifteenBitInt()
			if a >= 4 {
				tex.geqDefine(p, 69, uint16(tex.curVal))
			} else {
				tex.eqDefine(p, 69, uint16(tex.curVal))
			}
		default:
			tex.scanEightBitInt()
			switch n {
			case 2:
				if a >= 4 {
					tex.geqDefine(p, 73, uint16(5318+tex.curVal))
				} else {
					tex.eqDefine(p, 73, uint16(5318+tex.curVal))
				}
			case 3:
				if a >= 4 {
					tex.geqDefine(p, 74, uint16(5851+tex.curVal))
				} else {
					tex.eqDefine(p, 74, uint16(5851+tex.curVal))
				}
			case 4:
				if a >= 4 {
					tex.geqDefine(p, 75, uint16(2900+tex.curVal))
				} else {
					tex.eqDefine(p, 75, uint16(2900+tex.curVal))
				}
			case 5:
				if a >= 4 {
					tex.geqDefine(p, 76, uint16(3156+tex.curVal))
				} else {
					tex.eqDefine(p, 76, uint16(3156+tex.curVal))
				}
			case 6:
				if a >= 4 {
					tex.geqDefine(p, 72, uint16(3422+tex.curVal))
				} else {
					tex.eqDefine(p, 72, uint16(3422+tex.curVal))
				}
			}
		}
	case 96:
		tex.scanInt()
		n = tex.curVal
		if !tex.scanKeyword(842) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1073)
			tex.helpPtr = 2
			tex.helpLine[1] = 1200
			tex.helpLine[0] = 1201
			tex.error1()
		}
		tex.getRToken()
		p = tex.curCs
		tex.readToks(n, p)
		if a >= 4 {
			tex.geqDefine(p, 111, uint16(tex.curVal))
		} else {
			tex.eqDefine(p, 111, uint16(tex.curVal))
		}
	case 71, 72:
		q = tex.curCs
		if tex.curCmd == 71 {
			tex.scanEightBitInt()
			p = uint16(3422 + tex.curVal)
		} else {
			p = tex.curChr
		}
		tex.scanOptionalEquals()
		for {
			tex.getXToken()
			if (tex.curCmd != 10) && (tex.curCmd != 0) {
				break
			}
		}
		if tex.curCmd != 1 {
			if tex.curCmd == 71 {
				tex.scanEightBitInt()
				tex.curCmd = 72
				tex.curChr = uint16(3422 + tex.curVal)
			}
			if tex.curCmd == 72 {
				q = tex.eqtb[tex.curChr-1].hh().rh
				if q == 0 {
					if a >= 4 {
						tex.geqDefine(p, 101, 0)
					} else {
						tex.eqDefine(p, 101, 0)
					}
				} else {
					*tex.mem[q].pHh().pLh() = uint16(int32(tex.mem[q].hh().lh()) + 1)
					if a >= 4 {
						tex.geqDefine(p, 111, q)
					} else {
						tex.eqDefine(p, 111, q)
					}
				}
				goto label30
			}
		}
		tex.backInput()
		tex.curCs = q
		q = tex.scanToks(false, false)
		if tex.mem[tex.defRef].hh().rh == 0 {
			if a >= 4 {
				tex.geqDefine(p, 101, 0)
			} else {
				tex.eqDefine(p, 101, 0)
			}
			tex.mem[tex.defRef].pHh().rh = tex.avail
			tex.avail = tex.defRef
		} else {
			if p == 3413 {
				tex.mem[q].pHh().rh = tex.getAvail()
				q = tex.mem[q].hh().rh
				*tex.mem[q].pHh().pLh() = 637
				q = tex.getAvail()
				*tex.mem[q].pHh().pLh() = 379
				tex.mem[q].pHh().rh = tex.mem[tex.defRef].hh().rh
				tex.mem[tex.defRef].pHh().rh = q
			}
			if a >= 4 {
				tex.geqDefine(p, 111, tex.defRef)
			} else {
				tex.eqDefine(p, 111, tex.defRef)
			}
		}
	case 73:
		p = tex.curChr
		tex.scanOptionalEquals()
		tex.scanInt()
		if a >= 4 {
			tex.geqWordDefine(p, tex.curVal)
		} else {
			tex.eqWordDefine(p, tex.curVal)
		}
	case 74:
		p = tex.curChr
		tex.scanOptionalEquals()
		tex.scanDimen(false, false, false)
		if a >= 4 {
			tex.geqWordDefine(p, tex.curVal)
		} else {
			tex.eqWordDefine(p, tex.curVal)
		}
	case 75, 76:
		p = tex.curChr
		n = int32(tex.curCmd)
		tex.scanOptionalEquals()
		if n == 76 {
			tex.scanGlue(3)
		} else {
			tex.scanGlue(2)
		}
		tex.trapZeroGlue()
		if a >= 4 {
			tex.geqDefine(p, 117, uint16(tex.curVal))
		} else {
			tex.eqDefine(p, 117, uint16(tex.curVal))
		}
	case 85:
		if tex.curChr == 3983 {
			n = 15
		} else if tex.curChr == 5007 {
			n = 32768
		} else if tex.curChr == 4751 {
			n = 32767
		} else if tex.curChr == 5574 {
			n = 16777215
		} else {
			n = 255
		}
		p = tex.curChr
		tex.scanCharNum()
		p = uint16(int32(p) + tex.curVal)
		tex.scanOptionalEquals()
		tex.scanInt()
		if ((tex.curVal < 0) && (p < 5574)) || (tex.curVal > n) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1202)
			tex.printInt(tex.curVal)
			if p < 5574 {
				tex.print(1203)
			} else {
				tex.print(1204)
			}
			tex.printInt(n)
			tex.helpPtr = 1
			tex.helpLine[0] = 1205
			tex.error1()
			tex.curVal = 0
		}
		if p < 5007 {
			if a >= 4 {
				tex.geqDefine(p, 120, uint16(tex.curVal))
			} else {
				tex.eqDefine(p, 120, uint16(tex.curVal))
			}
		} else if p < 5574 {
			if a >= 4 {
				tex.geqDefine(p, 120, uint16(tex.curVal+0))
			} else {
				tex.eqDefine(p, 120, uint16(tex.curVal+0))
			}
		} else if a >= 4 {
			tex.geqWordDefine(p, tex.curVal)
		} else {
			tex.eqWordDefine(p, tex.curVal)
		}
	case 86:
		p = tex.curChr
		tex.scanFourBitInt()
		p = uint16(int32(p) + tex.curVal)
		tex.scanOptionalEquals()
		tex.scanFontIdent()
		if a >= 4 {
			tex.geqDefine(p, 120, uint16(tex.curVal))
		} else {
			tex.eqDefine(p, 120, uint16(tex.curVal))
		}
	case 89, 90, 91, 92:
		tex.doRegisterCommand(a)
	case 98:
		tex.scanEightBitInt()
		if a >= 4 {
			n = 256 + tex.curVal
		} else {
			n = tex.curVal
		}
		tex.scanOptionalEquals()
		if tex.setBoxAllowed {
			tex.scanBox(1073741824 + n)
		} else {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(680)
			tex.printEsc(536)
			tex.helpPtr = 2
			tex.helpLine[1] = 1211
			tex.helpLine[0] = 1212
			tex.error1()
		}
	case 79:
		tex.alterAux()
	case 80:
		tex.alterPrevGraf()
	case 81:
		tex.alterPageSoFar()
	case 82:
		tex.alterInteger()
	case 83:
		tex.alterBoxDimen()
	case 84:
		tex.scanOptionalEquals()
		tex.scanInt()
		n = tex.curVal
		if n <= 0 {
			p = 0
		} else {
			p = tex.getNode((2 * n) + 1)
			*tex.mem[p].pHh().pLh() = uint16(n)
			for _i := int64(1); _i <= int64(n); _i++ {
				j = uint16(_i)
				tex.scanDimen(false, false, false)
				*tex.mem[int32(p)+(2*int32(j))-1].pInt() = tex.curVal
				tex.scanDimen(false, false, false)
				*tex.mem[int32(p)+(2*int32(j))].pInt() = tex.curVal
			}
		}
		if a >= 4 {
			tex.geqDefine(3412, 118, p)
		} else {
			tex.eqDefine(3412, 118, p)
		}
	case 99:
		if tex.curChr == 1 {
			tex.newPatterns()
			goto label30
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1216)
			tex.helpPtr = 0
			tex.error1()
			for {
				tex.getToken()
				if tex.curCmd == 2 {
					break
				}
			}
			goto label10
		} else {
			tex.newHyphExceptions()
			goto label30
		}
	case 77:
		tex.findFontDimen(true)
		k = uint16(tex.curVal)
		tex.scanOptionalEquals()
		tex.scanDimen(false, false, false)
		*tex.fontInfo[k].pInt() = tex.curVal
	case 78:
		n = int32(tex.curChr)
		tex.scanFontIdent()
		f = byte(tex.curVal)
		tex.scanOptionalEquals()
		tex.scanInt()
		if n == 0 {
			tex.hyphenChar[f] = tex.curVal
		} else {
			tex.skewChar[f] = tex.curVal
		}
	case 88:
		tex.newFont(a)
	case 100:
		tex.newInteraction()
	default:
		tex.confusion(1178)
	}
label30:
	if tex.afterToken != 0 {
		tex.curTok = tex.afterToken
		tex.backInput()
		tex.afterToken = 0
	}
label10:
}

func (tex *Context) doAssignments() {
	for true {
		for {
			tex.getXToken()
			if (tex.curCmd != 10) && (tex.curCmd != 0) {
				break
			}
		}
		if tex.curCmd <= 70 {
			goto label10
		}
		tex.setBoxAllowed = false
		tex.prefixedCommand()
		tex.setBoxAllowed = true
	}
label10:
}

func (tex *Context) openOrCloseIn() {
	var c byte // 0..1
	var n byte // 0..15
	c = byte(tex.curChr)
	tex.scanFourBitInt()
	n = byte(tex.curVal)
	if tex.readOpen[n] != 2 {
		tex.aClose(&tex.readFile[n])
		tex.readOpen[n] = 2
	}
	if c != 0 {
		tex.scanOptionalEquals()
		tex.scanFileName()
		if tex.curExt == 338 {
			tex.curExt = 791
		}
		tex.packFileName(tex.curName, tex.curArea, tex.curExt)
		if tex.aOpenIn(&tex.readFile[n]) {
			tex.readOpen[n] = 1
		}
	}
}

func (tex *Context) issueMessage() {
	var oldSetting byte // 0..21
	var c byte          // 0..1
	var s uint16        // 0..3000
	c = byte(tex.curChr)
	tex.mem[29988].pHh().rh = tex.scanToks(false, true)
	oldSetting = tex.selector
	tex.selector = 21
	tex.tokenShow(tex.defRef)
	tex.selector = oldSetting
	tex.flushList(tex.defRef)
	if int32(tex.poolPtr)+1 > poolSize {
		tex.overflow(257, poolSize-int32(tex.initPoolPtr))
	}
	s = tex.makeString()
	if c == 0 {
		if int32(tex.termOffset)+(int32(tex.strStart[int32(s)+1])-int32(tex.strStart[s])) > maxPrintLine-2 {
			tex.printLn()
		} else if (tex.termOffset > 0) || (tex.fileOffset > 0) {
			tex.printChar(32)
		}
		tex.slowPrint(int32(s))
		break1(&tex.termOut)
	} else {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(338)
		tex.slowPrint(int32(s))
		if tex.eqtb[3421-1].hh().rh != 0 {
			tex.useErrHelp = true
		} else if tex.longHelpSeen {
			tex.helpPtr = 1
			tex.helpLine[0] = 1232
		} else {
			if tex.interaction < 3 {
				tex.longHelpSeen = true
			}
			tex.helpPtr = 4
			tex.helpLine[3] = 1233
			tex.helpLine[2] = 1234
			tex.helpLine[1] = 1235
			tex.helpLine[0] = 1236
		}
		tex.error1()
		tex.useErrHelp = false
	}
	tex.strPtr = uint16(int32(tex.strPtr) - 1)
	tex.poolPtr = tex.strStart[tex.strPtr]
}

func (tex *Context) shiftCase() {
	var b uint16 // 0..65535
	var p uint16 // 0..65535
	var t uint16 // 0..65535
	var c byte   // 0..255
	b = tex.curChr
	p = tex.scanToks(false, false)
	p = tex.mem[tex.defRef].hh().rh
	for p != 0 {
		t = tex.mem[p].hh().lh()
		if t < 4352 {
			c = byte((int32(t) % 256))
			if tex.eqtb[int32(b)+int32(c)-1].hh().rh != 0 {
				*tex.mem[p].pHh().pLh() = uint16(int32(t) - int32(c) + int32(tex.eqtb[int32(b)+int32(c)-1].hh().rh))
			}
		}
		p = tex.mem[p].hh().rh
	}
	tex.beginTokenList(tex.mem[tex.defRef].hh().rh, 3)
	tex.mem[tex.defRef].pHh().rh = tex.avail
	tex.avail = tex.defRef
}

func (tex *Context) showWhatever() {
	switch tex.curChr {
	case 3:
		tex.beginDiagnostic()
		tex.showActivities()
	case 1:
		tex.scanEightBitInt()
		tex.beginDiagnostic()
		tex.printNl(1254)
		tex.printInt(tex.curVal)
		tex.printChar(61)
		if tex.eqtb[3678+tex.curVal-1].hh().rh == 0 {
			tex.print(410)
		} else {
			tex.showBox(tex.eqtb[3678+tex.curVal-1].hh().rh)
		}
	case 0:
		tex.getToken()
		if tex.interaction == 3 {
		}
		tex.printNl(1248)
		if tex.curCs != 0 {
			tex.sprintCs(tex.curCs)
			tex.printChar(61)
		}
		tex.printMeaning()
		goto label50
	default:
		tex.theToks()
		if tex.interaction == 3 {
		}
		tex.printNl(1248)
		tex.tokenShow(29997)
		tex.flushList(tex.mem[29997].hh().rh)
		goto label50
	}
	tex.endDiagnostic(true)
	if tex.interaction == 3 {
	}
	tex.printNl(262)
	tex.print(1255)
	if tex.selector == 19 {
		if tex.eqtb[5292-1].int() <= 0 {
			tex.selector = 17
			tex.print(1256)
			tex.selector = 19
		}
	}
label50:
	if tex.interaction < 3 {
		tex.helpPtr = 0
		tex.errorCount = int8(int32(tex.errorCount) - 1)
	} else if tex.eqtb[5292-1].int() > 0 {
		tex.helpPtr = 3
		tex.helpLine[2] = 1243
		tex.helpLine[1] = 1244
		tex.helpLine[0] = 1245
	} else {
		tex.helpPtr = 5
		tex.helpLine[4] = 1243
		tex.helpLine[3] = 1244
		tex.helpLine[2] = 1245
		tex.helpLine[1] = 1246
		tex.helpLine[0] = 1247
	}
	tex.error1()
}

func (tex *Context) storeFmtFile() {
	var j, k, l int32  // integer
	var p, q uint16    // 0..65535
	var x int32        // integer
	var w fourQuarters // record fourQuarters
	if tex.savePtr != 0 {
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1258)
		tex.helpPtr = 1
		tex.helpLine[0] = 1259
		if tex.interaction == 3 {
			tex.interaction = 2
		}
		if tex.logOpened {
			tex.error1()
		}
		tex.history = 3
		tex.jumpOut()
	}
	tex.selector = 21
	tex.print(1272)
	tex.print(int32(tex.jobName))
	tex.printChar(32)
	tex.printInt(tex.eqtb[5286-1].int())
	tex.printChar(46)
	tex.printInt(tex.eqtb[5285-1].int())
	tex.printChar(46)
	tex.printInt(tex.eqtb[5284-1].int())
	tex.printChar(41)
	if tex.interaction == 0 {
		tex.selector = 18
	} else {
		tex.selector = 19
	}
	if int32(tex.poolPtr)+1 > poolSize {
		tex.overflow(257, poolSize-int32(tex.initPoolPtr))
	}
	tex.formatIdent = tex.makeString()
	tex.packJobName(786)
	for !tex.wOpenOut(&tex.fmtFile) {
		tex.promptFileName(1273, 786)
	}
	tex.printNl(1274)
	tex.slowPrint(int32(tex.wMakeNameString(&tex.fmtFile)))
	tex.strPtr = uint16(int32(tex.strPtr) - 1)
	tex.poolPtr = tex.strStart[tex.strPtr]
	tex.printNl(338)
	tex.slowPrint(int32(tex.formatIdent))
	*tex.fmtFile.pMemoryWord().pInt() = 504454778
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 0
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 30000
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 6106
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 1777
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 307
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.poolPtr)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.strPtr)
	put(&tex.fmtFile)
	for _i := int64(0); _i <= int64(tex.strPtr); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.strStart[k])
		put(&tex.fmtFile)
	}
	k = 0
	for k+4 < int32(tex.poolPtr) {
		w.b0 = byte(int32(tex.strPool[k]) + 0)
		w.b1 = byte(int32(tex.strPool[k+1]) + 0)
		w.b2 = byte(int32(tex.strPool[k+2]) + 0)
		w.b3 = byte(int32(tex.strPool[k+3]) + 0)
		*tex.fmtFile.pMemoryWord().pQqqq() = w
		put(&tex.fmtFile)
		k = k + 4
	}
	k = int32(tex.poolPtr) - 4
	w.b0 = byte(int32(tex.strPool[k]) + 0)
	w.b1 = byte(int32(tex.strPool[k+1]) + 0)
	w.b2 = byte(int32(tex.strPool[k+2]) + 0)
	w.b3 = byte(int32(tex.strPool[k+3]) + 0)
	*tex.fmtFile.pMemoryWord().pQqqq() = w
	put(&tex.fmtFile)
	tex.printLn()
	tex.printInt(int32(tex.strPtr))
	tex.print(1260)
	tex.printInt(int32(tex.poolPtr))
	tex.sortAvail()
	tex.varUsed = 0
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.loMemMax)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.rover)
	put(&tex.fmtFile)
	p = 0
	q = tex.rover
	x = 0
	for {
		for _i := int64(p); _i <= int64(int32(q)+1); _i++ {
			k = int32(_i)
			*tex.fmtFile.pMemoryWord() = tex.mem[k]
			put(&tex.fmtFile)
		}
		x = x + int32(q) + 2 - int32(p)
		tex.varUsed = tex.varUsed + int32(q) - int32(p)
		p = uint16(int32(q) + int32(tex.mem[q].hh().lh()))
		q = tex.mem[int32(q)+1].hh().rh
		if q == tex.rover {
			break
		}
	}
	tex.varUsed = tex.varUsed + int32(tex.loMemMax) - int32(p)
	tex.dynUsed = int32(tex.memEnd) + 1 - int32(tex.hiMemMin)
	for _i := int64(p); _i <= int64(tex.loMemMax); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord() = tex.mem[k]
		put(&tex.fmtFile)
	}
	x = x + int32(tex.loMemMax) + 1 - int32(p)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hiMemMin)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.avail)
	put(&tex.fmtFile)
	for _i := int64(tex.hiMemMin); _i <= int64(tex.memEnd); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord() = tex.mem[k]
		put(&tex.fmtFile)
	}
	x = x + int32(tex.memEnd) + 1 - int32(tex.hiMemMin)
	p = tex.avail
	for p != 0 {
		tex.dynUsed = tex.dynUsed - 1
		p = tex.mem[p].hh().rh
	}
	*tex.fmtFile.pMemoryWord().pInt() = tex.varUsed
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = tex.dynUsed
	put(&tex.fmtFile)
	tex.printLn()
	tex.printInt(x)
	tex.print(1261)
	tex.printInt(tex.varUsed)
	tex.printChar(38)
	tex.printInt(tex.dynUsed)
	k = 1
	for {
		j = k
		for j < 5262 {
			if (tex.eqtb[j-1].hh().rh == tex.eqtb[j+1-1].hh().rh) && (tex.eqtb[j-1].hh().b0() == tex.eqtb[j+1-1].hh().b0()) && (tex.eqtb[j-1].hh().b1() == tex.eqtb[j+1-1].hh().b1()) {
				goto label41
			}
			j = j + 1
		}
		l = 5263
		goto label31
	label41:
		j = j + 1
		l = j
		for j < 5262 {
			if (tex.eqtb[j-1].hh().rh != tex.eqtb[j+1-1].hh().rh) || (tex.eqtb[j-1].hh().b0() != tex.eqtb[j+1-1].hh().b0()) || (tex.eqtb[j-1].hh().b1() != tex.eqtb[j+1-1].hh().b1()) {
				goto label31
			}
			j = j + 1
		}
	label31:
		{
			*tex.fmtFile.pMemoryWord().pInt() = l - k
			put(&tex.fmtFile)
		}
		for k < l {
			*tex.fmtFile.pMemoryWord() = tex.eqtb[k-1]
			put(&tex.fmtFile)
			k = k + 1
		}
		k = j + 1

		{
			*tex.fmtFile.pMemoryWord().pInt() = k - l
			put(&tex.fmtFile)
		}
		if k == 5263 {
			break
		}
	}
	for {
		j = k
		for j < 6106 {
			if tex.eqtb[j-1].int() == tex.eqtb[j+1-1].int() {
				goto label42
			}
			j = j + 1
		}
		l = 6107
		goto label32
	label42:
		j = j + 1
		l = j
		for j < 6106 {
			if tex.eqtb[j-1].int() != tex.eqtb[j+1-1].int() {
				goto label32
			}
			j = j + 1
		}
	label32:
		{
			*tex.fmtFile.pMemoryWord().pInt() = l - k
			put(&tex.fmtFile)
		}
		for k < l {
			*tex.fmtFile.pMemoryWord() = tex.eqtb[k-1]
			put(&tex.fmtFile)
			k = k + 1
		}
		k = j + 1

		{
			*tex.fmtFile.pMemoryWord().pInt() = k - l
			put(&tex.fmtFile)
		}
		if k > 6106 {
			break
		}
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.parLoc)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.writeLoc)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hashUsed)
	put(&tex.fmtFile)
	tex.csCount = 2613 - int32(tex.hashUsed)
	for _i := int64(514); _i <= int64(tex.hashUsed); _i++ {
		p = uint16(_i)
		if tex.hash[p-514].rh != 0 {
			*tex.fmtFile.pMemoryWord().pInt() = int32(p)
			put(&tex.fmtFile)
			*tex.fmtFile.pMemoryWord().pHh() = tex.hash[p-514]
			put(&tex.fmtFile)
			tex.csCount = tex.csCount + 1
		}
	}
	for _i := int64(int32(tex.hashUsed) + 1); _i <= int64(2880); _i++ {
		p = uint16(_i)
		*tex.fmtFile.pMemoryWord().pHh() = tex.hash[p-514]
		put(&tex.fmtFile)
	}
	*tex.fmtFile.pMemoryWord().pInt() = tex.csCount
	put(&tex.fmtFile)
	tex.printLn()
	tex.printInt(tex.csCount)
	tex.print(1262)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fmemPtr)
	put(&tex.fmtFile)
	for _i := int64(0); _i <= int64(int32(tex.fmemPtr)-1); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord() = tex.fontInfo[k]
		put(&tex.fmtFile)
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontPtr)
	put(&tex.fmtFile)
	for _i := int64(0); _i <= int64(tex.fontPtr); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord().pQqqq() = tex.fontCheck[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.fontSize[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.fontDsize[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontParams[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.hyphenChar[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.skewChar[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontName[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontArea[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontBc[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontEc[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.charBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.widthBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.heightBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.depthBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.italicBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.ligKernBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.kernBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.extenBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = tex.paramBase[k]
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontGlue[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.bcharLabel[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontBchar[k])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.fontFalseBchar[k])
		put(&tex.fmtFile)
		tex.printNl(1265)
		tex.printEsc(tex.hash[2624+k-514].rh)
		tex.printChar(61)
		tex.printFileName(int32(tex.fontName[k]), int32(tex.fontArea[k]), 338)
		if tex.fontSize[k] != tex.fontDsize[k] {
			tex.print(741)
			tex.printScaled(tex.fontSize[k])
			tex.print(397)
		}
	}
	tex.printLn()
	tex.printInt(int32(tex.fmemPtr) - 7)
	tex.print(1263)
	tex.printInt(int32(tex.fontPtr) - 0)
	tex.print(1264)
	if tex.fontPtr != 1 {
		tex.printChar(115)
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyphCount)
	put(&tex.fmtFile)
	for _i := int64(0); _i <= int64(307); _i++ {
		k = int32(_i)
		if tex.hyphWord[k] != 0 {
			*tex.fmtFile.pMemoryWord().pInt() = k
			put(&tex.fmtFile)
			*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyphWord[k])
			put(&tex.fmtFile)
			*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyphList[k])
			put(&tex.fmtFile)
		}
	}
	tex.printLn()
	tex.printInt(int32(tex.hyphCount))
	tex.print(1266)
	if tex.hyphCount != 1 {
		tex.printChar(115)
	}
	if tex.trieNotReady {
		tex.initTrie()
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.trieMax)
	put(&tex.fmtFile)
	for _i := int64(0); _i <= int64(tex.trieMax); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord().pHh() = tex.trie[k]
		put(&tex.fmtFile)
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.trieOpPtr)
	put(&tex.fmtFile)
	for _i := int64(1); _i <= int64(tex.trieOpPtr); _i++ {
		k = int32(_i)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyfDistance[k-1])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyfNum[k-1])
		put(&tex.fmtFile)
		*tex.fmtFile.pMemoryWord().pInt() = int32(tex.hyfNext[k-1])
		put(&tex.fmtFile)
	}
	tex.printNl(1267)
	tex.printInt(int32(tex.trieMax))
	tex.print(1268)
	tex.printInt(int32(tex.trieOpPtr))
	tex.print(1269)
	if tex.trieOpPtr != 1 {
		tex.printChar(115)
	}
	tex.print(1270)
	tex.printInt(trieOpSize)
	for _i := int64(255); _i >= int64(0); _i-- {
		k = int32(_i)
		if tex.trieUsed[k] > 0 {
			tex.printNl(800)
			tex.printInt(int32(tex.trieUsed[k]) - 0)
			tex.print(1271)
			tex.printInt(k)
			*tex.fmtFile.pMemoryWord().pInt() = k
			put(&tex.fmtFile)
			*tex.fmtFile.pMemoryWord().pInt() = int32(tex.trieUsed[k]) - 0
			put(&tex.fmtFile)
		}
	}
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.interaction)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = int32(tex.formatIdent)
	put(&tex.fmtFile)
	*tex.fmtFile.pMemoryWord().pInt() = 69069
	put(&tex.fmtFile)
	*tex.eqtb[5294-1].pInt() = 0
	tex.wClose(&tex.fmtFile)
}

func (tex *Context) newWhatsit(s byte, w byte) {
	var p uint16 // 0..65535
	p = tex.getNode(int32(w))
	*tex.mem[p].pHh().pB0() = 8
	*tex.mem[p].pHh().pB1() = s
	tex.mem[tex.curList.tailField].pHh().rh = p
	tex.curList.tailField = p
}

func (tex *Context) newWriteWhatsit(w byte) {
	tex.newWhatsit(byte(tex.curChr), w)
	if w != 2 {
		tex.scanFourBitInt()
	} else {
		tex.scanInt()
		if tex.curVal < 0 {
			tex.curVal = 17
		} else if tex.curVal > 15 {
			tex.curVal = 16
		}
	}
	*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = uint16(tex.curVal)
}

func (tex *Context) doExtension() {
	var k int32  // integer
	var p uint16 // 0..65535
	switch tex.curChr {
	case 0:
		tex.newWriteWhatsit(3)
		tex.scanOptionalEquals()
		tex.scanFileName()
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = tex.curName
		*tex.mem[int32(tex.curList.tailField)+2].pHh().pLh() = tex.curArea
		tex.mem[int32(tex.curList.tailField)+2].pHh().rh = tex.curExt
	case 1:
		k = int32(tex.curCs)
		tex.newWriteWhatsit(2)
		tex.curCs = uint16(k)
		p = tex.scanToks(false, false)
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = tex.defRef
	case 2:
		tex.newWriteWhatsit(2)
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = 0
	case 3:
		tex.newWhatsit(3, 2)
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = 0
		p = tex.scanToks(false, true)
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = tex.defRef
	case 4:
		tex.getXToken()
		if (tex.curCmd == 59) && (tex.curChr <= 2) {
			p = tex.curList.tailField
			tex.doExtension()
			tex.outWhat(tex.curList.tailField)
			tex.flushNodeList(tex.curList.tailField)
			tex.curList.tailField = p
			tex.mem[p].pHh().rh = 0
		} else {
			tex.backInput()
		}
	case 5:
		if iabs(int32(tex.curList.modeField)) != 102 {
			tex.reportIllegalCase()
		} else {
			tex.newWhatsit(4, 2)
			tex.scanInt()
			if tex.curVal <= 0 {
				tex.curList.auxField.pHh().rh = 0
			} else if tex.curVal > 255 {
				tex.curList.auxField.pHh().rh = 0
			} else {
				tex.curList.auxField.pHh().rh = uint16(tex.curVal)
			}
			tex.mem[int32(tex.curList.tailField)+1].pHh().rh = tex.curList.auxField.hh().rh
			*tex.mem[int32(tex.curList.tailField)+1].pHh().pB0() = tex.normMin(tex.eqtb[5314-1].int())
			*tex.mem[int32(tex.curList.tailField)+1].pHh().pB1() = tex.normMin(tex.eqtb[5315-1].int())
		}
	default:
		tex.confusion(1291)
	}
}

func (tex *Context) fixLanguage() {
	var l byte // 0..255
	if tex.eqtb[5313-1].int() <= 0 {
		l = 0
	} else if tex.eqtb[5313-1].int() > 255 {
		l = 0
	} else {
		l = byte(tex.eqtb[5313-1].int())
	}
	if uint16(l) != tex.curList.auxField.hh().rh {
		tex.newWhatsit(4, 2)
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = uint16(l)
		tex.curList.auxField.pHh().rh = uint16(l)
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pB0() = tex.normMin(tex.eqtb[5314-1].int())
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pB1() = tex.normMin(tex.eqtb[5315-1].int())
	}
}

func (tex *Context) handleRightBrace() {
	var p, q uint16 // 0..65535
	var d int32     // integer
	var f int32     // integer
	switch tex.curGroup {
	case 1:
		tex.unsave()
	case 0:
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(1044)
		tex.helpPtr = 2
		tex.helpLine[1] = 1045
		tex.helpLine[0] = 1046
		tex.error1()
	case 14, 15, 16:
		tex.extraRightBrace()
	case 2:
		tex.package1(0)
	case 3:
		tex.adjustTail = 29995
		tex.package1(0)
	case 4:
		tex.endGraf()
		tex.package1(0)
	case 5:
		tex.endGraf()
		tex.package1(4)
	case 11:
		tex.endGraf()
		q = tex.eqtb[2892-1].hh().rh
		tex.mem[q].pHh().rh = uint16(int32(tex.mem[q].hh().rh) + 1)
		d = tex.eqtb[5836-1].int()
		f = tex.eqtb[5305-1].int()
		tex.unsave()
		tex.savePtr = uint16(int32(tex.savePtr) - 1)
		p = tex.vpackage(tex.mem[tex.curList.headField].hh().rh, 0, 1, 1073741823)
		tex.popNest()
		if tex.saveStack[int32(tex.savePtr)+0].int() < 255 {
			tex.mem[tex.curList.tailField].pHh().rh = tex.getNode(5)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
			*tex.mem[tex.curList.tailField].pHh().pB0() = 3
			*tex.mem[tex.curList.tailField].pHh().pB1() = byte(tex.saveStack[int32(tex.savePtr)+0].int() + 0)
			*tex.mem[int32(tex.curList.tailField)+3].pInt() = tex.mem[int32(p)+3].int() + tex.mem[int32(p)+2].int()
			*tex.mem[int32(tex.curList.tailField)+4].pHh().pLh() = tex.mem[int32(p)+5].hh().rh
			tex.mem[int32(tex.curList.tailField)+4].pHh().rh = q
			*tex.mem[int32(tex.curList.tailField)+2].pInt() = d
			*tex.mem[int32(tex.curList.tailField)+1].pInt() = f
		} else {
			tex.mem[tex.curList.tailField].pHh().rh = tex.getNode(2)
			tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
			*tex.mem[tex.curList.tailField].pHh().pB0() = 5
			*tex.mem[tex.curList.tailField].pHh().pB1() = 0
			*tex.mem[int32(tex.curList.tailField)+1].pInt() = int32(tex.mem[int32(p)+5].hh().rh)
			tex.deleteGlueRef(q)
		}
		tex.freeNode(p, 7)
		if tex.nestPtr == 0 {
			tex.buildPage()
		}
	case 8:
		if (tex.curInput.locField != 0) || ((tex.curInput.indexField != 6) && (tex.curInput.indexField != 3)) {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1010)
			tex.helpPtr = 2
			tex.helpLine[1] = 1011
			tex.helpLine[0] = 1012
			tex.error1()
			for {
				tex.getToken()
				if tex.curInput.locField == 0 {
					break
				}
			}
		}
		tex.endTokenList()
		tex.endGraf()
		tex.unsave()
		tex.outputActive = false
		tex.insertPenalties = 0
		if tex.eqtb[3933-1].hh().rh != 0 {
			if tex.interaction == 3 {
			}
			tex.printNl(262)
			tex.print(1013)
			tex.printEsc(409)
			tex.printInt(255)
			tex.helpPtr = 3
			tex.helpLine[2] = 1014
			tex.helpLine[1] = 1015
			tex.helpLine[0] = 1016
			tex.boxError(255)
		}
		if tex.curList.tailField != tex.curList.headField {
			tex.mem[tex.pageTail].pHh().rh = tex.mem[tex.curList.headField].hh().rh
			tex.pageTail = tex.curList.tailField
		}
		if tex.mem[29998].hh().rh != 0 {
			if tex.mem[29999].hh().rh == 0 {
				tex.nest[0].tailField = tex.pageTail
			}
			tex.mem[tex.pageTail].pHh().rh = tex.mem[29999].hh().rh
			tex.mem[29999].pHh().rh = tex.mem[29998].hh().rh
			tex.mem[29998].pHh().rh = 0
			tex.pageTail = 29998
		}
		tex.popNest()
		tex.buildPage()
	case 10:
		tex.buildDiscretionary()
	case 6:
		tex.backInput()
		tex.curTok = 6710
		if tex.interaction == 3 {
		}
		tex.printNl(262)
		tex.print(625)
		tex.printEsc(899)
		tex.print(626)
		tex.helpPtr = 1
		tex.helpLine[0] = 1125
		tex.insError()
	case 7:
		tex.endGraf()
		tex.unsave()
		tex.alignPeek()
	case 12:
		tex.endGraf()
		tex.unsave()
		tex.savePtr = uint16(int32(tex.savePtr) - 2)
		p = tex.vpackage(tex.mem[tex.curList.headField].hh().rh, tex.saveStack[int32(tex.savePtr)+1].int(), byte(tex.saveStack[int32(tex.savePtr)+0].int()), 1073741823)
		tex.popNest()
		tex.mem[tex.curList.tailField].pHh().rh = tex.newNoad()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[tex.curList.tailField].pHh().pB0() = 29
		tex.mem[int32(tex.curList.tailField)+1].pHh().rh = 2
		*tex.mem[int32(tex.curList.tailField)+1].pHh().pLh() = p
	case 13:
		tex.buildChoices()
	case 9:
		tex.unsave()
		tex.savePtr = uint16(int32(tex.savePtr) - 1)
		tex.mem[tex.saveStack[int32(tex.savePtr)+0].int()].pHh().rh = 3
		p = tex.finMlist(0)
		*tex.mem[tex.saveStack[int32(tex.savePtr)+0].int()].pHh().pLh() = p
		if p != 0 {
			if tex.mem[p].hh().rh == 0 {
				if tex.mem[p].hh().b0() == 16 {
					if tex.mem[int32(p)+3].hh().rh == 0 {
						if tex.mem[int32(p)+2].hh().rh == 0 {
							*tex.mem[tex.saveStack[int32(tex.savePtr)+0].int()].pHh() = tex.mem[int32(p)+1].hh()
							tex.freeNode(p, 4)
						}
					}
				} else if tex.mem[p].hh().b0() == 28 {
					if tex.saveStack[int32(tex.savePtr)+0].int() == int32(tex.curList.tailField)+1 {
						if tex.mem[tex.curList.tailField].hh().b0() == 16 {
							q = tex.curList.headField
							for tex.mem[q].hh().rh != tex.curList.tailField {
								q = tex.mem[q].hh().rh
							}
							tex.mem[q].pHh().rh = p
							tex.freeNode(tex.curList.tailField, 4)
							tex.curList.tailField = p
						}
					}
				}
			}
		}
	default:
		tex.confusion(1047)
	}
}

func (tex *Context) mainControl() {
	var t int32 // integer
	if tex.eqtb[3419-1].hh().rh != 0 {
		tex.beginTokenList(tex.eqtb[3419-1].hh().rh, 12)
	}
label60:
	tex.getXToken()
label21:
	if tex.interrupt != 0 {
		if tex.OKToInterrupt {
			tex.backInput()
			if tex.interrupt != 0 {
				tex.pauseForInstructions()
			}
			goto label60
		}
	}
	if tex.eqtb[5299-1].int() > 0 {
		tex.showCurCmdChr()
	}
	switch iabs(int32(tex.curList.modeField)) + int32(tex.curCmd) {
	case 113, 114, 170:
		goto label70
	case 118:
		tex.scanCharNum()
		tex.curChr = uint16(tex.curVal)
		goto label70
	case 167:
		tex.getXToken()
		if (tex.curCmd == 11) || (tex.curCmd == 12) || (tex.curCmd == 68) || (tex.curCmd == 16) {
			tex.cancelBoundary = true
		}
		goto label21
	case 112:
		if tex.curList.auxField.hh().lh() == 1000 {
			goto label120
		} else {
			tex.appSpace()
		}
	case 166, 267:
		goto label120
	case 1, 102, 203, 11, 213, 268:
	case 40, 141, 242:
		for {
			tex.getXToken()
			if tex.curCmd != 10 {
				break
			}
		}
		goto label21
	case 15:
		if tex.itsAllOver() {
			goto label10
		}
	case 23, 123, 224, 71, 172, 273, 39, 45, 49, 150, 7, 108, 209:
		tex.reportIllegalCase()
	case 8, 109, 9, 110, 18, 119, 70, 171, 51, 152, 16, 117, 50, 151, 53, 154, 67, 168, 54, 155, 55, 156, 57, 158, 56, 157, 31, 132, 52, 153, 29, 130, 47, 148, 212, 216, 217, 230, 227, 236, 239:
		tex.insertDollarSign()
	case 37, 137, 238:
		tex.mem[tex.curList.tailField].pHh().rh = tex.scanRuleSpec()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		if iabs(int32(tex.curList.modeField)) == 1 {
			*tex.curList.auxField.pInt() = -65536000
		} else if iabs(int32(tex.curList.modeField)) == 102 {
			*tex.curList.auxField.pHh().pLh() = 1000
		}
	case 28, 128, 229, 231:
		tex.appendGlue()
	case 30, 131, 232, 233:
		tex.appendKern()
	case 2, 103:
		tex.newSaveLevel(1)
	case 62, 163, 264:
		tex.newSaveLevel(14)
	case 63, 164, 265:
		if tex.curGroup == 14 {
			tex.unsave()
		} else {
			tex.offSave()
		}
	case 3, 104, 205:
		tex.handleRightBrace()
	case 22, 124, 225:
		t = int32(tex.curChr)
		tex.scanDimen(false, false, false)
		if t == 0 {
			tex.scanBox(tex.curVal)
		} else {
			tex.scanBox(-tex.curVal)
		}
	case 32, 133, 234:
		tex.scanBox(1073742237 + int32(tex.curChr))
	case 21, 122, 223:
		tex.beginBox(0)
	case 44:
		tex.newGraf(tex.curChr > 0)
	case 12, 13, 17, 69, 4, 24, 36, 46, 48, 27, 34, 65, 66:
		tex.backInput()
		tex.newGraf(true)
	case 145, 246:
		tex.indentInHmode()
	case 14:
		tex.normalParagraph()
		if tex.curList.modeField > 0 {
			tex.buildPage()
		}
	case 115:
		if tex.alignState < 0 {
			tex.offSave()
		}
		tex.endGraf()
		if tex.curList.modeField == 1 {
			tex.buildPage()
		}
	case 116, 129, 138, 126, 134:
		tex.headForVmode()
	case 38, 139, 240, 140, 241:
		tex.beginInsertOrAdjust()
	case 19, 120, 221:
		tex.makeMark()
	case 43, 144, 245:
		tex.appendPenalty()
	case 26, 127, 228:
		tex.deleteLast()
	case 25, 125, 226:
		tex.unpackage()
	case 146:
		tex.appendItalicCorrection()
	case 247:
		tex.mem[tex.curList.tailField].pHh().rh = tex.newKern(0)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	case 149, 250:
		tex.appendDiscretionary()
	case 147:
		tex.makeAccent()
	case 6, 107, 208, 5, 106, 207:
		tex.alignError()
	case 35, 136, 237:
		tex.noAlignError()
	case 64, 165, 266:
		tex.omitError()
	case 33, 135:
		tex.initAlign()
	case 235:
		if tex.privileged() {
			if tex.curGroup == 15 {
				tex.initAlign()
			} else {
				tex.offSave()
			}
		}
	case 10, 111:
		tex.doEndv()
	case 68, 169, 270:
		tex.csError()
	case 105:
		tex.initMath()
	case 251:
		if tex.privileged() {
			if tex.curGroup == 15 {
				tex.startEqNo()
			} else {
				tex.offSave()
			}
		}
	case 204:
		tex.mem[tex.curList.tailField].pHh().rh = tex.newNoad()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		tex.backInput()
		tex.scanMath(uint16(int32(tex.curList.tailField) + 1))
	case 214, 215, 271:
		tex.setMathChar(int32(tex.eqtb[5007+int32(tex.curChr)-1].hh().rh) - 0)
	case 219:
		tex.scanCharNum()
		tex.curChr = uint16(tex.curVal)
		tex.setMathChar(int32(tex.eqtb[5007+int32(tex.curChr)-1].hh().rh) - 0)
	case 220:
		tex.scanFifteenBitInt()
		tex.setMathChar(tex.curVal)
	case 272:
		tex.setMathChar(int32(tex.curChr))
	case 218:
		tex.scanTwentySevenBitInt()
		tex.setMathChar((tex.curVal / 4096))
	case 253:
		tex.mem[tex.curList.tailField].pHh().rh = tex.newNoad()
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[tex.curList.tailField].pHh().pB0() = byte(tex.curChr)
		tex.scanMath(uint16(int32(tex.curList.tailField) + 1))
	case 254:
		tex.mathLimitSwitch()
	case 269:
		tex.mathRadical()
	case 248, 249:
		tex.mathAc()
	case 259:
		tex.scanSpec(12, false)
		tex.normalParagraph()
		tex.pushNest()
		tex.curList.modeField = -1
		*tex.curList.auxField.pInt() = -65536000
		if tex.eqtb[3418-1].hh().rh != 0 {
			tex.beginTokenList(tex.eqtb[3418-1].hh().rh, 11)
		}
	case 256:
		tex.mem[tex.curList.tailField].pHh().rh = tex.newStyle(byte(tex.curChr))
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	case 258:
		tex.mem[tex.curList.tailField].pHh().rh = tex.newGlue(0)
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
		*tex.mem[tex.curList.tailField].pHh().pB1() = 98
	case 257:
		tex.appendChoices()
	case 211, 210:
		tex.subSup()
	case 255:
		tex.mathFraction()
	case 252:
		tex.mathLeftRight()
	case 206:
		if tex.curGroup == 15 {
			tex.afterMath()
		} else {
			tex.offSave()
		}
	case 72, 173, 274, 73, 174, 275, 74, 175, 276, 75, 176, 277, 76, 177, 278, 77, 178, 279, 78, 179, 280, 79, 180, 281, 80, 181, 282, 81, 182, 283, 82, 183, 284, 83, 184, 285, 84, 185, 286, 85, 186, 287, 86, 187, 288, 87, 188, 289, 88, 189, 290, 89, 190, 291, 90, 191, 292, 91, 192, 293, 92, 193, 294, 93, 194, 295, 94, 195, 296, 95, 196, 297, 96, 197, 298, 97, 198, 299, 98, 199, 300, 99, 200, 301, 100, 201, 302, 101, 202, 303:
		tex.prefixedCommand()
	case 41, 142, 243:
		tex.getToken()
		tex.afterToken = tex.curTok
	case 42, 143, 244:
		tex.getToken()
		tex.saveForAfter(tex.curTok)
	case 61, 162, 263:
		tex.openOrCloseIn()
	case 59, 160, 261:
		tex.issueMessage()
	case 58, 159, 260:
		tex.shiftCase()
	case 20, 121, 222:
		tex.showWhatever()
	case 60, 161, 262:
		tex.doExtension()
	}
	goto label60
label70:
	tex.mainS = int32(tex.eqtb[4751+int32(tex.curChr)-1].hh().rh)
	if tex.mainS == 1000 {
		*tex.curList.auxField.pHh().pLh() = 1000
	} else if tex.mainS < 1000 {
		if tex.mainS > 0 {
			*tex.curList.auxField.pHh().pLh() = uint16(tex.mainS)
		}
	} else if tex.curList.auxField.hh().lh() < 1000 {
		*tex.curList.auxField.pHh().pLh() = 1000
	} else {
		*tex.curList.auxField.pHh().pLh() = uint16(tex.mainS)
	}
	tex.mainF = byte(tex.eqtb[3934-1].hh().rh)
	tex.bchar = tex.fontBchar[tex.mainF]
	tex.falseBchar = tex.fontFalseBchar[tex.mainF]
	if tex.curList.modeField > 0 {
		if tex.eqtb[5313-1].int() != int32(tex.curList.auxField.hh().rh) {
			tex.fixLanguage()
		}
	}
	tex.ligStack = tex.avail
	if tex.ligStack == 0 {
		tex.ligStack = tex.getAvail()
	} else {
		tex.avail = tex.mem[tex.ligStack].hh().rh
		tex.mem[tex.ligStack].pHh().rh = 0
	}
	*tex.mem[tex.ligStack].pHh().pB0() = tex.mainF
	tex.curL = uint16(int32(tex.curChr) + 0)
	*tex.mem[tex.ligStack].pHh().pB1() = byte(tex.curL)
	tex.curQ = tex.curList.tailField
	if tex.cancelBoundary {
		tex.cancelBoundary = false
		tex.mainK = 0
	} else {
		tex.mainK = tex.bcharLabel[tex.mainF]
	}
	if tex.mainK == 0 {
		goto label92
	}
	tex.curR = tex.curL
	tex.curL = 256
	goto label111
label80:
	if tex.curL < 256 {
		if tex.mem[tex.curQ].hh().rh > 0 {
			if int32(tex.mem[tex.curList.tailField].hh().b1()) == tex.hyphenChar[tex.mainF]+0 {
				tex.insDisc = true
			}
		}
		if tex.ligaturePresent {
			tex.mainP = tex.newLigature(tex.mainF, byte(tex.curL), tex.mem[tex.curQ].hh().rh)
			if tex.lftHit {
				*tex.mem[tex.mainP].pHh().pB1() = 2
				tex.lftHit = false
			}
			if tex.rtHit {
				if tex.ligStack == 0 {
					*tex.mem[tex.mainP].pHh().pB1() = byte(int32(tex.mem[tex.mainP].hh().b1()) + 1)
					tex.rtHit = false
				}
			}
			tex.mem[tex.curQ].pHh().rh = tex.mainP
			tex.curList.tailField = tex.mainP
			tex.ligaturePresent = false
		}
		if tex.insDisc {
			tex.insDisc = false
			if tex.curList.modeField > 0 {
				tex.mem[tex.curList.tailField].pHh().rh = tex.newDisc()
				tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
			}
		}
	}
label90:
	if tex.ligStack == 0 {
		goto label21
	}
	tex.curQ = tex.curList.tailField
	tex.curL = uint16(tex.mem[tex.ligStack].hh().b1())
label91:
	if !(tex.ligStack >= tex.hiMemMin) {
		goto label95
	}
label92:
	if (tex.curChr < uint16(tex.fontBc[tex.mainF])) || (tex.curChr > uint16(tex.fontEc[tex.mainF])) {
		tex.charWarning(tex.mainF, byte(tex.curChr))
		tex.mem[tex.ligStack].pHh().rh = tex.avail
		tex.avail = tex.ligStack
		goto label60
	}
	tex.mainI = tex.fontInfo[tex.charBase[tex.mainF]+int32(tex.curL)].qqqq()
	if !(tex.mainI.b0 > 0) {
		tex.charWarning(tex.mainF, byte(tex.curChr))
		tex.mem[tex.ligStack].pHh().rh = tex.avail
		tex.avail = tex.ligStack
		goto label60
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.ligStack
	tex.curList.tailField = tex.ligStack
label100:
	tex.getNext()
	if tex.curCmd == 11 {
		goto label101
	}
	if tex.curCmd == 12 {
		goto label101
	}
	if tex.curCmd == 68 {
		goto label101
	}
	tex.xToken()
	if tex.curCmd == 11 {
		goto label101
	}
	if tex.curCmd == 12 {
		goto label101
	}
	if tex.curCmd == 68 {
		goto label101
	}
	if tex.curCmd == 16 {
		tex.scanCharNum()
		tex.curChr = uint16(tex.curVal)
		goto label101
	}
	if tex.curCmd == 65 {
		tex.bchar = 256
	}
	tex.curR = tex.bchar
	tex.ligStack = 0
	goto label110
label101:
	tex.mainS = int32(tex.eqtb[4751+int32(tex.curChr)-1].hh().rh)
	if tex.mainS == 1000 {
		*tex.curList.auxField.pHh().pLh() = 1000
	} else if tex.mainS < 1000 {
		if tex.mainS > 0 {
			*tex.curList.auxField.pHh().pLh() = uint16(tex.mainS)
		}
	} else if tex.curList.auxField.hh().lh() < 1000 {
		*tex.curList.auxField.pHh().pLh() = 1000
	} else {
		*tex.curList.auxField.pHh().pLh() = uint16(tex.mainS)
	}
	tex.ligStack = tex.avail
	if tex.ligStack == 0 {
		tex.ligStack = tex.getAvail()
	} else {
		tex.avail = tex.mem[tex.ligStack].hh().rh
		tex.mem[tex.ligStack].pHh().rh = 0
	}
	*tex.mem[tex.ligStack].pHh().pB0() = tex.mainF
	tex.curR = uint16(int32(tex.curChr) + 0)
	*tex.mem[tex.ligStack].pHh().pB1() = byte(tex.curR)
	if tex.curR == tex.falseBchar {
		tex.curR = 256
	}
label110:
	if ((int32(tex.mainI.b2) - 0) % 4) != 1 {
		goto label80
	}
	if tex.curR == 256 {
		goto label80
	}
	tex.mainK = uint16(tex.ligKernBase[tex.mainF] + int32(tex.mainI.b3))
	tex.mainJ = tex.fontInfo[tex.mainK].qqqq()
	if tex.mainJ.b0 <= 128 {
		goto label112
	}
	tex.mainK = uint16(tex.ligKernBase[tex.mainF] + (256 * int32(tex.mainJ.b2)) + int32(tex.mainJ.b3) + 32768 - (256 * 128))
label111:
	tex.mainJ = tex.fontInfo[tex.mainK].qqqq()
label112:
	if uint16(tex.mainJ.b1) == tex.curR {
		if tex.mainJ.b0 <= 128 {
			if tex.mainJ.b2 >= 128 {
				if tex.curL < 256 {
					if tex.mem[tex.curQ].hh().rh > 0 {
						if int32(tex.mem[tex.curList.tailField].hh().b1()) == tex.hyphenChar[tex.mainF]+0 {
							tex.insDisc = true
						}
					}
					if tex.ligaturePresent {
						tex.mainP = tex.newLigature(tex.mainF, byte(tex.curL), tex.mem[tex.curQ].hh().rh)
						if tex.lftHit {
							*tex.mem[tex.mainP].pHh().pB1() = 2
							tex.lftHit = false
						}
						if tex.rtHit {
							if tex.ligStack == 0 {
								*tex.mem[tex.mainP].pHh().pB1() = byte(int32(tex.mem[tex.mainP].hh().b1()) + 1)
								tex.rtHit = false
							}
						}
						tex.mem[tex.curQ].pHh().rh = tex.mainP
						tex.curList.tailField = tex.mainP
						tex.ligaturePresent = false
					}
					if tex.insDisc {
						tex.insDisc = false
						if tex.curList.modeField > 0 {
							tex.mem[tex.curList.tailField].pHh().rh = tex.newDisc()
							tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
						}
					}
				}
				tex.mem[tex.curList.tailField].pHh().rh = tex.newKern(tex.fontInfo[tex.kernBase[tex.mainF]+(256*int32(tex.mainJ.b2))+int32(tex.mainJ.b3)].int())
				tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
				goto label90
			}
			if tex.curL == 256 {
				tex.lftHit = true
			} else if tex.ligStack == 0 {
				tex.rtHit = true
			}
			if tex.interrupt != 0 {
				tex.pauseForInstructions()
			}
			switch tex.mainJ.b2 {
			case 1, 5:
				tex.curL = uint16(tex.mainJ.b3)
				tex.mainI = tex.fontInfo[tex.charBase[tex.mainF]+int32(tex.curL)].qqqq()
				tex.ligaturePresent = true
			case 2, 6:
				tex.curR = uint16(tex.mainJ.b3)
				if tex.ligStack == 0 {
					tex.ligStack = tex.newLigItem(byte(tex.curR))
					tex.bchar = 256
				} else if tex.ligStack >= tex.hiMemMin {
					tex.mainP = tex.ligStack
					tex.ligStack = tex.newLigItem(byte(tex.curR))
					tex.mem[int32(tex.ligStack)+1].pHh().rh = tex.mainP
				} else {
					*tex.mem[tex.ligStack].pHh().pB1() = byte(tex.curR)
				}
			case 3:
				tex.curR = uint16(tex.mainJ.b3)
				tex.mainP = tex.ligStack
				tex.ligStack = tex.newLigItem(byte(tex.curR))
				tex.mem[tex.ligStack].pHh().rh = tex.mainP
			case 7, 11:
				if tex.curL < 256 {
					if tex.mem[tex.curQ].hh().rh > 0 {
						if int32(tex.mem[tex.curList.tailField].hh().b1()) == tex.hyphenChar[tex.mainF]+0 {
							tex.insDisc = true
						}
					}
					if tex.ligaturePresent {
						tex.mainP = tex.newLigature(tex.mainF, byte(tex.curL), tex.mem[tex.curQ].hh().rh)
						if tex.lftHit {
							*tex.mem[tex.mainP].pHh().pB1() = 2
							tex.lftHit = false
						}
						if false {
							if tex.ligStack == 0 {
								*tex.mem[tex.mainP].pHh().pB1() = byte(int32(tex.mem[tex.mainP].hh().b1()) + 1)
								tex.rtHit = false
							}
						}
						tex.mem[tex.curQ].pHh().rh = tex.mainP
						tex.curList.tailField = tex.mainP
						tex.ligaturePresent = false
					}
					if tex.insDisc {
						tex.insDisc = false
						if tex.curList.modeField > 0 {
							tex.mem[tex.curList.tailField].pHh().rh = tex.newDisc()
							tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
						}
					}
				}
				tex.curQ = tex.curList.tailField
				tex.curL = uint16(tex.mainJ.b3)
				tex.mainI = tex.fontInfo[tex.charBase[tex.mainF]+int32(tex.curL)].qqqq()
				tex.ligaturePresent = true
			default:
				tex.curL = uint16(tex.mainJ.b3)
				tex.ligaturePresent = true
				if tex.ligStack == 0 {
					goto label80
				} else {
					goto label91
				}
			}
			if tex.mainJ.b2 > 4 {
				if tex.mainJ.b2 != 7 {
					goto label80
				}
			}
			if tex.curL < 256 {
				goto label110
			}
			tex.mainK = tex.bcharLabel[tex.mainF]
			goto label111
		}
	}
	if tex.mainJ.b0 == 0 {
		tex.mainK = uint16(int32(tex.mainK) + 1)
	} else {
		if tex.mainJ.b0 >= 128 {
			goto label80
		}
		tex.mainK = uint16(int32(tex.mainK) + int32(tex.mainJ.b0) + 1)
	}
	goto label111
label95:
	tex.mainP = tex.mem[int32(tex.ligStack)+1].hh().rh
	if tex.mainP > 0 {
		tex.mem[tex.curList.tailField].pHh().rh = tex.mainP
		tex.curList.tailField = tex.mem[tex.curList.tailField].hh().rh
	}
	tex.tempPtr = tex.ligStack
	tex.ligStack = tex.mem[tex.tempPtr].hh().rh
	tex.freeNode(tex.tempPtr, 2)
	tex.mainI = tex.fontInfo[tex.charBase[tex.mainF]+int32(tex.curL)].qqqq()
	tex.ligaturePresent = true
	if tex.ligStack == 0 {
		if tex.mainP > 0 {
			goto label100
		} else {
			tex.curR = tex.bchar
		}
	} else {
		tex.curR = uint16(tex.mem[tex.ligStack].hh().b1())
	}
	goto label110
label120:
	if tex.eqtb[2894-1].hh().rh == 0 {
		tex.mainP = tex.fontGlue[tex.eqtb[3934-1].hh().rh]
		if tex.mainP == 0 {
			tex.mainP = tex.newSpec(0)
			tex.mainK = uint16(tex.paramBase[tex.eqtb[3934-1].hh().rh] + 2)
			*tex.mem[int32(tex.mainP)+1].pInt() = tex.fontInfo[tex.mainK].int()
			*tex.mem[int32(tex.mainP)+2].pInt() = tex.fontInfo[int32(tex.mainK)+1].int()
			*tex.mem[int32(tex.mainP)+3].pInt() = tex.fontInfo[int32(tex.mainK)+2].int()
			tex.fontGlue[tex.eqtb[3934-1].hh().rh] = tex.mainP
		}
		tex.tempPtr = tex.newGlue(tex.mainP)
	} else {
		tex.tempPtr = tex.newParamGlue(12)
	}
	tex.mem[tex.curList.tailField].pHh().rh = tex.tempPtr
	tex.curList.tailField = tex.tempPtr
	goto label60
label10:
	;
}

func (tex *Context) giveErrHelp() {
	tex.tokenShow(tex.eqtb[3421-1].hh().rh)
}

func (tex *Context) openFmtFile() (ret bool) {
	var j uint16 // 0..500
	j = tex.curInput.locField
	if tex.buffer[tex.curInput.locField] == 38 {
		tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
		j = tex.curInput.locField
		tex.buffer[tex.last] = 32
		for tex.buffer[j] != 32 {
			j = uint16(int32(j) + 1)
		}
		tex.packBufferedName(0, int32(tex.curInput.locField), int32(j)-1)
		if tex.wOpenIn(&tex.fmtFile) {
			goto label40
		}
		tex.packBufferedName(11, int32(tex.curInput.locField), int32(j)-1)
		if tex.wOpenIn(&tex.fmtFile) {
			goto label40
		}
		writeLn(&tex.termOut, "Sorry, I can't find that format;", " will try PLAIN.")
		break1(&tex.termOut)
	}
	tex.packBufferedName(16, 1, 0)
	if !tex.wOpenIn(&tex.fmtFile) {
		writeLn(&tex.termOut, "I can't find the PLAIN format file!")
		ret = false
		goto label10
	}
label40:
	tex.curInput.locField = j
	ret = true
label10:
	return ret
}

func (tex *Context) loadFmtFile() (ret bool) {
	var j, k int32     // integer
	var p, q uint16    // 0..65535
	var x int32        // integer
	var w fourQuarters // record fourQuarters
	x = tex.fmtFile.memoryWord().int()
	if x != 504454778 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x != 0 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x != 30000 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x != 6106 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x != 1777 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x != 307 {
		goto label6666
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 0 {
		goto label6666
	}
	if x > poolSize {
		writeLn(&tex.termOut, "---! Must increase the ", "string pool size")
		goto label6666
	} else {
		tex.poolPtr = uint16(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 0 {
		goto label6666
	}
	if x > maxStrings {
		writeLn(&tex.termOut, "---! Must increase the ", "max strings")
		goto label6666
	} else {
		tex.strPtr = uint16(x)
	}
	for _i := int64(0); _i <= int64(tex.strPtr); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > int32(tex.poolPtr)) {
			goto label6666
		} else {
			tex.strStart[k] = uint16(x)
		}
	}
	k = 0
	for k+4 < int32(tex.poolPtr) {
		get(&tex.fmtFile)
		w = tex.fmtFile.memoryWord().qqqq()
		tex.strPool[k] = byte(int32(w.b0) - 0)
		tex.strPool[k+1] = byte(int32(w.b1) - 0)
		tex.strPool[k+2] = byte(int32(w.b2) - 0)
		tex.strPool[k+3] = byte(int32(w.b3) - 0)
		k = k + 4
	}
	k = int32(tex.poolPtr) - 4
	get(&tex.fmtFile)
	w = tex.fmtFile.memoryWord().qqqq()
	tex.strPool[k] = byte(int32(w.b0) - 0)
	tex.strPool[k+1] = byte(int32(w.b1) - 0)
	tex.strPool[k+2] = byte(int32(w.b2) - 0)
	tex.strPool[k+3] = byte(int32(w.b3) - 0)
	tex.initStrPtr = tex.strPtr
	tex.initPoolPtr = tex.poolPtr
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 1019) || (x > 29986) {
		goto label6666
	} else {
		tex.loMemMax = uint16(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 20) || (x > int32(tex.loMemMax)) {
		goto label6666
	} else {
		tex.rover = uint16(x)
	}
	p = 0
	q = tex.rover
	for {
		for _i := int64(p); _i <= int64(int32(q)+1); _i++ {
			k = int32(_i)
			get(&tex.fmtFile)
			tex.mem[k] = tex.fmtFile.memoryWord()
		}
		p = uint16(int32(q) + int32(tex.mem[q].hh().lh()))
		if (p > tex.loMemMax) || ((q >= tex.mem[int32(q)+1].hh().rh) && (tex.mem[int32(q)+1].hh().rh != tex.rover)) {
			goto label6666
		}
		q = tex.mem[int32(q)+1].hh().rh
		if q == tex.rover {
			break
		}
	}
	for _i := int64(p); _i <= int64(tex.loMemMax); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		tex.mem[k] = tex.fmtFile.memoryWord()
	}
	if memMin < -2 {
		p = tex.mem[int32(tex.rover)+1].hh().lh()
		q = uint16(memMin + 1)
		tex.mem[memMin].pHh().rh = 0
		*tex.mem[memMin].pHh().pLh() = 0
		tex.mem[int32(p)+1].pHh().rh = q
		*tex.mem[int32(tex.rover)+1].pHh().pLh() = q
		tex.mem[int32(q)+1].pHh().rh = tex.rover
		*tex.mem[int32(q)+1].pHh().pLh() = p
		tex.mem[q].pHh().rh = 65535
		*tex.mem[q].pHh().pLh() = uint16(-0 - int32(q))
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < (int32(tex.loMemMax) + 1)) || (x > 29987) {
		goto label6666
	} else {
		tex.hiMemMin = uint16(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 0) || (x > 30000) {
		goto label6666
	} else {
		tex.avail = uint16(x)
	}
	tex.memEnd = 30000
	for _i := int64(tex.hiMemMin); _i <= int64(tex.memEnd); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		tex.mem[k] = tex.fmtFile.memoryWord()
	}
	get(&tex.fmtFile)
	tex.varUsed = tex.fmtFile.memoryWord().int()
	get(&tex.fmtFile)
	tex.dynUsed = tex.fmtFile.memoryWord().int()
	k = 1
	for {

		{
			get(&tex.fmtFile)
			x = tex.fmtFile.memoryWord().int()
		}
		if (x < 1) || ((k + x) > 6107) {
			goto label6666
		}
		for _i := int64(k); _i <= int64(k+x-1); _i++ {
			j = int32(_i)
			get(&tex.fmtFile)
			tex.eqtb[j-1] = tex.fmtFile.memoryWord()
		}
		k = k + x

		{
			get(&tex.fmtFile)
			x = tex.fmtFile.memoryWord().int()
		}
		if (x < 0) || ((k + x) > 6107) {
			goto label6666
		}
		for _i := int64(k); _i <= int64(k+x-1); _i++ {
			j = int32(_i)
			tex.eqtb[j-1] = tex.eqtb[k-1-1]
		}
		k = k + x
		if k > 6106 {
			break
		}
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 514) || (x > 2614) {
		goto label6666
	} else {
		tex.parLoc = uint16(x)
	}
	tex.parToken = uint16(4095 + int32(tex.parLoc))
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 514) || (x > 2614) {
		goto label6666
	} else {
		tex.writeLoc = uint16(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 514) || (x > 2614) {
		goto label6666
	} else {
		tex.hashUsed = uint16(x)
	}
	p = 513
	for {

		{

			{
				get(&tex.fmtFile)
				x = tex.fmtFile.memoryWord().int()
			}
			if (x < (int32(p) + 1)) || (x > int32(tex.hashUsed)) {
				goto label6666
			} else {
				p = uint16(x)
			}
		}

		{
			get(&tex.fmtFile)
			tex.hash[p-514] = tex.fmtFile.memoryWord().hh()
		}
		if p == tex.hashUsed {
			break
		}
	}
	for _i := int64(int32(tex.hashUsed) + 1); _i <= int64(2880); _i++ {
		p = uint16(_i)
		get(&tex.fmtFile)
		tex.hash[p-514] = tex.fmtFile.memoryWord().hh()
	}
	get(&tex.fmtFile)
	tex.csCount = tex.fmtFile.memoryWord().int()
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 7 {
		goto label6666
	}
	if x > fontMemSize {
		writeLn(&tex.termOut, "---! Must increase the ", "font mem size")
		goto label6666
	} else {
		tex.fmemPtr = uint16(x)
	}
	for _i := int64(0); _i <= int64(int32(tex.fmemPtr)-1); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		tex.fontInfo[k] = tex.fmtFile.memoryWord()
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 0 {
		goto label6666
	}
	if x > fontMax {
		writeLn(&tex.termOut, "---! Must increase the ", "font max")
		goto label6666
	} else {
		tex.fontPtr = byte(x)
	}
	for _i := int64(0); _i <= int64(tex.fontPtr); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		tex.fontCheck[k] = tex.fmtFile.memoryWord().qqqq()
		get(&tex.fmtFile)
		tex.fontSize[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.fontDsize[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 65535) {
			goto label6666
		} else {
			tex.fontParams[k] = uint16(x)
		}
		get(&tex.fmtFile)
		tex.hyphenChar[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.skewChar[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > int32(tex.strPtr)) {
			goto label6666
		} else {
			tex.fontName[k] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > int32(tex.strPtr)) {
			goto label6666
		} else {
			tex.fontArea[k] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 255) {
			goto label6666
		} else {
			tex.fontBc[k] = byte(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 255) {
			goto label6666
		} else {
			tex.fontEc[k] = byte(x)
		}
		get(&tex.fmtFile)
		tex.charBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.widthBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.heightBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.depthBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.italicBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.ligKernBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.kernBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.extenBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		tex.paramBase[k] = tex.fmtFile.memoryWord().int()
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > int32(tex.loMemMax)) {
			goto label6666
		} else {
			tex.fontGlue[k] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > (int32(tex.fmemPtr) - 1)) {
			goto label6666
		} else {
			tex.bcharLabel[k] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 256) {
			goto label6666
		} else {
			tex.fontBchar[k] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 256) {
			goto label6666
		} else {
			tex.fontFalseBchar[k] = uint16(x)
		}
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 0) || (x > 307) {
		goto label6666
	} else {
		tex.hyphCount = uint16(x)
	}
	for _i := int64(1); _i <= int64(tex.hyphCount); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 307) {
			goto label6666
		} else {
			j = x
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > int32(tex.strPtr)) {
			goto label6666
		} else {
			tex.hyphWord[j] = uint16(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 65535) {
			goto label6666
		} else {
			tex.hyphList[j] = uint16(x)
		}
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 0 {
		goto label6666
	}
	if x > trieSize {
		writeLn(&tex.termOut, "---! Must increase the ", "trie size")
		goto label6666
	} else {
		j = x
	}
	tex.trieMax = uint16(j)
	for _i := int64(0); _i <= int64(j); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		tex.trie[k] = tex.fmtFile.memoryWord().hh()
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if x < 0 {
		goto label6666
	}
	if x > trieOpSize {
		writeLn(&tex.termOut, "---! Must increase the ", "trie op size")
		goto label6666
	} else {
		j = x
	}
	tex.trieOpPtr = uint16(j)
	for _i := int64(1); _i <= int64(j); _i++ {
		k = int32(_i)
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 63) {
			goto label6666
		} else {
			tex.hyfDistance[k-1] = byte(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 63) {
			goto label6666
		} else {
			tex.hyfNum[k-1] = byte(x)
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > 255) {
			goto label6666
		} else {
			tex.hyfNext[k-1] = byte(x)
		}
	}
	for _i := int64(0); _i <= int64(255); _i++ {
		k = int32(_i)
		tex.trieUsed[k] = 0
	}
	k = 256
	for j > 0 {
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 0) || (x > (k - 1)) {
			goto label6666
		} else {
			k = x
		}
		get(&tex.fmtFile)
		x = tex.fmtFile.memoryWord().int()
		if (x < 1) || (x > j) {
			goto label6666
		} else {
			x = x
		}
		tex.trieUsed[k] = byte(x + 0)
		j = j - x
		tex.opStart[k] = uint16(j - 0)
	}
	tex.trieNotReady = false
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 0) || (x > 3) {
		goto label6666
	} else {
		tex.interaction = byte(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x < 0) || (x > int32(tex.strPtr)) {
		goto label6666
	} else {
		tex.formatIdent = uint16(x)
	}
	get(&tex.fmtFile)
	x = tex.fmtFile.memoryWord().int()
	if (x != 69069) || eof(&tex.fmtFile) {
		goto label6666
	}
	ret = true
	goto label10
label6666:
	writeLn(&tex.termOut, "(Fatal format file error; I'm stymied)")
	ret = false
label10:
	return ret
}

func (tex *Context) closeFilesAndTerminate() {
	var k int32 // integer
	for _i := int64(0); _i <= int64(15); _i++ {
		k = int32(_i)
		if tex.writeOpen[k] {
			tex.aClose(&tex.writeFile[k])
		}
	}
	*tex.eqtb[5312-1].pInt() = -1
	for tex.curS > -1 {
		if tex.curS > 0 {
			tex.dviBuf[tex.dviPtr] = 142
			tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
			if tex.dviPtr == tex.dviLimit {
				tex.dviSwap()
			}
		} else {
			tex.dviBuf[tex.dviPtr] = 140
			tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
			if tex.dviPtr == tex.dviLimit {
				tex.dviSwap()
			}
			tex.totalPages = tex.totalPages + 1
		}
		tex.curS = tex.curS - 1
	}
	if tex.totalPages == 0 {
		tex.printNl(837)
	} else {
		tex.dviBuf[tex.dviPtr] = 248
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviFour(tex.lastBop)
		tex.lastBop = tex.dviOffset + int32(tex.dviPtr) - 5
		tex.dviFour(25400000)
		tex.dviFour(473628672)
		tex.prepareMag()
		tex.dviFour(tex.eqtb[5280-1].int())
		tex.dviFour(tex.maxV)
		tex.dviFour(tex.maxH)
		tex.dviBuf[tex.dviPtr] = byte((tex.maxPush / 256))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviBuf[tex.dviPtr] = byte((tex.maxPush % 256))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviBuf[tex.dviPtr] = byte(((tex.totalPages / 256) % 256))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviBuf[tex.dviPtr] = byte((tex.totalPages % 256))
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		for tex.fontPtr > 0 {
			if tex.fontUsed[tex.fontPtr] {
				tex.dviFontDef(tex.fontPtr)
			}
			tex.fontPtr = byte(int32(tex.fontPtr) - 1)
		}
		tex.dviBuf[tex.dviPtr] = 249
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		tex.dviFour(tex.lastBop)
		tex.dviBuf[tex.dviPtr] = 2
		tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
		if tex.dviPtr == tex.dviLimit {
			tex.dviSwap()
		}
		k = 4 + ((dviBufSize - int32(tex.dviPtr)) % 4)
		for k > 0 {
			tex.dviBuf[tex.dviPtr] = 223
			tex.dviPtr = uint16(int32(tex.dviPtr) + 1)
			if tex.dviPtr == tex.dviLimit {
				tex.dviSwap()
			}
			k = k - 1
		}
		if tex.dviLimit == tex.halfBuf {
			tex.writeDvi(tex.halfBuf, uint16(dviBufSize-1))
		}
		if tex.dviPtr > 0 {
			tex.writeDvi(0, uint16(int32(tex.dviPtr)-1))
		}
		tex.printNl(838)
		tex.slowPrint(int32(tex.outputFileName))
		tex.print(286)
		tex.printInt(tex.totalPages)
		tex.print(839)
		if tex.totalPages != 1 {
			tex.printChar(115)
		}
		tex.print(840)
		tex.printInt(tex.dviOffset + int32(tex.dviPtr))
		tex.print(841)
		tex.bClose(&tex.dviFile)
	}
	if tex.logOpened {
		writeLn(&tex.logFile)
		tex.aClose(&tex.logFile)
		tex.selector = byte(int32(tex.selector) - 2)
		if tex.selector == 17 {
			tex.printNl(1275)
			tex.slowPrint(int32(tex.logName))
			tex.printChar(46)
		}
	}
}

func (tex *Context) finalCleanup() {
	var c byte // 0..63
	c = byte(tex.curChr)
	if c != 1 {
		*tex.eqtb[5312-1].pInt() = -1
	}
	if tex.jobName == 0 {
		tex.openLogFile()
	}
	for tex.inputPtr > 0 {
		if tex.curInput.stateField == 0 {
			tex.endTokenList()
		} else {
			tex.endFileReading()
		}
	}
	for tex.openParens > 0 {
		tex.print(1276)
		tex.openParens = byte(int32(tex.openParens) - 1)
	}
	if tex.curLevel > 1 {
		tex.printNl(40)
		tex.printEsc(1277)
		tex.print(1278)
		tex.printInt(int32(tex.curLevel) - 1)
		tex.printChar(41)
	}
	for tex.condPtr != 0 {
		tex.printNl(40)
		tex.printEsc(1277)
		tex.print(1279)
		tex.printCmdChr(105, uint16(tex.curIf))
		if tex.ifLine != 0 {
			tex.print(1280)
			tex.printInt(tex.ifLine)
		}
		tex.print(1281)
		tex.ifLine = tex.mem[int32(tex.condPtr)+1].int()
		tex.curIf = tex.mem[tex.condPtr].hh().b1()
		tex.tempPtr = tex.condPtr
		tex.condPtr = tex.mem[tex.condPtr].hh().rh
		tex.freeNode(tex.tempPtr, 2)
	}
	if tex.history != 0 {
		if (tex.history == 1) || (tex.interaction < 3) {
			if tex.selector == 19 {
				tex.selector = 17
				tex.printNl(1282)
				tex.selector = 19
			}
		}
	}
	if c == 1 {
		for _i := int64(0); _i <= int64(4); _i++ {
			c = byte(_i)
			if tex.curMark[c] != 0 {
				tex.deleteTokenRef(tex.curMark[c])
			}
		}
		if tex.lastGlue != 65535 {
			tex.deleteGlueRef(tex.lastGlue)
		}
		tex.storeFmtFile()
		goto label10
		tex.printNl(1283)
		goto label10
	}
label10:
}

func (tex *Context) initPrim() {
	tex.noNewControlSequence = false
	tex.primitive(376, 75, 2882)
	tex.primitive(377, 75, 2883)
	tex.primitive(378, 75, 2884)
	tex.primitive(379, 75, 2885)
	tex.primitive(380, 75, 2886)
	tex.primitive(381, 75, 2887)
	tex.primitive(382, 75, 2888)
	tex.primitive(383, 75, 2889)
	tex.primitive(384, 75, 2890)
	tex.primitive(385, 75, 2891)
	tex.primitive(386, 75, 2892)
	tex.primitive(387, 75, 2893)
	tex.primitive(388, 75, 2894)
	tex.primitive(389, 75, 2895)
	tex.primitive(390, 75, 2896)
	tex.primitive(391, 76, 2897)
	tex.primitive(392, 76, 2898)
	tex.primitive(393, 76, 2899)
	tex.primitive(398, 72, 3413)
	tex.primitive(399, 72, 3414)
	tex.primitive(400, 72, 3415)
	tex.primitive(401, 72, 3416)
	tex.primitive(402, 72, 3417)
	tex.primitive(403, 72, 3418)
	tex.primitive(404, 72, 3419)
	tex.primitive(405, 72, 3420)
	tex.primitive(406, 72, 3421)
	tex.primitive(420, 73, 5263)
	tex.primitive(421, 73, 5264)
	tex.primitive(422, 73, 5265)
	tex.primitive(423, 73, 5266)
	tex.primitive(424, 73, 5267)
	tex.primitive(425, 73, 5268)
	tex.primitive(426, 73, 5269)
	tex.primitive(427, 73, 5270)
	tex.primitive(428, 73, 5271)
	tex.primitive(429, 73, 5272)
	tex.primitive(430, 73, 5273)
	tex.primitive(431, 73, 5274)
	tex.primitive(432, 73, 5275)
	tex.primitive(433, 73, 5276)
	tex.primitive(434, 73, 5277)
	tex.primitive(435, 73, 5278)
	tex.primitive(436, 73, 5279)
	tex.primitive(437, 73, 5280)
	tex.primitive(438, 73, 5281)
	tex.primitive(439, 73, 5282)
	tex.primitive(440, 73, 5283)
	tex.primitive(441, 73, 5284)
	tex.primitive(442, 73, 5285)
	tex.primitive(443, 73, 5286)
	tex.primitive(444, 73, 5287)
	tex.primitive(445, 73, 5288)
	tex.primitive(446, 73, 5289)
	tex.primitive(447, 73, 5290)
	tex.primitive(448, 73, 5291)
	tex.primitive(449, 73, 5292)
	tex.primitive(450, 73, 5293)
	tex.primitive(451, 73, 5294)
	tex.primitive(452, 73, 5295)
	tex.primitive(453, 73, 5296)
	tex.primitive(454, 73, 5297)
	tex.primitive(455, 73, 5298)
	tex.primitive(456, 73, 5299)
	tex.primitive(457, 73, 5300)
	tex.primitive(458, 73, 5301)
	tex.primitive(459, 73, 5302)
	tex.primitive(460, 73, 5303)
	tex.primitive(461, 73, 5304)
	tex.primitive(462, 73, 5305)
	tex.primitive(463, 73, 5306)
	tex.primitive(464, 73, 5307)
	tex.primitive(465, 73, 5308)
	tex.primitive(466, 73, 5309)
	tex.primitive(467, 73, 5310)
	tex.primitive(468, 73, 5311)
	tex.primitive(469, 73, 5312)
	tex.primitive(470, 73, 5313)
	tex.primitive(471, 73, 5314)
	tex.primitive(472, 73, 5315)
	tex.primitive(473, 73, 5316)
	tex.primitive(474, 73, 5317)
	tex.primitive(478, 74, 5830)
	tex.primitive(479, 74, 5831)
	tex.primitive(480, 74, 5832)
	tex.primitive(481, 74, 5833)
	tex.primitive(482, 74, 5834)
	tex.primitive(483, 74, 5835)
	tex.primitive(484, 74, 5836)
	tex.primitive(485, 74, 5837)
	tex.primitive(486, 74, 5838)
	tex.primitive(487, 74, 5839)
	tex.primitive(488, 74, 5840)
	tex.primitive(489, 74, 5841)
	tex.primitive(490, 74, 5842)
	tex.primitive(491, 74, 5843)
	tex.primitive(492, 74, 5844)
	tex.primitive(493, 74, 5845)
	tex.primitive(494, 74, 5846)
	tex.primitive(495, 74, 5847)
	tex.primitive(496, 74, 5848)
	tex.primitive(497, 74, 5849)
	tex.primitive(498, 74, 5850)
	tex.primitive(32, 64, 0)
	tex.primitive(47, 44, 0)
	tex.primitive(508, 45, 0)
	tex.primitive(509, 90, 0)
	tex.primitive(510, 40, 0)
	tex.primitive(511, 41, 0)
	tex.primitive(512, 61, 0)
	tex.primitive(513, 16, 0)
	tex.primitive(504, 107, 0)
	tex.primitive(514, 15, 0)
	tex.primitive(515, 92, 0)
	tex.primitive(505, 67, 0)
	tex.primitive(516, 62, 0)
	tex.hash[2616-514].rh = 516
	tex.eqtb[2616-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(517, 102, 0)
	tex.primitive(518, 88, 0)
	tex.primitive(519, 77, 0)
	tex.primitive(520, 32, 0)
	tex.primitive(521, 36, 0)
	tex.primitive(522, 39, 0)
	tex.primitive(330, 37, 0)
	tex.primitive(351, 18, 0)
	tex.primitive(523, 46, 0)
	tex.primitive(524, 17, 0)
	tex.primitive(525, 54, 0)
	tex.primitive(526, 91, 0)
	tex.primitive(527, 34, 0)
	tex.primitive(528, 65, 0)
	tex.primitive(529, 103, 0)
	tex.primitive(335, 55, 0)
	tex.primitive(530, 63, 0)
	tex.primitive(408, 84, 0)
	tex.primitive(531, 42, 0)
	tex.primitive(532, 80, 0)
	tex.primitive(533, 66, 0)
	tex.primitive(534, 96, 0)
	tex.primitive(535, 0, 256)
	tex.hash[2621-514].rh = 535
	tex.eqtb[2621-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(536, 98, 0)
	tex.primitive(537, 109, 0)
	tex.primitive(407, 71, 0)
	tex.primitive(352, 38, 0)
	tex.primitive(538, 33, 0)
	tex.primitive(539, 56, 0)
	tex.primitive(540, 35, 0)
	tex.primitive(597, 13, 256)
	tex.parLoc = uint16(tex.curVal)
	tex.parToken = uint16(4095 + int32(tex.parLoc))
	tex.primitive(629, 104, 0)
	tex.primitive(630, 104, 1)
	tex.primitive(631, 110, 0)
	tex.primitive(632, 110, 1)
	tex.primitive(633, 110, 2)
	tex.primitive(634, 110, 3)
	tex.primitive(635, 110, 4)
	tex.primitive(476, 89, 0)
	tex.primitive(500, 89, 1)
	tex.primitive(395, 89, 2)
	tex.primitive(396, 89, 3)
	tex.primitive(668, 79, 102)
	tex.primitive(669, 79, 1)
	tex.primitive(670, 82, 0)
	tex.primitive(671, 82, 1)
	tex.primitive(672, 83, 1)
	tex.primitive(673, 83, 3)
	tex.primitive(674, 83, 2)
	tex.primitive(675, 70, 0)
	tex.primitive(676, 70, 1)
	tex.primitive(677, 70, 2)
	tex.primitive(678, 70, 3)
	tex.primitive(679, 70, 4)
	tex.primitive(735, 108, 0)
	tex.primitive(736, 108, 1)
	tex.primitive(737, 108, 2)
	tex.primitive(738, 108, 3)
	tex.primitive(739, 108, 4)
	tex.primitive(740, 108, 5)
	tex.primitive(757, 105, 0)
	tex.primitive(758, 105, 1)
	tex.primitive(759, 105, 2)
	tex.primitive(760, 105, 3)
	tex.primitive(761, 105, 4)
	tex.primitive(762, 105, 5)
	tex.primitive(763, 105, 6)
	tex.primitive(764, 105, 7)
	tex.primitive(765, 105, 8)
	tex.primitive(766, 105, 9)
	tex.primitive(767, 105, 10)
	tex.primitive(768, 105, 11)
	tex.primitive(769, 105, 12)
	tex.primitive(770, 105, 13)
	tex.primitive(771, 105, 14)
	tex.primitive(772, 105, 15)
	tex.primitive(773, 105, 16)
	tex.primitive(774, 106, 2)
	tex.hash[2618-514].rh = 774
	tex.eqtb[2618-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(775, 106, 4)
	tex.primitive(776, 106, 3)
	tex.primitive(801, 87, 0)
	tex.hash[2624-514].rh = 801
	tex.eqtb[2624-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(898, 4, 256)
	tex.primitive(899, 5, 257)
	tex.hash[2615-514].rh = 899
	tex.eqtb[2615-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(900, 5, 258)
	tex.hash[2619-514].rh = 901
	tex.hash[2620-514].rh = 901
	*tex.eqtb[2620-1].pHh().pB0() = 9
	tex.eqtb[2620-1].pHh().rh = 29989
	*tex.eqtb[2620-1].pHh().pB1() = 1
	tex.eqtb[2619-1] = tex.eqtb[2620-1]
	*tex.eqtb[2619-1].pHh().pB0() = 115
	tex.primitive(970, 81, 0)
	tex.primitive(971, 81, 1)
	tex.primitive(972, 81, 2)
	tex.primitive(973, 81, 3)
	tex.primitive(974, 81, 4)
	tex.primitive(975, 81, 5)
	tex.primitive(976, 81, 6)
	tex.primitive(977, 81, 7)
	tex.primitive(1025, 14, 0)
	tex.primitive(1026, 14, 1)
	tex.primitive(1027, 26, 4)
	tex.primitive(1028, 26, 0)
	tex.primitive(1029, 26, 1)
	tex.primitive(1030, 26, 2)
	tex.primitive(1031, 26, 3)
	tex.primitive(1032, 27, 4)
	tex.primitive(1033, 27, 0)
	tex.primitive(1034, 27, 1)
	tex.primitive(1035, 27, 2)
	tex.primitive(1036, 27, 3)
	tex.primitive(336, 28, 5)
	tex.primitive(340, 29, 1)
	tex.primitive(342, 30, 99)
	tex.primitive(1054, 21, 1)
	tex.primitive(1055, 21, 0)
	tex.primitive(1056, 22, 1)
	tex.primitive(1057, 22, 0)
	tex.primitive(409, 20, 0)
	tex.primitive(1058, 20, 1)
	tex.primitive(1059, 20, 2)
	tex.primitive(965, 20, 3)
	tex.primitive(1060, 20, 4)
	tex.primitive(967, 20, 5)
	tex.primitive(1061, 20, 106)
	tex.primitive(1062, 31, 99)
	tex.primitive(1063, 31, 100)
	tex.primitive(1064, 31, 101)
	tex.primitive(1065, 31, 102)
	tex.primitive(1080, 43, 1)
	tex.primitive(1081, 43, 0)
	tex.primitive(1090, 25, 12)
	tex.primitive(1091, 25, 11)
	tex.primitive(1092, 25, 10)
	tex.primitive(1093, 23, 0)
	tex.primitive(1094, 23, 1)
	tex.primitive(1095, 24, 0)
	tex.primitive(1096, 24, 1)
	tex.primitive(45, 47, 1)
	tex.primitive(349, 47, 0)
	tex.primitive(1127, 48, 0)
	tex.primitive(1128, 48, 1)
	tex.primitive(866, 50, 16)
	tex.primitive(867, 50, 17)
	tex.primitive(868, 50, 18)
	tex.primitive(869, 50, 19)
	tex.primitive(870, 50, 20)
	tex.primitive(871, 50, 21)
	tex.primitive(872, 50, 22)
	tex.primitive(873, 50, 23)
	tex.primitive(875, 50, 26)
	tex.primitive(874, 50, 27)
	tex.primitive(1129, 51, 0)
	tex.primitive(878, 51, 1)
	tex.primitive(879, 51, 2)
	tex.primitive(861, 53, 0)
	tex.primitive(862, 53, 2)
	tex.primitive(863, 53, 4)
	tex.primitive(864, 53, 6)
	tex.primitive(1147, 52, 0)
	tex.primitive(1148, 52, 1)
	tex.primitive(1149, 52, 2)
	tex.primitive(1150, 52, 3)
	tex.primitive(1151, 52, 4)
	tex.primitive(1152, 52, 5)
	tex.primitive(876, 49, 30)
	tex.primitive(877, 49, 31)
	tex.hash[2617-514].rh = 877
	tex.eqtb[2617-1] = tex.eqtb[tex.curVal-1]
	tex.primitive(1171, 93, 1)
	tex.primitive(1172, 93, 2)
	tex.primitive(1173, 93, 4)
	tex.primitive(1174, 97, 0)
	tex.primitive(1175, 97, 1)
	tex.primitive(1176, 97, 2)
	tex.primitive(1177, 97, 3)
	tex.primitive(1191, 94, 0)
	tex.primitive(1192, 94, 1)
	tex.primitive(1193, 95, 0)
	tex.primitive(1194, 95, 1)
	tex.primitive(1195, 95, 2)
	tex.primitive(1196, 95, 3)
	tex.primitive(1197, 95, 4)
	tex.primitive(1198, 95, 5)
	tex.primitive(1199, 95, 6)
	tex.primitive(415, 85, 3983)
	tex.primitive(419, 85, 5007)
	tex.primitive(416, 85, 4239)
	tex.primitive(417, 85, 4495)
	tex.primitive(418, 85, 4751)
	tex.primitive(477, 85, 5574)
	tex.primitive(412, 86, 3935)
	tex.primitive(413, 86, 3951)
	tex.primitive(414, 86, 3967)
	tex.primitive(941, 99, 0)
	tex.primitive(953, 99, 1)
	tex.primitive(1217, 78, 0)
	tex.primitive(1218, 78, 1)
	tex.primitive(274, 100, 0)
	tex.primitive(275, 100, 1)
	tex.primitive(276, 100, 2)
	tex.primitive(1227, 100, 3)
	tex.primitive(1228, 60, 1)
	tex.primitive(1229, 60, 0)
	tex.primitive(1230, 58, 0)
	tex.primitive(1231, 58, 1)
	tex.primitive(1237, 57, 4239)
	tex.primitive(1238, 57, 4495)
	tex.primitive(1239, 19, 0)
	tex.primitive(1240, 19, 1)
	tex.primitive(1241, 19, 2)
	tex.primitive(1242, 19, 3)
	tex.primitive(1285, 59, 0)
	tex.primitive(594, 59, 1)
	tex.writeLoc = uint16(tex.curVal)
	tex.primitive(1286, 59, 2)
	tex.primitive(1287, 59, 3)
	tex.primitive(1288, 59, 4)
	tex.primitive(1289, 59, 5)
	tex.noNewControlSequence = true
}

func (tex *Context) main() {
	tex.history = 3
	rewrite1(tex, &tex.termOut, "TTY:", "/O")
	if tex.readyAlready == 314159 {
		goto label1
	}
	tex.bad = 0
	if (halfErrorLine < 30) || (halfErrorLine > (errorLine - 15)) {
		tex.bad = 1
	}
	if maxPrintLine < 60 {
		tex.bad = 2
	}
	if (dviBufSize % 8) != 0 {
		tex.bad = 3
	}
	if 1100 > 30000 {
		tex.bad = 4
	}
	if 1777 > 2100 {
		tex.bad = 5
	}
	if maxInOpen >= 128 {
		tex.bad = 6
	}
	if 30000 < 267 {
		tex.bad = 7
	}
	if (memMin != 0) || (memMax != 30000) {
		tex.bad = 10
	}
	if (memMin > 0) || (memMax < 30000) {
		tex.bad = 10
	}
	if (0 > 0) || (255 < 127) {
		tex.bad = 11
	}
	if (0 > 0) || (65535 < 32767) {
		tex.bad = 12
	}
	if (0 < 0) || (255 > 65535) {
		tex.bad = 13
	}
	if (memMin < 0) || (memMax >= 65535) || ((-0 - memMin) > 65536) {
		tex.bad = 14
	}
	if (0 < 0) || (fontMax > 255) {
		tex.bad = 15
	}
	if fontMax > 256 {
		tex.bad = 16
	}
	if (saveSize > 65535) || (maxStrings > 65535) {
		tex.bad = 17
	}
	if bufSize > 65535 {
		tex.bad = 18
	}
	if 255 < 255 {
		tex.bad = 19
	}
	if 6976 > 65535 {
		tex.bad = 21
	}
	if 20 > fileNameSize {
		tex.bad = 31
	}
	if (2 * 65535) < 30000-memMin {
		tex.bad = 41
	}
	if tex.bad > 0 {
		writeLn(&tex.termOut, "Ouch---my internal constants have been clobbered!", "---case ", tex.bad, vaWidth(1))
		panic(pasFinalEnd)
	}
	tex.initialize()
	if !tex.getStringsStarted() {
		panic(pasFinalEnd)
	}
	tex.initPrim()
	tex.initStrPtr = tex.strPtr
	tex.initPoolPtr = tex.poolPtr
	tex.fixDateAndTime()
	tex.readyAlready = 314159
label1:
	tex.selector = 17
	tex.tally = 0
	tex.termOffset = 0
	tex.fileOffset = 0
	write(&tex.termOut, "This is TeX, Version 3.141592653")
	if tex.formatIdent == 0 {
		writeLn(&tex.termOut, " (no format preloaded)")
	} else {
		tex.slowPrint(int32(tex.formatIdent))
		tex.printLn()
	}
	break1(&tex.termOut)
	tex.jobName = 0
	tex.nameInProgress = false
	tex.logOpened = false
	tex.outputFileName = 0
	tex.inputPtr = 0
	tex.maxInStack = 0
	tex.inOpen = 0
	tex.openParens = 0
	tex.maxBufStack = 0
	tex.paramPtr = 0
	tex.maxParamStack = 0
	tex.first = bufSize
	for {
		tex.buffer[tex.first] = 0
		tex.first = uint16(int32(tex.first) - 1)
		if tex.first == 0 {
			break
		}
	}
	tex.scannerStatus = 0
	tex.warningIndex = 0
	tex.first = 1
	tex.curInput.stateField = 33
	tex.curInput.startField = 1
	tex.curInput.indexField = 0
	tex.line = 0
	tex.curInput.nameField = 0
	tex.forceEof = false
	tex.alignState = 1000000
	if !tex.initTerminal() {
		panic(pasFinalEnd)
	}
	tex.curInput.limitField = tex.last
	tex.first = uint16(int32(tex.last) + 1)
	if (tex.formatIdent == 0) || (tex.buffer[tex.curInput.locField] == 38) {
		if tex.formatIdent != 0 {
			tex.initialize()
		}
		if !tex.openFmtFile() {
			panic(pasFinalEnd)
		}
		if !tex.loadFmtFile() {
			tex.wClose(&tex.fmtFile)
			panic(pasFinalEnd)
		}
		tex.wClose(&tex.fmtFile)
		for (tex.curInput.locField < tex.curInput.limitField) && (tex.buffer[tex.curInput.locField] == 32) {
			tex.curInput.locField = uint16(int32(tex.curInput.locField) + 1)
		}
	}
	if (tex.eqtb[5311-1].int() < 0) || (tex.eqtb[5311-1].int() > 255) {
		tex.curInput.limitField = uint16(int32(tex.curInput.limitField) - 1)
	} else {
		tex.buffer[tex.curInput.limitField] = byte(tex.eqtb[5311-1].int())
	}
	tex.fixDateAndTime()
	tex.magicOffset = int32(tex.strStart[892]) - (9 * 16)
	if tex.interaction == 0 {
		tex.selector = 16
	} else {
		tex.selector = 17
	}
	if (tex.curInput.locField < tex.curInput.limitField) && (tex.eqtb[3983+int32(tex.buffer[tex.curInput.locField])-1].hh().rh != 0) {
		tex.startInput()
	}
	tex.history = 0
	tex.mainControl()
	tex.finalCleanup()
	tex.closeFilesAndTerminate()
	tex.readyAlready = 0
}

var assets = map[string]string{
	"/texfonts/manfnt.tfm":      "\x01\x13\x00\x12\x00\x00\x00\u007f\x005\x00\x10\x00\x05\x00\t\x00\x12\x00\x0e\x00\x00\x00\b*\xe0=\xbb\x00\xa0\x00\x00\x02PI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MANFNT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea*\xb0\x00\x00)\xa0\x00\x00)\xa0\x00\x00)\xa0\x00\x00)\xa0\x00\x00)\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x0e@\x00\x00\x0e@\x00\x00\x0e@\x00\x00\x0e@\x00\x00\"\x00\x00\x00\"\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x0f\xa0\x00\x00#\xa0\x00\x00\x04\xa0\x00\x00$\x90\x00\x00$\x90\x00\x00&\xa2\x00\x00\x1f`\x00\x00\aP\x00\x00\aP\x00\x00\aP\x00\x00\x1cP\x00\x00&\xb3\x00\x00&\xb3\x00\x00(\xd0\x00\x00(\xd0\x00\x004\xf0\x00\x002\xf0\x00\x000\xf0\x19\f3\xf0\x00\x002\xf0\x01\r3\xf0\x00\x003\xf0\x00\x00%p\x00\x00\x1ap\x00\x00\x17p\x11\b\x1ep\x00\x00\x1ap\x01\t\x1ep\x00\x00\x1ep\x00\x00\x1d\xa0\x00\x00\x1d\xa0\x00\x00!p\x00\x00\x15p\x00\x00\x11p!\x02\x19p\x00\x00\x15p\x01\x03\x19p\x00\x00\x19p\x00\x00\t\xc0\x00\x00\x00\x00\x00\x00\x19p\x00\x00\x18\xe0\x00\x00\v\xe0\x00\x00\x06\xe0\x01\x0e\x15p\x00\x00\x15p\x01\x01\x10\xe0\x00\x00\v\xe0\x01\x0f\x10\xe0\x00\x00\x10\xe0\x00\x001p\x00\x00.p\x00\x00!p\x00\x00\x19p\x00\x00\x19p\x00\x00\x01\x10\x00\x00\x01\x10\x00\x00\x030\x00\x00\x030\x00\x00\x11p\r\x00,p\x15\x10/p\x00\x00.p\x01\x11-\x00\x00\x00'\x00\x00\x00\b\x00\x00\x00- \x00\x00\x1bP\x00\x00\rP\x00\x00\nP\x1d\n\x14P\x00\x00\x05\xa1\x00\x00&d\x00\x00&d\x00\x00&d\x00\x00&d\x00\x00\rP\x01\v\x14P\x00\x00\x14P\x00\x00 `\x00\x00\x12`\x00\x00\f`\t\x04\x16`\x00\x00\x12`\x01\x05\x16`\x00\x00\x16`\x00\x00\x1bP\x00\x00\rP\x00\x00\nP\x05\x06\x14P\x00\x00\rP\x01\a\x14P\x00\x00\x14P\x00\x00/p\x00\x00/p\x00\x00\a\x80\x00\x00+\xb3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00*\xb0\x00\x00*\xb0\x00\x00\x00\x00\x00\x00\x00\x01\x99{\x00\x0333\x00\x04\xccr\x00\x05\x99\xa0\x00\x06\x00\x00\x00\a\xff\xf8\x00\b\x00\x00\x00\b\x00\x02\x00\b\rm\x00\b8j\x00\b\x88\x80\x00\b\xab&\x00\bͰ\x00\b\xe3\x8d\x00\b\xe3\x8e\x00\t\x11\b\x00\t>\x92\x00\tP\xd0\x00\tUU\x00\tb\xf6\x00\t\xf4\x9d\x00\t\xf6z\x00\nF\x85\x00\n\xaa\xa0\x00\n\xaa\xa8\x00\v\x01\x1d\x00\v\"\xca\x00\vPP\x00\v`\xb6\x00\v\xbb\xb5\x00\v\xbb\xc2\x00\v\xe7v\x00\f\xcc\xca\x00\f\xcc\xcd\x00\f\xcc\xd0\x00\rUX\x00\r\xeb}\x00\x10\x00\x00\x00\x10\xe3\x92\x00\x11\x99\x9a\x00\x168\xe3\x00\x168\xe8\x00\x18\x00\x00\x00\x19\x99\x92\x00\x19\xc7\"\x00\x1b\xbb\xb3\x00\x1d\xdd\xd5\x00\"K\x96\x00$D:\x00$\xe2V\x00'y\x16\x00/=V\x00\x00\x00\x00\x00\x01\x99{\x00\x0333\x00\x04\xccr\x00\x06\xaa\xaa\x00\a\xd7\v\x00\b\xb8P\x00\t\x99\x9b\x00\n\x00\x00\x00\n\xaa\xa8\x00\v'\xd2\x00\f\x00\x00\x00\f\xcc\xcd\x00\x11\x99\x9a\x00(\x00\x00\x00,q\xc6\x00\x00\x00\x00\x00\x02\"\"\x00\x0333\x00\x04\x00\x00\x00\a33\x00\x00\x00\x00\x00\x00J\xa3\x00\x00R\xd5\x00\x00[\x06\x00\x00]M\x00\x01\x11\x12\x00\x01K`\x00\x02|c\x00\x02\xc1m\x80A\x80\x00\x80O\x80\x01\x80;\x80\x00\x80=\x80\x01\x80k\x80\x02\x80m\x80\x03\x80r\x80\x04\x80t\x80\x05\x802\x80\x06\x804\x80\a\x80_\x80\x04\x80f\x80\x05\x80+\x80\b\x80-\x80\t\x80G\x80\n\x80I\x80\v\x80V\x80\f\x80v\x80\r\xff\xff\xa4\xfa\xff\xffI\xf5\xff\xff\xad+\xff\xffZV\xff\xff\xb5]\xff\xffj\xba\xff\xff\xa2\xb3\xff\xffEh\xff\xfe\xb4\xa0\xff\xfdi@\xff\xff\xbb\xbb\xff\xffwx\xff\xfe\xee\xee\xff\xfd\xdd\xde\x00\x00\x00\x00\x00\x04#\x83\x00\x01\xf0\xfd\x00\x01KS\x00\x00\x00\x00\x00\v\xe7v\x00\x00\x00\x00\x00\x01\x99\x9a",
	"/texfonts/slantlj4.tfm":    "\x00a\x00\x12\x00\x01\x00\x1e\x00\x1f\x00\x02\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\x85\xa8\xdc\xd6\x01\x00\x00\x00\aGFSLANT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bSLANTLJ4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\x01\x10\x00\x00\x02\x10\x00\x00\x03\x10\x00\x00\x04\x10\x00\x00\x05\x10\x00\x00\x06\x10\x00\x00\a\x10\x00\x00\b\x10\x00\x00\t\x10\x00\x00\n\x10\x00\x00\v\x10\x00\x00\f\x10\x00\x00\r\x10\x00\x00\x0e\x10\x00\x00\x0f\x10\x00\x00\x10\x10\x00\x00\x11\x10\x00\x00\x12\x10\x00\x00\x13\x10\x00\x00\x14\x10\x00\x00\x15\x10\x00\x00\x16\x10\x00\x00\x17\x10\x00\x00\x18\x10\x00\x00\x19\x10\x00\x00\x1a\x10\x00\x00\x1b\x10\x00\x00\x1c\x10\x00\x00\x1d\x10\x00\x00\x1e\x10\x00\x00\x00\x00\x00\x00\x00\x00\x0fk\x00\x00\x1e\xd6\x00\x00.A\x00\x00=\xac\x00\x00M\x17\x00\x00\\\x82\x00\x00k\xed\x00\x00{X\x00\x00\x8a\xc3\x00\x00\x9a.\x00\x00\xa9\x99\x00\x00\xb9\x04\x00\x00\xc8o\x00\x00\xd7\xda\x00\x00\xe7E\x00\x00\xf6\xb0\x00\x01\x06\x1b\x00\x01\x15\x86\x00\x01$\xf1\x00\x014\\\x00\x01C\xc7\x00\x01S2\x00\x01b\x9d\x00\x01r\b\x00\x01\x81s\x00\x01\x90\xde\x00\x01\xa0I\x00\x01\xaf\xb4\x00\x01\xbf\x1f\x00\x01Ί\x00\x00\x00\x00\x00\a:(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ff",
	"/texfonts/blackcx.tfm":     "\x00\xb0\x00\x12\x00\x00\x00z\x00\x05\x00\x03\x00\f\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\x1a\x02\x88\x03\x00{W\x00\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\aBLACKCX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x03 \x00\x00\x01\x10\x00\x00\x01\x11\x00\x00\x01\x11\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x02y\x02\x1b\x02z\x04\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x02\x00\b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\b\x00\x00\x00\n\x00\x00\x00\f\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00",
	"/texfonts/cmff10.tfm":      "\x01K\x00\x12\x00\x00\x00\u007f\x000\x00\x0e\x00\v\x00\x01\x00X\x00\n\x00\x00\x00\a\x8d\x15\x1b\xeb\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMFF\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x1b\xa0\x00\x00*\xa0\x00\x00'\xa0\x00\x00\x1a\xa0\x00\x00\x1d\xa0\x00\x00\x1a\xa0\x00\x00#\xa0\x00\x00'\xa0\x00\x00#\xa0\x00\x00'\xa0\x00\x00#\xa0\x00\x00\x18\x90\x01\n\x17\x90\x00\x00\x17\x90\x00\x00+\x90\x00\x00+\x90\x00\x00\x02P\x00\x00\x05X\x00\x00\x12\x90\x00\x00\x12\x90\x00\x00\x12p\x00\x00\x12\x90\x00\x00\x12\x80\x00\x00\x1e\x90\x00\x00\r\a\x00\x00\x11\x90\x00\x00#P\x00\x00'P\x00\x00\x12\xb5\x00\x00,\xa0\x00\x00.\xa0\x00\x00'\xd3\x00\x00\x02P\x01\x00\x01\x90\x01\x17\x12\x90\x00\x00*\x99\x00\x00\x12\xc2\x00\x00*\xc2\x00\x00%\x90\x00\x00\x03\x90\x01\x12\n\xca\x00\x00\n\xca\x00\x00\x12\xc0\x00\x00'D\x00\x00\x03\x16\x00\x00\bP\x01\x15\x03\x10\x00\x00\x12\xca\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x12`\x00\x00\x03P\x00\x00\x03V\x00\x00\x018\x00\x00'!\x00\x00\x0e8\x00\x00\x0e\x90\x01\x18'\x90\x00\x00 \xa0\x01L\x1f\xa0\x00\x00#\xa0\x00\x00$\xa0\x015\"\xa0\x00\x00\x1f\xa0\x01$&\xa0\x00\x00\x1a\xa0\x00\x00\x06\xa0\x01W\x0f\xa0\x00\x00#\xa0\x01*\x1b\xa0\x01R(\xa0\x00\x00\x1a\xa0\x00\x00*\xa0\x015\x1b\xa0\x01\x1e*\xa6\x00\x00\"\xa0\x01L\x16\xa0\x00\x00'\xa0\x01.\x1c\xa0\x00\x00 \xa0\x01$-\xa0\x01$ \xa0\x01* \xa0\x01/\x19\xa0\x00\x00\x04\xca\x00\x00\x12\x90\x00\x00\x04\xca\x00\x00\x12\x90\x00\x00\x03\x90\x00\x00\x03\x90\x01\x11\x10P\x01H\x15\x90\x01B\rP\x01@\x15\x90\x00\x00\rP\x00\x00\a\x90\x01\x02\x12X\x01V\x15\x90\x01:\x02\x90\x00\x00\x05\x98\x00\x00\x14\x90\x01\x19\x02\x90\x00\x00)P\x01:\x15P\x01:\x12P\x01B\x15X\x01B\x13X\x00\x00\tP\x00\x00\vP\x00\x00\n\x90\x01J\x15P\x01K\x14P\x01\x19!P\x01\x1a\x14P\x00\x00\x14X\x01\x1f\fP\x00\x00\x12P\x01\x16/P\x00\x00\x12\x90\x00\x00\x12\x90\x00\x00\x12\x90\x00\x00\x00\x00\x00\x00\x00\x03\x05\xb0\x00\x03wx\x00\x03\xbb\xbb\x00\x03\xc7\x1d\x00\x03\xd2~\x00\x04\x16\xc0\x00\x04\x16\xc2\x00\x04q\xc6\x00\x05\x05\xb0\x00\x05'\xd2\x00\x05:\x06\x00\x05\xcc\xcb\x00\x05\xdd\xdd\x00\x068\xe3\x00\x06fe\x00\x06q\xc6\x00\x06q\xc8\x00\x06\x93\xe8\x00\x06\xaa\xaa\x00\x06\xaa\xab\x00\a\x05\xb0\x00\aI\xf3\x00\aUU\x00\a\xd2}\x00\a\xff\xfe\x00\b[\x03\x00\b\x88\x86\x00\b\xb6\b\x00\b\xb6\n\x00\b\xe3\x8b\x00\b\xe3\x8d\x00\t\x11\x0e\x00\t'\xd2\x00\t>\x92\x00\tl\x15\x00\t\x99\x98\x00\t\xff\xfe\x00\n\v^\x00\n\" \x00\n}%\x00\n\x93\xe8\x00\n\xd8+\x00\v\x11\x10\x00\v`\xb3\x00\f\x9fF\x00\f\xcc\xca\x00\r'\xd0\x00\x00\x00\x00\x00\x01'\xd3\x00\x04\xf4\x9e\x00\x05UV\x00\x06\xb6\n\x00\bq\xc6\x00\tUU\x00\tq\xc8\x00\t\x9e%\x00\t\xc7\x1d\x00\n\x00\x00\x00\n\xaa\xaa\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\x00\x00\x11\x12\x00\x00\xe3\x8e\x00\x01\x1cr\x00\x01\xd2}\x00\x028\xe3\x00\x03\x1cr\x00\x03\xe3\x8e\x00\x04q\xc6\x00\x04\xe3\x90\x00\x05\xc7\x1d\x00\x00\x00\x00\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfc\x88\x88\xff\xfc8\xe3\x00\x00\xe3\x8e\x00\x01l\x16\xff\xffI\xf5\xff\xff\xa4\xfa\xff\xfe\xee\xee\xff\xfe\x93\xea\x00\x00[\x06\x00\x00\xb6\v\xff\xfef`\x00\x04q\xc6\x00\x02\"\"\x00\x01l\x16\x00\bq\xc6\x00\r'\xd0\x00\x01l\x16",
	"/texfonts/cmmi7.tfm":       "\x01~\x00\x12\x00\x00\x00\u007f\x00b\x00\x0f\x00\t\x00 \x00:\x00\f\x00\x00\x00\x060e\x97r\x00p\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf08\xb0q\x1d\\\xb0\x01'Q\xb0\x15\x18I\xb0\x01'M\xb0M\x18Y\xb0Q\x10S\xb05\x184\xb0q\fE\xb0\x01\x18=\xb0i\bR\xb0)\x18B@\x01\x03+\xc7-\x18%G<\x00\x10\xc0!\t\v@\x01\v\x11\xc7A\x18!G\x1d\v\x18\xc0\x15\x18\x05@\x01\v/@\x00\x005\xc0\x00\x009G\x01\x03\x1e@E\x01\x11\xc7\x19!.@\x1c\x00#G\x01\x18-@\x1d/\x13@m\x01*@\x1d\x036\xc7\x01\x18<G\x01\vD\xc7\x1d!>@\x1c\x00\x16@\x01\x187\xc0\x01\x18[@\x14\x00#G\x01\x18\aFU\x18CG\x01\x18a2\x00\x00a2\x00\x00a2\x00\x00a2\x00\x00\x01d\x00\x00\x01d\x00\x00 S\x00\x00 S\x00\x00 @\x00\x00 @\x00\x00 @\x00\x00 G\x00\x00 G\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Uu\x00\x00 \xe8\x014Uu\x00\x00 S\x00\x00'\xc0=\x18N\xb0\x01\"P\xb0)\x18J\xb0I\x15X\xb0\x15\vL\xb05\x18?\xb0q\x1dT\xb0\x01\x18Y\xb0Q\x10\x0e\xb0Y!)\xb0]+]\xb0I\bH\xb0\x01\x03`\xb0a\x19W\xb0a\x14Q\xb0\x15\x18@\xb0q\x1dV\xb7\x01\x18O\xb0\x05\x18:\xb01\x192\xb0q\x15F\xb0a\x041\xb0y1_\xb0q1Z\xb0Y\x140\xb0y1G\xb0I\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00a!\x00\x00a!\x00\x00\f\xc0\x01!(@\x00\x00\r\xc0\x00\x00\x0f@\x01\v$\xc0\x01#\x17@\x01\v\x1a\xc7e(\x1bG\x1d\x03/\xc0\x01\x00\x04\xa0\x00\x00\n\xa79/&\xc0\f\x00\x02\xc0\t\x18^@\x00\x00;@\x00\x00\x1c@\x01\v\"G\x01\x18\x12G\x1d\x18\x14@\x15\t\x15@\x01\v\x06\x80\x01\x183@\x01\x03\x1d@\x1d\x03K@\x11\x18,@\x01\x03\x1fG\x1d\v\x19@%\v\x03@\x01\x03\bG\x01\x18AG\x01! \xd0t\x00\x01\xc0|\x00\x00\x00\x00\x00\x00\x05m\xb9\x00\x05\xc7\xcb\x00\x06`\xde\x00\x06w\x8b\x00\x06þ\x00\x06\xe7\xa2\x00\a\a\x1e\x00\a\x12P\x00\ae\x99\x00\a\x90G\x00\a\x9eI\x00\a\xa6\xa0\x00\b\t\xc2\x00\b\x19\xd2\x00\b+'\x00\bN\xd7\x00\bQG\x00\b`\xa9\x00\bm\xee\x00\b|\xa2\x00\b\xa0\x85\x00\b\xa2\xc0\x00\b\xac\x1b\x00\b\xb4\xd2\x00\b\xbb\xa0\x00\b\xe9\xae\x00\b\xea\xd2\x00\t\x05\xb2\x00\t$\x97\x00\t*\x02\x00\tE\x1b\x00\t]y\x00\tj\xe5\x00\tl+\x00\t{\xc0\x00\t\x83\xe0\x00\t\x99\xe9\x00\t\xb7\x8e\x00\t\xc2\xd9\x00\t\xea%\x00\n\x1c\xdb\x00\n \x87\x00\n]G\x00\n]y\x00\n\x97\x85\x00\n\xb0P\x00\n\xb3~\x00\n\xbe\x9b\x00\n\xcb2\x00\n\xcb\xcb\x00\nΗ\x00\n\xd7^\x00\n\xd7b\x00\n\xfd\x92\x00\v\t\xa5\x00\v\x19\x9e\x00\v\x1d'\x00\v9P\x00\vL\x8e\x00\vk\xb2\x00\vx^\x00\v\x83\xd0\x00\v\x97\x97\x00\v\xa3)\x00\v\xae\x8b\x00\v\xe2\x05\x00\f\x05\xb5\x00\f\x18g\x00\fQG\x00\fs\x95\x00\ft;\x00\f\x8a.\x00\f\xc3\x12\x00\r\x1c7\x00\r9\x15\x00\rkK\x00\r\x83\x10\x00\r\xbf\x02\x00\r\xc5\x0e\x00\rϒ\x00\r\xe7\"\x00\x0e\x14\xa5\x00\x0e.W\x00\x0e;\x17\x00\x0eI)\x00\x0ee\x1b\x00\x0ezU\x00\x0e\xf1\xf5\x00\x0e\xf8N\x00\x0e\xfdb\x00\x0f3\a\x00\x0fE\x19\x00\x0f[\xde\x00\x108>\x00\x110\xc9\x00\x11n%\x00\x128\xe9\x00\x00\x00\x00\x00\x01\xd7^\x00\x05\xb8\xe5\x00\x06%0\x00\x06\xe3\x8e\x00\aq\xc7\x00\a\xe6\xe5\x00\t5\xf7\x00\t\xd7^\x00\nO\xa5\x00\n\x96Y\x00\n\xee\xf0\x00\v\x1cr\x00\v\u007f\xeb\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe5\xff\xfe%0\xff\xffq\xc7\xff\xff\xe6\xe5\x00\x015\xf7\x00\x01\x8e9\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x14\xf9\x00\x00\x17\xb7\x00\x00b\xe0\x00\x00n9\x00\x00}\xf9\x00\x00\x8b\xae\x00\x00\x92\xf7\x00\x00\x94\x85\x00\x00\xa7\xf5\x00\x00\xc7i\x00\x00\xd2~\x00\x00\xdf\xe5\x00\x00\xe1\x1e\x00\x00\xec\xb2\x00\x00\xfb\xf0\x00\x01\t\xa5\x00\x01\x10\xf0\x00\x01\x1e\xe0\x00\x011\xc7\x00\x019I\x00\x01:\xeb\x00\x01>`\x00\x01\x82p\x00\x01\xb7B\x00\x01\xcb.\x00\x01\xd4\xd9\x00\x01\xd9i\x00\x02u\xd9\x00\x02v\v\x00\x03\xef\xc0\x00\aeՀ\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\t\x00Z\x80\x01\x00j\x80\x03\x00f\x80\n\x80\u007f\x80\v\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\v\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\v\x00;\x80\x01\x80:\x80\x01\x00;\x80\n\x00:\x80\n\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\t\x80Z\x80\x01\xff\xff\x82\a\xff\xff\x04\x10\x00\x00}\xf9\xff\xfe\b \x00\x00\xfb\xf2\xff\xfe\x86\x17\x00\x01y\xeb\x00\x01\xf7\xe5\x00\x02u\xde\x00\x00\xfb\xf0\xff\xfd\f0\x00\x02\xf3\xd7\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x12\xba\xf2",
	"/texfonts/cmr8.tfm":        "\x01C\x00\x12\x00\x00\x00\u007f\x00#\x00\x10\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a|{Y\a\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x10\xc0\x00\x00\x1d\xc0\x00\x00\x1b\xc0\x00\x00\x14\xc0\x00\x00\x12\xc0\x00\x00\x18\xc0\x00\x00\x16\xc0\x00\x00\x1b\xc0\x00\x00\x16\xc0\x00\x00\x1b\xc0\x00\x00\x16\xc0\x00\x00\x0e\xd0\x11\n\r\xd0\x00\x00\r\xd0\x00\x00\x1d\xd0\x00\x00\x1d\xd0\x00\x00\x010\x00\x00\x028\x00\x00\n\xd0\x00\x00\n\xd0\x00\x00\n\x90\x00\x00\n\xd0\x00\x00\n`\x00\x00\x18\xd0\x00\x00\b\x06\x00\x00\n\xd0\x00\x00\x160\x00\x00\x1b0\x00\x00\nT\x00\x00\x1e\xc0\x00\x00!\xc0\x00\x00\x1b\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\n\xd0\x00\x00\x1d\xd7\x00\x00\n\xf3\x00\x00\x1d\xf3\x00\x00\x1b\xd0\x00\x00\x01\xd0\x01\x12\x05\xf9\x00\x00\x05\xf9\x00\x00\n\xf0\x00\x00\x1bu\x00\x00\x01\x18\x00\x00\x030\x01\x15\x01\x10\x00\x00\n\xf9\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x01H\x00\x00\x1b!\x00\x00\tH\x00\x00\t\xd0\x01\x18\x1b\xd0\x00\x00\x18\xc0\x01L\x15\xc0\x00\x00\x16\xc0\x00\x00\x19\xc0\x015\x13\xc0\x00\x00\x11\xc0\x01$\x1c\xc0\x00\x00\x18\xc0\x00\x00\x04\xc0\x01W\v\xc0\x00\x00\x1a\xc0\x01*\x10\xc0\x01R\x1f\xc0\x00\x00\x18\xc0\x00\x00\x1b\xc0\x015\x13\xc0\x01\x1e\x1b\xc8\x00\x00\x17\xc0\x01L\r\xc0\x00\x00\x16\xc0\x01.\x18\xc0\x00\x00\x18\xc0\x05$\"\xc0\x05$\x18\xc0\x01*\x18\xc0\t/\x0f\xc0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\n0\x01H\r\xd0\x01B\b0\x01@\r\xd0\x00\x00\b0\x00\x00\x02\xd0\x11\x02\n8\x05V\r\xd0\x01:\x01\xb0\x00\x00\x02\xb8\x00\x00\f\xd0\x01\x19\x01\xd0\x00\x00\x1d0\x01:\r0\x01:\n0\x01B\r8\x01B\f8\x00\x00\x060\x00\x00\a0\x00\x00\x05\x80\x01J\r0\x01K\f0\x05\x19\x160\x05\x1a\f0\x00\x00\f8\x05\x1f\b0\x00\x00\n0\r\x16 0\f\x00\n\xd0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\x00\x00\x00\x00\x00\x04\xb8\xe8\x00\x051\xcc\x00\x05\xaa\xb0\x00\x06\x1fP\x00\x06\x9cx\x00\x06\xa0\x06\x00\x06\xb4\xa6\x00\a\x8e@\x00\b\a$\x00\b\x80\b\x00\b\xbaX\x00\b\xf8\xec\x00\tq\xd0\x00\t\xea\xb4\x00\nc\x98\x00\n\x9d\xe8\x00\v\x16\xcc\x00\vU`\x00\v\x8f\xb0\x00\v\xca\x00\x00\f\b\x94\x00\fG(\x00\f\x81x\x00\f\xbb\xc8\x00\f\xfa\\\x00\r4\xac\x00\r8\xf0\x00\rV\x18\x00\x0e*\xb8\x00\x0fV\xd0\x00\x0f\x91 \x00\x11\x00\x10\x00\x11:`\x00\x11t\xb0\x00\x00\x00\x00\x00\x01\xc7\x1c\x00\x06\f<\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t-\x82\x00\t\xaa\xb0\x00\t\xd7^\x00\n\x0e:\x00\nO\xa6\x00\n\xba\xec\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\n\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\f<\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xaa\xb0\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00<r\x00\x00l\xce\x00\x00x\xe4\x00\x01C\x8e\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfbG\x18\xff\xfa\x93\xe4\x00\x01C\x8e\x00\x01\xe3\x90\xff\xff\x0e8\xff\xff\x87\x1c\xff\xfe\x95T\xff\xfe\x1cp\x00\x00x\xe4\x00\x00\xf1\xc8\x00\x00\x00\x00\x00\x05\xaa\xb0\x00\x02\xd5X\x00\x01\xe3\x90\x00\x06\xe3\x8e\x00\x11\x00\x10\x00\x01\xe3\x90",
	"/texfonts/cmssqi8.tfm":     "\x01v\x00\x12\x00\x00\x00\u007f\x006\x00\x0f\x00\b\x004\x00N\x00\b\x00\x00\x00\a\x9d\x05\x02\x01\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMSSQI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x17\xa0\xb4\x001\xa0\x00\x00-\xa0L\x00\x19\xa0\x00\x00$\xa0\xac\x00!\xa0P\x00*\xa0\xa4\x00-\xa0x\x00*\xa0,\x00-\xa0x\x00*\xa0\\\x00\x18\xb0\xcd\n\x15\xb0\x8c\x00\x15\xb0\x80\x00/\xb0\x8c\x00/\xb0\x80\x00\x0108\x00\x0268\x00\x13\xb0\x00\x00\x13\xb0t\x00\x13`p\x00\x13\xb0d\x00\x13p\x84\x00'\xb0\x00\x00\x0e\x04\x00\x00\x12\xb0t\x00*0X\x00-0X\x00\x13S$\x002\xa0\xa4\x004\xa0\xa4\x00-\xd2L\x00\x010\x01\x00\x06\xb0=\x17\x13\xb0\x00\x001\xb5@\x00\x13\xe3\x98\x001\xe3\x14\x00+\xb04\x00\x04\xb0E\x12\f\xe7\xb0\x00\f\xe7\x18\x00\x13\xe0\xa0\x00-\xc6\x18\x00\x04\x16\x00\x00\b0\r\x15\x04\x10\x00\x00\x13\xe7\xb0\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x13\x80\x98\x00\x040\b\x00\x046\b\x00\x06F\x1c\x00-!@\x00\x11F\x00\x00\x11\xb0\xa9\x18$\xb0T\x00\x1f\xa0\x01B#\xa0\\\x00\x1e\xa0\xa4\x00(\xa0M4\x1c\xa0\xa4\x00\x1a\xa0\xb5#$\xa0\xa4\x00!\xa0P\x00\x03\xa0\xb5M\x10\xa0P\x00&\xa0\xa5)\x17\xa0\x01H0\xa0P\x00!\xa0P\x00,\xa0M4\x1d\xa0]\x1d,\xa6L\x00\"\xa0\\\x00\x16\xa0h\x00)\xa0\xb5- \xa0P\x00\x1f\xa0\xc5#3\xa0\xc5#\x1f\xa0\xb5)\x1f\xa0\xc9.\x1b\xa0\xa4\x00\x05\xe7\xc0\x00\x13\xb0\xbc\x00\x05\xe7H\x00\x13\xb0`\x00\x04\xb0D\x00\x04\xb0E\x11\x110\x05?\x14\xb0!9\x0e0\x90\x00\x14\xb0\x80\x00\x0e0X\x00\a\xb0\xcd\x02\x1469L\x14\xb0\x10\x00\x01\xb0\x8c\x00\x02\xb6\x80\x00\x12\xb0\x91\x19\x01\xb0\x80\x00.0\x10\x00\x140\x10\x00\x130m9\x146)9\x1468\x00\t0\xb8\x00\v0\x88\x00\n\x90}@\x1409A\x0f0\xb8\x00%0\xb9\x19\x0f0\x9c\x00\x0f6\xb9\x1e\r0\x9c\x00\x130\x95\x1650\x94\x00\x13\xb0t\x00\x13\xb0t\x00\x13\xb00\x00\x00\x00\x00\x00\x00\x04q\xca\x00\x05\x00\x04\x00\x05\x1ct\x00\x05\x8e:\x00\x05\xa3\x90\x00\x05\xaa\xac\x00\x06\x1ct\x00\x06\xaa\xac\x00\x06\xaa\xae\x00\a8\xe4\x00\a\xaa\xac\x00\a\xc7\x1e\x00\b\x9ct\x00\b\xe3\x90\x00\b\xe3\x92\x00\t8\xe6\x00\tq\xca\x00\tq\xcc\x00\n\x00\x02\x00\n\x00\x04\x00\n\x8e<\x00\v\x1ct\x00\vUX\x00\v\xaa\xae\x00\v\xc7 \x00\v\xe3\x92\x00\f8\xe6\x00\fq\xca\x00\f\x8e<\x00\f\xc7 \x00\f\xe3\x92\x00\f\xf1\xcc\x00\r\x00\x04\x00\r\x0e<\x00\r\x1cv\x00\rUX\x00\rUZ\x00\rq\xcc\x00\r\xad\x1a\x00\x0e8\xe8\x00\x0eUX\x00\x0eq\xca\x00\x0f\x00\x04\x00\x0fq\xca\x00\x0f\x8e<\x00\x0f\x8e>\x00\x10\x1cv\x00\x10UZ\x00\x10\xaa\xae\x00\x11\x00\x04\x00\x12q\xcc\x00\x138\xe8\x00\x14\x00\x04\x00\x00\x00\x00\x00\x01\x8e8\x00\x06\xe0\x00\x00\bUV\x00\b\xe3\x8e\x00\tq\xc8\x00\nj\xac\x00\n\u007f\xfe\x00\n\x8e8\x00\n\xb6\xe0\x00\n\xf1\xc8\x00\v\x1cr\x00\v\x1ct\x00\v\x80\x02\x00\f8\xe4\x00\x00\x00\x00\xff\xfd\xfcp\x00\x00\x8e:\x00\x01\x1cr\x00\x01\xf1\xc8\x00\x028\xe0\x00\x028\xe4\x00\x03UT\x00\x00\x00\x00\x00\x001B\x00\x00S\xac\x00\x00T\x80\x00\x00T\x88\x00\x00c\x9c\x00\x00c\x9e\x00\x00c\xac\x00\x00i\xd6\x00\x00\x90\"\x00\x00\x94\x80\x00\x00\x9b\x8a\x00\x00\xa3\xb6\x00\x00\xa9\x00\x00\x00\xbeV\x00\x00ܘ\x00\x00\xe7\xde\x00\x00\xea\xd2\x00\x01\x03\xba\x00\x01\x12\xa6\x00\x01\x13\x86\x00\x01\x18\xfe\x00\x01)\xde\x00\x010l\x00\x011T\x00\x011\xee\x00\x017\x16\x00\x01=j\x00\x01=\xec\x00\x01@(\x00\x01N4\x00\x01S\xae\x00\x01U|\x00\x01f\x02\x00\x01p\x1e\x00\x01y\n\x00\x01\x8c\x90\x00\x01\xa6x\x00\x01\xb0$\x00\x01\xb7:\x00\x01ú\x00\x01\xc5N\x00\x01\xe3\xae\x00\x01\xef\xfa\x00\x02\n\xd6\x00\x02\fl\x00\x02\f\x90\x00\x02@(\x00\x02\x99\x10\x00\x02\x9a\xa4\x00\x02ӈ\x00\x03\xc0(\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfb\x8e6\xff\xfb8\xe0\x00\x01c\x8e\x00\x028\xe4\xff\xffq\xc6\xff\xfeUT\x00\x00\x8e:\xff\xfd\xc7\x1c\x00\x03f\xa0\x00\x06\xaa\xac\x00\x03UV\x00\x028\xe4\x00\bUV\x00\x14\x00\x04\x00\x028\xe4",
	"/texfonts/cmti10.tfm":      "\x01r\x00\x12\x00\x00\x00\u007f\x00)\x00\x10\x00\n\x00:\x00M\x00\t\x00\x00\x00\a\xfd\x00':\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x12\xc0\xa8\x00 \xc0\x00\x00\x1c\xc0T\x00\x16\xc0\x00\x00\x14\xc0\xc4\x00\x1a\xc0\xd0\x00\x18\xc0\x94\x00\x1c\xc0\x84\x00\x18\xc0\x1c\x00\x1c\xc0\x84\x00\x18\xc0h\x00\x11\xd8\xe5\b\x0f\xd8l\x00\x10\xd8l\x00\"\xd8l\x00$\xd8l\x00\x0208\x00\x038\f\x00\v\xd0\x00\x00\v\xd0`\x00\v\x80@\x00\vЀ\x00\v`l\x00!\xd0\x00\x00\b\x06\x00\x00\x0e\xd8t\x00\x1800\x00\x1800\x00\vUL\x00#\xc0\x94\x00&\xc0\x94\x00\x1c\xe2T\x00\x010\x01\x0f\x02Х\x17\f\xd0,\x00 \xd7$\x00\x1e\xd0\x00\x00 \xf3\xb0\x00\x1c\xd0`\x00\x02Х\x12\x06\xf9\xcc\x00\x06\xf9\b\x00\v\xf0\xc0\x00\x1cd\b\x00\x02\x18\x00\x00\x040\x05\x15\x02\x10\x00\x00\v\xf9\xcc\x00\v\x90\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x98\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x98\xac\x00\v\x90\xac\x00\v\x90\xac\x00\x020\x18\x00\x028\x18\x00\x02H4\x00\x1c!$\x00\vH\x00\x00\vН\x18\x1c\xd0\\\x00\x1a\xc0\x010\x17\xc0h\x00\x18\xc0\xbc\x00\x1b\xc0U+\x15\xc0\x94\x00\x13\xc0\xa9\x1a\x1f\xc0D\x00\x1a\xc0\xd0\x00\x05\xc0\xc8\x00\r\xc0\xb4\x00\x1d\xc0\xbd \x12\xc0\x01A%\xc0\xd0\x00\x1a\xc0\xd0\x00\x1c\xc0U+\x15\xc0i*\x1c\xc8T\x00\x19\xc0\x110\x0f\xc0\x90\x00\x18\xc0\xa9$\x1a\xc0\xd0\x00\x1a\xc0\xd9\x1a'\xc0\xd9*\x1a\xc0\xc9 \x1a\xc0\xe1%\x11\xc0\xbc\x00\x02\xf9\xdc\x00\f\xd0\xd4\x00\x02\xf9x\x00\v\xd0(\x00\x02\xb0\x8c\x00\x02Х\x11\v08\x00\b\xd0!E\b0\x15E\v\xd0m\x19\b01E\x02\xd8\xe5\x00\b8H\x00\v\xd08\x00\x02\xa0d\x00\x02\xa8\xb8\x00\b\xd0|\x00\x01\xd0m\x19 08\x00\x0f09L\v0!E\v8!E\b8H\x00\a0}E\x060<\x00\x03pX\x00\x0e08\x00\b0|\x00\x140}\x19\t0\x98\x00\n8H\x00\x060\xa0\x00\v0Q\x16(0P\x00\vМ\x00\v\xb0\x88\x00\v\xb0p\x00\x00\x00\x00\x00\x00\x04\x16\xc0\x00\x04\xe8\x1a\x00\x05P\xc6\x00\x05\xb9s\x00\x06+:\x00\x06\x8a\xcd\x00\x06\xbf#\x00\a\\&\x00\al\x15\x00\a\xc4\xd3\x00\b-\x80\x00\b;(\x00\bfc\x00\b\x96-\x00\b\xfe\xda\x00\tg\x86\x00\t\xd03\x00\n\t\x16\x00\nq\xc3\x00\n\xa1\x8d\x00\n\xdap\x00\v\x13S\x00\vC\x1d\x00\vr\xe6\x00\v\xab\xca\x00\v\xe4\xad\x00\f\x14v\x00\fD@\x00\fMZ\x00\fN5\x00\f`\xb2\x00\r\x15\x9a\x00\rL\xf8\x00\x0e\x1bJ\x00\x0e\x1f\xd6\x00\x0eO\xa0\x00\x0eX\xba\x00\x0f\u008a\x00\x0f\xfbm\x00\x10[\x00\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\b\xfc\x95\x00\t\xd7^\x00\n\x0e:\x00\nO\xa5\x00\n|Z\x00\n\xaf\x8d\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x00\xe8\x1a\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00s\xc5\x00\x00\x97S\x00\x00\x99\b\x00\x00\x9ep\x00\x00\xe7\x8a\x00\x00\xee^\x00\x00\xf52\x00\x01\x02\x8e\x00\x01\x0f\x02\x00\x01\x108\x00\x01\x1d\"\x00\x013\xc5\x00\x015{\x00\x01:8\x00\x01P6\x00\x01S\xc6\x00\x01eC\x00\x01jb\x00\x01x\x9b\x00\x01y(\x00\x01\x81#\x00\x01\x84\x8d\x00\x01\x89\x1a\x00\x01\x8d\x16\x00\x01\xa1^\x00\x01\xa4 \x00\x01\xa7B\x00\x01\xad\b\x00\x01\xae\xa5\x00\x01\xaf8\x00\x01\xb8\xe3\x00\x01\xba\x9a\x00\x01\xc7\x1d\x00\x01ڊ\x00\x01\xe1^\x00\x01\xeab\x00\x01\xec\xa8\x00\x01\xed:\x00\x01\xf5\xc3\x00\x01\xf7x\x00\x01\xfc\x98\x00\x02 \xfe\x00\x02+=\x00\x02.\xa6\x00\x02>\x95\x00\x02P\x95\x00\x02S\x0e\x00\x02b\xfd\x00\x02ru\x00\x02\x87e\x00\x02\x97S\x00\x02\x9fK\x00\x02\xb2-\x00\x02\xf0\x12\x00\x03\x00\x00\x00\x03\x19\xf0\x00\x03d \x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01\xab=\xff\xfb\xe9@\xff\xfa\xdf\x03\x00\x01\xa2\xb3\x00\x00\xd1Z\xff\xfe\xc5\xfa\xff\xfe]M\xff\xff\x97S\xff\xff.\xa6\x00\x04\x00\x00\x00\x05\xb9s\x00\x02t\r\x00\x01\xa2\xb3\x00\x06\xe3\x8e\x00\x10[\x00\x00\x01\xa2\xb3",
	"/texfonts/cmtex10.tfm":     "\x00\xc0\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\x0e\x00\x01\x00\x00\x00\x00\x00\x00\x00\a\xdf\xea<x\x00\xa0\x00\x00\x12TeX extended ASCII\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMTEX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01c\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xcd\x00\x00\x01@\x00\x00\x010\x00\x00\x01\xa5\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01=\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\x84\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01\xa5\x00\x00\x01\xa5\x00\x00\x01@\x00\x00\x01@\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\xb6\x00\x00\x01!\x00\x00\x01!\x00\x00\x01\xe8\x00\x00\x01c\x00\x00\x01\xd7\x00\x00\x01\xd7\x00\x00\x01R\x00\x00\x01@\x00\x00\x01\x00\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xfa\x00\x00\x01\xfa\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01p\x00\x00\x01\x84\x00\x00\x01\x1c\x00\x00\x01\x84\x00\x00\x01\x10\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01<\x00\x00\x01\xa5\x00\x00\x01!\x00\x00\x01\xa5\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcc\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\v\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01=\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcd\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01=\x00\x00\x01=\x00\x00\x010\x00\x00\x010\x00\x00\x01\x90\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01=\x00\x00\x010\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xcd\x00\x00\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\xa6e\x00\x06\xe3\x8e\x00\aҀ\x00\a\xdb\x02\x00\b'\xd2\x00\bUV\x00\b}&\x00\b\xdbr\x00\b\xe3\x8e\x00\t\x95U\x00\t\xc7\x1d\x00\n\x18+\x00\nD;\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\xff\xfe\x13\xe5\xff\xfe`\xb5\xff\xfe\xb6\n\xff\xff\x1cr\xff\xff\xce8\x00\x00Q\x0e\x00\x00}\x1e\x00\x01US\x00\x01UU\x00\x01\x85\xad\x00\x028\xe3\x00\x03\x8e:\x00\x00\x00\x00\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\bfb",
	"/texfonts/cmti8.tfm":       "\x01x\x00\x12\x00\x00\x00\u007f\x00.\x00\x10\x00\n\x00;\x00M\x00\t\x00\x00\x00\a#\xd1f\x90\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x17\xc0\xac\x00%\xc0\x00\x00\"\xc0T\x00\x1b\xc0\x00\x00\x19\xc0\xc8\x00\x1f\xc0\xcc\x00\x1d\xc0\x94\x00\"\xc0\x88\x00\x1d\xc0\x1c\x00\"\xc0\x88\x00\x1d\xc0t\x00\x16\xd8\xe9\b\x13\xd8h\x00\x14\xd8h\x00'\xd8h\x00)\xd8h\x00\x020D\x00\x048\f\x00\r\xd0\x00\x00\r\xd0P\x00\r\x80<\x00\rЀ\x00\r`|\x00&\xd0\x00\x00\n\x06\x00\x00\x11\xd8x\x00\x1d04\x00\x1d04\x00\rUL\x00(\xc0\x94\x00+\xc0\x94\x00\"\xe2T\x00\x010\x01\x0f\x02С\x17\x0e\xd0 \x00%\xd7,\x00!\xd0\x00\x00%\xf3\xb4\x00\"\xd0P\x00\x02С\x12\a\xf9\xd4\x00\a\xf9\x10\x00\r\xf0\xc4\x00\"d\x10\x00\x02\x18\x00\x00\x050\x05\x15\x02\x10\x00\x00\r\xf9\xd4\x00\r\x90\xb8\x00\r\x90\xb8\x00\r\x90\xb8\x00\r\x90\xb8\x00\r\x98\xb8\x00\r\x90\xb8\x00\r\x90\xb8\x00\r\x98\xb8\x00\r\x90\xb8\x00\r\x90\xb8\x00\x020\x18\x00\x028\x18\x00\x02H0\x00\"!,\x00\rH\x00\x00\rН\x18\"\xd0`\x00\x1f\xc0\x010\x1c\xc0t\x00\x1d\xc0\xbc\x00 \xc0U+\x1a\xc0\x94\x00\x18\xc0\xad\x1a$\xc0@\x00\x1f\xc0\xcc\x00\x06\xc0\xd0\x00\x0f\xc0\xb0\x00#\xc0\xbd \x17\xc0\x01A*\xc0\xcc\x00\x1f\xc0\xcc\x00\"\xc0U+\x1a\xc0u*\"\xc8T\x00\x1e\xc0\t0\x12\xc0\x98\x00\x1d\xc0\xad$\x1f\xc0\xcc\x00\x1f\xc0\xdd\x1a,\xc0\xdd*\x1f\xc0\xd1 \x1f\xc0\xe5%\x15\xc0\xbc\x00\x02\xf9\xe0\x00\x0e\xd0\xd8\x00\x02\xf9p\x00\r\xd0(\x00\x02\xb0\x90\x00\x02С\x11\r0D\x00\n\xd0%E\n0\x15E\r\xd0i\x19\n05E\x03\xd8\xe9\x00\n8H\x00\r\xd0D\x00\x02\xa0d\x00\x02\xa8\xc0\x00\nЄ\x00\x01\xd0i\x19%0D\x00\x120EL\r0%E\r8%E\n8H\x00\t0\x85E\a08\x00\x04pX\x00\x100D\x00\n0\x84\x00\x190\x85\x19\v0\xa4\x00\f8H\x00\b0\xa8\x00\r0]\x16-0\\\x00\rМ\x00\r\xb0\x8c\x00\r\xb0l\x00\x00\x00\x00\x00\x00\x04c\x90\x00\x05DF\x00\x05DH\x00\x05\xb4\xa2\x00\x06$\xfc\x00\x06\x99\x9c\x00\a\x05\xb2\x00\a\x05\xb4\x00\a=\xe0\x00\a\xe6h\x00\a\xea\xae\x00\bV\xc4\x00\b\xc7\x1e\x00\b\xcc\xce\x00\t\x01n\x00\t7z\x00\t7|\x00\t\xa7\xd4\x00\t\xa7\xda\x00\n\x184\x00\n\x88\x8a\x00\n\x88\x8e\x00\n\xc2\xda\x00\v36\x00\vi@\x00\v\xa3\x90\x00\v\xdd\xe0\x00\f\x13\xec\x00\fI\xf6\x00\f\x84F\x00\f\xbe\x96\x00\f\xf4\xa2\x00\r\x0e:\x00\r*\xac\x00\r.\xf2\x00\rG\xd4\x00\x0e\vb\x00\x0e&\xe2\x00\x0f$L\x00\x0f&h\x00\x0f\\z\x00\x0f`\xb8\x00\x10\xe7\xd4\x00\x11\"$\x00\x11\x8e<\x00\x00\x00\x00\x00\x01\xc7\x1c\x00\x06\f<\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t6\n\x00\t\xd7^\x00\n\x0e:\x00\nO\xa6\x00\n\x82\n\x00\n\xba\xec\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\n\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\f<\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01DD\x00\x01\x8e:\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00l\x16\x00\x00\x83\x8e\x00\x00\x85\xb2\x00\x00\x8f\xa4\x00\x00\xd8.\x00\x00\xdb\x06\x00\x00\xed\x82\x00\x00\xf4\xe8\x00\x00\xfb\x06\x00\x01\x04\xfc\x00\x01\x12\xb4\x00\x01\"\"\x00\x0134\x00\x01H\x88\x00\x01H\x8a\x00\x01M\x82\x00\x01Q\x8c\x00\x01fh\x00\x01t\xa0\x00\x01v\n\x00\x01yt\x00\x01\x80\xb6\x00\x01\x80\xd8\x00\x01\x81j\x00\x01\x89\xc2\x00\x01\x93\xea\x00\x01\x98\xb0\x00\x01\x9a\xbe\x00\x01\x9cp\x00\x01\x9fJ\x00\x01\xa1l\x00\x01\xae\xee\x00\x01\xb8\xe4\x00\x01\xbfn\x00\x01\xce\x06\x00\x01\xd0\xde\x00\x01\xdb\x04\x00\x01\xdb\x06\x00\x01\xe6f\x00\x01\xe9>\x00\x01\xf1\x12\x00\x02\a\x1e\x00\x02\x132\x00\x02\x16\xc0\x00\x02\x1fJ\x00\x02#\x8e\x00\x02K`\x00\x02N\x06\x00\x02Wx\x00\x02m\x16\x00\x02v\xc0\x00\x02\x83\x8e\x00\x02\x8f\xa4\x00\x02\xb0\xa4\x00\x02\xf3\xea\x00\x03\x00\x00\x00\x03 \xda\x00\x03o\xa4\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01\xb6\xc2\xff\xfb\x9cp\xff\xfa\x81j\x00\x01\xc1l\x00\x00\xe0\xb6\xff\xfe\xae\xee\xff\xfe>\x94\xff\xff\x8f\xa4\xff\xff\x1fJ\x00\x04\x00\x00\x00\x06$\xfc\x00\x02\xa2\"\x00\x01\xc1l\x00\x06\xe3\x8e\x00\x11\x8e<\x00\x01\xc1l",
	"/texfonts/cminch.tfm":      "\x00{\x00\x12\x000\x00Z\x00\x11\x00\x02\x00\x02\x00\x03\x00\x15\x00\x04\x00\x00\x00\a\xde>a\xcb\x06\x81\x19\xa0\x15ASCII caps and digits\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMINCH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00.\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x10\x01\v\v\x10\x00\x00\t\x10\x00\x00\x0e\x10\x01\x06\x06\x10\x00\x00\x05\x10\x01\x01\v\x10\x00\x00\r\x10\x00\x00\x01\x10\x01\x14\x02\x10\x00\x00\f\x10\x01\x02\x04\x10\x01\x10\x0f\x10\x00\x00\r\x10\x00\x00\x0e\x10\x01\x06\b\x10\x01\x00\x0e\x11\x00\x00\b\x10\x00\x00\x05\x10\x00\x00\v\x10\x01\x00\f\x10\x00\x00\n\x10\x05\x01\x10\x10\x05\x01\n\x10\x01\x02\n\x10\t\x00\a\x10\x00\x00\x00\x00\x00\x00\x00\x05I\xf5\x00\bO\xa5\x00\b\xcc\xcd\x00\tI\xf4\x00\t\xc7\x1c\x00\nDD\x00\n\xc1l\x00\v>\x94\x00\v>\x94\x00\v\xbb\xbb\x00\v\xbb\xbc\x00\f8\xe3\x00\f\xb6\v\x00\f\xb6\v\x00\x0f\xa4\xfa\x00\x10\x9fJ\x00\x00\x00\x00\x00\v\x1cr\x00\x00\x00\x00\x00\x01\xb0[\x00\x00\x00\x00\x00\x00>\x94\x00\x00p\xa4\x80A\x80\x00\x00A\x80\x00\x00O\x80\x01\x00C\x80\x01\x00G\x80\x01\x80Q\x80\x01\x00X\x80\x01\x00W\x80\x01\x00A\x80\x01\x00V\x80\x01\x80Y\x80\x01\x00C\x80\x01\x00O\x80\x01\x00G\x80\x01\x00U\x80\x01\x00Q\x80\x01\x00T\x80\x00\x00Y\x80\x02\x00V\x80\x00\x80W\x80\x02\x80I\x80\x03\xff\xfe\x88\x88\xff\xff\x82\xd8\xff\xfe\va\x00\x00}(\x00\x00\x00\x00\x00\x05\xdd\xde\x00\x02\xee\xef\x00\x01\xf4\x9f\x00\aUU\x00\x11\x99\x99\x00\x01\xf4\x9f",
	"/texfonts/cmman.tfm":       "\x00\x96\x00\x12\x00\f\x00o\x00\r\x00\a\x00\x03\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00W\x98\xe4\xeb\x00\xa0\x00\x00\x02PI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x04\x11\b\x00\x02\x11\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03 \x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x012\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n`\x00\x00\x00\x00\x00\x00\x05@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\f`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\v`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06P\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\a`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bP\x00\x00\x00\x00\x00\x00\x00\x068\xe5\x00\b\x00\x03\x00\bfb\x00\bq\xca\x00\x1f\x1cm\x00+\x01\xcb\x00.|\xfb\x000j\x0e\x001M\x90\x00:1\x1a\x00A\x99e\x00B|\xf0\x00\x00\x00\x00\x00\b\xe3\x8e\x00\t\xc7\x1d\x00\f\x00\x00\x00\x1eO\xa5\x002^\xd8\x00N\x84\xc3\x00\x00\x00\x00\x00\x01\xc7\x1d\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00v\xcd\x00\x00ê",
	"/texfonts/cmsl9.tfm":       "\x01x\x00\x12\x00\x00\x00\u007f\x00%\x00\x10\x00\t\x009\x00X\x00\n\x00\x00\x00\a\x94q[\x98\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x11\xc0\x9c\x00\x1f\xc0\x00\x00\x1c\xc0\\\x00\x15\xc0\x00\x00\x13\xc0\xc0\x00\x19\xc0\xcc\x00\x17\xc0\x84\x00\x1c\xc0\x90\x00\x17\xc0,\x00\x1c\xc0\x90\x00\x17\xc0\x80\x00\x0f\xd0\xe1\n\x0e\xd0H\x00\x0e\xd0H\x00\x1f\xd0H\x00\x1f\xd0H\x00\x010\x00\x00\x027\x00\x00\v\xd0\x00\x00\v\xd00\x00\v\x90\x18\x00\v\xd0P\x00\v`d\x00\x1e\xd0\x00\x00\b\x06\x00\x00\vЈ\x00\x170x\x00\x1c0x\x00\vU\x04\x00 \xc0\x84\x00#\xc0\x84\x00\x1c\xe2\\\x00\x010\x01\x00\x01\xd0u\x17\v\xd0\x00\x00\x1f\xd7<\x00\v\xf3\xac\x00\x1f\xf3\x94\x00\x1c\xd0T\x00\x01\xd0u\x12\x05\xf8\xc4\x00\x05\xf8\x14\x00\v\xf0\xb0\x00\x1ct\x14\x00\x01\x17\x00\x00\x030\t\x15\x01\x10\x00\x00\v\xf8\xc4\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\v\xa0\xac\x00\x010\x10\x00\x017\x10\x00\x01G(\x00\x1c!<\x00\nG\x00\x00\nн\x18\x1c\xd0h\x00\x19\xc0\x01L\x16\xc0\x80\x00\x17\xc0\xb4\x00\x1a\xc0]5\x14\xc0\x84\x00\x12\xc0\x9d$\x1d\xc0 \x00\x19\xc0\xcc\x00\x04\xc0\xc9W\f\xc0\xa8\x00\x1b\xc0\xb5*\x11\xc0\x01R!\xc0\xcc\x00\x19\xc0\xcc\x00\x1c\xc0]5\x14\xc0\x81\x1e\x1c\xc7\\\x00\x18\xc0\x01L\x0e\xc0|\x00\x17\xc0\x9d.\x19\xc0\xcc\x00\x19\xc0\xd9$$\xc0\xd9$\x19\xc0\xc9*\x19\xc0\xdd/\x10\xc0\xb4\x00\x01\xf8\xd4\x00\v\xd0\xd0\x00\x01\xf88\x00\v\xd0\f\x00\x01\xb0`\x00\x01\xd0u\x11\v0\x01H\x0e\xd0%B\b0\x8d@\x0e\xd0H\x00\t0x\x00\x02\xd0\xe1\x02\v7\xb9V\x0e\xd0\x01:\x01\xb0`\x00\x02\xb7@\x00\rЍ\x19\x01\xd0H\x00\x1f0\x01:\x0e0\x01:\v0YB\x0e75B\r7(\x00\x060\xa0\x00\a0L\x00\x05\x80\x1dJ\x0e0\x01K\r0\xb9\x19\x170\xb9\x1a\r0\x98\x00\r7\xb9\x1f\b0p\x00\v0\xa5\x16\"0\xa4\x00\vЈ\x00\v\xb0l\x00\v\xb0D\x00\x00\x00\x00\x00\x00\x04\x91`\x00\x05\x06P\x00\x05{@\x00\x05\xef\x8e\x00\x06e \x00\x06n\x9c\x00\x06|\x84\x00\aO\x00\x00\aP\x95\x00\a\xc3\xf0\x00\b8\xe0\x00\bs\a\x00\b\xad\xd0\x00\t\"\xc0\x00\t\x97\xb0\x00\n\f\xa0\x00\nF\xc7\x00\n\xbb\xb7\x00\n\xf6\x80\x00\v0\xa7\x00\vj\xce\x00\v\xa5\x97\x00\v\xe0`\x00\f\x1a\x87\x00\fT\xae\x00\f\x8fw\x00\fɞ\x00\f\xca@\x00\f\xe7T\x00\rD\xe2\x00\r\xb4 \x00\x0e\xd8'\x00\x0f\x12N\x00\x10q\xc0\x00\x10\xab\xe7\x00\x10\xe6\x0e\x00\x00\x00\x00\x00\x01\xbay\x00\x05\xf4\xe9\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc7\x00\t!~\x00\t{@\x00\t\xd7^\x00\n\x0e9\x00\nO\xa5\x00\n\xb4\x9b\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xf4\xe9\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01{@\x00\x01\x8e9\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x01\x97\x00\x00\x1e\a\x00\x00\x1f\x9e\x00\x00/l\x00\x005\xbc\x00\x00L\xa7\x00\x00St\x00\x00V\x9c\x00\x00X~\x00\x00^\xd5\x00\x00tP\x00\x00{G\x00\x00{\x94\x00\x00\x82\xbc\x00\x00\x899\x00\x00\x8c\xbe\x00\x00\x97\xcc\x00\x00\x9e\f\x00\x00\xa5N\x00\x00\xad\xd9\x00\x00\xc8d\x00\x00\xcd\xc2\x00\x00ќ\x00\x00\xd2E\x00\x00\xd60\x00\x00\xd6\xec\x00\x00\xde\xe9\x00\x00\xdf\xc5\x00\x00\xe3\x94\x00\x00\xe5u\x00\x00\xe8\xa0\x00\x00\xe8\xf0\x00\x00\xe9B\x00\x00\xf07\x00\x00\xf7+\x00\x01\x00D\x00\x01\x16$\x00\x01\x1a>\x00\x01#\xb9\x00\x01%\xf0\x00\x01*\x99\x00\x01?\xdc\x00\x01C\x04\x00\x01P\x9b\x00\x01]\x90\x00\x01`i\x00\x01{E\x00\x01\x80\xa4\x00\x01\x8b\x14\x00\x01\x98\a\x00\x01\xa8)\x00\x01´\x00\x02\x00\x04\x00\x02\f\xf9\x00\x02;\xbe\x00\x03\x1a\xe0\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfbn\xa0\xff\xfa\xbf\x89\x00\x01@\xc9\x00\x01\xd3\xc0\xff\xff\x16 \xff\xff\x8b\x10\xff\xfe\xa10\xff\xfe,@\x00\x00t\xf0\x00\x00\xe9\xe0\x00\x02\xaa\xb0\x00\x05{@\x00\x02\xbd\xa0\x00\x01\xd3\xc0\x00\x06\xe3\x8e\x00\x10q\xc0\x00\x01\xd3\xc0",
	"/texfonts/cmss8.tfm":       "\x01D\x00\x12\x00\x00\x00\u007f\x00/\x00\x10\x00\v\x00\x05\x00N\x00\b\x00\x00\x00\a\xc6s6\x91\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x15\xd0\x00\x00)\xd0\x00\x00&\xd0\x00\x00\x1a\xd0\x00\x00\x1d\xd0\x00\x00\"\xd0\x00\x00#\xd0\x00\x00&\xd0\x00\x00#\xd0\x00\x00&\xd0\x00\x00#\xd0\x00\x00\x18\xd0\x11\n\x14\xd0\x00\x00\x14\xd0\x00\x00(\xd0\x00\x00(\xd0\x00\x00\x010\x00\x00\x029\x00\x00\x12\xd0\x00\x00\x12\xd0\x00\x00\x12\x90\x00\x00\x12\xd0\x00\x00\x12\x80\x00\x00\x1d\xd0\x00\x00\r\a\x00\x00\x10\xd0\x00\x00#0\x00\x00&0\x00\x00\x12T\x00\x00*\xd0\x00\x00-\xd0\x00\x00&\xe2\x00\x00\x010\x01\x00\x06\xd0\x01\x17\x12\xd0\x00\x00)\xd8\x00\x00\x12\xf3\x00\x00)\xf3\x00\x00%\xd0\x00\x00\x03\xd0\x01\x12\v\xfa\x00\x00\v\xfa\x00\x00\x12\xf0\x00\x00&u\x00\x00\x03\x16\x00\x00\a0\x01\x15\x03\x10\x00\x00\x12\xfa\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x030\x00\x00\x036\x00\x00\x06I\x00\x00&!\x00\x00\x0fI\x00\x00\x0f\xd0\x01\x18\x1d\xd0\x00\x00\x1d\xd0\x01B\x1d\xd0\x00\x00\x1b\xd0\x00\x00#\xd0\x014\x19\xd0\x00\x00\x17\xd0\x01#\x1d\xd0\x00\x00\"\xd0\x00\x00\x03\xd0\x01M\x0f\xd0\x00\x00!\xd0\x01)\x15\xd0\x01H+\xd0\x00\x00\"\xd0\x00\x00$\xd0\x014\x1b\xd0\x01\x1d$\xd6\x00\x00\x1c\xd0\x00\x00\x16\xd0\x00\x00\x1f\xd0\x01- \xd0\x00\x00\x1d\xd0\x05#,\xd0\x05#\x1d\xd0\x01)\x1d\xd0\t.\x1a\xd0\x00\x00\x04\xfa\x00\x00\x12\xd0\x00\x00\x04\xfa\x00\x00\x12\xd0\x00\x00\x03\xc0\x00\x00\x03\xd0\x01\x11\x100\x01?\x13\xd0\x019\r0\x00\x00\x13\xd0\x00\x00\r0\x00\x00\x05\xd0\x11\x02\x129\x05L\x13\xd0\x00\x00\x01\xc0\x00\x00\x02\xc9\x00\x00\x11\xd0\x01\x19\x01\xd0\x00\x00'0\x00\x00\x130\x00\x00\x120\x019\x139\x019\x139\x00\x00\b0\x04\x00\n0\x00\x00\t`\x01@\x130\x01A\x0e0\x04\x00\x1e0\x05\x19\x0e0\x00\x00\x0e9\x05\x1e\f0\x00\x00\x120\r\x16.0\f\x00\x12\xd0\x00\x00\x12\xb0\x00\x00\x12\xc0\x00\x00\x00\x00\x00\x00\x00\x04\x0e<\x00\x04\x87 \x00\x04\xb8\xe8\x00\x04\xf1\xcc\x00\x051\xcc\x00\x05c\x92\x00\x05\xaa\xb0\x00\x05\xce>\x00\x06#\x94\x00\x06\x84J\x00\x06\x9cx\x00\ac\x94\x00\a\x8e@\x00\a\xd5\\\x00\b\a$\x00\b*\xb2\x00\bN@\x00\b\x80\b\x00\b\xc7$\x00\t\x1cz\x00\t@\n\x00\tq\xd0\x00\t\xb8\xee\x00\t\xea\xb4\x00\n1\xd2\x00\nc\x98\x00\n\xdc|\x00\v\x00\n\x00\vU`\x00\v\x9c|\x00\v\x9c~\x00\v\xaa\xb6\x00\v\xceD\x00\f\x00\n\x00\fG(\x00\f\x8eF\x00\f\xe3\x9a\x00\r8\xf0\x00\r\x80\f\x00\r\xd5b\x00\x0e*\xb8\x00\x0e\xa3\x9c\x00\x0e\xd5b\x00\x10\x0eH\x00\x10\x87,\x00\x11\x00\x10\x00\x00\x00\x00\x00\x01q\xc8\x00\x06\x1a,\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xac\x00\t$\x96\x00\t\xaa\xb0\x00\t\xd5T\x00\n\x1cr\x00\n\x80\x00\x00\n\xe1\x88\x00\n\xf6\xde\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x1a,\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xaa\xb0\x00\x02\x0e8\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00<r\x00\x00l\xce\x00\x00x\xe4\x00\x01.:\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfb\xf1\xc4\xff\xfb\x9cn\x00\x01.:\x00\x01\xe3\x90\xff\xff\x87\x1c\xff\xfe\x95T\x00\x00x\xe4\xff\xfe\x1cp\x00\x00\x00\x00\x00\x05\xaa\xb0\x00\x02\xd5X\x00\x01\xe3\x90\x00\a\x1cr\x00\x11\x00\x10\x00\x01\xe3\x90",
	"/texfonts/cmssdc10.tfm":    "\x01L\x00\x12\x00\x00\x00\u007f\x00:\x00\r\x00\v\x00\x05\x00N\x00\b\x00\x00\x00\ap\xda\xe3i\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMSSDC\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x1a\xa0\x00\x003\xa0\x00\x000\xa0\x00\x00 \xa0\x00\x00$\xa0\x00\x00+\xa0\x00\x00,\xa0\x00\x000\xa0\x00\x00,\xa0\x00\x000\xa0\x00\x00,\xa0\x00\x00\x1d\xa0\x11\n\x19\xa0\x00\x00\x19\xa0\x00\x002\xa0\x00\x002\xa0\x00\x00\x010\x00\x00\x029\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\x90\x00\x00\x16\xa0\x00\x00\x16\x80\x00\x00&\xa0\x00\x00\x0e\a\x00\x00\x15\xa0\x00\x00,0\x00\x0000\x00\x00\x16U\x00\x004\xa0\x00\x008\xa0\x00\x000\xb2\x00\x00\x010\x01\x00\a\xa0\x01\x17\x17\xa0\x00\x003\xa8\x00\x00\x16\xc4\x00\x006\xc4\x00\x00/\xa0\x00\x00\x03\xa0\x01\x12\f\xca\x00\x00\f\xca\x00\x00\x16\xc0\x00\x000c\x00\x00\x03\x16\x00\x00\b0\x01\x15\x03\x10\x00\x00\x16\xca\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x030\x00\x00\x036\x00\x00\aI\x00\x000!\x00\x00\x11I\x00\x00\x11\xa0\x01\x18$\xa0\x00\x00&\xa0\x01B%\xa0\x00\x00!\xa0\x00\x00-\xa0\x014\x1e\xa0\x00\x00\x1c\xa0\x01#$\xa0\x00\x00+\xa0\x00\x00\x04\xa0\x01M\x12\xa0\x00\x00*\xa0\x01)\x1a\xa0\x01H5\xa0\x00\x00+\xa0\x00\x00.\xa0\x014\"\xa0\x01\x1d.\xa6\x00\x00#\xa0\x00\x00\x1b\xa0\x00\x00(\xa0\x01-)\xa0\x00\x00&\xa0\x05#7\xa0\x05#&\xa0\x01)&\xa0\t.\x1f\xa0\x00\x00\x06\xca\x00\x00\x17\xa0\x00\x00\x06\xca\x00\x00\x16\xa0\x00\x00\x03\xa0\x00\x00\x03\xa0\x01\x11\x130\x01?\x18\xa0\x019\x0e0\x00\x00\x18\xa0\x00\x00\x100\x00\x00\x05\xa0\x11\x02\x189\x01L\x18\xa0\x00\x00\x01\xa0\x00\x00\x02\xa9\x00\x00\x14\xa0\x01\x19\x01\xa0\x00\x0010\x00\x00\x180\x00\x00\x160\x019\x189\x019\x189\x00\x00\t0\x04\x00\v0\x00\x00\np\x01@\x180\x01A\x0f0\x04\x00'0\x05\x19\x0f0\x00\x00\x0f9\x05\x1e\r0\x00\x00\x160\r\x1690\f\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x16\xa0\x00\x00\x00\x00\x00\x00\x00\x03\x82\xd3\x00\x03\xee\xea\x00\x048\xe0\x00\x04\x88\x86\x00\x04\xa4\xf6\x00\x04\xb0X\x00\x04\xe3\x8b\x00\x05\x11\r\x00\x05\"\x1d\x00\x05\x88\x85\x00\x05ӝ\x00\x05\xe9:\x00\x06\x93\xe3\x00\x06\xc1f\x00\x06\xe3\x86\x00\a\x02\xd3\x00\a-}\x00\a3-\x00\a>\x8d\x00\aO\x9d\x00\a}%\x00\a\x99\x93\x00\a\x99\x95\x00\a\xbb\xb3\x00\b\x16\xba\x00\b8\xdb\x00\bq\xc0\x00\b\xa4\xf2\x00\b\xdd\xd6\x00\t\x11\b\x00\tI\xed\x00\tUM\x00\t\xb6\x03\x00\t\xbb\xb3\x00\t\xd2s\x00\n\"\x1a\x00\n'\xca\x00\n-z\x00\nD:\x00\nO\x9b\x00\n\x82\xd0\x00\n\x99\x90\x00\n\xd8%\x00\n\xfaF\x00\n\xff\xf6\x00\v'\xc8\x00\vwm\x00\v\xd2s\x00\v\xf4\x93\x00\fO\x9a\x00\f\xaa\xa0\x00\r\x1cf\x00\r`\xab\x00\x0e\x122\x00\x0efZ\x00\x0e\xcc\xc0\x00\x0f3&\x00\x00\x00\x00\x00\x01\xb0[\x00\x06\x97S\x00\a\x8e:\x00\bq\xc6\x00\b\xe3\x90\x00\tI\xf0\x00\t\xb6\xe0\x00\n&\xae\x00\n8\xe3\x00\v\x1cr\x00\v\xc7\x1d\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe%\x8d\x00\x00\xaa\xab\x00\x00\xd8*\x00\x00\xe3\x8e\x00\x01UV\x00\x01\xc7\x1d\x00\x02UV\x00\x02\xaa\xaa\x00\x02\xaa\xab\x00\x03\x8e:\x00\x00\x00\x00\x00\x006\v\x00\x00aF\x00\x00l\x16\x00\x01\x0e8\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfc}-\xff\xfb\xfaS\x00\x01\x0e8\x00\x01\xb0Z\xff\xff\x93\xea\xff\xfe\xbb\xbd\x00\x00l\x16\xff\xfeO\xa6\x00\x00\x00\x00\x00\x05\x11\r\x00\x02\x88\x86\x00\x01\xb0Z\x00\a\x8e:\x00\x0f3&\x00\x01\xb0Z",
	"/texfonts/cmtcsc10.tfm":    "\x00\xc2\x00\x12\x00\x00\x00\u007f\x00\x03\x00\x10\x00\r\x00\x01\x00\x02\x00\x00\x00\x00\x00\a\xd37\x19\xad\x00\xa0\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMTCSC\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01<\x00\x00\x01<\x00\x00\x01`\x00\x00\x01`\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x00\x00\x01\v\x00\x00\x02`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01\x84\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xe4\x00\x00\x01)\x00\x00\x01\xd0\x01\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01p\x00\x00\x01\x92\x00\x00\x01\x1a\x00\x00\x01\x92\x00\x00\x01\x10\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01Z\x00\x00\x01\xa3\x00\x00\x01A\x00\x00\x01\xa3\x00\x00\x01\xd0\x01\x01\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xda\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\a\x00\x00\x01\xd0\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01h\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01`\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x00\x00\x00\x00\x00\bfb\x00\x10\xcc\xc3\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x82\xd8\x00\x068\xe3\x00\x06\xa6e\x00\x06\xe3\x8e\x00\a\x8e:\x00\bUV\x00\bq\xc8\x00\b}&\x00\b\xe3\x8e\x00\t\f\x83\x00\t\x0e:\x00\t\xc7\x1d\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\xff\xfe\xb6\n\xff\xff\x1cr\x00\x00\xe3\x8e\x00\x01US\x00\x01UU\x00\x01\x85\xad\x00\x01\xb0[\x00\x01\xc7\x1d\x00\x028\xe3\x00\x03\x1cs\x00\x03\x8e:\x00\x00\x00\x00\x80`\x00\x0e\x80`\x00\x0f\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\bfb",
	"/texfonts/cmbx5.tfm":       "\x01M\x00\x12\x00\x00\x00\u007f\x00/\x00\x0f\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\a\xab-\x8ch\x00P\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x15\xa0\x00\x00)\xa0\x00\x00'\xa0\x00\x00\x1c\xa0\x00\x00\x1a\xa0\x00\x00%\xa0\x00\x00\x1f\xa0\x00\x00'\xa0\x00\x00\x1f\xa0\x00\x00'\xa0\x00\x00\x1f\xa0\x00\x00\x16\xb0\x11\n\x14\xb0\x00\x00\x14\xb0\x00\x00*\xb0\x00\x00*\xb0\x00\x00\x010\x00\x00\x046\x00\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x0ep\x00\x00\x0e\xb0\x00\x00\x0e`\x00\x00!\xb0\x00\x00\n\x05\x00\x00\x0f\xb0\x00\x00\x1f0\x00\x00'0\x00\x00\x0eT\x00\x00+\xa0\x00\x00-\xa0\x00\x00'\xd2\x00\x00\x010\x01\x00\x03\xb0\x01\x17\x10\xb0\x00\x00)\xb6\x00\x00\x0e\xe3\x00\x00)\xe3\x00\x00'\xb0\x00\x00\x01\xb0\x01\x12\a\xe8\x00\x00\a\xe8\x00\x00\x0e\xe0\x00\x00'\xc7\x00\x00\x01\x16\x00\x00\x050\x01\x15\x01\x10\x00\x00\x0e\xe8\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x010\x00\x00\x016\x00\x00\x03F\x00\x00'!\x00\x00\fF\x00\x00\f\xb0\x01\x18'\xb0\x00\x00!\xa0\x01L\x1e\xa0\x00\x00\x1f\xa0\x00\x00$\xa0\x015\x19\xa0\x00\x00\x18\xa0\x01$(\xa0\x00\x00%\xa0\x00\x00\x06\xa0\x01W\x11\xa0\x00\x00&\xa0\x01*\x15\xa0\x01R,\xa0\x00\x00%\xa0\x00\x00\"\xa0\x015\x1b\xa0\x01\x1e\"\xa6\x00\x00 \xa0\x01L\x13\xa0\x00\x00\x1d\xa0\x01.#\xa0\x00\x00!\xa0\x05$.\xa0\x05$!\xa0\x01*!\xa0\t/\x17\xa0\x00\x00\x02\xe8\x00\x00\x10\xb0\x00\x00\x02\xe8\x00\x00\x0e\xb0\x00\x00\x01\xb0\x00\x00\x01\xb0\x01\x11\r0\x01H\x13\xb0\x01B\n0\x01@\x13\xb0\x00\x00\v0\x00\x00\x04\xb0\x11\x02\x0e6\x05V\x13\xb0\x01:\x01\xb0\x00\x00\x04\xb6\x00\x00\x12\xb0\x01\x19\x01\xb0\x00\x00)0\x01:\x130\x01:\x0e0\x01B\x136\x01B\x126\x00\x00\t0\x00\x00\b0\x00\x00\a\x80\x01J\x130\x01K\x120\x05\x19\x1f0\x05\x1a\x120\x00\x00\x126\x05\x1f\n0\x00\x00\x0e0\r\x16.0\f\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x00\x00\x00\x00\x00\x06\xfaF\x00\a\x05m\x00\a\x99\x90\x00\a\x9f@\x00\bD:\x00\b\xcc\xc0\x00\t\x8e-\x00\t\xaf-\x00\t\xf4\x96\x00\n\xd8 \x00\v\x13\xdd\x00\v}\x1a\x00\vϖ\x00\f\"\x13\x00\f3-\x00\fO\x9a\x00\ffV\x00\f\xc7\r\x00\rl\x06\x00\r\xf4\x8d\x00\x0eZ\xf3\x00\x0e\x99\x86\x00\x0e\xb5\xfa\x00\x0e\xff\xed\x00\x0f\xa4\xe6\x00\x0f\xff\xed\x00\x10D0\x00\x10\x88s\x00\x10\xaa\x96\x00\x10\xe9*\x00\x11I\xe0\x00\x11\xa4\xe6\x00\x11\xd2f\x00\x11\xf4\x8a\x00\x12\"\r\x00\x123\x1d\x00\x12q\xb0\x00\x12w`\x00\x12\x93\xd3\x00\x12\xb5\xf6\x00\x13\xdd\xc6\x00\x14\xee\xd3\x00\x15k\xfd\x00\x16O\x8a\x00\x17\xff\xe3\x00\x18D&\x00\x00\x00\x00\x00\x02\xc1m\x00\x06\xd2C\x00\a\x1cs\x00\b\x00\x00\x00\b\xaa\xad\x00\t\xd9P\x00\n\x1cs\x00\n(\xa6\x00\nO\xa6\x00\n\xfaP\x00\v\x1cs\x00\v\xbb\xb3\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\xd2C\x00\x00\xc7\x1d\x00\x00\xe3\x8d\x00\x01\x8e:\x00\x02\xb8\xe6\x00\x03\x1cs\x00\x03\xbb\xb3\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00R}\x00\x00\x94z\x00\x00\xa4\xfa\x00\x02\x13\xea\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xf9\x05\xba\xff\xf8\x1c}\x00\x02\x13\xea\x00\x02\x93\xe6\xff\xfe\xb6\r\xff\xff[\x06\xff\xfe\x11\x13\xff\xfdl\x1a\x00\x00\xa4\xfa\x00\x01I\xf3\x00\x00\x00\x00\x00\bD:\x00\x03\xdd\xda\x00\x02\x93\xe6\x00\a\x1cs\x00\x18D&\x00\x02\x93\xe6",
	"/texfonts/cmr5.tfm":        "\x011\x00\x12\x00\x00\x00\u007f\x00!\x00\x10\x00\n\x00\x05\x00I\x00\t\x00\x00\x00\a\x86\x03\x9bZ\x00P\x00\x00\x1cTeX text without f-ligatures\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x0e\xc0\x00\x00\x1b\xc0\x00\x00\x19\xc0\x00\x00\x12\xc0\x00\x00\x10\xc0\x00\x00\x16\xc0\x00\x00\x14\xc0\x00\x00\x19\xc0\x00\x00\x14\xc0\x00\x00\x19\xc0\x00\x00\x14\xc0\x00\x00\t\xd8\x00\x00\t\xd8\x00\x00\x01\xd0\x00\x00\x01H\x00\x00\bH\x00\x00\x010\x00\x00\x028\x00\x00\t\xd0\x00\x00\t\xd0\x00\x00\t\x90\x00\x00\t\xd0\x00\x00\t`\x00\x00\x16\xd0\x00\x00\a\a\x00\x00\t\xd0\x00\x00\x140\x00\x00\x190\x00\x00\tT\x00\x00\x1c\xc0\x00\x00\x1e\xc0\x00\x00\x19\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\b\t\xd0\x00\x00\x1b\xd8\x00\x00\t\xf3\x00\x00\x1b\xf3\x00\x00\x19\xd0\x00\x00\x01\xd0\x01\x03\x05\xf9\x00\x00\x05\xf9\x00\x00\t\xf0\x00\x00\x19\xb6\x00\x00\x01\x18\x00\x00\x030\x01\x06\x01\x10\x00\x00\t\xf9\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x19u\x00\x00\x19!\x00\x00\x19u\x00\x00\b\xd0\x01\t\x19\xd0\x00\x00\x16\xc0\x01=\x13\xc0\x00\x00\x14\xc0\x00\x00\x17\xc0\x01&\x11\xc0\x00\x00\x0f\xc0\x01\x15\x1a\xc0\x00\x00\x16\xc0\x00\x00\x04\xc0\x01H\n\xc0\x00\x00\x18\xc0\x01\x1b\x0e\xc0\x01C\x1d\xc0\x00\x00\x16\xc0\x00\x00\x19\xc0\x01&\x11\xc0\x01\x0f\x19\xc8\x00\x00\x15\xc0\x01=\f\xc0\x00\x00\x14\xc0\x01\x1f\x16\xc0\x00\x00\x16\xc0\x05\x15\x1f\xc0\x05\x15\x16\xc0\x01\x1b\x16\xc0\t \r\xc0\x00\x00\x01\xf9\x00\x00\t\xd0\x00\x00\x01\xf9\x00\x00\t\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x01\x02\t0\x019\f\xd0\x013\a0\x011\f\xd0\x00\x00\a0\x00\x00\x02\xd0\x10\x00\t8\x05G\f\xd0\x01+\x01\xc0\x00\x00\x02\xc8\x00\x00\v\xd0\x01\n\x01\xd0\x00\x00\x1b0\x01+\f0\x01+\t0\x013\f8\x013\v8\x00\x00\x050\x00\x00\x060\x00\x00\x05\x80\x01;\f0\x01<\v0\x05\n\x140\x05\v\v0\x00\x00\v8\x05\x10\a0\x00\x00\t0\r\a 0\f\x00\t\xd0\x00\x00\t\xc0\x00\x00\t\xc0\x00\x00\x00\x00\x00\x00\x00\x06q\xcd\x00\a\x00\x06\x00\a\x8e@\x00\a\xe9F\x00\b\xaa\xb3\x00\b\xc7&\x00\t\xc7&\x00\nU`\x00\n\xe3\x9a\x00\v\x11\x1d\x00\vq\xd3\x00\f\x00\r\x00\r\x1c\x80\x00\rJ\x03\x00\r\xd8=\x00\x0e8\xf3\x00\x0efv\x00\x0e\x93\xfa\x00\x0e\xf4\xb0\x00\x0fUf\x00\x0f\x82\xea\x00\x0f\xb0m\x00\x10\x11#\x00\x10>\xa6\x00\x10q\xda\x00\x10\x88\x9d\x00\x11\x8eM\x00\x12\xd8C\x00\x13\x05\xc6\x00\x15\x11*\x00\x15>\xad\x00\x15\xc73\x00\x00\x00\x00\x00\x01\xf4\xa0\x00\x06W\xad\x00\x06\xe3\x8d\x00\b\x00\x00\x00\bq\xc6\x00\tI\xf3\x00\t\x9dZ\x00\t\xd7]\x00\n\x0e:\x00\nO\xa6\x00\n\xaa\xb3\x00\n\xe0M\x00\v\x1cs\x00\v\xb6\r\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeW\xad\x00\x00\xc7\x1d\x00\x00\xe3\x8d\x00\x01\x8e:\x00\x01\x9dZ\x00\x02\xaa\xb3\x00\x02\xb8\xe6\x00\x03\x1cs\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00G\x1d\x00\x00\x80\x00\x00\x00\x8e:\x00\x01i=\x00l\x80\x00\x80L\x80\x01\x80`\x00\\\x00'\x00\"\x00?\x80\x02\x80!\x80\x02\x80-\x00{\x80-\x00|\x80`\x00\x0e\x80`\x00\x0f\x00a\x80\x03\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x04\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00t\x80\x04\x00u\x80\x04\x00b\x80\x04\x00y\x80\x04\x00v\x80\x04\x80w\x80\x04\x00h\x80\x04\x80k\x80\x04\x00e\x80\a\x00o\x80\a\x00x\x80\x04\x00d\x80\a\x00c\x80\a\x00q\x80\a\x00v\x80\x04\x00j\x80\b\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x80W\x80\x06\x80j\x80\a\x80I\x80\a\xff\xf9\x8e3\xff\xf8\xd2v\x00\x028\xe6\xff\xfe\xe3\x8d\xff\xffq\xc6\xff\xfeUS\xff\xfd\xc7\x1a\x00\x00\x8e:\x00\x01\x1cs\x00\x00\x00\x00\x00\a\x8e@\x00\x03UZ\x00\x028\xe6\x00\x06\xe3\x8d\x00\x15\xc73\x00\x028\xe6",
	"/texfonts/cmti9.tfm":       "\x01q\x00\x12\x00\x00\x00\u007f\x00)\x00\x10\x00\t\x00:\x00M\x00\t\x00\x00\x00\a\xbcj\x91\xb9\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x12\xc0\xa8\x00 \xc0\x00\x00\x1d\xc0T\x00\x16\xc0\x00\x00\x14\xc0\xc4\x00\x1a\xc0\xcc\x00\x18\xc0\x94\x00\x1d\xc0\x88\x00\x18\xc0\x1c\x00\x1d\xc0\x88\x00\x18\xc0h\x00\x11\xd7\xe5\b\x0f\xd7l\x00\x10\xd7l\x00\"\xd7l\x00$\xd7l\x00\x0208\x00\x037\x10\x00\v\xd0\x00\x00\v\xd0\\\x00\v\x80@\x00\vЀ\x00\v`p\x00!\xd0\x00\x00\b\x06\x00\x00\x0e\xd7|\x00\x1804\x00\x1804\x00\vUL\x00#\xc0\x94\x00&\xc0\x94\x00\x1d\xe2T\x00\x010\x01\x0f\x02С\x17\f\xd0(\x00 \xd7,\x00\x1c\xd0\x00\x00 \xf3\xb0\x00\x1d\xd0\\\x00\x02С\x12\x06\xf8\xd0\x00\x06\xf8\b\x00\v\xf0\xc0\x00\x1dd\b\x00\x02\x17\x00\x00\x040\x05\x15\x02\x10\x00\x00\v\xf8\xd0\x00\v\x90\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x97\xac\x00\v\x90\xac\x00\v\x90\xac\x00\v\x97\xac\x00\v\x90\xac\x00\v\x90\xac\x00\x020\x18\x00\x027\x18\x00\x02G0\x00\x1d!,\x00\vG\x00\x00\vН\x18\x1d\xd0`\x00\x1a\xc0\x010\x17\xc0h\x00\x18\xc0\xb8\x00\x1b\xc0U+\x15\xc0\x94\x00\x13\xc0\xa9\x1a\x1f\xc0D\x00\x1a\xc0\xcc\x00\x05\xc0\xc8\x00\r\xc0\xb4\x00\x1e\xc0\xb9 \x12\xc0\x01A%\xc0\xcc\x00\x1a\xc0\xcc\x00\x1d\xc0U+\x15\xc0i*\x1d\xc7T\x00\x19\xc0\r0\x0f\xc0\x94\x00\x18\xc0\xa9$\x1a\xc0\xcc\x00\x1a\xc0\xd9\x1a'\xc0\xd9*\x1a\xc0\xc9 \x1a\xc0\xe1%\x11\xc0\xb8\x00\x02\xf8\xdc\x00\f\xd0\xd4\x00\x02\xf8x\x00\v\xd0$\x00\x02\xb0\x90\x00\x02С\x11\v08\x00\b\xd0!E\b0\x15E\v\xd0m\x19\b05E\x02\xd7\xe5\x00\b7H\x00\v\xd08\x00\x02\xa0d\x00\x02\xa7\xbc\x00\bЄ\x00\x01\xd0m\x19 08\x00\x0f09L\v0!E\v7!E\b7H\x00\a0\x85E\x060<\x00\x03pX\x00\x0e08\x00\b0\x84\x00\x140\x85\x19\t0\x98\x00\n7H\x00\x060\xa4\x00\v0Q\x16(0P\x00\vМ\x00\v\xb0\x8c\x00\v\xb0t\x00\x00\x00\x00\x00\x00\x042\x95\x00\x05\t\x80\x00\x05t\xf5\x00\x05\xe0k\x00\x06T\xb9\x00\x06\xb7U\x00\x06\xed\x10\x00\a\x8e@\x00\a\x94\x92\x00\a\xf9\xb5\x00\be+\x00\bq\xce\x00\b\x9fR\x00\bР\x00\t<\x15\x00\t\xa7\x8b\x00\n\x13\x00\x00\nM'\x00\n\xb8\x9c\x00\n\xe9\xeb\x00\v$\x12\x00\v^9\x00\v\x8f\x87\x00\v\xc0\xd5\x00\v\xfa\xfc\x00\f5$\x00\ffr\x00\f\x93\xcb\x00\f\x97\xc0\x00\f\xa0\x99\x00\f\xb4\xd4\x00\rn\xab\x00\r\x9dp\x00\x0e{P\x00\x0e\u007f\xbc\x00\x0e\xb1\v\x00\x0e\xb9\xe4\x00\x10-\x92\x00\x10g\xb9\x00\x10\xcaU\x00\x00\x00\x00\x00\x01\xbay\x00\x05\xf4\xe9\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc7\x00\t\x12\xf7\x00\t\xd7^\x00\n\x0e9\x00\nO\xa5\x00\n{\xb7\x00\n\xb4\x9b\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xf4\xe9\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\t\x80\x00\x01\x8e9\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00p\xfc\x00\x00\x94\x8b\x00\x00\x94\xb2\x00\x00\x96\x1e\x00\x00\xe1\xf9\x00\x00\xe8K\x00\x00\xf2i\x00\x01\x02\x0e\x00\x01\rn\x00\x01\x10l\x00\x01\x11\xc5\x00\x01/g\x00\x015i\x00\x01C\xf5\x00\x01Mn\x00\x01P\xfc\x00\x01\\I\x00\x01m\t\x00\x01x\x19\x00\x01{\xf0\x00\x01~[\x00\x01\x83)\x00\x01\x84\xbc\x00\x01\x86R\x00\x01\x95r\x00\x01\xa1W\x00\x01\xa4W\x00\x01\xa5\xec\x00\x01\xa6\xd4\x00\x01\xa8\xa4\x00\x01\xa9\x15\x00\x01\xb7N\x00\x01\xb8\xe4\x00\x01\xc4U\x00\x01\xd6<\x00\x01\u070e\x00\x01\xe4\xd2\x00\x01\xee\x9e\x00\x01\xf02\x00\x01\xf6\x84\x00\x01\xfel\x00\x02\x1a\x8c\x00\x02(t\x00\x02)\x15\x00\x02-\xd4\x00\x02PG\x00\x02S\x14\x00\x02^\xd0\x00\x02p\x84\x00\x02\x86\x02\x00\x02\x8e9\x00\x02\x94\x8b\x00\x02\xb1\x9e\x00\x02\xf1w\x00\x03\x00\x00\x00\x03\x1ct\x00\x03hL\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01\xafi\xff\xfb\xcdk\xff\xfa\xbcY\x00\x01\xad\xd5\x00\x00\xd6\xeb\xff\xfe\xbd\xa0\xff\xfeR+\xff\xff\x94\x8b\xff\xff)\x15\x00\x04\x00\x00\x00\x05\xe0k\x00\x02\x84\xc0\x00\x01\xad\xd5\x00\x06\xe3\x8e\x00\x10\xcaU\x00\x01\xad\xd5",
	"/texfonts/logo10.tfm":      "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\xf8\x94o>\x00\xa0\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MFLOGO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\t>\x92\x00\t\xf4\x9d\x00\n\xaa\xa8\x00\f\xcc\xca\x00\x00\x00\x00\x00\t\x99\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00[\x06\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa4\xfa\xff\xffI\xf5\x00\x00\xb6\v\x00\x00\x00\x00\x00\x04DC\x00\x02\"\"\x00\x01l\x16\x00\x00\x00\x00\x00\f\xcc\xca",
	"/texinputs/tex.pool":       "11buffer size\n09pool size\n17number of strings\n03???\n13m2d5c2l5x2v5i\n28End of file on the terminal!\n02! \n42(That makes 100 errors; please try again.)\n02? \n22You want to edit file \n09 at line \n60Type <return> to proceed, S to scroll future error messages,\n44R to run without stopping, Q to run quietly,\n23I to insert something, \n20E to edit your file,\n561 or ... or 9 to ignore the next 1 to 9 tokens of input,\n22H for help, X to quit.\n13OK, entering \n09batchmode\n11nonstopmode\n10scrollmode\n03...\n07insert>\n44I have just deleted some text, as you asked.\n48You can now delete more, or insert, or whatever.\n50Sorry, I don't know how to help in this situation.\n36Maybe you should try asking a human?\n42Sorry, I already gave what help I could...\n59An error might have occurred before I noticed any problems.\n45``If all else fails, read the instructions.''\n02 (\n14Emergency stop\n30TeX capacity exceeded, sorry [\n44If you really absolutely need more capacity,\n35you can ask a wizard to enlarge me.\n19This can't happen (\n59I'm broken. Please show this to someone who can fix can fix\n35I can't go on meeting you like this\n55One of your faux pas seems to have wounded me deeply...\n59in fact, I'm barely conscious. Please fix it and try again.\n12Interruption\n09You rang?\n58Try to insert an instruction for me (e.g., `I\\showlists'),\n43unless you just want to quit by typing `X'.\n16main memory size\n24AVAIL list clobbered at \n31Double-AVAIL list clobbered at \n24Doubly free location at \n12Bad flag at \n14New busy locs:\n05LINK(\n05INFO(\n02[]\n10CLOBBERED.\n04foul\n03fil\n06 plus \n07 minus \n03 []\n26Bad link, display aborted.\n04etc.\n18Unknown node type!\n05unset\n04box(\n02)x\n10, shifted \n09 columns)\n10, stretch \n09, shrink \n11, glue set \n02- \n03?.?\n03< -\n05rule(\n06insert\n15, natural size \n08; split(\n14); float cost \n04glue\n09nonscript\n05mskip\n02mu\n00\n08leaders \n04kern\n13 (for accent)\n05mkern\n04math\n02on\n03off\n13, surrounded \n11 (ligature \n08penalty \n13discretionary\n11 replacing \n04mark\n07vadjust\n08flushing\n07copying\n08vertical\n10horizontal\n12display math\n02no\n17internal vertical\n21restricted horizontal\n05 mode\n18semantic nest size\n04### \n17 entered at line \n10 (language\n10:hyphenmin\n18 (\\output routine)\n25### recent contributions:\n10prevdepth \n07ignored\n11, prevgraf \n05 line\n12spacefactor \n19, current language \n31this will begin denominator of:\n08lineskip\n12baselineskip\n07parskip\n16abovedisplayskip\n16belowdisplayskip\n21abovedisplayshortskip\n21belowdisplayshortskip\n08leftskip\n09rightskip\n07topskip\n12splittopskip\n07tabskip\n09spaceskip\n10xspaceskip\n11parfillskip\n10thinmuskip\n09medmuskip\n11thickmuskip\n25[unknown glue parameter!]\n04skip\n06muskip\n02pt\n06output\n08everypar\n09everymath\n12everydisplay\n09everyhbox\n09everyvbox\n08everyjob\n07everycr\n07errhelp\n04toks\n08parshape\n03box\n04void\n12current font\n08textfont\n10scriptfont\n16scriptscriptfont\n07catcode\n06lccode\n06uccode\n06sfcode\n08mathcode\n12pretolerance\n09tolerance\n11linepenalty\n13hyphenpenalty\n15exhyphenpenalty\n11clubpenalty\n12widowpenalty\n19displaywidowpenalty\n13brokenpenalty\n12binoppenalty\n10relpenalty\n17predisplaypenalty\n18postdisplaypenalty\n16interlinepenalty\n20doublehyphendemerits\n19finalhyphendemerits\n11adjdemerits\n03mag\n15delimiterfactor\n09looseness\n04time\n03day\n05month\n04year\n14showboxbreadth\n12showboxdepth\n08hbadness\n08vbadness\n07pausing\n13tracingonline\n13tracingmacros\n12tracingstats\n17tracingparagraphs\n12tracingpages\n13tracingoutput\n16tracinglostchars\n15tracingcommands\n15tracingrestores\n06uchyph\n13outputpenalty\n13maxdeadcycles\n09hangafter\n15floatingpenalty\n10globaldefs\n03fam\n10escapechar\n17defaulthyphenchar\n15defaultskewchar\n11endlinechar\n11newlinechar\n08language\n13lefthyphenmin\n14righthyphenmin\n14holdinginserts\n17errorcontextlines\n28[unknown integer parameter!]\n05count\n07delcode\n09parindent\n12mathsurround\n13lineskiplimit\n05hsize\n05vsize\n08maxdepth\n13splitmaxdepth\n11boxmaxdepth\n05hfuzz\n05vfuzz\n18delimitershortfall\n18nulldelimiterspace\n11scriptspace\n14predisplaysize\n12displaywidth\n13displayindent\n12overfullrule\n10hangindent\n07hoffset\n07voffset\n16emergencystretch\n26[unknown dimen parameter!]\n05dimen\n06EQUIV(\n12notexpanded:\n09hash size\n06csname\n09endcsname\n11IMPOSSIBLE.\n12NONEXISTENT.\n06accent\n07advance\n15afterassignment\n10aftergroup\n10begingroup\n04char\n09delimiter\n06divide\n08endgroup\n11expandafter\n04font\n09fontdimen\n06halign\n05hrule\n12ignorespaces\n10mathaccent\n08mathchar\n10mathchoice\n08multiply\n07noalign\n10noboundary\n08noexpand\n04omit\n07penalty\n08prevgraf\n07radical\n04read\n05relax\n06setbox\n03the\n06valign\n07vcenter\n05vrule\n09save size\n15grouping levels\n08curlevel\n09retaining\n09restoring\n05SAVE(\n28Incompatible magnification (\n02);\n36 the previous value will be retained\n58I can handle only one magnification ratio per job. So I've\n59reverted to the magnification you used earlier on this run.\n46Illegal magnification has been changed to 1000\n52The magnification ratio must be between 1 and 32768.\n04ETC.\n04BAD.\n02->\n22begin-group character \n20end-group character \n21math shift character \n26macro parameter character \n22superscript character \n20subscript character \n25end of alignment template\n12blank space \n11the letter \n14the character \n23[unknown command code!]\n02: \n08Runaway \n10definition\n08argument\n08preamble\n04text\n03<*>\n09<insert> \n06<read \n02l.\n11<argument> \n11<template> \n16<recently read> \n19<to be read again> \n16<inserted text> \n09<output> \n11<everypar> \n12<everymath> \n15<everydisplay> \n12<everyhbox> \n12<everyvbox> \n11<everyjob> \n10<everycr> \n07<mark> \n08<write> \n16input stack size\n05write\n48(interwoven alignment preambles are not allowed)\n17text input levels\n03par\n11Incomplete \n34; all text was ignored after line \n54A forbidden control sequence occurred in skipped text.\n59This kind of error happens when you say `\\if...' and forget\n59the matching `\\fi'. I've inserted a `\\fi'; this might work.\n53The file ended while I was skipping conditional text.\n10File ended\n32Forbidden control sequence found\n16 while scanning \n04 of \n46I suspect you have forgotten a `}', causing me\n41to read past where you wanted me to stop.\n49I'll try to recover; but if the error is serious,\n51you'd better type `E' or `X' now and fix your file.\n03use\n39Text line contains an invalid character\n53A funny symbol that I can't read has just been input.\n48Continue, and I'll forget that it ever happened.\n37(Please type a command or say `\\end')\n38*** (job aborted, no legal \\end found)\n02=>\n26Undefined control sequence\n47The control sequence at the end of the top line\n52of your error message was never \\def'ed. If you have\n55misspelled it (e.g., `\\hobx'), type `I' and the correct\n51spelling (e.g., `I\\hbox'). Otherwise just continue,\n45and I'll forget about whatever was undefined.\n08Missing \n09 inserted\n53The control sequence marked <to be read again> should\n42not appear between \\csname and \\endcsname.\n05input\n08endinput\n07topmark\n09firstmark\n07botmark\n14splitfirstmark\n12splitbotmark\n20parameter stack size\n12Argument of \n15 has an extra }\n58I've run across a `}' that doesn't seem to match anything.\n52For example, `\\def\\a#1{...}' and `\\a}' would produce\n54this error. If you simply proceed now, the `\\par' that\n52I've just inserted will cause me to report a runaway\n54argument that might be the root of the problem. But if\n57your `}' was spurious, just type `2' and it will go away.\n23Paragraph ended before \n13 was complete\n58I suspect you've forgotten a `}', causing me to apply this\n54control sequence to too much text. How can we recover?\n59My plan is to forget the whole thing and hope for the best.\n07Use of \n29 doesn't match its definition\n54If you say, e.g., `\\def\\a1{...}', then you must always\n52put `1' after `\\a', since control sequence names are\n52made up of letters only. The macro here has not been\n51followed by the required stuff, so I'm ignoring it.\n02<-\n18Missing { inserted\n52A left brace was mandatory here, so I've put one in.\n55You might want to delete and/or insert some corrections\n48so that I will find a matching right brace soon.\n54(If you're confused by all this, try typing `I}' now.)\n23Incompatible glue units\n52I'm going to assume that 1mu=1pt when they're mixed.\n31Missing number, treated as zero\n47A number should have been here; I inserted `0'.\n54(If you can't figure out why I needed to see a number,\n51look up `weird error' in the index to The TeXbook.)\n11spacefactor\n09prevdepth\n10deadcycles\n15insertpenalties\n02wd\n02ht\n02dp\n11lastpenalty\n08lastkern\n08lastskip\n11inputlineno\n07badness\n09Improper \n54You can refer to \\spacefactor only in horizontal mode;\n54you can refer to \\prevdepth only in vertical mode; and\n48neither of these is meaningful inside \\write. So\n52I'm forgetting what you said and using zero instead.\n15You can't use `\n08' after \n17Bad register code\n44A register number must be between 0 and 255.\n27I changed this one to zero.\n18Bad character code\n45A character number must be between 0 and 255.\n10Bad number\n51Since I expected to read a number between 0 and 15,\n12Bad mathchar\n46A mathchar number must be between 0 and 32767.\n18Bad delimiter code\n56A numeric delimiter code must be between 0 and 2^{27}-1.\n28Improper alphabetic constant\n56A one-character control sequence belongs after a ` mark.\n37So I'm essentially inserting \\0 here.\n14Number too big\n54I can only go up to 2147483647='17777777777=\"7FFFFFFF,\n42so I'm using that number instead of yours.\n04true\n25Illegal unit of measure (\n18replaced by filll)\n35I dddon't go any higher than filll.\n02em\n02ex\n12mu inserted)\n48The unit of measurement in math glue must be mu.\n51To recover gracefully from this error, it's best to\n52delete the erroneous units; e.g., type `2' to delete\n45two letters. (See Chapter 27 of The TeXbook.)\n02in\n02pc\n02cm\n02mm\n02bp\n02dd\n02cc\n02sp\n12pt inserted)\n49Dimensions can be in units of em, ex, in, pt, pc,\n50cm, mm, dd, cc, bp, or sp; but yours is a new one!\n59I'll assume that you meant to say pt, for printer's points.\n19Dimension too large\n50I can't work with sizes bigger than about 19 feet.\n46Continue and I'll use the largest value I can.\n04plus\n05minus\n05width\n06height\n05depth\n06number\n12romannumeral\n06string\n07meaning\n08fontname\n07jobname\n04 at \n60Where was the left brace? You said something like `\\def\\a}',\n43which I'm going to interpret as `\\def\\a{}'.\n32You already have nine parameters\n45I'm going to ignore the # sign you just used,\n38as well as the token that followed it.\n41Parameters must be numbered consecutively\n57I've inserted the digit you should have used after the #.\n36Type `1' to delete what you did use.\n42Illegal parameter number in definition of \n41You meant to type ## instead of #, right?\n56Or maybe a } was forgotten somewhere earlier, and things\n58are all screwed up? I'm going to assume that you meant ##.\n49*** (cannot \\read from terminal in nonstop modes)\n18File ended within \n33This \\read has unbalanced braces.\n02if\n05ifcat\n05ifnum\n05ifdim\n05ifodd\n07ifvmode\n07ifhmode\n07ifmmode\n07ifinner\n06ifvoid\n06ifhbox\n06ifvbox\n03ifx\n05ifeof\n06iftrue\n07iffalse\n06ifcase\n02fi\n02or\n04else\n06Extra \n44I'm ignoring this; it doesn't match any \\if.\n06{true}\n07{false}\n23Missing = inserted for \n48I was expecting to see `<', `=', or `>'. Didn't.\n06{case \n10TeXinputs:\n09TeXfonts:\n04.fmt\n15input file name\n19I can't find file `\n23I can't write on file `\n02'.\n04.tex\n20Please type another \n45*** (job aborted, file error in nonstop mode)\n04.dvi\n20file name for output\n06texput\n04.log\n02**\n20transcript file name\n02  \n08nullfont\n05Font \n08 scaled \n36 not loadable: Bad metric (TFM) file\n42 not loadable: Metric (TFM) file not found\n50I wasn't able to read the size data for this font,\n40so I will ignore the font specification.\n48[Wizards can fix TFM files using TFtoPL/PLtoTF.]\n46You might try inserting a different font spec;\n57e.g., type `I\\font<same font id>=<substitute font name>'.\n04.tfm\n33 not loaded: Not enough room left\n52I'm afraid I won't be able to make use of this font,\n55because my memory for character-size data is too small.\n51If you're really stuck, ask a wizard to enlarge me.\n58Or maybe try `I\\font<same font id>=<name of loaded font>'.\n23Missing font identifier\n42I was looking for a control sequence whose\n42current meaning has been defined by \\font.\n10 has only \n21 fontdimen parameters\n51To increase the number of font parameters, you must\n53use \\fontdimen immediately after the \\font is loaded.\n11font memory\n31Missing character: There is no \n09 in font \n12 TeX output \n08vlistout\n31Completed box being shipped out\n21Memory usage before: \n08 after: \n19; still untouched: \n31Huge page cannot be shipped out\n50The page just created is more than 18 feet tall or\n58more than 18 feet wide, so I suspect something went wrong.\n35The following box has been deleted:\n19No pages of output.\n18Output written on \n05 page\n02, \n08 bytes).\n02to\n06spread\n09Underfull\n05Loose\n16 \\hbox (badness \n38) has occurred while \\output is active\n24) in paragraph at lines \n24) in alignment at lines \n02--\n19) detected at line \n16Overfull \\hbox (\n11pt too wide\n21Tight \\hbox (badness \n05vpack\n16 \\vbox (badness \n16Overfull \\vbox (\n11pt too high\n21Tight \\vbox (badness \n02{}\n12displaystyle\n09textstyle\n11scriptstyle\n17scriptscriptstyle\n14Unknown style!\n07mathord\n06mathop\n07mathbin\n07mathrel\n08mathopen\n09mathclose\n09mathpunct\n09mathinner\n08overline\n09underline\n04left\n05right\n06limits\n08nolimits\n20fraction, thickness \n09= default\n17, left-delimiter \n18, right-delimiter \n25 is undefined (character \n54Somewhere in the math formula just ended, you used the\n60stated character from an undefined font family. For example,\n58plain TeX doesn't allow \\it or \\sl in subscripts. Proceed,\n52and I'll try to forget that I needed that character.\n06mlist1\n06mlist2\n06mlist3\n640234000122*4000133**3**344*0400400*000000234000111*1111112341011\n06mlist4\n12 inside $$'s\n53Displays can use special alignments (like \\eqalignno)\n57only if nothing but the alignment itself is between $$'s.\n58So I've deleted the formulas that preceded this alignment.\n04span\n02cr\n04crcr\n11endtemplate\n24alignment tab character \n40Missing # inserted in alignment preamble\n50There should be exactly one # between &'s, when an\n56\\halign or \\valign is being set up. In this case you had\n47none, so I've put one in; maybe that will work.\n29Only one # is allowed per tab\n49more than one, so I'm ignoring all but the first.\n04endv\n40Extra alignment tab has been changed to \n52You have given more \\span or & marks than there were\n58in the preamble to the \\halign or \\valign now in progress.\n50So I'll assume that you meant to type \\cr instead.\n09256 spans\n06align1\n06align0\n44Infinite glue shrinkage found in a paragraph\n52The paragraph just ended includes some glue that has\n54infinite shrinkability, e.g., `\\hskip 0pt minus 1fil'.\n54Such glue doesn't belong there---it allows a paragraph\n59of any length to fit on one line. But it's safe to proceed,\n55since the offensive shrinkability has been made finite.\n05disc1\n05disc2\n02@@\n07: line \n03 t=\n06 -> @@\n07 via @@\n03 b=\n03 p=\n03 d=\n10@firstpass\n11@secondpass\n14@emergencypass\n09paragraph\n05disc3\n05disc4\n13line breaking\n05HYPH(\n11hyphenation\n16 will be flushed\n48Hyphenation exceptions must contain only letters\n51and hyphens. But continue; I'll forgive and forget.\n12Not a letter\n50Letters in \\hyphenation words must have \\lccode>0.\n47Proceed; I'll ignore the character I just read.\n20exception dictionary\n18pattern memory ops\n31pattern memory ops per language\n14pattern memory\n13Too late for \n08patterns\n53All patterns must be given before typesetting begins.\n04Bad \n17(See Appendix H.)\n09Nonletter\n17Duplicate pattern\n07pruning\n09vertbreak\n48Infinite glue shrinkage found in box being split\n52The box you are \\vsplitting contains some infinitely\n57shrinkable glue, e.g., `\\vss' or `\\vskip 0pt minus 1fil'.\n59Such glue doesn't belong there; but you can safely proceed,\n06vsplit\n09 needs a \n04vbox\n44The box you are trying to split is an \\hbox.\n49I can't split such a box, so I'll leave it alone.\n08pagegoal\n09pagetotal\n11pagestretch\n14pagefilstretch\n15pagefillstretch\n16pagefilllstretch\n10pageshrink\n09pagedepth\n04fill\n05filll\n17### current page:\n28 (held over for next output)\n13total height \n13 goal height \n06 adds \n03, #\n12 might split\n15%% goal height=\n12, max depth=\n38Insertions can only be added to a vbox\n40Tut tut: You're trying to \\insert into a\n41\\box register that now contains an \\hbox.\n47Proceed, and I'll discard its present contents.\n04page\n45Infinite glue shrinkage found on current page\n52The page about to be output contains some infinitely\n03 g=\n03 c=\n38Infinite glue shrinkage inserted from \n53The correction glue for page breaking with insertions\n52must have finite shrinkability. But you may proceed,\n07% split\n04 to \n15255 is not void\n53You shouldn't use \\box255 except in \\output routines.\n14Output loop---\n24 consecutive dead cycles\n57I've concluded that your \\output is awry; it never does a\n55\\shipout, so I'm shipping \\box255 out myself. Next time\n58increase \\maxdeadcycles if you want me to be more patient!\n25Unbalanced output routine\n58Your sneaky output routine has problematic {'s and/or }'s.\n41I can't handle that very well; good luck.\n33Output routine didn't use all of \n43Your \\output commands should empty \\box255,\n34e.g., by saying `\\shipout\\box255'.\n43Proceed; I'll discard its present contents.\n18Missing $ inserted\n56I've inserted a begin-math/end-math symbol since I think\n48you left one out. Proceed, with fingers crossed.\n05' in \n50Sorry, but I'm not programmed to handle this case;\n45I'll just pretend that you didn't ask for it.\n49If you're in the wrong mode, you might be able to\n58return to the right one by typing `I}' or `I$' or `I\\par'.\n03end\n04dump\n05hskip\n04hfil\n05hfill\n03hss\n07hfilneg\n05vskip\n04vfil\n05vfill\n03vss\n07vfilneg\n52I've inserted something that you may have forgotten.\n32(See the <inserted text> above.)\n48With luck, this will get me unwedged. But if you\n55really didn't forget anything, try typing `2' now; then\n56my insertion and my current dilemma will both disappear.\n06right.\n58Things are pretty mixed up, but I think the worst is over.\n12Too many }'s\n42You've closed more groups than you opened.\n51Such booboos are generally harmless, so keep going.\n10rightbrace\n22Extra }, or forgotten \n58I've deleted a group-closing symbol because it seems to be\n59spurious, as in `$x}$'. But perhaps the } is legitimate and\n59you forgot something else, as in `\\hbox{$x}'. In such cases\n58the way to recover is to insert both the forgotten and the\n40deleted material, e.g., by typing `I$}'.\n08moveleft\n09moveright\n05raise\n05lower\n04copy\n07lastbox\n04vtop\n04hbox\n07shipout\n07leaders\n08cleaders\n08xleaders\n35Leaders not followed by proper glue\n56You should say `\\leaders <box or rule><hskip or vskip>'.\n50I found the <box or rule>, but there's no suitable\n48<hskip or vskip>, so I'm ignoring these leaders.\n34Sorry; this \\lastbox will be void.\n58Sorry...I usually can't take things from the current page.\n37This \\lastbox will therefore be void.\n21Missing `to' inserted\n48I'm working on `\\vsplit<box number> to <dimen>';\n31will look for the <dimen> next.\n31A <box> was supposed to be here\n57I was expecting to see \\hbox or \\vbox or \\copy or \\box or\n59something like that. So you might find something missing in\n53your output. But keep trying; you can fix this later.\n06indent\n08noindent\n26' here except with leaders\n52To put a horizontal rule in an hbox or an alignment,\n56you should use \\leaders or \\hrulefill (see The TeXbook).\n10You can't \n45I'm changing to \\insert0; box 255 is special.\n32Try `I\\vskip-\\lastskip' instead.\n31Try `I\\kern-\\lastkern' instead.\n46Perhaps you can make the output routine do it.\n09unpenalty\n06unkern\n06unskip\n06unhbox\n07unhcopy\n06unvbox\n07unvcopy\n34Incompatible list can't be unboxed\n35Sorry, Pandora. (You sneaky devil.)\n58I refuse to unbox an \\hbox in vertical mode or vice versa.\n40And I can't open any boxes in math mode.\n13Illegal math \n54Sorry: The third part of a discretionary break must be\n57empty, in math formulas. I had to delete your third part.\n30Discretionary list is too long\n50Wow---I never thought anybody would tweak me here.\n56You can't seriously need such a huge discretionary list?\n27Improper discretionary list\n54Discretionary lists must contain only boxes and kerns.\n53The following discretionary sublist has been deleted:\n18Missing } inserted\n45I've put in what seems to be necessary to fix\n44the current column of the current alignment.\n43Try to go on, since this might almost work.\n10Misplaced \n55I can't figure out why you would want to use a tab mark\n50here. If you just want an ampersand, the remedy is\n52simple: Just type `I\\&' now. But if some right brace\n52up above has ended a previous alignment prematurely,\n52you're probably due for more error messages, and you\n57might try typing `S' now just to see what is salvageable.\n57or \\cr or \\span just now. If something like a right brace\n46I expect to see \\noalign only after the \\cr of\n49an alignment. Proceed, and I'll ignore this case.\n56I expect to see \\omit only after tab marks or the \\cr of\n53I'm guessing that you meant to end an alignment here.\n50I'm ignoring this, since I wasn't doing a \\csname.\n04eqno\n05leqno\n13displaylimits\n42Limit controls must follow a math operator\n57I'm ignoring this misplaced \\limits or \\nolimits command.\n30Missing delimiter (. inserted)\n52I was expecting to see something like `(' or `\\{' or\n55`\\}' here. If you typed, e.g., `{' instead of `\\{', you\n57should probably delete the `{' by typing `1' now, so that\n52braces don't get unbalanced. Otherwise just proceed.\n54Acceptable delimiters are characters whose \\delcode is\n58nonnegative, or you can use `\\delimiter <delimiter code>'.\n11Please use \n25 for accents in math mode\n55I'm changing \\accent to \\mathaccent here; wish me luck.\n59(Accents are not the same in formulas as they are in text.)\n18Double superscript\n43I treat `x^1^2' essentially like `x^1{}^2'.\n16Double subscript\n43I treat `x_1_2' essentially like `x_1{}_2'.\n05above\n04over\n04atop\n15abovewithdelims\n14overwithdelims\n14atopwithdelims\n35Ambiguous; you need another { and }\n55I'm ignoring this fraction specification, since I don't\n52know whether a construction like `x \\over y \\over z'\n53means `{x \\over y} \\over z' or `x \\over {y \\over z}'.\n49I'm ignoring a \\right that had no matching \\left.\n47Math formula deleted: Insufficient symbol fonts\n50Sorry, but I can't typeset math unless \\textfont 2\n50and \\scriptfont 2 and \\scriptscriptfont 2 have all\n50the \\fontdimen values needed in math symbol fonts.\n50Math formula deleted: Insufficient extension fonts\n50Sorry, but I can't typeset math unless \\textfont 3\n50and \\scriptfont 3 and \\scriptscriptfont 3 have all\n53the \\fontdimen values needed in math extension fonts.\n31Display math should end with $$\n59The `$' that I just saw supposedly matches a previous `$$'.\n49So I shall assume that you typed `$$' both times.\n07display\n19Missing $$ inserted\n04long\n05outer\n06global\n03def\n04gdef\n04edef\n04xdef\n06prefix\n29You can't use a prefix with `\n55I'll pretend you didn't say \\long or \\outer or \\global.\n06' or `\n08' with `\n49I'll pretend you didn't say \\long or \\outer here.\n33Missing control sequence inserted\n52Please don't say `\\def cs{...}', say `\\def\\cs{...}'.\n59I've inserted an inaccessible control sequence so that your\n60definition will be completed without mixing me up too badly.\n53You can recover graciously from this error, if you're\n42careful; see exercise 27.2 in The TeXbook.\n12inaccessible\n03let\n09futurelet\n07chardef\n11mathchardef\n08countdef\n08dimendef\n07skipdef\n09muskipdef\n07toksdef\n44You should have said `\\read<number> to \\cs'.\n34I'm going to look for the \\cs now.\n14Invalid code (\n29), should be in the range 0..\n21), should be at most \n54I'm going to use 0 instead of that illegal code value.\n02by\n19Arithmetic overflow\n50I can't carry out that multiplication or division,\n33since the result is out of range.\n55I'm forgetting what you said and not changing anything.\n57Sorry, \\setbox is not allowed after \\halign in a display,\n45or between \\accent and an accented character.\n16Bad space factor\n47I allow only values in the range 1..32767 here.\n37I allow only nonnegative values here.\n37Patterns can be loaded only by INITEX\n10hyphenchar\n08skewchar\n04FONT\n02at\n06scaled\n20Improper `at' size (\n21pt), replaced by 10pt\n50I can only handle fonts at positive sizes that are\n56less than 2048pt, so I've changed what you said to 10pt.\n12select font \n13errorstopmode\n06openin\n07closein\n07message\n10errmessage\n31(That was another \\errmessage.)\n50This error message was generated by an \\errmessage\n43command, so I can't give any explicit help.\n54Pretend that you're Hercule Poirot: Examine all clues,\n41and deduce the truth by order and method.\n09lowercase\n09uppercase\n04show\n07showbox\n07showthe\n09showlists\n57This isn't an error message; I'm just \\showing something.\n46Type `I\\show...' to show more (e.g., \\show\\cs,\n43\\showthe\\count10, \\showbox255, \\showlists).\n54And type `I\\tracingonline=1\\show...' to show boxes and\n57lists on your terminal as well as in the transcript file.\n02> \n09undefined\n05macro\n10long macro\n11outer macro\n17outer endtemplate\n06> \\box\n02OK\n26 (see the transcript file)\n09 (INITEX)\n29You can't dump inside a group\n24`{...\\dump}' is a no-no.\n25 strings of total length \n43 memory locations dumped; current usage is \n30 multiletter control sequences\n24 words of font info for \n15 preloaded font\n05\\font\n22 hyphenation exception\n27Hyphenation trie of length \n05 has \n03 op\n08 out of \n14 for language \n19 (preloaded format=\n16format file name\n26Beginning to dump on file \n22Transcript written on \n02 )\n13end occurred \n24inside a group at level \n05when \n09 on line \n16 was incomplete)\n52(see the transcript file for additional information)\n35(\\dump is performed only by INITEX)\n21debug # (-1 to exit):\n07openout\n08closeout\n07special\n09immediate\n11setlanguage\n20[unknown extension!]\n04ext1\n12 (hyphenmin \n08whatsit?\n04ext2\n04ext3\n08endwrite\n24Unbalanced write command\n59On this page there's a \\write with fewer real {'s than }'s.\n04ext4\n16output file name\n*504454778\n",
	"/texfonts/cmbxti10.tfm":    "\x01\u007f\x00\x12\x00\x00\x00\u007f\x006\x00\x10\x00\n\x00:\x00M\x00\t\x00\x00\x00\aF\rC\x96\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMBXTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xb0\xa4\x00-\xb0\x00\x00)\xb0H\x00 \xb0\x00\x00\x1d\xb0\xc0\x00,\xb0\xd4\x00\"\xb0\x90\x00)\xb0x\x00\"\xb0\x18\x00)\xb0x\x00\"\xb0d\x00\x1b\xd8\xe5\b\x16\xd8|\x00\x18\xd8|\x000\xd8|\x001\xd8|\x00\x020P\x00\x048\x10\x00\x10\xd0\x00\x00\x10\xd0D\x00\x10\x80<\x00\x10\xd0l\x00\x10`p\x00.\xd0\x00\x00\r\x06\x00\x00\x15\xd8\\\x00\"0@\x00\"0@\x00\x10TT\x00/\xb0\x90\x003\xb0\x90\x00)\xe2H\x00\x010\x01\x0f\x05Ѝ\x17\x13\xd04\x00-\xd7(\x00&\xd0\x00\x00-\xf3\xa0\x00)\xd0D\x00\x02Щ\x12\t\xf9\xc8\x00\t\xf9\f\x00\x10\xf0\xb8\x00)u\f\x00\x02\x18\x00\x00\a0\t\x15\x02\x10\x00\x00\x10\xf9\xc8\x00\x10\xa0\xac\x00\x10\xa0\xac\x00\x10\xa0\xac\x00\x10\xa0\xac\x00\x10\xa8\xac\x00\x10\xa0\xac\x00\x10\xa0\xac\x00\x10\xa8\xac\x00\x10\xa0\xac\x00\x10\xa0\xac\x00\x020 \x00\x028 \x00\x05H\x1c\x00)!(\x00\x10H\x00\x00\x10Е\x18)\xd0L\x00%\xb0\x010!\xb0d\x00\"\xb0\xb4\x00'\xb0I+\x1c\xb0\x90\x00\x1a\xb0\xa5\x1a+\xb0,\x00,\xb0\xd4\x00\b\xb0\xc4\x00\x11\xb0\xbc\x00*\xb0\xb5 \x17\xb0\x01A2\xb0\xd4\x00,\xb0\xd4\x00#\xb0I+\x1e\xb0e*#\xb8H\x00$\xb0\x050\x14\xb0\x84\x00\x1f\xb0\xa5$(\xb0\xd4\x00%\xb0\xd9\x1a4\xb0\xd9*%\xb0\xc5 %\xb0\xe1%\x19\xb0\xb4\x00\x03\xf9\xdc\x00\x13\xd0\xd0\x00\x03\xf9h\x00\x10\xd0$\x00\x02Ш\x00\x02Щ\x11\x100P\x00\r\xd01E\r0\x15E\x10\xd0}\x19\r0AE\x06\xd8\xe5\x00\r8t\x00\x10\xd0P\x00\x02\xc0\x88\x00\x02\xc8\xcc\x00\rЀ\x00\x01\xd0}\x19-0P\x00\x140QL\x1001E\x1081E\r8t\x00\f0\x81E\n08\x00\x04\x90X\x00\x120P\x00\r0\x80\x00\x1d0\x81\x19\x0e0\x9c\x00\x0f8t\x00\v0\xb0\x00\x100a\x1650`\x00\x10Д\x00\x10Д\x00\x10И\x00\x00\x00\x00\x00\x00\x04\xbf#\x00\x05\xb0X\x00\x05\xb2\xa0\x00\x06(\xf3\x00\x06-\x80\x00\x06fh\x00\x06\xa1\x8d\x00\a\x8b\xf0\x00\a\x92\xc2\x00\aʃ\x00\a\xd9N\x00\b\x06\xd2\x00\b\x83\xf6\x00\b\xf8\x06\x00\b\xfc\x92\x00\tu+\x00\t\xc4\xd0\x00\t\xed\xc6\x00\t\xed\xc8\x00\nf`\x00\n\xa3\xd6\x00\nʅ\x00\v*\x12\x00\vC\x1e\x00\vW\x95\x00\v\xa2\xad\x00\f\x16\xc0\x00\f\x1bF\x00\fH\xca\x00\f\x98n\x00\f\xbc\xd6\x00\f\xe8\x13\x00\r\x11\n\x00\r9\xfe\x00\r\xae\v\x00\r\xc0B\x00\r\xd9H\x00\r\xe5\x83\x00\x0e\x02>\x00\x0e\x17\xdd\x00\x0e+3\x00\x0eQ\xe3\x00\x0eS\x06\x00\x0eVp\x00\x0f\x1ch\x00\x0f.\x9d\x00\x10]B\x00\x10\xb7*\x00\x10\xf3v\x00\x11*\x0e\x00\x12?\xab\x00\x12\x8fP\x00\x12\xeaV\x00\x00\x00\x00\x00\x02[\x06\x00\x06A\xfe\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t\x82\xd6\x00\t\xa7=\x00\n\x1cr\x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x17\x93\x00\v\x1cr\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeA\xfe\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xa7=\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00h\xd3\x00\x00j\xf3\x00\x00\x87e\x00\x00\xbc\xe2\x00\x00\xd5\xe8\x00\x00\xe6\xae\x00\x01\f\x85\x00\x01\x126\x00\x01\x12\xc8\x00\x01\x17\xe5\x00\x01,\xf2\x00\x01A\xfe\x00\x01E0\x00\x01N\x82\x00\x01R\xc8\x00\x01\\+\x00\x01]M\x00\x01s3\x00\x01y+\x00\x01\x82\x18\x00\x01\x83k\x00\x01\x8a\xd0\x00\x01\x8e\xca\x00\x01\x91\xe0\x00\x01\x96U\x00\x01\x98x\x00\x01\xa7B\x00\x01\xab\xce\x00\x01\xae\x16\x00\x01\xb9u\x00\x01\xbc\xe2\x00\x01\xc7\x1d\x00\x01\xcd`\x00\x01\xd2k\x00\x01Ӣ\x00\x01\xd43\x00\x01\xd5\xe8\x00\x01\xd5\xea\x00\x02\x03j\x00\x02\x0e\xcb\x00\x02\x10\x82\x00\x02\x126\x00\x02\x1bN\x00\x028\xe5\x00\x02E\xfa\x00\x02K\x18\x00\x02Q\xed\x00\x02j(\x00\x02\x82H\x00\x02\x87e\x00\x02\xac\xde\x00\x02\xae\xfd\x00\x02\xc0\xdb\x00\x02\xfa\xe2\x00\x03\x00\x00\x00\x03+ \x00\x03|\x05\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01\xb4\xe8\xff\xfb@\xdd\xff\xf9\xdav\x00\x01\xe2j\x00\x00\xf15\xff\xfe\x960\xff\xfe\x1d\x96\xff\xff\x87e\xff\xff\x0e\xcb\x00\x04\x00\x00\x00\x06\xa1\x8d\x00\x02Ӟ\x00\x01\xe2j\x00\a\x1cr\x00\x12\xeaV\x00\x01\xe2j",
	"/texfonts/cmmi12.tfm":      "\x01}\x00\x12\x00\x00\x00\u007f\x00a\x00\x0f\x00\t\x00!\x00:\x00\v\x00\x00\x00\x06\xb7\xe1g\xa3\x00\xc0\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6;\xb0u\x1d[\xb0\x01'P\xb0\x15\x18H\xb0\x01'L\xb0Q\x18X\xb0U\x10S\xb0A\x183\xb0u\fD\xb0\x01\x189\xb0m\bQ\xb0-\x18>@\x05\x03+\xc75\x18$G0\x00\x12\xc0!\t\n@\x01\v\x10\xc7M\x18\x1fG\x1d\v\x17\xc0\x15\x18\x05@\x01\v0@\x00\x003\xc0\x00\x008G\x01\x03 @E\x01\x10\xc7)!,@\x1c\x00#G\x01\x18.@\x1d/\x0f@q\x01)@\x1d\x036\xc7\x01\x18=G\x01\vB\xc7\x1d!<@\x1c\x00\x18@\x01\x185\xc0\x01\x18W@\x14\x00#G\x01\x18\aF]\x18CG\x01\x18`2\x00\x00`2\x00\x00`2\x00\x00`2\x00\x00\x01S\x00\x00\x01S\x00\x00!d\x00\x00!d\x00\x00!@\x00\x00!@\x00\x00!@\x00\x00!G\x00\x00!G\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Ru\x00\x00!\xe8\x014Ru\x00\x00!d\x00\x00(\xc01\x18M\xb0\x01\"N\xb0-\x18J\xb0I\x15Z\xb0\x15\vK\xb0A\x18A\xb0u\x1dT\xb0\x01\x18X\xb0U\x10\x11\xb0Y!*\xb0a+\\\xb0I\bF\xb0\x01\x03_\xb0e\x19V\xb0e\x14P\xb0\x15\x18@\xb0u\x1dU\xb7\x01\x18O\xb0\t\x18:\xb0=\x194\xb0u\x15E\xb0e\x042\xb0}1^\xb0u1Y\xb0Y\x141\xb0}1G\xb0I\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00`!\x00\x00`!\x00\x00\f\xc0\x01!'@\x00\x00\r\xc0\x00\x00\x0e@\x01\v%\xc0\x01#\x15@\x01\v\x1e\xc7i(\x1aG\x1d\x030\xc0\x01\x00\x04\xa0\x00\x00\v\xa79/&\xc0\x18\x00\x02\xc0\r\x18]@\x00\x007@\x00\x00\x1b@\x01\v\"G\x01\x18\x13G\x1d\x18\x14@\x15\t\x19@\x01\v\x06\x80\x01\x18/@\x01\x03\x1c@\x1d\x03I@\x11\x18-@\x01\x03\x1dG\x1d\v\x16@%\v\x03@\x01\x03\bG\x01\x18?G\x01!!\xd0x\x00\x01\xc0\x80\x00\x00\x00\x00\x00\x00\x04Z\x10\x00\x04\xaa\xa8\x00\x04\xff\xfc\x00\x05X4\x00\x05\x89x\x00\x05\xa8H\x00\x05\xaa\xa5\x00\x06\v\xd8\x00\x06\x17\xb0\x00\x06Sl\x00\x06{@\x00\x06\x92\xf4\x00\x06\xa99\x00\x06\xbe\x15\x00\x06ͻ\x00\x06װ\x00\x06\xe8\xe1\x00\x06\xf0U\x00\x06\xf2<\x00\a\x0fd\x00\aB\xd4\x00\aG\x18\x00\aM\x04\x00\aT\xd8\x00\aa,\x00\a\x80t\x00\a\x88\t\x00\a\x92\xf1\x00\a\xa3\x89\x00\a\xb8\xe0\x00\a\xba\xc4\x00\a\xbd\x9d\x00\a\xd5P\x00\a\xdc\xe7\x00\b\x14\x9b\x00\b P\x00\b$\x03\x00\b%\xe8\x00\b9W\x00\bE1\x00\bq\xc1\x00\b\xa8\xc3\x00\b\xd8(\x00\b\xe3\x10\x00\b\xe7\x18\x00\b\xe7\x90\x00\b\xea\xa4\x00\t\x04\xb8\x00\t\x16\xf9\x00\t\"\x1d\x00\t#\x88\x00\t.\xac\x00\t;\xb5\x00\tE\xa9\x00\tZ\f\x00\tm\x04\x00\t\x91\x8d\x00\t\xa2\x97\x00\t\xb4\xd8\x00\t\xc1e\x00\tГ\x00\t\xf6\xf7\x00\t\xf9W\x00\n\x19\x1c\x00\n$@\x00\n/a\x00\nCI\x00\nq\xc0\x00\n\xa3\xdd\x00\n\xa8\xbf\x00\n\xb9\x1b\x00\n߽\x00\v2\xef\x00\v5g\x00\v\x98\xdd\x00\v\xa8\xa0\x00\v\xbe\x8d\x00\v\xe6\xd9\x00\v\xec\xb8\x00\v\xf9\f\x00\f\x1fC\x00\f/`\x00\f@\xaf\x00\f[\x90\x00\fht\x00\f\x8b\x98\x00\f\xf1G\x00\f\xfb\x00\x00\r\x00\x91\x00\r\x01\xf7\x00\r\x0e0\x00\rT \x00\r\xb4\x1c\x00\x0e\xcae\x00\x0f(\b\x00\x0f\xaa\xa0\x00\x00\x00\x00\x00\x01\x8e9\x00\x05\xb8\xe4\x00\x05\xc6A\x00\x06\xe3\x8f\x00\aAk\x00\aq\xc8\x00\bm;\x00\t\xd7_\x00\nO\xa5\x00\n}L\x00\n\xee\xef\x00\v\x1cq\x00\vg\x89\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe4\xff\xfd\xc6A\xff\xffAk\xff\xffq\xc8\x00\x00m;\x00\x01\x8e9\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x14\x00\x00!\xb8\x00\x00Z\x14\x00\x00n9\x00\x00oh\x00\x00\x89|\x00\x00\x92\xf7\x00\x00\x99\x99\x00\x00\xb6\x85\x00\x00\xc5\xef\x00\x00γ\x00\x00\xde\xd0\x00\x00\xe3\x15\x00\x00\xe6o\x00\x00\xeeu\x00\x00\xf0\x1f\x00\x01\x02_\x00\x01&)\x00\x015W\x00\x016\xe0\x00\x01<s\x00\x01B\x04\x00\x01I|\x00\x01{C\x00\x01\xab\xdb\x00\x01\xb5T\x00\x01\xbf\x03\x00\x01\xc9|\x00\x02-\b\x00\x02v\v\x00\x03{@\x00\x06H\xaf\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xff\x90\x98\xff\xff!0\x00\x00oh\xff\xfeB`\x00\x00\xde\xd0\xff\xfe\xb1\xc8\x00\x01N8\x00\x01\xbd\xa0\x00\x02-\b\xff\xfdc\x90\x00\x02\x9cp\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8f\x00\x0f\xaa\xa0",
	"/texfonts/cmmi6.tfm":       "\x01z\x00\x12\x00\x00\x00\u007f\x00_\x00\x0f\x00\t\x00 \x00:\x00\v\x00\x00\x00\x06\x10;\xce\x00`\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf24\xb0u\x1dZ\xb0\x01'N\xb0\x15\x18F\xb0\x01'J\xb0M\x18V\xb0U\x10P\xb05\x181\xb0u\fB\xb0\x01\x18=\xb0m\bO\xb0)\x18?@\x01\x03*\xc7-\x18#G@\x00\x0f\xc0\x19\t\v@\x01\v\x11\xc7=\x18\"G!\v\x17\xc0\x15\x18\x04@\x01\v,@\x00\x001\xc0\x00\x005G\x01\x03\x1c@E\x01\x11\xc7\x11!.@ \x00 G\x01\x18+@!/\x13@i\x01(@\x1d\x033\xc7\x01\x188G\x01\vA\xc7\x1d!;@\x1c\x00\x15@\x01\x186\xc0\x01\x18X@\x14\x00 G\x01\x18\aFQ\x18@G\x01\x18^2\x00\x00^2\x00\x00^2\x00\x00^2\x00\x00\x01d\x00\x00\x01d\x00\x00\x1fS\x00\x00\x1fS\x00\x00\x1f@\x00\x00\x1f@\x00\x00\x1f@\x00\x00\x1fG\x00\x00\x1fG\x00\x00\x1fG\x00\x00\x1f\x90\x00\x00\x1fG\x00\x00\x1f\x90\x00\x00\x1fG\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Ru\x00\x00\x1f\xe8\x014Ru\x00\x00\x1fS\x00\x00$\xc0A\x18L\xb0\x01\"M\xb0)\x18G\xb0I\x15U\xb0\x15\vI\xb05\x18:\xb0u\x1dQ\xb0\x01\x18V\xb0U\x10\f\xb0Y!'\xb0]+Y\xb0I\bE\xb0\x01\x03]\xb0a\x19T\xb0a\x14N\xb0\x15\x18<\xb0u\x1dS\xb7\x01\x18K\xb0\x05\x187\xb01\x190\xb0u\x15D\xb0a\x04/\xb0y1\\\xb0u1W\xb0Y\x14-\xb0y1C\xb0I\x19\b\xe0\x00\x00\b\xc7\x00\x00\b\xc7\x00\x00^!\x00\x00^!\x00\x00\n\xc0\x01!&@\x00\x00\r\xc0\x00\x00\x0e@\x01\v!\xc0\x01#\x16@\x01\v\x19\xc7e(\x1aG!\x03,\xc0\x01\x00\x03\xa0\x00\x00\t\xa79/%\xc0\b\x00\x02\xc0\x01\x18[@\x00\x009@\x00\x00\x1b@\x01\v!G\x01\x18\x10G!\x18\x12@\x15\t\x14@\x01\v\x05\x80\x01\x182@\x01\x03\x1d@\x1d\x03H@\r\x18)@\x01\x03\x1eG!\v\x18@%\v\x03@\x01\x03\x06G\x01\x18>G\x01!\x1f\xd0p\x00\x01\xc0|\x00\x00\x00\x00\x00\x00\x06\x12\xf5\x00\x06m\v\x00\a!0\x00\av\x85\x00\a\xa1-\x00\a\xaa\xab\x00\a\xce5\x00\b%\xeb\x00\b/h\x00\bK\xdb\x00\b_H\x00\b\xc3P\x00\b\xc3S\x00\b\xf2@\x00\t\x0f+\x00\t!\xa5\x00\t%\xeb\x00\tG\x1b\x00\tP\x1b\x00\tZ\x13\x00\tc\x10\x00\tl\x90\x00\tq\xcb\x00\t\x89{\x00\t\x9cp\x00\t\xb9U\x00\t\xcc\xcd\x00\t\xf1\xc3\x00\t\xff\xfd\x00\n!+\x00\n8\xe0\x00\n9`\x00\nG\x95\x00\nM\xbb\x00\nn\x88\x00\n\x89\xf5\x00\n\x92\xf5\x00\n\xccS\x00\n\xe7\xd3\x00\v\tx\x00\v*\xa8\x00\v+%\x00\vv\xfb\x00\v\x9cp\x00\v\x9fE\x00\v\xa0\xb0\x00\v\xac\x8d\x00\v\xb2\xb5\x00\v\xc7\x18\x00\v\xcb\xd8\x00\v\xdf\xc3\x00\v\xe1\xa5\x00\f\x00\x00\x00\f\x02\xd5\x00\f\x1b}\x00\fG\x18\x00\fP\x95\x00\ffc\x00\fzK\x00\fz\xc5\x00\f\u007f\xc8\x00\f\x98+\x00\f\xdfH\x00\f\xfc0\x00\r\x1cm\x00\rUP\x00\rgU\x00\rh\xd8\x00\r\x8ah\x00\r\xbf\x80\x00\x0e#\xa0\x00\x0eJ\xa5\x00\x0eep\x00\x0e\x84\xbb\x00\x0e\xc1\v\x00\x0e\xc8\xfb\x00\x0e\xd3-\x00\x0e\xf1\xf0\x00\x0f\"\xd3\x00\x0f9\xd3\x00\x0f? \x00\x0fhE\x00\x0fv\xad\x00\x0fyX\x00\x0f\xf8\xf5\x00\x0f\xfe\x15\x00\x10\x05\xab\x00\x10Y\x93\x00\x10i8\x00\x10q\xc0\x00\x11\u007f\xfb\x00\x12j+\x00\x12\x95\xc8\x00\x13\x8e0\x00\x00\x00\x00\x00\x01\xed\v\x00\x05\xb8\xe5\x00\x06=(\x00\x06\xe3\x8d\x00\aq\xc8\x00\b\x10\x80\x00\the\x00\t\xd7]\x00\nO\xa5\x00\n\x99\xbd\x00\n\xee\xf0\x00\v\x1cs\x00\v\x86C\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe5\xff\xfe=(\xff\xffq\xc8\x00\x00\x10\x80\x00\x01he\x00\x01\x8e;\x00\x03\x1cs\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x0f\r\x00\x00US\x00\x00n8\x00\x00p\x9b\x00\x00\x84\xbd\x00\x00\x8d\xc0\x00\x00\x92\xf5\x00\x00\x92\xf8\x00\x00\xa1-\x00\x00\xc4\b\x00\x00\xd2{\x00\x00\xd9 \x00\x00\xdb\x05\x00\x00\xed\x8d\x00\x00\xf5X\x00\x01\t{\x00\x01\x17\xb5\x00\x01\x1b\x80\x00\x01/h\x00\x014%\x00\x015\x1b\x00\x01<\xad\x00\x01\x83S\x00\x01\xb9\xd8\x00\x01\xd5X\x00\x01\xda\x13\x00\x01\xdf\x03\x00\x02v\v\x00\x02\x97\xb3\x00\x04%\xeb\x00\b\v\x10\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xff{C\xff\xfe\xf6\x85\x00\x00\x84\xbd\xff\xfd\xed\v\x00\x01\t{\xff\xfeq\xc8\x00\x01\x8e8\x00\x02\x12\xf5\x00\x02\x97\xb3\xff\xfc\xe3\x90\x00\x03\x1cp\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8d\x00\x14q\xc0",
	"/texfonts/cmr10.tfm":       "\x01D\x00\x12\x00\x00\x00\u007f\x00$\x00\x10\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\aK\xf1`y\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x12\xc0\x00\x00\x1e\xc0\x00\x00\x1c\xc0\x00\x00\x16\xc0\x00\x00\x14\xc0\x00\x00\x1a\xc0\x00\x00\x18\xc0\x00\x00\x1c\xc0\x00\x00\x18\xc0\x00\x00\x1c\xc0\x00\x00\x18\xc0\x00\x00\x10\xd0\x11\n\x0f\xd0\x00\x00\x0f\xd0\x00\x00\x1e\xd0\x00\x00\x1e\xd0\x00\x00\x010\x00\x00\x028\x00\x00\n\xd0\x00\x00\n\xd0\x00\x00\n\x90\x00\x00\n\xd0\x00\x00\n`\x00\x00\x1a\xd0\x00\x00\b\x06\x00\x00\v\xd0\x00\x00\x180\x00\x00\x1c0\x00\x00\nU\x00\x00\x1f\xc0\x00\x00\"\xc0\x00\x00\x1c\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\n\xd0\x00\x00\x1e\xd7\x00\x00\n\xf3\x00\x00\x1e\xf3\x00\x00\x1c\xd0\x00\x00\x01\xd0\x01\x12\x05\xf9\x00\x00\x05\xf9\x00\x00\n\xf0\x00\x00\x1ct\x00\x00\x01\x18\x00\x00\x030\x01\x15\x01\x10\x00\x00\n\xf9\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x01H\x00\x00\x1c!\x00\x00\tH\x00\x00\t\xd0\x01\x18\x1c\xd0\x00\x00\x1a\xc0\x01L\x17\xc0\x00\x00\x18\xc0\x00\x00\x1b\xc0\x015\x15\xc0\x00\x00\x13\xc0\x01$\x1d\xc0\x00\x00\x1a\xc0\x00\x00\x04\xc0\x01W\f\xc0\x00\x00\x1c\xc0\x01*\x12\xc0\x01R \xc0\x00\x00\x1a\xc0\x00\x00\x1c\xc0\x015\x15\xc0\x01\x1e\x1c\xc8\x00\x00\x19\xc0\x01L\x0f\xc0\x00\x00\x18\xc0\x01.\x1a\xc0\x00\x00\x1a\xc0\x05$#\xc0\x05$\x1a\xc0\x01*\x1a\xc0\t/\x11\xc0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\n0\x01H\x0f\xd0\x01B\b0\x01@\x0f\xd0\x00\x00\b0\x00\x00\x02\xd0\x11\x02\n8\x05V\x0f\xd0\x01:\x01\xb0\x00\x00\x02\xb8\x00\x00\x0e\xd0\x01\x19\x01\xd0\x00\x00\x1e0\x01:\x0f0\x01:\n0\x01B\x0f8\x01B\r8\x00\x00\x060\x00\x00\a0\x00\x00\x05\x80\x01J\x0f0\x01K\x0e0\x05\x19\x180\x05\x1a\x0e0\x00\x00\x0e8\x05\x1f\b0\x00\x00\n0\r\x16!0\f\x00\n\xd0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\x00\x00\x00\x00\x00\x04q\xc8\x00\x04\xe3\x90\x00\x05UV\x00\x05\xc7\x1d\x00\x068\xe5\x00\x06DF\x00\x06O\xa6\x00\a\x1cs\x00\a\x8e;\x00\b\x00\x02\x00\b\x00\x03\x00\b8\xe5\x00\bq\xc8\x00\bq\xca\x00\b\xe3\x90\x00\tUX\x00\t\xc7\x1e\x00\n\x00\x02\x00\nq\xca\x00\n\xaa\xad\x00\n\xe3\x90\x00\v\x1cs\x00\vUX\x00\v\x8e;\x00\v\xc7\x1e\x00\f\x00\x02\x00\f8\xe6\x00\fq\xca\x00\f\x8e;\x00\rUX\x00\x0eq\xca\x00\x0e\xaa\xad\x00\x10\x00\x03\x00\x108\xe6\x00\x10q\xca\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t\x15\x9d\x00\tUV\x00\t\xd7^\x00\n\x0e:\x00\nO\xa5\x00\n\xaf\x8d\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x008\xe3\x00\x00ff\x00\x00q\xc8\x00\x01>\x95\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\x8e8\xff\xfa\xe3\x8d\x00\x01>\x95\x00\x01\xc7\x1d\xff\xff\x1cr\xff\xff\x8e8\xff\xfe\xaa\xaa\xff\xfe8\xe3\x00\x00q\xc8\x00\x00\xe3\x8e\x00\x00\x00\x00\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\x06\xe3\x8e\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/logosl9.tfm":     "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\x90\tc\xc1\x00\x90\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bMFLOGOSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\t\xa1\xb9\x00\nY\xcb\x00\v\x11\xdc\x00\r:\x12\x00\x00\x00\x00\x00\t\x99\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc2n\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa3\xf7\xff\xffG\xee\x00\x00\xb8\x12\x00\x00\x00\x00\x00\x04\x99<\x00\x02(5\x00\x01p$\x00\x00\x00\x00\x00\r:\x12",
	"/texfonts/slantcx4.tfm":    "\x00a\x00\x12\x00\x01\x00\x1e\x00\x1f\x00\x02\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\b7\x1d\xb82\x01\x00\x00\x00\aGFSLANT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bSLANTCX4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\x01\x10\x00\x00\x02\x10\x00\x00\x03\x10\x00\x00\x04\x10\x00\x00\x05\x10\x00\x00\x06\x10\x00\x00\a\x10\x00\x00\b\x10\x00\x00\t\x10\x00\x00\n\x10\x00\x00\v\x10\x00\x00\f\x10\x00\x00\r\x10\x00\x00\x0e\x10\x00\x00\x0f\x10\x00\x00\x10\x10\x00\x00\x11\x10\x00\x00\x12\x10\x00\x00\x13\x10\x00\x00\x14\x10\x00\x00\x15\x10\x00\x00\x16\x10\x00\x00\x17\x10\x00\x00\x18\x10\x00\x00\x19\x10\x00\x00\x1a\x10\x00\x00\x1b\x10\x00\x00\x1c\x10\x00\x00\x1d\x10\x00\x00\x1e\x10\x00\x00\x00\x00\x00\x00\x00\x00\x1e\xd6\x00\x00=\xac\x00\x00\\\x81\x00\x00{W\x00\x00\x9a-\x00\x00\xb9\x03\x00\x00\xd7\xd8\x00\x00\xf6\xae\x00\x01\x15\x84\x00\x014Z\x00\x01S/\x00\x01r\x05\x00\x01\x90\xdb\x00\x01\xaf\xb1\x00\x01Ά\x00\x01\xed\\\x00\x02\f2\x00\x02+\b\x00\x02I\xdd\x00\x02h\xb3\x00\x02\x87\x89\x00\x02\xa6_\x00\x02\xc54\x00\x02\xe4\n\x00\x03\x02\xe0\x00\x03!\xb6\x00\x03@\x8b\x00\x03_a\x00\x03~7\x00\x03\x9d\r\x00\x00\x00\x00\x00\x0et2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ff",
	"/texfonts/cmfi10.tfm":      "\x01d\x00\x12\x00\x00\x00\u007f\x002\x00\x0e\x00\v\x00$\x00M\x00\t\x00\x00\x00\a\x13\v\x84\x8e\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMFI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xa0\x80\x00-\xa0\x00\x00(\xa0$\x00\x18\xa0\x00\x00\x1b\xa0X\x00\x1a\xa0\x00\x00#\xa0h\x00(\xa08\x00#\xa0\b\x00(\xa08\x00#\xa00\x00\x15\x98\x8d\b\x10\x98p\x00\x13\x98p\x00)\x98p\x00,\x98p\x00\x03Pp\x00\x05X\x00\x00\x0f\x90\x00\x00\x0f\x90\x00\x00\x0fp\x00\x00\x0f\x90\x00\x00\x0f\x80(\x00\"\x90\x00\x00\v\a\x00\x00\x12\x98\x00\x00#P,\x00#P,\x00\x0f\xb4L\x00.\xa0h\x000\xa0h\x00(\xd3$\x00\x01P\x01\x0f\x02\x90\x11\x17\x0f\x90\x00\x00-\x99\x04\x00\x1e\x90\x00\x00-\xc2\x1c\x00(\x90\x00\x00\x03\x90\x01\x12\b\xcaT\x00\b\xca\x00\x00\x0f\xc0<\x00(F\x00\x00\x03\x15\x00\x00\aP\x01\x15\x03\x10\x00\x00\x0f\xcaT\x00\x0f`H\x00\x0f`H\x00\x0f`H\x00\x0f`H\x00\x0fhH\x00\x0f`H\x00\x0f`H\x00\x0fhH\x00\x0f`H\x00\x0f`H\x00\x03P\x00\x00\x03U\x00\x00\x028\x00\x00(!\x04\x00\x0f8\x00\x00\x0f\x90\r\x18(\x90 \x00!\xa0\x010\x1f\xa00\x00#\xa0P\x00%\xa0%+ \xa0h\x00\x1c\xa0\x81\x1a'\xa0\x00\x00\x1a\xa0\x00\x00\x06\xa0\\\x00\x0e\xa0\x00\x00$\xa0Q \x17\xa0\x01A+\xa0\x00\x00\x1a\xa0\x00\x00*\xa0%+\x19\xa01**\xa5$\x00\"\xa0\x010\x14\xa0\x14\x00&\xa0\x81$\x1d\xa0\x00\x00!\xa0\x85\x1a/\xa0\x85*!\xa0] !\xa0\x89%\x16\xa0P\x00\x03\xcat\x00\x0f\x90d\x00\x03\xca\x00\x00\x0f\x90\x00\x00\x03\x90\x00\x00\x03\x90\x01\x11\x0fPp\x00\v\x90\x19E\vP\x01E\x0f\x90q\x19\vP-E\x04\x98\x8d\x00\vX4\x00\x0f\x90p\x00\x03\x90p\x00\x03\x98D\x00\v\x90`\x00\x01\x90q\x19-Pp\x00\x14PqL\x0fP\x19E\x0fX\x19E\vX4\x00\nPaE\bP@\x00\x05\x90p\x00\x11Pp\x00\vP`\x00\x1bPa\x19\fPx\x00\rX4\x00\tP|\x00\x0fPm\x161Pl\x00\x0f\x90\f\x00\x0f\x90\f\x00\x0f\x90\x00\x00\x00\x00\x00\x00\x00\x03\xe9=\x00\x04\" \x00\x04\xd8+\x00\x04\xd8-\x00\x05O\xa3\x00\x05l\x13\x00\x05\xc7\x1a\x00\x06\xb6\b\x00\x06\xb6\n\x00\x06\xf1\xc5\x00\a\xa4\xf6\x00\a\xa4\xf8\x00\b\x1cn\x00\bfb\x00\b\x93\xe5\x00\b\xc1j\x00\t\v]\x00\t\v^\x00\t8\xe0\x00\t\x82\xd3\x00\t\xb0X\x00\nq\xc2\x00\n\xfaJ\x00\v\x05\xaa\x00\v3-\x00\v>\x8d\x00\v`\xb0\x00\vq\xc2\x00\v\x99\x92\x00\v\xa4\xf6\x00\v\xaa\xa5\x00\v\xe98\x00\v\xf4\x98\x00\f\"\x1b\x00\fO\x9e\x00\fl\x10\x00\f\x99\x93\x00\r\x05\xaa\x00\r'\xcb\x00\r>\x8d\x00\r\xd5P\x00\r\xf4\x98\x00\x0e\vX\x00\x0e\x11\v\x00\x0e-{\x00\x0e\xee\xe6\x00\x10\x9f@\x00\x10\xcc\xc3\x00\x11'\xca\x00\x00\x00\x00\x00\x01'\xd3\x00\x04\xf4\x9e\x00\x05UV\x00\b\v]\x00\bq\xc6\x00\tUU\x00\tq\xc8\x00\t\xa9\x86\x00\t\xc7\x1d\x00\n\x00\x00\x00\n\xaa\xaa\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\x00\x00\x11\x12\x00\x00\xe3\x8e\x00\x01\x1cr\x00\x028\xe3\x00\x03\x1cr\x00\x03'\xd0\x00\x03\xe3\x8e\x00\x04q\xc6\x00\x04\xe3\x90\x00\x05\xc7\x1d\x00\x00\x00\x00\x00\x00\af\x00\x00\b\x8a\x00\x00\ve\x00\x00\vf\x00\x00\x11\x16\x00\x00\x1f\xde\x00\x00\"&\x00\x007\xc2\x00\x00;\xbe\x00\x00D+\x00\x00H\x10\x00\x00H\x8b\x00\x00I\xfa\x00\x00UX\x00\x00]\xe2\x00\x00`\xba\x00\x00l\x1b\x00\x00w{\x00\x00w}\x00\x00\x88\x8d\x00\x00\x99\x9d\x00\x00\xace\x00\x00\xc4J\x00\x00\xd82\x00\x00\xe2n\x00\x00\xe3\x93\x00\x00\xfd\x15\x00\x00\xfe\x1d\x00\x01\x11\x15\x00\x01\x13\xed\x00\x01\x16\xc6\x00\x01\x1fP\x00\x01;\xc0\x00\x01k\x8a\x00\x01\xad\x86\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x00\xd5V\xff\xfc\x16\xc3\xff\xfbUX\x00\x01\xdd\xdd\x00\x00\xee\xee\xff\xfe\x99\x9a\xff\xfe\"#\xff\xff\x88\x88\xff\xff\x11\x12\x00\x01\x99\xa0\x00\x05\xc7\x1a\x00\x02\xcc\xcb\x00\x01\xdd\xdd\x00\bq\xc6\x00\x11'\xca\x00\x01\xdd\xdd",
	"/texfonts/cmr9.tfm":        "\x01C\x00\x12\x00\x00\x00\u007f\x00$\x00\x10\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\ao\xb4\x8b\xc7\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x11\xc0\x00\x00\x1e\xc0\x00\x00\x1c\xc0\x00\x00\x15\xc0\x00\x00\x13\xc0\x00\x00\x19\xc0\x00\x00\x17\xc0\x00\x00\x1c\xc0\x00\x00\x17\xc0\x00\x00\x1c\xc0\x00\x00\x17\xc0\x00\x00\x0f\xd0\x11\n\x0e\xd0\x00\x00\x0e\xd0\x00\x00\x1e\xd0\x00\x00\x1e\xd0\x00\x00\x010\x00\x00\x027\x00\x00\v\xd0\x00\x00\v\xd0\x00\x00\v\x90\x00\x00\v\xd0\x00\x00\v`\x00\x00\x19\xd0\x00\x00\b\x06\x00\x00\v\xd0\x00\x00\x170\x00\x00\x1c0\x00\x00\vU\x00\x00\x1f\xc0\x00\x00\"\xc0\x00\x00\x1c\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\v\xd0\x00\x00\x1e\xd7\x00\x00\v\xf3\x00\x00\x1e\xf3\x00\x00\x1c\xd0\x00\x00\x01\xd0\x01\x12\x05\xf8\x00\x00\x05\xf8\x00\x00\v\xf0\x00\x00\x1ct\x00\x00\x01\x17\x00\x00\x030\x01\x15\x01\x10\x00\x00\v\xf8\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\v\xa0\x00\x00\x010\x00\x00\x017\x00\x00\x01G\x00\x00\x1c!\x00\x00\nG\x00\x00\n\xd0\x01\x18\x1c\xd0\x00\x00\x19\xc0\x01L\x16\xc0\x00\x00\x17\xc0\x00\x00\x1a\xc0\x015\x14\xc0\x00\x00\x12\xc0\x01$\x1d\xc0\x00\x00\x19\xc0\x00\x00\x04\xc0\x01W\f\xc0\x00\x00\x1b\xc0\x01*\x11\xc0\x01R \xc0\x00\x00\x19\xc0\x00\x00\x1c\xc0\x015\x14\xc0\x01\x1e\x1c\xc7\x00\x00\x18\xc0\x01L\x0e\xc0\x00\x00\x17\xc0\x01.\x19\xc0\x00\x00\x19\xc0\x05$#\xc0\x05$\x19\xc0\x01*\x19\xc0\t/\x10\xc0\x00\x00\x01\xf8\x00\x00\v\xd0\x00\x00\x01\xf8\x00\x00\v\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\v0\x01H\x0e\xd0\x01B\b0\x01@\x0e\xd0\x00\x00\t0\x00\x00\x02\xd0\x11\x02\v7\x05V\x0e\xd0\x01:\x01\xb0\x00\x00\x02\xb7\x00\x00\r\xd0\x01\x19\x01\xd0\x00\x00\x1e0\x01:\x0e0\x01:\v0\x01B\x0e7\x01B\r7\x00\x00\x060\x00\x00\a0\x00\x00\x05\x80\x01J\x0e0\x01K\r0\x05\x19\x170\x05\x1a\r0\x00\x00\r7\x05\x1f\b0\x00\x00\v0\r\x16!0\f\x00\v\xd0\x00\x00\v\xb0\x00\x00\v\xb0\x00\x00\x00\x00\x00\x00\x00\x04\x91`\x00\x05\x06P\x00\x05{@\x00\x05\xef\x8e\x00\x06e \x00\x06n\x9c\x00\x06|\x84\x00\aO\x00\x00\aP\x95\x00\a\xc3\xf0\x00\b8\xe0\x00\bs\a\x00\b\xad\xd0\x00\t\"\xc0\x00\t\x97\xb0\x00\n\f\xa0\x00\nF\xc7\x00\n\xbb\xb7\x00\n\xf6\x80\x00\v0\xa7\x00\vj\xce\x00\v\xa5\x97\x00\v\xe0`\x00\f\x1a\x87\x00\fT\xae\x00\f\x8fw\x00\fɞ\x00\f\xca@\x00\f\xe7T\x00\r\xb4 \x00\x0e\xd8'\x00\x0f\x12N\x00\x10q\xc0\x00\x10\xab\xe7\x00\x10\xe6\x0e\x00\x00\x00\x00\x00\x01\xbay\x00\x05\xf4\xe9\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc7\x00\t!~\x00\t{@\x00\t\xd7^\x00\n\x0e9\x00\nO\xa5\x00\n\xb4\x9b\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xf4\xe9\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01{@\x00\x01\x8e9\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00:y\x00\x00i>\x00\x00t\xf0\x00\x01@\xc9\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfbn\xa0\xff\xfa\xbf\x89\x00\x01@\xc9\x00\x01\xd3\xc0\xff\xff\x16 \xff\xff\x8b\x10\xff\xfe\xa10\xff\xfe,@\x00\x00t\xf0\x00\x00\xe9\xe0\x00\x00\x00\x00\x00\x05{@\x00\x02\xbd\xa0\x00\x01\xd3\xc0\x00\x06\xe3\x8e\x00\x10q\xc0\x00\x01\xd3\xc0",
	"/texfonts/logod10.tfm":     "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06{#\xba\xf5\x00\xa0\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MFLOGO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\t\xb4\xde\x00\nt\x03\x00\v3(\x00\rp\x96\x00\x00\x00\x00\x00\t\x99\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00_\x93\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa0m\xff\xff@\xdb\x00\x00\xbf%\x00\x00\x00\x00\x00\x04z\xdd\x00\x02=n\x00\x01~J\x00\x00\x00\x00\x00\rp\x96",
	"/texfonts/logosl10.tfm":    "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\xf8\x94o>\x00\xa0\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bMFLOGOSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\t>\x92\x00\t\xf4\x9d\x00\n\xaa\xa8\x00\f\xcc\xca\x00\x00\x00\x00\x00\t\x99\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xc1m\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa4\xfa\xff\xffI\xf5\x00\x00\xb6\v\x00\x00\x00\x00\x00\x04DC\x00\x02\"\"\x00\x01l\x16\x00\x00\x00\x00\x00\f\xcc\xca",
	"/tex.pool":                 "11buffer size\n09pool size\n17number of strings\n03???\n13m2d5c2l5x2v5i\n28End of file on the terminal!\n02! \n42(That makes 100 errors; please try again.)\n02? \n22You want to edit file \n09 at line \n60Type <return> to proceed, S to scroll future error messages,\n44R to run without stopping, Q to run quietly,\n23I to insert something, \n20E to edit your file,\n561 or ... or 9 to ignore the next 1 to 9 tokens of input,\n22H for help, X to quit.\n13OK, entering \n09batchmode\n11nonstopmode\n10scrollmode\n03...\n07insert>\n44I have just deleted some text, as you asked.\n48You can now delete more, or insert, or whatever.\n50Sorry, I don't know how to help in this situation.\n36Maybe you should try asking a human?\n42Sorry, I already gave what help I could...\n59An error might have occurred before I noticed any problems.\n45``If all else fails, read the instructions.''\n02 (\n14Emergency stop\n30TeX capacity exceeded, sorry [\n44If you really absolutely need more capacity,\n35you can ask a wizard to enlarge me.\n19This can't happen (\n59I'm broken. Please show this to someone who can fix can fix\n35I can't go on meeting you like this\n55One of your faux pas seems to have wounded me deeply...\n59in fact, I'm barely conscious. Please fix it and try again.\n12Interruption\n09You rang?\n58Try to insert an instruction for me (e.g., `I\\showlists'),\n43unless you just want to quit by typing `X'.\n16main memory size\n24AVAIL list clobbered at \n31Double-AVAIL list clobbered at \n24Doubly free location at \n12Bad flag at \n14New busy locs:\n05LINK(\n05INFO(\n02[]\n10CLOBBERED.\n04foul\n03fil\n06 plus \n07 minus \n03 []\n26Bad link, display aborted.\n04etc.\n18Unknown node type!\n05unset\n04box(\n02)x\n10, shifted \n09 columns)\n10, stretch \n09, shrink \n11, glue set \n02- \n03?.?\n03< -\n05rule(\n06insert\n15, natural size \n08; split(\n14); float cost \n04glue\n09nonscript\n05mskip\n02mu\n00\n08leaders \n04kern\n13 (for accent)\n05mkern\n04math\n02on\n03off\n13, surrounded \n11 (ligature \n08penalty \n13discretionary\n11 replacing \n04mark\n07vadjust\n08flushing\n07copying\n08vertical\n10horizontal\n12display math\n02no\n17internal vertical\n21restricted horizontal\n05 mode\n18semantic nest size\n04### \n17 entered at line \n10 (language\n10:hyphenmin\n18 (\\output routine)\n25### recent contributions:\n10prevdepth \n07ignored\n11, prevgraf \n05 line\n12spacefactor \n19, current language \n31this will begin denominator of:\n08lineskip\n12baselineskip\n07parskip\n16abovedisplayskip\n16belowdisplayskip\n21abovedisplayshortskip\n21belowdisplayshortskip\n08leftskip\n09rightskip\n07topskip\n12splittopskip\n07tabskip\n09spaceskip\n10xspaceskip\n11parfillskip\n10thinmuskip\n09medmuskip\n11thickmuskip\n25[unknown glue parameter!]\n04skip\n06muskip\n02pt\n06output\n08everypar\n09everymath\n12everydisplay\n09everyhbox\n09everyvbox\n08everyjob\n07everycr\n07errhelp\n04toks\n08parshape\n03box\n04void\n12current font\n08textfont\n10scriptfont\n16scriptscriptfont\n07catcode\n06lccode\n06uccode\n06sfcode\n08mathcode\n12pretolerance\n09tolerance\n11linepenalty\n13hyphenpenalty\n15exhyphenpenalty\n11clubpenalty\n12widowpenalty\n19displaywidowpenalty\n13brokenpenalty\n12binoppenalty\n10relpenalty\n17predisplaypenalty\n18postdisplaypenalty\n16interlinepenalty\n20doublehyphendemerits\n19finalhyphendemerits\n11adjdemerits\n03mag\n15delimiterfactor\n09looseness\n04time\n03day\n05month\n04year\n14showboxbreadth\n12showboxdepth\n08hbadness\n08vbadness\n07pausing\n13tracingonline\n13tracingmacros\n12tracingstats\n17tracingparagraphs\n12tracingpages\n13tracingoutput\n16tracinglostchars\n15tracingcommands\n15tracingrestores\n06uchyph\n13outputpenalty\n13maxdeadcycles\n09hangafter\n15floatingpenalty\n10globaldefs\n03fam\n10escapechar\n17defaulthyphenchar\n15defaultskewchar\n11endlinechar\n11newlinechar\n08language\n13lefthyphenmin\n14righthyphenmin\n14holdinginserts\n17errorcontextlines\n28[unknown integer parameter!]\n05count\n07delcode\n09parindent\n12mathsurround\n13lineskiplimit\n05hsize\n05vsize\n08maxdepth\n13splitmaxdepth\n11boxmaxdepth\n05hfuzz\n05vfuzz\n18delimitershortfall\n18nulldelimiterspace\n11scriptspace\n14predisplaysize\n12displaywidth\n13displayindent\n12overfullrule\n10hangindent\n07hoffset\n07voffset\n16emergencystretch\n26[unknown dimen parameter!]\n05dimen\n06EQUIV(\n12notexpanded:\n09hash size\n06csname\n09endcsname\n11IMPOSSIBLE.\n12NONEXISTENT.\n06accent\n07advance\n15afterassignment\n10aftergroup\n10begingroup\n04char\n09delimiter\n06divide\n08endgroup\n11expandafter\n04font\n09fontdimen\n06halign\n05hrule\n12ignorespaces\n10mathaccent\n08mathchar\n10mathchoice\n08multiply\n07noalign\n10noboundary\n08noexpand\n04omit\n07penalty\n08prevgraf\n07radical\n04read\n05relax\n06setbox\n03the\n06valign\n07vcenter\n05vrule\n09save size\n15grouping levels\n08curlevel\n09retaining\n09restoring\n05SAVE(\n28Incompatible magnification (\n02);\n36 the previous value will be retained\n58I can handle only one magnification ratio per job. So I've\n59reverted to the magnification you used earlier on this run.\n46Illegal magnification has been changed to 1000\n52The magnification ratio must be between 1 and 32768.\n04ETC.\n04BAD.\n02->\n22begin-group character \n20end-group character \n21math shift character \n26macro parameter character \n22superscript character \n20subscript character \n25end of alignment template\n12blank space \n11the letter \n14the character \n23[unknown command code!]\n02: \n08Runaway \n10definition\n08argument\n08preamble\n04text\n03<*>\n09<insert> \n06<read \n02l.\n11<argument> \n11<template> \n16<recently read> \n19<to be read again> \n16<inserted text> \n09<output> \n11<everypar> \n12<everymath> \n15<everydisplay> \n12<everyhbox> \n12<everyvbox> \n11<everyjob> \n10<everycr> \n07<mark> \n08<write> \n16input stack size\n05write\n48(interwoven alignment preambles are not allowed)\n17text input levels\n03par\n11Incomplete \n34; all text was ignored after line \n54A forbidden control sequence occurred in skipped text.\n59This kind of error happens when you say `\\if...' and forget\n59the matching `\\fi'. I've inserted a `\\fi'; this might work.\n53The file ended while I was skipping conditional text.\n10File ended\n32Forbidden control sequence found\n16 while scanning \n04 of \n46I suspect you have forgotten a `}', causing me\n41to read past where you wanted me to stop.\n49I'll try to recover; but if the error is serious,\n51you'd better type `E' or `X' now and fix your file.\n03use\n39Text line contains an invalid character\n53A funny symbol that I can't read has just been input.\n48Continue, and I'll forget that it ever happened.\n37(Please type a command or say `\\end')\n38*** (job aborted, no legal \\end found)\n02=>\n26Undefined control sequence\n47The control sequence at the end of the top line\n52of your error message was never \\def'ed. If you have\n55misspelled it (e.g., `\\hobx'), type `I' and the correct\n51spelling (e.g., `I\\hbox'). Otherwise just continue,\n45and I'll forget about whatever was undefined.\n08Missing \n09 inserted\n53The control sequence marked <to be read again> should\n42not appear between \\csname and \\endcsname.\n05input\n08endinput\n07topmark\n09firstmark\n07botmark\n14splitfirstmark\n12splitbotmark\n20parameter stack size\n12Argument of \n15 has an extra }\n58I've run across a `}' that doesn't seem to match anything.\n52For example, `\\def\\a#1{...}' and `\\a}' would produce\n54this error. If you simply proceed now, the `\\par' that\n52I've just inserted will cause me to report a runaway\n54argument that might be the root of the problem. But if\n57your `}' was spurious, just type `2' and it will go away.\n23Paragraph ended before \n13 was complete\n58I suspect you've forgotten a `}', causing me to apply this\n54control sequence to too much text. How can we recover?\n59My plan is to forget the whole thing and hope for the best.\n07Use of \n29 doesn't match its definition\n54If you say, e.g., `\\def\\a1{...}', then you must always\n52put `1' after `\\a', since control sequence names are\n52made up of letters only. The macro here has not been\n51followed by the required stuff, so I'm ignoring it.\n02<-\n18Missing { inserted\n52A left brace was mandatory here, so I've put one in.\n55You might want to delete and/or insert some corrections\n48so that I will find a matching right brace soon.\n54(If you're confused by all this, try typing `I}' now.)\n23Incompatible glue units\n52I'm going to assume that 1mu=1pt when they're mixed.\n31Missing number, treated as zero\n47A number should have been here; I inserted `0'.\n54(If you can't figure out why I needed to see a number,\n51look up `weird error' in the index to The TeXbook.)\n11spacefactor\n09prevdepth\n10deadcycles\n15insertpenalties\n02wd\n02ht\n02dp\n11lastpenalty\n08lastkern\n08lastskip\n11inputlineno\n07badness\n09Improper \n54You can refer to \\spacefactor only in horizontal mode;\n54you can refer to \\prevdepth only in vertical mode; and\n48neither of these is meaningful inside \\write. So\n52I'm forgetting what you said and using zero instead.\n15You can't use `\n08' after \n17Bad register code\n44A register number must be between 0 and 255.\n27I changed this one to zero.\n18Bad character code\n45A character number must be between 0 and 255.\n10Bad number\n51Since I expected to read a number between 0 and 15,\n12Bad mathchar\n46A mathchar number must be between 0 and 32767.\n18Bad delimiter code\n56A numeric delimiter code must be between 0 and 2^{27}-1.\n28Improper alphabetic constant\n56A one-character control sequence belongs after a ` mark.\n37So I'm essentially inserting \\0 here.\n14Number too big\n54I can only go up to 2147483647='17777777777=\"7FFFFFFF,\n42so I'm using that number instead of yours.\n04true\n25Illegal unit of measure (\n18replaced by filll)\n35I dddon't go any higher than filll.\n02em\n02ex\n12mu inserted)\n48The unit of measurement in math glue must be mu.\n51To recover gracefully from this error, it's best to\n52delete the erroneous units; e.g., type `2' to delete\n45two letters. (See Chapter 27 of The TeXbook.)\n02in\n02pc\n02cm\n02mm\n02bp\n02dd\n02cc\n02sp\n12pt inserted)\n49Dimensions can be in units of em, ex, in, pt, pc,\n50cm, mm, dd, cc, bp, or sp; but yours is a new one!\n59I'll assume that you meant to say pt, for printer's points.\n19Dimension too large\n50I can't work with sizes bigger than about 19 feet.\n46Continue and I'll use the largest value I can.\n04plus\n05minus\n05width\n06height\n05depth\n06number\n12romannumeral\n06string\n07meaning\n08fontname\n07jobname\n04 at \n60Where was the left brace? You said something like `\\def\\a}',\n43which I'm going to interpret as `\\def\\a{}'.\n32You already have nine parameters\n45I'm going to ignore the # sign you just used,\n38as well as the token that followed it.\n41Parameters must be numbered consecutively\n57I've inserted the digit you should have used after the #.\n36Type `1' to delete what you did use.\n42Illegal parameter number in definition of \n41You meant to type ## instead of #, right?\n56Or maybe a } was forgotten somewhere earlier, and things\n58are all screwed up? I'm going to assume that you meant ##.\n49*** (cannot \\read from terminal in nonstop modes)\n18File ended within \n33This \\read has unbalanced braces.\n02if\n05ifcat\n05ifnum\n05ifdim\n05ifodd\n07ifvmode\n07ifhmode\n07ifmmode\n07ifinner\n06ifvoid\n06ifhbox\n06ifvbox\n03ifx\n05ifeof\n06iftrue\n07iffalse\n06ifcase\n02fi\n02or\n04else\n06Extra \n44I'm ignoring this; it doesn't match any \\if.\n06{true}\n07{false}\n23Missing = inserted for \n48I was expecting to see `<', `=', or `>'. Didn't.\n06{case \n10TeXinputs:\n09TeXfonts:\n04.fmt\n15input file name\n19I can't find file `\n23I can't write on file `\n02'.\n04.tex\n20Please type another \n45*** (job aborted, file error in nonstop mode)\n04.dvi\n20file name for output\n06texput\n04.log\n02**\n20transcript file name\n02  \n08nullfont\n05Font \n08 scaled \n36 not loadable: Bad metric (TFM) file\n42 not loadable: Metric (TFM) file not found\n50I wasn't able to read the size data for this font,\n40so I will ignore the font specification.\n48[Wizards can fix TFM files using TFtoPL/PLtoTF.]\n46You might try inserting a different font spec;\n57e.g., type `I\\font<same font id>=<substitute font name>'.\n04.tfm\n33 not loaded: Not enough room left\n52I'm afraid I won't be able to make use of this font,\n55because my memory for character-size data is too small.\n51If you're really stuck, ask a wizard to enlarge me.\n58Or maybe try `I\\font<same font id>=<name of loaded font>'.\n23Missing font identifier\n42I was looking for a control sequence whose\n42current meaning has been defined by \\font.\n10 has only \n21 fontdimen parameters\n51To increase the number of font parameters, you must\n53use \\fontdimen immediately after the \\font is loaded.\n11font memory\n31Missing character: There is no \n09 in font \n12 TeX output \n08vlistout\n31Completed box being shipped out\n21Memory usage before: \n08 after: \n19; still untouched: \n31Huge page cannot be shipped out\n50The page just created is more than 18 feet tall or\n58more than 18 feet wide, so I suspect something went wrong.\n35The following box has been deleted:\n19No pages of output.\n18Output written on \n05 page\n02, \n08 bytes).\n02to\n06spread\n09Underfull\n05Loose\n16 \\hbox (badness \n38) has occurred while \\output is active\n24) in paragraph at lines \n24) in alignment at lines \n02--\n19) detected at line \n16Overfull \\hbox (\n11pt too wide\n21Tight \\hbox (badness \n05vpack\n16 \\vbox (badness \n16Overfull \\vbox (\n11pt too high\n21Tight \\vbox (badness \n02{}\n12displaystyle\n09textstyle\n11scriptstyle\n17scriptscriptstyle\n14Unknown style!\n07mathord\n06mathop\n07mathbin\n07mathrel\n08mathopen\n09mathclose\n09mathpunct\n09mathinner\n08overline\n09underline\n04left\n05right\n06limits\n08nolimits\n20fraction, thickness \n09= default\n17, left-delimiter \n18, right-delimiter \n25 is undefined (character \n54Somewhere in the math formula just ended, you used the\n60stated character from an undefined font family. For example,\n58plain TeX doesn't allow \\it or \\sl in subscripts. Proceed,\n52and I'll try to forget that I needed that character.\n06mlist1\n06mlist2\n06mlist3\n640234000122*4000133**3**344*0400400*000000234000111*1111112341011\n06mlist4\n12 inside $$'s\n53Displays can use special alignments (like \\eqalignno)\n57only if nothing but the alignment itself is between $$'s.\n58So I've deleted the formulas that preceded this alignment.\n04span\n02cr\n04crcr\n11endtemplate\n24alignment tab character \n40Missing # inserted in alignment preamble\n50There should be exactly one # between &'s, when an\n56\\halign or \\valign is being set up. In this case you had\n47none, so I've put one in; maybe that will work.\n29Only one # is allowed per tab\n49more than one, so I'm ignoring all but the first.\n04endv\n40Extra alignment tab has been changed to \n52You have given more \\span or & marks than there were\n58in the preamble to the \\halign or \\valign now in progress.\n50So I'll assume that you meant to type \\cr instead.\n09256 spans\n06align1\n06align0\n44Infinite glue shrinkage found in a paragraph\n52The paragraph just ended includes some glue that has\n54infinite shrinkability, e.g., `\\hskip 0pt minus 1fil'.\n54Such glue doesn't belong there---it allows a paragraph\n59of any length to fit on one line. But it's safe to proceed,\n55since the offensive shrinkability has been made finite.\n05disc1\n05disc2\n02@@\n07: line \n03 t=\n06 -> @@\n07 via @@\n03 b=\n03 p=\n03 d=\n10@firstpass\n11@secondpass\n14@emergencypass\n09paragraph\n05disc3\n05disc4\n13line breaking\n05HYPH(\n11hyphenation\n16 will be flushed\n48Hyphenation exceptions must contain only letters\n51and hyphens. But continue; I'll forgive and forget.\n12Not a letter\n50Letters in \\hyphenation words must have \\lccode>0.\n47Proceed; I'll ignore the character I just read.\n20exception dictionary\n18pattern memory ops\n31pattern memory ops per language\n14pattern memory\n13Too late for \n08patterns\n53All patterns must be given before typesetting begins.\n04Bad \n17(See Appendix H.)\n09Nonletter\n17Duplicate pattern\n07pruning\n09vertbreak\n48Infinite glue shrinkage found in box being split\n52The box you are \\vsplitting contains some infinitely\n57shrinkable glue, e.g., `\\vss' or `\\vskip 0pt minus 1fil'.\n59Such glue doesn't belong there; but you can safely proceed,\n06vsplit\n09 needs a \n04vbox\n44The box you are trying to split is an \\hbox.\n49I can't split such a box, so I'll leave it alone.\n08pagegoal\n09pagetotal\n11pagestretch\n14pagefilstretch\n15pagefillstretch\n16pagefilllstretch\n10pageshrink\n09pagedepth\n04fill\n05filll\n17### current page:\n28 (held over for next output)\n13total height \n13 goal height \n06 adds \n03, #\n12 might split\n15%% goal height=\n12, max depth=\n38Insertions can only be added to a vbox\n40Tut tut: You're trying to \\insert into a\n41\\box register that now contains an \\hbox.\n47Proceed, and I'll discard its present contents.\n04page\n45Infinite glue shrinkage found on current page\n52The page about to be output contains some infinitely\n03 g=\n03 c=\n38Infinite glue shrinkage inserted from \n53The correction glue for page breaking with insertions\n52must have finite shrinkability. But you may proceed,\n07% split\n04 to \n15255 is not void\n53You shouldn't use \\box255 except in \\output routines.\n14Output loop---\n24 consecutive dead cycles\n57I've concluded that your \\output is awry; it never does a\n55\\shipout, so I'm shipping \\box255 out myself. Next time\n58increase \\maxdeadcycles if you want me to be more patient!\n25Unbalanced output routine\n58Your sneaky output routine has problematic {'s and/or }'s.\n41I can't handle that very well; good luck.\n33Output routine didn't use all of \n43Your \\output commands should empty \\box255,\n34e.g., by saying `\\shipout\\box255'.\n43Proceed; I'll discard its present contents.\n18Missing $ inserted\n56I've inserted a begin-math/end-math symbol since I think\n48you left one out. Proceed, with fingers crossed.\n05' in \n50Sorry, but I'm not programmed to handle this case;\n45I'll just pretend that you didn't ask for it.\n49If you're in the wrong mode, you might be able to\n58return to the right one by typing `I}' or `I$' or `I\\par'.\n03end\n04dump\n05hskip\n04hfil\n05hfill\n03hss\n07hfilneg\n05vskip\n04vfil\n05vfill\n03vss\n07vfilneg\n52I've inserted something that you may have forgotten.\n32(See the <inserted text> above.)\n48With luck, this will get me unwedged. But if you\n55really didn't forget anything, try typing `2' now; then\n56my insertion and my current dilemma will both disappear.\n06right.\n58Things are pretty mixed up, but I think the worst is over.\n12Too many }'s\n42You've closed more groups than you opened.\n51Such booboos are generally harmless, so keep going.\n10rightbrace\n22Extra }, or forgotten \n58I've deleted a group-closing symbol because it seems to be\n59spurious, as in `$x}$'. But perhaps the } is legitimate and\n59you forgot something else, as in `\\hbox{$x}'. In such cases\n58the way to recover is to insert both the forgotten and the\n40deleted material, e.g., by typing `I$}'.\n08moveleft\n09moveright\n05raise\n05lower\n04copy\n07lastbox\n04vtop\n04hbox\n07shipout\n07leaders\n08cleaders\n08xleaders\n35Leaders not followed by proper glue\n56You should say `\\leaders <box or rule><hskip or vskip>'.\n50I found the <box or rule>, but there's no suitable\n48<hskip or vskip>, so I'm ignoring these leaders.\n34Sorry; this \\lastbox will be void.\n58Sorry...I usually can't take things from the current page.\n37This \\lastbox will therefore be void.\n21Missing `to' inserted\n48I'm working on `\\vsplit<box number> to <dimen>';\n31will look for the <dimen> next.\n31A <box> was supposed to be here\n57I was expecting to see \\hbox or \\vbox or \\copy or \\box or\n59something like that. So you might find something missing in\n53your output. But keep trying; you can fix this later.\n06indent\n08noindent\n26' here except with leaders\n52To put a horizontal rule in an hbox or an alignment,\n56you should use \\leaders or \\hrulefill (see The TeXbook).\n10You can't \n45I'm changing to \\insert0; box 255 is special.\n32Try `I\\vskip-\\lastskip' instead.\n31Try `I\\kern-\\lastkern' instead.\n46Perhaps you can make the output routine do it.\n09unpenalty\n06unkern\n06unskip\n06unhbox\n07unhcopy\n06unvbox\n07unvcopy\n34Incompatible list can't be unboxed\n35Sorry, Pandora. (You sneaky devil.)\n58I refuse to unbox an \\hbox in vertical mode or vice versa.\n40And I can't open any boxes in math mode.\n13Illegal math \n54Sorry: The third part of a discretionary break must be\n57empty, in math formulas. I had to delete your third part.\n30Discretionary list is too long\n50Wow---I never thought anybody would tweak me here.\n56You can't seriously need such a huge discretionary list?\n27Improper discretionary list\n54Discretionary lists must contain only boxes and kerns.\n53The following discretionary sublist has been deleted:\n18Missing } inserted\n45I've put in what seems to be necessary to fix\n44the current column of the current alignment.\n43Try to go on, since this might almost work.\n10Misplaced \n55I can't figure out why you would want to use a tab mark\n50here. If you just want an ampersand, the remedy is\n52simple: Just type `I\\&' now. But if some right brace\n52up above has ended a previous alignment prematurely,\n52you're probably due for more error messages, and you\n57might try typing `S' now just to see what is salvageable.\n57or \\cr or \\span just now. If something like a right brace\n46I expect to see \\noalign only after the \\cr of\n49an alignment. Proceed, and I'll ignore this case.\n56I expect to see \\omit only after tab marks or the \\cr of\n53I'm guessing that you meant to end an alignment here.\n50I'm ignoring this, since I wasn't doing a \\csname.\n04eqno\n05leqno\n13displaylimits\n42Limit controls must follow a math operator\n57I'm ignoring this misplaced \\limits or \\nolimits command.\n30Missing delimiter (. inserted)\n52I was expecting to see something like `(' or `\\{' or\n55`\\}' here. If you typed, e.g., `{' instead of `\\{', you\n57should probably delete the `{' by typing `1' now, so that\n52braces don't get unbalanced. Otherwise just proceed.\n54Acceptable delimiters are characters whose \\delcode is\n58nonnegative, or you can use `\\delimiter <delimiter code>'.\n11Please use \n25 for accents in math mode\n55I'm changing \\accent to \\mathaccent here; wish me luck.\n59(Accents are not the same in formulas as they are in text.)\n18Double superscript\n43I treat `x^1^2' essentially like `x^1{}^2'.\n16Double subscript\n43I treat `x_1_2' essentially like `x_1{}_2'.\n05above\n04over\n04atop\n15abovewithdelims\n14overwithdelims\n14atopwithdelims\n35Ambiguous; you need another { and }\n55I'm ignoring this fraction specification, since I don't\n52know whether a construction like `x \\over y \\over z'\n53means `{x \\over y} \\over z' or `x \\over {y \\over z}'.\n49I'm ignoring a \\right that had no matching \\left.\n47Math formula deleted: Insufficient symbol fonts\n50Sorry, but I can't typeset math unless \\textfont 2\n50and \\scriptfont 2 and \\scriptscriptfont 2 have all\n50the \\fontdimen values needed in math symbol fonts.\n50Math formula deleted: Insufficient extension fonts\n50Sorry, but I can't typeset math unless \\textfont 3\n50and \\scriptfont 3 and \\scriptscriptfont 3 have all\n53the \\fontdimen values needed in math extension fonts.\n31Display math should end with $$\n59The `$' that I just saw supposedly matches a previous `$$'.\n49So I shall assume that you typed `$$' both times.\n07display\n19Missing $$ inserted\n04long\n05outer\n06global\n03def\n04gdef\n04edef\n04xdef\n06prefix\n29You can't use a prefix with `\n55I'll pretend you didn't say \\long or \\outer or \\global.\n06' or `\n08' with `\n49I'll pretend you didn't say \\long or \\outer here.\n33Missing control sequence inserted\n52Please don't say `\\def cs{...}', say `\\def\\cs{...}'.\n59I've inserted an inaccessible control sequence so that your\n60definition will be completed without mixing me up too badly.\n53You can recover graciously from this error, if you're\n42careful; see exercise 27.2 in The TeXbook.\n12inaccessible\n03let\n09futurelet\n07chardef\n11mathchardef\n08countdef\n08dimendef\n07skipdef\n09muskipdef\n07toksdef\n44You should have said `\\read<number> to \\cs'.\n34I'm going to look for the \\cs now.\n14Invalid code (\n29), should be in the range 0..\n21), should be at most \n54I'm going to use 0 instead of that illegal code value.\n02by\n19Arithmetic overflow\n50I can't carry out that multiplication or division,\n33since the result is out of range.\n55I'm forgetting what you said and not changing anything.\n57Sorry, \\setbox is not allowed after \\halign in a display,\n45or between \\accent and an accented character.\n16Bad space factor\n47I allow only values in the range 1..32767 here.\n37I allow only nonnegative values here.\n37Patterns can be loaded only by INITEX\n10hyphenchar\n08skewchar\n04FONT\n02at\n06scaled\n20Improper `at' size (\n21pt), replaced by 10pt\n50I can only handle fonts at positive sizes that are\n56less than 2048pt, so I've changed what you said to 10pt.\n12select font \n13errorstopmode\n06openin\n07closein\n07message\n10errmessage\n31(That was another \\errmessage.)\n50This error message was generated by an \\errmessage\n43command, so I can't give any explicit help.\n54Pretend that you're Hercule Poirot: Examine all clues,\n41and deduce the truth by order and method.\n09lowercase\n09uppercase\n04show\n07showbox\n07showthe\n09showlists\n57This isn't an error message; I'm just \\showing something.\n46Type `I\\show...' to show more (e.g., \\show\\cs,\n43\\showthe\\count10, \\showbox255, \\showlists).\n54And type `I\\tracingonline=1\\show...' to show boxes and\n57lists on your terminal as well as in the transcript file.\n02> \n09undefined\n05macro\n10long macro\n11outer macro\n17outer endtemplate\n06> \\box\n02OK\n26 (see the transcript file)\n09 (INITEX)\n29You can't dump inside a group\n24`{...\\dump}' is a no-no.\n25 strings of total length \n43 memory locations dumped; current usage is \n30 multiletter control sequences\n24 words of font info for \n15 preloaded font\n05\\font\n22 hyphenation exception\n27Hyphenation trie of length \n05 has \n03 op\n08 out of \n14 for language \n19 (preloaded format=\n16format file name\n26Beginning to dump on file \n22Transcript written on \n02 )\n13end occurred \n24inside a group at level \n05when \n09 on line \n16 was incomplete)\n52(see the transcript file for additional information)\n35(\\dump is performed only by INITEX)\n21debug # (-1 to exit):\n07openout\n08closeout\n07special\n09immediate\n11setlanguage\n20[unknown extension!]\n04ext1\n12 (hyphenmin \n08whatsit?\n04ext2\n04ext3\n08endwrite\n24Unbalanced write command\n59On this page there's a \\write with fewer real {'s than }'s.\n04ext4\n16output file name\n*504454778\n",
	"/texfonts/cmbx6.tfm":       "\x01P\x00\x12\x00\x00\x00\u007f\x001\x00\x0f\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a\x80E\xc0t\x00`\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf2\x17\xa0\x00\x00*\xa0\x00\x00(\xa0\x00\x00\x1d\xa0\x00\x00\x1b\xa0\x00\x00&\xa0\x00\x00 \xa0\x00\x00(\xa0\x00\x00 \xa0\x00\x00(\xa0\x00\x00 \xa0\x00\x00\x16\xb0\x11\n\x15\xb0\x00\x00\x15\xb0\x00\x00+\xb0\x00\x00+\xb0\x00\x00\x010\x00\x00\x047\x00\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x0ep\x00\x00\x0e\xb0\x00\x00\x0e`\x00\x00\"\xb0\x00\x00\n\x05\x00\x00\x0f\xb0\x00\x00 0\x00\x00(0\x00\x00\x0eT\x00\x00,\xa0\x00\x00.\xa0\x00\x00(\xd2\x00\x00\x010\x01\x00\x03\xb0\x01\x17\x10\xb0\x00\x00*\xb6\x00\x00\x0e\xe3\x00\x00*\xe3\x00\x00(\xb0\x00\x00\x01\xb0\x01\x12\a\xe9\x00\x00\a\xe9\x00\x00\x0e\xe0\x00\x00(\xc8\x00\x00\x01\x17\x00\x00\x050\x01\x15\x01\x10\x00\x00\x0e\xe9\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x010\x00\x00\x017\x00\x00\x03G\x00\x00(!\x00\x00\fG\x00\x00\f\xb0\x01\x18(\xb0\x00\x00\"\xa0\x01L\x1f\xa0\x00\x00 \xa0\x00\x00%\xa0\x015\x1a\xa0\x00\x00\x19\xa0\x01$)\xa0\x00\x00&\xa0\x00\x00\x06\xa0\x01W\x11\xa0\x00\x00'\xa0\x01*\x17\xa0\x01R-\xa0\x00\x00&\xa0\x00\x00#\xa0\x015\x1c\xa0\x01\x1e#\xa7\x00\x00!\xa0\x01L\x14\xa0\x00\x00\x1e\xa0\x01.$\xa0\x00\x00\"\xa0\x05$0\xa0\x05$\"\xa0\x01*\"\xa0\t/\x18\xa0\x00\x00\x02\xe9\x00\x00\x10\xb0\x00\x00\x02\xe9\x00\x00\x0e\xb0\x00\x00\x01\xb0\x00\x00\x01\xb0\x01\x11\r0\x01H\x14\xb0\x01B\n0\x01@\x14\xb0\x00\x00\v0\x00\x00\x04\xb0\x11\x02\x0e7\x05V\x14\xb0\x01:\x01\xb0\x00\x00\x04\xb7\x00\x00\x13\xb0\x01\x19\x01\xb0\x00\x00*0\x01:\x140\x01:\x0e0\x01B\x147\x01B\x127\x00\x00\t0\x00\x00\b0\x00\x00\a\x80\x01J\x140\x01K\x130\x05\x19 0\x05\x1a\x130\x00\x00\x137\x05\x1f\n0\x00\x00\x0e0\r\x16/0\f\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x0e\xb0\x00\x00\x00\x00\x00\x00\x00\x06K\xd8\x00\x06R\xad\x00\x06\xdf\xc0\x00\x06\xe5s\x00\a\u007f\v\x00\b\x1a\x8d\x00\b\xb2=\x00\b\xd0\xf5\x00\t#\x15\x00\t\xe5p\x00\n$\xf8\x00\n\u007f\v\x00\n\xcb\xd5\x00\v\x18\xa3\x00\vSp\x00\v\\\xe8\x00\v`\xb3\x00\v\xb2;\x00\v\xb2=\x00\fK\xd5\x00\f\x97\xb0\x00\r1K\x00\r30\x00\r\u007f\b\x00\r\xcc\xcb\x00\x0efc\x00\x0e\xb2;\x00\x0e\xfaK\x00\x0fB[\x00\x0fQ\x85\x00\x0f\x93\xe5\x00\x0f\xe5m\x00\x10O\xa0\x00\x10u\x8d\x00\x10\x84\xb8\x00\x10\xbf\x83\x00\x10\xc7\x18\x00\x11\tu\x00\x11\x0f(\x00\x11\x18\xa0\x00\x11<\xa8\x00\x12K\xd3\x00\x12\xe3\x88\x00\x13\xc7\x15\x00\x14\xa3\r\x00\x16-{\x00\x161E\x00\x16u\x8b\x00\x00\x00\x00\x00\x02\xaa\xab\x00\x06\xb0]\x00\a\x1cs\x00\b\x00\x00\x00\b\xaa\xad\x00\t\xc7\x1b\x00\n\x1cs\x00\n(\xa5\x00\nO\xa5\x00\n\xfaP\x00\v\x1cs\x00\v30\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\xb0]\x00\x00\xc7\x1d\x00\x00\xe3\x8d\x00\x01\x8e;\x00\x02\xb8\xe5\x00\x03\x1cp\x00\x03\x1cs\x00\x0330\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00L\xcd\x00\x00\x8a=\x00\x00\x99\x9b\x00\x01\xff\r\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xf9\xb4(\xff\xf8\xcc\xcb\x00\x01\xff\r\x00\x02fe\xff\xfe\xcc\xcd\xff\xfffe\xff\xfe33\xff\xfd\x99\x9b\x00\x00\x99\x9b\x00\x0133\x00\x00\x00\x00\x00\a\u007f\v\x00\x03\x99\x98\x00\x02fe\x00\a\x1cs\x00\x161E\x00\x02fe",
	"/texfonts/cmbx9.tfm":       "\x01L\x00\x12\x00\x00\x00\u007f\x00.\x00\x0f\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\at\f\x89:\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x15\xb0\x00\x00(\xb0\x00\x00$\xb0\x00\x00\x1c\xb0\x00\x00\x19\xb0\x00\x00%\xb0\x00\x00\x1e\xb0\x00\x00$\xb0\x00\x00\x1e\xb0\x00\x00$\xb0\x00\x00\x1e\xb0\x00\x00\x14\xc0\x11\n\x13\xc0\x00\x00\x13\xc0\x00\x00(\xc0\x00\x00(\xc0\x00\x00\x010\x00\x00\x037\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\rp\x00\x00\r\xc0\x00\x00\r`\x00\x00!\xc0\x00\x00\t\x06\x00\x00\x0f\xc0\x00\x00\x1e0\x00\x00$0\x00\x00\rT\x00\x00)\xb0\x00\x00,\xb0\x00\x00$\xd2\x00\x00\x010\x01\x00\x02\xc0\x01\x17\x10\xc0\x00\x00(\xc7\x00\x00\r\xe3\x00\x00(\xe3\x00\x00$\xc0\x00\x00\x01\xc0\x01\x12\x06\xe8\x00\x00\x06\xe8\x00\x00\r\xe0\x00\x00$\x95\x00\x00\x01\x17\x00\x00\x040\x01\x15\x01\x10\x00\x00\r\xe8\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\x010\x00\x00\x017\x00\x00\x02G\x00\x00$!\x00\x00\vG\x00\x00\v\xc0\x01\x18$\xc0\x00\x00!\xb0\x01L\x1d\xb0\x00\x00\x1e\xb0\x00\x00\"\xb0\x015\x18\xb0\x00\x00\x17\xb0\x01$'\xb0\x00\x00%\xb0\x00\x00\x05\xb0\x01W\x0e\xb0\x00\x00&\xb0\x01*\x15\xb0\x01R*\xb0\x00\x00%\xb0\x00\x00 \xb0\x015\x1a\xb0\x01\x1e \xb7\x00\x00\x1f\xb0\x01L\x13\xb0\x00\x00\x1b\xb0\x01.#\xb0\x00\x00!\xb0\x05$-\xb0\x05$!\xb0\x01*!\xb0\t/\x16\xb0\x00\x00\x01\xe8\x00\x00\x10\xc0\x00\x00\x01\xe8\x00\x00\r\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\f0\x01H\x13\xc0\x01B\t0\x01@\x13\xc0\x00\x00\n0\x00\x00\x03\xc0\x11\x02\r7\x05V\x13\xc0\x01:\x01\xc0\x00\x00\x03\xc7\x00\x00\x12\xc0\x01\x19\x01\xc0\x00\x00(0\x01:\x130\x01:\r0\x01B\x137\x01B\x117\x00\x00\b0\x00\x00\a0\x00\x00\x06\x80\x01J\x130\x01K\x120\x05\x19\x1e0\x05\x1a\x120\x00\x00\x127\x05\x1f\t0\x00\x00\r0\r\x16+0\f\x00\r\xc0\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\x00\x00\x00\x00\x00\x05B[\x00\x05\xc3N\x00\x05\xc8\xfe\x00\x06O\xa0\x00\a$\x05\x00\a\\\xe5\x00\aw\xd4\x00\a\xcfR\x00\bj+\x00\b\xb0\x05\x00\b\xf0\xce\x00\t4\x1e\x00\twp\x00\t\xc5\xd2\x00\t\xde~\x00\t\xe1\xa4\x00\t\xfe\x12\x00\t\xfe\x14\x00\n\x84\xb5\x00\v\vY\x00\v_i\x00\v\x91\xfb\x00\v\xe6\f\x00\fl\xae\x00\f\x9f@\x00\f\xed\xa2\x00\r+\x92\x00\r<\x04\x00\rtE\x00\r\xac\x85\x00\x0e0\x02\x00\x0e8\xd7\x00\x0eII\x00\x0e\x81\x8b\x00\x0e\x89\xc4\x00\x0e\xb9\xcb\x00\x0e\xca<\x00\x0e\xcf\xec\x00\x0e\xe0\xfc\x00\x0f\xc7\x10\x00\x11\"\xb7\x00\x11\xf2\f\x00\x12\xee\xe0\x00\x13=B\x00\x13\x8b\xa4\x00\x00\x00\x00\x00\x02\x84\xbe\x00\x06[\a\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t\x94\x8b\x00\n\x1cr\x00\n(\xa4\x00\nO\xa0\x00\nO\xa5\x00\n\xfaP\x00\v\x1cr\x00\v\xc1l\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe[\a\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e9\x00\x02O\xa0\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00CR\x00\x00y,\x00\x00\x86\xa4\x00\x01ϥ\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa\xbd\xa5\xff\xf9\xcc\xce\x00\x01ϥ\x00\x02\x1a\x8b\xff\xfe\xf2\xbb\xff\xffy\\\xff\xfel\x17\xff\xfd\xe5u\x00\x00\x86\xa4\x00\x01\rE\x00\x00\x00\x00\x00\x06O\xa0\x00\x03'\xd0\x00\x02\x1a\x8b\x00\a\x1cr\x00\x12\xee\xe0\x00\x02\x1a\x8b",
	"/texfonts/cmsl12.tfm":      "\x01x\x00\x12\x00\x00\x00\u007f\x00#\x00\x10\x00\n\x00:\x00X\x00\n\x00\x00\x00\a}h!\xd3\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x0f\xc0\xa8\x00\x1d\xc0\x00\x00\x1a\xc0d\x00\x13\xc0\x00\x00\x11\xc0\xc4\x00\x17\xc0\xcc\x00\x15\xc0\x88\x00\x1a\xc0\x94\x00\x15\xc04\x00\x1a\xc0\x94\x00\x15\xc0\x80\x00\r\xd0\xe5\n\f\xd0L\x00\f\xd0L\x00\x1d\xd0L\x00\x1d\xd0L\x00\x010\x00\x00\x028\x00\x00\t\xd0\x00\x00\t\xd0<\x00\t\x90\x1c\x00\t\xd0T\x00\t`h\x00\x1c\xd0\x00\x00\a\x06\x00\x00\tА\x00\x150l\x00\x1a0l\x00\tU\x04\x00\x1e\xc0\x88\x00!\xc0\x88\x00\x1a\xe2d\x00\x010\x01\x00\x01\xd0y\x17\t\xd0\x00\x00\x1d\xd78\x00\t\xf3\xb0\x00\x1d\xf3\x9c\x00\x1a\xd0X\x00\x01\xd0y\x12\x05\xf9\xc8\x00\x05\xf9\x14\x00\t\xf0\xb4\x00\x1at\x14\x00\x01\x18\x00\x00\x030\t\x15\x01\x10\x00\x00\t\xf9\xc8\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\t\xa0\xb0\x00\x010\x10\x00\x018\x10\x00\x01H(\x00\x1a!8\x00\bH\x00\x00\b\xd0\xc1\x18\x1a\xd0p\x00\x17\xc0\x01L\x14\xc0\x80\x00\x15\xc0\xbc\x00\x18\xc0e5\x12\xc0\x88\x00\x10\xc0\xa9$\x1b\xc0,\x00\x17\xc0\xcc\x00\x04\xc0\xd1W\n\xc0\xac\x00\x19\xc0\xbd*\x0f\xc0\x01R\x1f\xc0\xcc\x00\x17\xc0\xcc\x00\x1a\xc0e5\x12\xc0\x81\x1e\x1a\xc8d\x00\x16\xc0\x01L\f\xc0\x84\x00\x15\xc0\xa9.\x17\xc0\xcc\x00\x17\xc0\xdd$\"\xc0\xdd$\x17\xc0\xd1*\x17\xc0\xe1/\x0e\xc0\xbc\x00\x01\xf9\xd8\x00\t\xd0\xd4\x00\x01\xf9D\x00\t\xd0\f\x00\x01\xb0`\x00\x01\xd0y\x11\t0\x01H\f\xd0\x19B\a0\x8d@\f\xd0L\x00\a0l\x00\x02\xd0\xe5\x02\t8\xb9V\f\xd0\x01:\x01\xb0`\x00\x02\xb8@\x00\vЍ\x19\x01\xd0L\x00\x1d0\x01:\f0\x01:\t0]B\f81B\v8 \x00\x050\xa4\x00\x060P\x00\x05\x80%J\f0\x01K\v0\xb9\x19\x150\xb9\x1a\v0\x98\x00\v8\xb9\x1f\a0t\x00\t0\xa1\x16 0\xa0\x00\tА\x00\t\xb0|\x00\t\xb0H\x00\x00\x00\x00\x00\x00\x04Z\x10\x00\x04\xc9x\x00\x058\xe0\x00\x05\xa6\xdd\x00\x06\x17\xb0\x00\x06-\xf8\x00\x06\xf6\x80\x00\ae\xe8\x00\a\xd5P\x00\b\fO\x00\bD\xb8\x00\b\xb4 \x00\t#\x88\x00\t\x92\xf0\x00\t\xc9\xef\x00\n9W\x00\nq\xc0\x00\n\xa8\xbf\x00\n߽\x00\v\x18'\x00\vP\x90\x00\v\x87\x8f\x00\v\xbe\x8d\x00\v\xf6\xf7\x00\f-\xf5\x00\f/`\x00\fJ\xe0\x00\f\xae\xc1\x00\r\x0e0\x00\x0e#\xff\x00\x0eZ\xfd\x00\x0f\xaa\xa0\x00\x0f\xe1\x9f\x00\x10\x18\x9d\x00\x00\x00\x00\x00\x01\x8e9\x00\x05\xc6A\x00\x06\xe3\x8f\x00\b\x00\x00\x00\bq\xc8\x00\t\ty\x00\t8\xe0\x00\t\xd7_\x00\n\x0e9\x00\nO\xa5\x00\n\x9e|\x00\n\xee\xef\x00\v\x1cq\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xc6A\x00\x00\xc7\x1c\x00\x00\xe3\x8f\x00\x018\xe0\x00\x01\x8e9\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\n\xaf\x00\x00#\x90\x00\x00' \x00\x00/m\x00\x00;D\x00\x00P\x9b\x00\x00T+\x00\x00\\u\x00\x00]h\x00\x00^\xd5\x00\x00h\xc9\x00\x00r\a\x00\x00y\xd8\x00\x00\x86\xfb\x00\x00\x8b\xdf\x00\x00\x8c5\x00\x00\x8d|\x00\x00\x96\xe1\x00\x00\xa14\x00\x00\xabd\x00\x00\xb4+\x00\x00\xcc\xd0\x00\x00\xcd\xc1\x00\x00Ε\x00\x00\xd7%\x00\x00\xda{\x00\x00\xda\xcb\x00\x00\xdct\x00\x00\xe3\x18\x00\x00\xe3\x94\x00\x00\xe6H\x00\x00\xeex\x00\x00\xf3\xb1\x00\x00\xf7\x03\x00\x00\xf9`\x00\x00\xfbG\x00\x01\x05\xcc\x00\x01\x1a\xcc\x00\x01!4\x00\x01%\x11\x00\x01%\xf0\x00\x01.\xb7\x00\x017\xf7\x00\x01H\x8c\x00\x01X\xe8\x00\x01]\xa4\x00\x01c\x19\x00\x01{E\x00\x01\x84\x85\x00\x01\x90\x9c\x00\x01\x99%\x00\x01\x9a\xcd\x00\x01\xc3\xcf\x00\x02\x00\x04\x00\x02\n5\x00\x026\xc5\x00\x02\xf7\xb8\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\xa5\xf0\xff\xfa\xff\x89\x00\x01\x1d\xa1\x00\x01\xbd\xa0\xff\xff!0\xff\xff\x90\x98\xff\xfe\xb1\xc8\xff\xfeB`\x00\x00oh\x00\x00\xde\xd0\x00\x02\xaa\xb0\x00\x058\xe0\x00\x02\x9cp\x00\x01\xbd\xa0\x00\x06\xe3\x8f\x00\x0f\xaa\xa0\x00\x01\xbd\xa0",
	"/texfonts/cmssi10.tfm":     "\x01|\x00\x12\x00\x00\x00\u007f\x005\x00\x10\x00\v\x007\x00N\x00\b\x00\x00\x00\a\xc5U\x8d\xe9\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xd0\xc4\x00/\xd0\x00\x00,\xd0T\x00\x1d\xd0\x00\x00 м\x00&\xd0h\x00'и\x00,Ќ\x00'\xd04\x00,Ќ\x00'\xd0l\x00\x1a\xd0\xd9\n\x16Ф\x00\x16М\x00.Ф\x00.М\x00\x0100\x00\x0290\x00\x14\xd0\x00\x00\x14И\x00\x14\x90t\x00\x14М\x00\x14\x80\x84\x00*\xd0\x00\x00\x0e\a\x00\x00\x12И\x00'0L\x00,0L\x00\x14U8\x000и\x003и\x00,\xe2T\x00\x010\x01\x00\a\xd0A\x17\x14\xd0\x04\x00/\xd8<\x00\x14\xf3\xac\x00/\xf3(\x00+\xd0$\x00\x03\xd0a\x12\f\xfa\xc0\x00\f\xfa\x1c\x00\x14\xf0\xb0\x00,t\x1c\x00\x03\x16\x00\x00\b0\x15\x15\x03\x10\x00\x00\x14\xfa\xc0\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x14\xa0\xac\x00\x030\x18\x00\x036\x18\x00\aI\f\x00,!<\x00\x10I\x00\x00\x10е\x18 \xd0T\x00!\xd0\x01B!\xd0l\x00\x1eи\x00(\xd0U4\x1bи\x00\x19\xd0\xc5# и\x00&\xd0h\x00\x04\xd0\xc5M\x10\xd0h\x00%й)\x17\xd0\x01H1\xd0h\x00&\xd0h\x00)\xd0U4\x1e\xd0m\x1d)\xd6T\x00\x1f\xd0l\x00\x18И\x00\"\xd0\xc5-$\xd0h\x00!\xd0\xd1#2\xd0\xd1#!\xd0\xc5)!\xd0\xd5.\x1cи\x00\x05\xfa\xcc\x00\x14\xd0\xc8\x00\x05\xfa|\x00\x14\xd0d\x00\x03\xc0X\x00\x03\xd0a\x11\x110\t?\x15\xd0!9\x0e0p\x00\x15М\x00\x0e0L\x00\x06\xd0\xd9\x02\x149\xa9L\x15\xd0\x10\x00\x01\xc0\xa0\x00\x02ɐ\x00\x13\xd0q\x19\x01М\x00-0\x10\x00\x150\x10\x00\x140I9\x159-9\x1590\x00\t0\xa8\x00\v0\\\x00\n`Q@\x1501A\x0f0\xa8\x00#0\xa9\x19\x0f0\x94\x00\x0f9\xa9\x1e\r0\x80\x00\x140y\x1640x\x00\x14И\x00\x14\xb0\x88\x00\x14\xc0D\x00\x00\x00\x00\x00\x00\x03\xd2~\x00\x04DF\x00\x04q\xc8\x00\x04q\xca\x00\x04\x9fK\x00\x04\xe3\x90\x00\x05\x1cs\x00\x05UV\x00\x05wz\x00\x05\xc7\x1d\x00\x06\"#\x00\x068\xe5\x00\x06\xf4\xa0\x00\a\x1cs\x00\a`\xb8\x00\a\x8e;\x00\a\xb0]\x00\a\xb0^\x00\aҀ\x00\b\x00\x02\x00\bDF\x00\b\x93\xeb\x00\b\xaa\xad\x00\b\xe3\x90\x00\t\x1cu\x00\tUX\x00\t\x8e;\x00\t\xc7\x1e\x00\t\xc7 \x00\n8\xe6\x00\nUX\x00\n\xaa\xad\x00\n\xaa\xae\x00\n\xe3\x90\x00\n\xee\xf2\x00\v\x00\x05\x00\v\x1cv\x00\vUZ\x00\v\x8e;\x00\v\x8e=\x00\v\xc7\x1e\x00\v\xcc\xe3\x00\f\"%\x00\fq\xca\x00\f\xb6\x0e\x00\r\x05\xb3\x00\rUX\x00\r\xc7 \x00\x0e\x00\x05\x00\x0f\x1cv\x00\x0f\x8e=\x00\x10\x00\x03\x00\x00\x00\x00\x00\x01UU\x00\x05\xeb\x85\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\tUV\x00\t\xbe\x00\x00\n\x1cr\x00\n}(\x00\n\xd3N\x00\nޮ\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xeb\x85\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\x00\x00\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\f\xf3\x00\x00(+\x00\x00A\x88\x00\x00H\xd2\x00\x00O\xb2\x00\x00f\x80\x00\x00g\xe0\x00\x00}5\x00\x00}@\x00\x00\x80\x0e\x00\x00\x9fV\x00\x00\xaa\xc3\x00\x00\xbc\x85\x00\x00ƅ\x00\x00\xd0Z\x00\x00\xea\xd2\x00\x01\x05\x85\x00\x01\x0e\xdd\x00\x01\x15\x9e\x00\x01'\xed\x00\x015p\x00\x01>h\x00\x01>\xad\x00\x01@(\x00\x01G@\x00\x01K\x86\x00\x01S\xab\x00\x01Un\x00\x01Yc\x00\x01`\xed\x00\x01e%\x00\x01f\x80\x00\x01gr\x00\x01i\x80\x00\x01q\xe6\x00\x01wK\x00\x01w\x90\x00\x01y\v\x00\x01\x84k\x00\x01\x8e\r\x00\x01\x8f\xcd\x00\x01\xbb\xd5\x00\x01\xc8\xf6\x00\x01\xe2M\x00\x01\xe3\xae\x00\x01\xea\xd2\x00\x02\f\xf5\x00\x02\x1b0\x00\x02#\xb6\x00\x02E\xd8\x00\x02\x8c\xf8\x00\x02\x95}\x00\x02\xc3\x00\x00\x03y\v\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfc-\x82\xff\xfb\xdd\xdb\x00\x01\x1cr\x00\x01\xc7\x1d\xff\xff\x8e8\xff\xfe\xaa\xaa\x00\x00q\xc8\xff\xfe8\xe3\x00\x03f\xa0\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\a\x1cr\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/logo8.tfm":       "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\xd3\xfa\xf6\x82\x00\x80\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MFLOGO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\nF\x84\x00\v\x01\x1c\x00\v\xbb\xb4\x00\r\xeb|\x00\x00\x00\x00\x00\t\x99\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00]L\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa2\xb4\xff\xffEh\x00\x00\xba\x98\x00\x00\x00\x00\x00\x05,\\\x00\x02/\xc8\x00\x01u0\x00\x00\x00\x00\x00\r\xeb|",
	"/texinputs/plain.tex":      "% This is the plain TeX format that's described in The TeXbook.\n% N.B.: A version number is defined at the very end of this file;\n%       please change that number whenever the file is modified!\n% And don't modify the file unless you change its name:\n%       Everybody's \"plain.tex\" file should be the same, worldwide.\n\n% Unlimited copying and redistribution of this file are permitted as long\n% as this file is not modified. Modifications are permitted, but only if\n% the resulting file is not named plain.tex.\n\n\\catcode`\\{=1 % left brace is begin-group character\n\\catcode`\\}=2 % right brace is end-group character\n\\catcode`\\$=3 % dollar sign is math shift\n\\catcode`\\&=4 % ampersand is alignment tab\n\\catcode`\\#=6 % hash mark is macro parameter character\n\\catcode`\\^=7 \\catcode`\\^^K=7 % circumflex and uparrow are for superscripts\n\\catcode`\\_=8 \\catcode`\\^^A=8 % underline and downarrow are for subscripts\n\\catcode`\\^^I=10 % ascii tab is a blank space\n\\chardef\\active=13 \\catcode`\\~=\\active % tilde is active\n\\catcode`\\^^L=\\active \\outer\\def^^L{\\par} % ascii form-feed is \"\\outer\\par\"\n\n\\message{Preloading the plain format: codes,}\n\n% We had to define the \\catcodes right away, before the message line,\n% since \\message uses the { and } characters.\n% When INITEX (the TeX initializer) starts up,\n% it has defined the following \\catcode values:\n% \\catcode`\\^^@=9 % ascii null is ignored\n% \\catcode`\\^^M=5 % ascii return is end-line\n% \\catcode`\\\\=0 % backslash is TeX escape character\n% \\catcode`\\%=14 % percent sign is comment character\n% \\catcode`\\ =10 % ascii space is blank space\n% \\catcode`\\^^?=15 % ascii delete is invalid\n% \\catcode`\\A=11 ... \\catcode`\\Z=11 % uppercase letters\n% \\catcode`\\a=11 ... \\catcode`\\z=11 % lowercase letters\n% all others are type 12 (other)\n\n% Here is a list of the characters that have been specially catcoded:\n\\def\\dospecials{\\do\\ \\do\\\\\\do\\{\\do\\}\\do\\$\\do\\&%\n  \\do\\#\\do\\^\\do\\^^K\\do\\_\\do\\^^A\\do\\%\\do\\~}\n% (not counting ascii null, tab, linefeed, formfeed, return, delete)\n% Each symbol in the list is preceded by \\do, which can be defined\n% if you want to do something to every item in the list.\n\n% We make @ signs act like letters, temporarily, to avoid conflict\n% between user names and internal control sequences of plain format.\n\\catcode`@=11\n\n% INITEX sets up \\mathcode x=x, for x=0..255, except that\n% \\mathcode x=x+\"7100, for x = `A to `Z and `a to `z;\n% \\mathcode x=x+\"7000, for x = `0 to `9.\n% The following changes define internal codes as recommended\n% in Appendix C of The TeXbook:\n\\mathcode`\\^^@=\"2201 % \\cdot\n\\mathcode`\\^^A=\"3223 % \\downarrow\n\\mathcode`\\^^B=\"010B % \\alpha\n\\mathcode`\\^^C=\"010C % \\beta\n\\mathcode`\\^^D=\"225E % \\land\n\\mathcode`\\^^E=\"023A % \\lnot\n\\mathcode`\\^^F=\"3232 % \\in\n\\mathcode`\\^^G=\"0119 % \\pi\n\\mathcode`\\^^H=\"0115 % \\lambda\n\\mathcode`\\^^I=\"010D % \\gamma\n\\mathcode`\\^^J=\"010E % \\delta\n\\mathcode`\\^^K=\"3222 % \\uparrow\n\\mathcode`\\^^L=\"2206 % \\pm\n\\mathcode`\\^^M=\"2208 % \\oplus\n\\mathcode`\\^^N=\"0231 % \\infty\n\\mathcode`\\^^O=\"0140 % \\partial\n\\mathcode`\\^^P=\"321A % \\subset\n\\mathcode`\\^^Q=\"321B % \\supset\n\\mathcode`\\^^R=\"225C % \\cap\n\\mathcode`\\^^S=\"225B % \\cup\n\\mathcode`\\^^T=\"0238 % \\forall\n\\mathcode`\\^^U=\"0239 % \\exists\n\\mathcode`\\^^V=\"220A % \\otimes\n\\mathcode`\\^^W=\"3224 % \\leftrightarrow\n\\mathcode`\\^^X=\"3220 % \\leftarrow\n\\mathcode`\\^^Y=\"3221 % \\rightarrow\n\\mathcode`\\^^Z=\"8000 % \\ne\n\\mathcode`\\^^[=\"2205 % \\diamond\n\\mathcode`\\^^\\=\"3214 % \\le\n\\mathcode`\\^^]=\"3215 % \\ge\n\\mathcode`\\^^^=\"3211 % \\equiv\n\\mathcode`\\^^_=\"225F % \\lor\n\\mathcode`\\ =\"8000 % \\space\n\\mathcode`\\!=\"5021\n\\mathcode`\\'=\"8000 % ^\\prime\n\\mathcode`\\(=\"4028\n\\mathcode`\\)=\"5029\n\\mathcode`\\*=\"2203 % \\ast\n\\mathcode`\\+=\"202B\n\\mathcode`\\,=\"613B\n\\mathcode`\\-=\"2200\n\\mathcode`\\.=\"013A\n\\mathcode`\\/=\"013D\n\\mathcode`\\:=\"303A\n\\mathcode`\\;=\"603B\n\\mathcode`\\<=\"313C\n\\mathcode`\\==\"303D\n\\mathcode`\\>=\"313E\n\\mathcode`\\?=\"503F\n\\mathcode`\\[=\"405B\n\\mathcode`\\\\=\"026E % \\backslash\n\\mathcode`\\]=\"505D\n\\mathcode`\\_=\"8000 % \\_\n\\mathcode`\\{=\"4266\n\\mathcode`\\|=\"026A\n\\mathcode`\\}=\"5267\n\\mathcode`\\^^?=\"1273 % \\smallint\n\n% INITEX sets \\uccode`x=`X and \\uccode `X=`X for all letters x,\n% and \\lccode`x=`x, \\lccode`X=`x; all other values are zero.\n% No changes to those tables are needed in plain TeX format.\n\n% INITEX sets \\sfcode x=1000 for all x, except that \\sfcode`X=999\n% for uppercase letters. The following changes are needed:\n\\sfcode`\\)=0 \\sfcode`\\'=0 \\sfcode`\\]=0\n% The \\nonfrenchspacing macro will make further changes to \\sfcode values.\n\n% Finally, INITEX sets all \\delcode values to -1, except \\delcode`.=0\n\\delcode`\\(=\"028300\n\\delcode`\\)=\"029301\n\\delcode`\\[=\"05B302\n\\delcode`\\]=\"05D303\n\\delcode`\\<=\"26830A\n\\delcode`\\>=\"26930B\n\\delcode`\\/=\"02F30E\n\\delcode`\\|=\"26A30C\n\\delcode`\\\\=\"26E30F\n% N.B. { and } should NOT get delcodes; otherwise parameter grouping fails!\n\n% To make the plain macros more efficient in time and space,\n% several constant values are declared here as control sequences.\n% If they were changed, anything could happen; so they are private symbols.\n\\chardef\\@ne=1\n\\chardef\\tw@=2\n\\chardef\\thr@@=3\n\\chardef\\sixt@@n=16\n\\chardef\\@cclv=255\n\\mathchardef\\@cclvi=256\n\\mathchardef\\@m=1000\n\\mathchardef\\@M=10000\n\\mathchardef\\@MM=20000\n\n% Allocation of registers\n\n% Here are macros for the automatic allocation of \\count, \\box, \\dimen,\n% \\skip, \\muskip, and \\toks registers, as well as \\read and \\write\n% stream numbers, \\fam codes, \\language codes, and \\insert numbers.\n\n\\message{registers,}\n\n% When a register is used only temporarily, it need not be allocated;\n% grouping can be used, making the value previously in the register return\n% after the close of the group.  The main use of these macros is for\n% registers that are defined by one macro and used by others, possibly at\n% different nesting levels.  All such registers should be defined through\n% these macros; otherwise conflicts may occur, especially when two or more\n% macro packages are being used at once.\n\n% The following counters are reserved:\n%   0 to 9  page numbering\n%       10  count allocation\n%       11  dimen allocation\n%       12  skip allocation\n%       13  muskip allocation\n%       14  box allocation\n%       15  toks allocation\n%       16  read file allocation\n%       17  write file allocation\n%       18  math family allocation\n%       19  language allocation\n%       20  insert allocation\n%       21  the most recently allocated number\n%       22  constant -1\n% New counters are allocated starting with 23, 24, etc.  Other registers are\n% allocated starting with 10.  This leaves 0 through 9 for the user to play\n% with safely, except that counts 0 to 9 are considered to be the page and\n% subpage numbers (since they are displayed during output). In this scheme,\n% \\count 10 always contains the number of the highest-numbered counter that\n% has been allocated, \\count 14 the highest-numbered box, etc.\n% Inserts are given numbers 254, 253, etc., since they require a \\count,\n% \\dimen, \\skip, and \\box all with the same number; \\count 20 contains the\n% lowest-numbered insert that has been allocated. Of course, \\box255 is\n% reserved for \\output; \\count255, \\dimen255, and \\skip255 can be used freely.\n\n% It is recommended that macro designers always use\n% \\global assignments with respect to registers numbered 1, 3, 5, 7, 9, and\n% always non-\\global assignments with respect to registers 0, 2, 4, 6, 8, 255.\n% This will prevent ``save stack buildup'' that might otherwise occur.\n\n\\count10=22 % allocates \\count registers 23, 24, ...\n\\count11=9 % allocates \\dimen registers 10, 11, ...\n\\count12=9 % allocates \\skip registers 10, 11, ...\n\\count13=9 % allocates \\muskip registers 10, 11, ...\n\\count14=9 % allocates \\box registers 10, 11, ...\n\\count15=9 % allocates \\toks registers 10, 11, ...\n\\count16=-1 % allocates input streams 0, 1, ...\n\\count17=-1 % allocates output streams 0, 1, ...\n\\count18=3 % allocates math families 4, 5, ...\n\\count19=0 % allocates \\language codes 1, 2, ...\n\\count20=255 % allocates insertions 254, 253, ...\n\\countdef\\insc@unt=20 % the insertion counter\n\\countdef\\allocationnumber=21 % the most recent allocation\n\\countdef\\m@ne=22 \\m@ne=-1 % a handy constant\n\\def\\wlog{\\immediate\\write\\m@ne} % write on log file (only)\n\n% Here are abbreviations for the names of scratch registers\n% that don't need to be allocated.\n\n\\countdef\\count@=255\n\\dimendef\\dimen@=0\n\\dimendef\\dimen@i=1 % global only\n\\dimendef\\dimen@ii=2\n\\skipdef\\skip@=0\n\\toksdef\\toks@=0\n\n% Now, we define \\newcount, \\newbox, etc. so that you can say \\newcount\\foo\n% and \\foo will be defined (with \\countdef) to be the next counter.\n% To find out which counter \\foo is, you can look at \\allocationnumber.\n% Since there's no \\boxdef command, \\chardef is used to define a \\newbox,\n% \\newinsert, \\newfam, and so on.\n\n\\outer\\def\\newcount{\\alloc@0\\count\\countdef\\insc@unt}\n\\outer\\def\\newdimen{\\alloc@1\\dimen\\dimendef\\insc@unt}\n\\outer\\def\\newskip{\\alloc@2\\skip\\skipdef\\insc@unt}\n\\outer\\def\\newmuskip{\\alloc@3\\muskip\\muskipdef\\@cclvi}\n\\outer\\def\\newbox{\\alloc@4\\box\\chardef\\insc@unt}\n\\let\\newtoks=\\relax % we do this to allow plain.tex to be read in twice\n\\outer\\def\\newhelp#1#2{\\newtoks#1#1\\expandafter{\\csname#2\\endcsname}}\n\\outer\\def\\newtoks{\\alloc@5\\toks\\toksdef\\@cclvi}\n\\outer\\def\\newread{\\alloc@6\\read\\chardef\\sixt@@n}\n\\outer\\def\\newwrite{\\alloc@7\\write\\chardef\\sixt@@n}\n\\outer\\def\\newfam{\\alloc@8\\fam\\chardef\\sixt@@n}\n\\outer\\def\\newlanguage{\\alloc@9\\language\\chardef\\@cclvi}\n\\def\\alloc@#1#2#3#4#5{\\global\\advance\\count1#1by\\@ne\n  \\ch@ck#1#4#2% make sure there's still room\n  \\allocationnumber=\\count1#1%\n  \\global#3#5=\\allocationnumber\n  \\wlog{\\string#5=\\string#2\\the\\allocationnumber}}\n\\outer\\def\\newinsert#1{\\global\\advance\\insc@unt by\\m@ne\n  \\ch@ck0\\insc@unt\\count\n  \\ch@ck1\\insc@unt\\dimen\n  \\ch@ck2\\insc@unt\\skip\n  \\ch@ck4\\insc@unt\\box\n  \\allocationnumber=\\insc@unt\n  \\global\\chardef#1=\\allocationnumber\n  \\wlog{\\string#1=\\string\\insert\\the\\allocationnumber}}\n\\def\\ch@ck#1#2#3{\\ifnum\\count1#1<#2%\n  \\else\\errmessage{No room for a new #3}\\fi}\n\n% Here are some examples of allocation.\n\\newdimen\\maxdimen \\maxdimen=16383.99999pt % the largest legal <dimen>\n\\newskip\\hideskip \\hideskip=-1000pt plus 1fill % negative but can grow\n\\newskip\\centering \\centering=0pt plus 1000pt minus 1000pt\n\\newdimen\\p@ \\p@=1pt % this saves macro space and time\n\\newdimen\\z@ \\z@=0pt % can be used both for 0pt and 0\n\\newskip\\z@skip \\z@skip=0pt plus0pt minus0pt\n\\newbox\\voidb@x % permanently void box register\n\n% And here's a different sort of allocation:\n% For example, \\newif\\iffoo creates \\footrue, \\foofalse to go with \\iffoo.\n\\outer\\def\\newif#1{\\count@\\escapechar \\escapechar\\m@ne\n  \\expandafter\\expandafter\\expandafter\n   \\def\\@if#1{true}{\\let#1=\\iftrue}%\n  \\expandafter\\expandafter\\expandafter\n   \\def\\@if#1{false}{\\let#1=\\iffalse}%\n  \\@if#1{false}\\escapechar\\count@} % the condition starts out false\n\\def\\@if#1#2{\\csname\\expandafter\\if@\\string#1#2\\endcsname}\n{\\uccode`1=`i \\uccode`2=`f \\uppercase{\\gdef\\if@12{}}} % `if' is required\n\n% Assign initial values to TeX's parameters\n\n\\message{parameters,}\n\n% All of TeX's numeric parameters are listed here,\n% but the code is commented out if no special value needs to be set.\n% INITEX makes all parameters zero except where noted.\n\n\\pretolerance=100\n\\tolerance=200 % INITEX sets this to 10000\n\\hbadness=1000\n\\vbadness=1000\n\\linepenalty=10\n\\hyphenpenalty=50\n\\exhyphenpenalty=50\n\\binoppenalty=700\n\\relpenalty=500\n\\clubpenalty=150\n\\widowpenalty=150\n\\displaywidowpenalty=50\n\\brokenpenalty=100\n\\predisplaypenalty=10000\n% \\postdisplaypenalty=0\n% \\interlinepenalty=0\n% \\floatingpenalty=0, set during \\insert\n% \\outputpenalty=0, set before TeX enters \\output\n\\doublehyphendemerits=10000\n\\finalhyphendemerits=5000\n\\adjdemerits=10000\n% \\looseness=0, cleared by TeX after each paragraph\n% \\pausing=0\n% \\holdinginserts=0\n% \\tracingonline=0\n% \\tracingmacros=0\n% \\tracingstats=0\n% \\tracingparagraphs=0\n% \\tracingpages=0\n% \\tracingoutput=0\n\\tracinglostchars=1\n% \\tracingcommands=0\n% \\tracingrestores=0\n% \\language=0\n\\uchyph=1\n% \\lefthyphenmin=2 \\righthyphenmin=3 set below\n% \\globaldefs=0\n% \\maxdeadcycles=25 % INITEX does this\n% \\hangafter=1 % INITEX does this, also TeX after each paragraph\n% \\fam=0\n% \\mag=1000 % INITEX does this\n% \\escapechar=`\\\\ % INITEX does this\n\\defaulthyphenchar=`\\-\n\\defaultskewchar=-1\n% \\endlinechar=`\\^^M % INITEX does this\n\\newlinechar=-1\n\\delimiterfactor=901\n% \\time=now % TeX does this at beginning of job\n% \\day=now % TeX does this at beginning of job\n% \\month=now % TeX does this at beginning of job\n% \\year=now % TeX does this at beginning of job\n\\showboxbreadth=5\n\\showboxdepth=3\n\\errorcontextlines=5\n\n\\hfuzz=0.1pt\n\\vfuzz=0.1pt\n\\overfullrule=5pt\n\\hsize=6.5in\n\\vsize=8.9in\n\\maxdepth=4pt\n\\splitmaxdepth=\\maxdimen\n\\boxmaxdepth=\\maxdimen\n% \\lineskiplimit=0pt, changed by \\normalbaselines\n\\delimitershortfall=5pt\n\\nulldelimiterspace=1.2pt\n\\scriptspace=0.5pt\n% \\mathsurround=0pt\n% \\predisplaysize=0pt, set before TeX enters $$\n% \\displaywidth=0pt, set before TeX enters $$\n% \\displayindent=0pt, set before TeX enters $$\n\\parindent=20pt\n% \\hangindent=0pt, zeroed by TeX after each paragraph\n% \\hoffset=0pt\n% \\voffset=0pt\n\n% \\baselineskip=0pt, changed by \\normalbaselines\n% \\lineskip=0pt, changed by \\normalbaselines\n\\parskip=0pt plus 1pt\n\\abovedisplayskip=12pt plus 3pt minus 9pt\n\\abovedisplayshortskip=0pt plus 3pt\n\\belowdisplayskip=12pt plus 3pt minus 9pt\n\\belowdisplayshortskip=7pt plus 3pt minus 4pt\n% \\leftskip=0pt\n% \\rightskip=0pt\n\\topskip=10pt\n\\splittopskip=10pt\n% \\tabskip=0pt\n% \\spaceskip=0pt\n% \\xspaceskip=0pt\n\\parfillskip=0pt plus 1fil\n\n\\thinmuskip=3mu\n\\medmuskip=4mu plus 2mu minus 4mu\n\\thickmuskip=5mu plus 5mu\n\n% We also define special registers that function like parameters:\n\\newskip\\smallskipamount \\smallskipamount=3pt plus 1pt minus 1pt\n\\newskip\\medskipamount \\medskipamount=6pt plus 2pt minus 2pt\n\\newskip\\bigskipamount \\bigskipamount=12pt plus 4pt minus 4pt\n\\newskip\\normalbaselineskip \\normalbaselineskip=12pt\n\\newskip\\normallineskip \\normallineskip=1pt\n\\newdimen\\normallineskiplimit \\normallineskiplimit=0pt\n\\newdimen\\jot \\jot=3pt\n\\newcount\\interdisplaylinepenalty \\interdisplaylinepenalty=100\n\\newcount\\interfootnotelinepenalty \\interfootnotelinepenalty=100\n\n% Definitions for preloaded fonts\n\n\\def\\magstephalf{1095 }\n\\def\\magstep#1{\\ifcase#1 \\@m\\or 1200\\or 1440\\or 1728\\or 2074\\or 2488\\fi\\relax}\n\n% Fonts assigned to \\preloaded are not part of \"plain TeX\",\n% but they are preloaded so that other format packages can use them.\n% For example, if another set of macros says \"\\font\\ninerm=cmr9\",\n% TeX will not have to reload the font metric information for cmr9.\n\n\\message{fonts,}\n\n\\font\\tenrm=cmr10 % roman text\n\\font\\preloaded=cmr9\n\\font\\preloaded=cmr8\n\\font\\sevenrm=cmr7\n\\font\\preloaded=cmr6\n\\font\\fiverm=cmr5\n\n\\font\\teni=cmmi10 % math italic\n\\font\\preloaded=cmmi9\n\\font\\preloaded=cmmi8\n\\font\\seveni=cmmi7\n\\font\\preloaded=cmmi6\n\\font\\fivei=cmmi5\n\n\\font\\tensy=cmsy10 % math symbols\n\\font\\preloaded=cmsy9\n\\font\\preloaded=cmsy8\n\\font\\sevensy=cmsy7\n\\font\\preloaded=cmsy6\n\\font\\fivesy=cmsy5\n\n\\font\\tenex=cmex10 % math extension\n\n\\font\\preloaded=cmss10 % sans serif\n\\font\\preloaded=cmssq8\n\n\\font\\preloaded=cmssi10 % sans serif italic\n\\font\\preloaded=cmssqi8\n\n\\font\\tenbf=cmbx10 % boldface extended\n\\font\\preloaded=cmbx9\n\\font\\preloaded=cmbx8\n\\font\\sevenbf=cmbx7\n\\font\\preloaded=cmbx6\n\\font\\fivebf=cmbx5\n\n\\font\\tentt=cmtt10 % typewriter\n\\font\\preloaded=cmtt9\n\\font\\preloaded=cmtt8\n\n\\font\\preloaded=cmsltt10 % slanted typewriter\n\n\\font\\tensl=cmsl10 % slanted roman\n\\font\\preloaded=cmsl9\n\\font\\preloaded=cmsl8\n\n\\font\\tenit=cmti10 % text italic\n\\font\\preloaded=cmti9\n\\font\\preloaded=cmti8\n\\font\\preloaded=cmti7\n\n\\message{more fonts,}\n\\font\\preloaded=cmu10 % unslanted text italic\n\n\\font\\preloaded=cmmib10 % bold math italic\n\\font\\preloaded=cmbsy10 % bold math symbols\n\n\\font\\preloaded=cmcsc10 % caps and small caps\n\n\\font\\preloaded=cmssbx10 % sans serif bold extended\n\n\\font\\preloaded=cmdunh10 % Dunhill style\n\n\\font\\preloaded=cmr7 scaled \\magstep4 % for titles\n\\font\\preloaded=cmtt10 scaled \\magstep2\n\\font\\preloaded=cmssbx10 scaled \\magstep2\n\n\\font\\preloaded=manfnt % METAFONT logo and dragon curve and special symbols\n\n% Additional \\preloaded fonts can be specified here.\n% (And those that were \\preloaded above can be eliminated.)\n\n\\let\\preloaded=\\undefined % preloaded fonts must be declared anew later.\n\n\\skewchar\\teni='177 \\skewchar\\seveni='177 \\skewchar\\fivei='177\n\\skewchar\\tensy='60 \\skewchar\\sevensy='60 \\skewchar\\fivesy='60\n\n\\textfont0=\\tenrm \\scriptfont0=\\sevenrm \\scriptscriptfont0=\\fiverm\n\\def\\rm{\\fam\\z@\\tenrm}\n\\textfont1=\\teni \\scriptfont1=\\seveni \\scriptscriptfont1=\\fivei\n\\def\\mit{\\fam\\@ne} \\def\\oldstyle{\\fam\\@ne\\teni}\n\\textfont2=\\tensy \\scriptfont2=\\sevensy \\scriptscriptfont2=\\fivesy\n\\def\\cal{\\fam\\tw@}\n\\textfont3=\\tenex \\scriptfont3=\\tenex \\scriptscriptfont3=\\tenex\n\\newfam\\itfam \\def\\it{\\fam\\itfam\\tenit} % \\it is family 4\n\\textfont\\itfam=\\tenit\n\\newfam\\slfam \\def\\sl{\\fam\\slfam\\tensl} % \\sl is family 5\n\\textfont\\slfam=\\tensl\n\\newfam\\bffam \\def\\bf{\\fam\\bffam\\tenbf} % \\bf is family 6\n\\textfont\\bffam=\\tenbf \\scriptfont\\bffam=\\sevenbf\n\\scriptscriptfont\\bffam=\\fivebf\n\\newfam\\ttfam \\def\\tt{\\fam\\ttfam\\tentt} % \\tt is family 7\n\\textfont\\ttfam=\\tentt\n\n% Macros for setting ordinary text\n\\message{macros,}\n\n\\def\\frenchspacing{\\sfcode`\\.\\@m \\sfcode`\\?\\@m \\sfcode`\\!\\@m\n  \\sfcode`\\:\\@m \\sfcode`\\;\\@m \\sfcode`\\,\\@m}\n\\def\\nonfrenchspacing{\\sfcode`\\.3000\\sfcode`\\?3000\\sfcode`\\!3000%\n  \\sfcode`\\:2000\\sfcode`\\;1500\\sfcode`\\,1250 }\n\n\\def\\normalbaselines{\\lineskip\\normallineskip\n  \\baselineskip\\normalbaselineskip \\lineskiplimit\\normallineskiplimit}\n\n\\def\\^^M{\\ } % control <return> = control <space>\n\\def\\^^I{\\ } % same for <tab>\n\n\\def\\lq{`} \\def\\rq{'}\n\\def\\lbrack{[} \\def\\rbrack{]}\n\n\\let\\endgraf=\\par \\let\\endline=\\cr\n\n\\def\\space{ }\n\\def\\empty{}\n\\def\\null{\\hbox{}}\n\n\\let\\bgroup={ \\let\\egroup=}\n\n% In \\obeylines, we say `\\let^^M=\\par' instead of `\\def^^M{\\par}'\n% since this allows, for example, `\\let\\par=\\cr \\obeylines \\halign{...'\n{\\catcode`\\^^M=\\active % these lines must end with %\n  \\gdef\\obeylines{\\catcode`\\^^M\\active \\let^^M\\par}%\n  \\global\\let^^M\\par} % this is in case ^^M appears in a \\write\n\\def\\obeyspaces{\\catcode`\\ \\active}\n{\\obeyspaces\\global\\let =\\space}\n\n\\def\\loop#1\\repeat{\\def\\body{#1}\\iterate}\n\\def\\iterate{\\body \\let\\next\\iterate \\else\\let\\next\\relax\\fi \\next}\n\\let\\repeat=\\fi % this makes \\loop...\\if...\\repeat skippable\n\n\\def\\thinspace{\\kern .16667em }\n\\def\\negthinspace{\\kern-.16667em }\n\\def\\enspace{\\kern.5em }\n\n\\def\\enskip{\\hskip.5em\\relax}\n\\def\\quad{\\hskip1em\\relax}\n\\def\\qquad{\\hskip2em\\relax}\n\n\\def\\smallskip{\\vskip\\smallskipamount}\n\\def\\medskip{\\vskip\\medskipamount}\n\\def\\bigskip{\\vskip\\bigskipamount}\n\n\\def\\nointerlineskip{\\prevdepth-1000\\p@}\n\\def\\offinterlineskip{\\baselineskip-1000\\p@\n  \\lineskip\\z@ \\lineskiplimit\\maxdimen}\n\n\\def\\topglue{\\nointerlineskip\\vglue-\\topskip\\vglue} % for top of page\n\\def\\vglue{\\afterassignment\\vgl@\\skip@=}\n\\def\\vgl@{\\par \\dimen@\\prevdepth \\hrule height\\z@\n  \\nobreak\\vskip\\skip@ \\prevdepth\\dimen@}\n\\def\\hglue{\\afterassignment\\hgl@\\skip@=}\n\\def\\hgl@{\\leavevmode \\count@\\spacefactor \\vrule width\\z@\n  \\nobreak\\hskip\\skip@ \\spacefactor\\count@}\n\n\\def~{\\penalty\\@M \\ } % tie\n\\def\\slash{/\\penalty\\exhyphenpenalty} % a `/' that acts like a `-'\n\n\\def\\break{\\penalty-\\@M}\n\\def\\nobreak{\\penalty \\@M}\n\\def\\allowbreak{\\penalty \\z@}\n\n\\def\\filbreak{\\par\\vfil\\penalty-200\\vfilneg}\n\\def\\goodbreak{\\par\\penalty-500 }\n\\def\\eject{\\par\\break}\n\\def\\supereject{\\par\\penalty-\\@MM}\n\n\\def\\removelastskip{\\ifdim\\lastskip=\\z@\\else\\vskip-\\lastskip\\fi}\n\\def\\smallbreak{\\par\\ifdim\\lastskip<\\smallskipamount\n  \\removelastskip\\penalty-50\\smallskip\\fi}\n\\def\\medbreak{\\par\\ifdim\\lastskip<\\medskipamount\n  \\removelastskip\\penalty-100\\medskip\\fi}\n\\def\\bigbreak{\\par\\ifdim\\lastskip<\\bigskipamount\n  \\removelastskip\\penalty-200\\bigskip\\fi}\n\n\\def\\line{\\hbox to\\hsize}\n\\def\\leftline#1{\\line{#1\\hss}}\n\\def\\rightline#1{\\line{\\hss#1}}\n\\def\\centerline#1{\\line{\\hss#1\\hss}}\n\n\\def\\rlap#1{\\hbox to\\z@{#1\\hss}}\n\\def\\llap#1{\\hbox to\\z@{\\hss#1}}\n\n\\def\\m@th{\\mathsurround\\z@}\n\\def\\underbar#1{$\\setbox\\z@\\hbox{#1}\\dp\\z@\\z@\n  \\m@th \\underline{\\box\\z@}$}\n\n\\newbox\\strutbox\n\\setbox\\strutbox=\\hbox{\\vrule height8.5pt depth3.5pt width\\z@}\n\\def\\strut{\\relax\\ifmmode\\copy\\strutbox\\else\\unhcopy\\strutbox\\fi}\n\n\\def\\hidewidth{\\hskip\\hideskip} % for alignment entries that can stick out\n\\def\\ialign{\\everycr{}\\tabskip\\z@skip\\halign} % initialized \\halign\n\\newcount\\mscount\n\\def\\multispan#1{\\omit \\mscount#1\\relax\n  \\loop\\ifnum\\mscount>\\@ne \\sp@n\\repeat}\n\\def\\sp@n{\\span\\omit\\advance\\mscount\\m@ne}\n\n\\newif\\ifus@ \\newif\\if@cr\n\\newbox\\tabs \\newbox\\tabsyet \\newbox\\tabsdone\n\n\\def\\cleartabs{\\global\\setbox\\tabsyet\\null \\setbox\\tabs\\null}\n\\def\\settabs{\\setbox\\tabs\\null \\futurelet\\next\\sett@b}\n\\let\\+=\\relax % in case this file is being read in twice\n\\def\\sett@b{\\ifx\\next\\+\\def\\nxt{\\afterassignment\\s@tt@b\\let\\nxt}%\n  \\else\\let\\nxt\\s@tcols\\fi \\let\\next\\relax \\nxt}\n\\def\\s@tt@b{\\let\\nxt\\relax \\us@false\\m@ketabbox}\n\\def\\tabalign{\\us@true\\m@ketabbox} % non-\\outer version of \\+\n\\outer\\def\\+{\\tabalign}\n\\def\\s@tcols#1\\columns{\\count@#1\\dimen@\\hsize\n  \\loop\\ifnum\\count@>\\z@ \\@nother \\repeat}\n\\def\\@nother{\\dimen@ii\\dimen@ \\divide\\dimen@ii\\count@\n  \\setbox\\tabs\\hbox{\\hbox to\\dimen@ii{}\\unhbox\\tabs}%\n  \\advance\\dimen@-\\dimen@ii \\advance\\count@\\m@ne}\n\n\\def\\m@ketabbox{\\begingroup\n  \\global\\setbox\\tabsyet\\copy\\tabs\n  \\global\\setbox\\tabsdone\\null\n  \\def\\cr{\\@crtrue\\crcr\\egroup\\egroup\n    \\ifus@\\unvbox\\z@\\lastbox\\fi\\endgroup\n    \\setbox\\tabs\\hbox{\\unhbox\\tabsyet\\unhbox\\tabsdone}}%\n  \\setbox\\z@\\vbox\\bgroup\\@crfalse\n    \\ialign\\bgroup&\\t@bbox##\\t@bb@x\\crcr}\n\n\\def\\t@bbox{\\setbox\\z@\\hbox\\bgroup}\n\\def\\t@bb@x{\\if@cr\\egroup % now \\box\\z@ holds the column\n  \\else\\hss\\egroup \\global\\setbox\\tabsyet\\hbox{\\unhbox\\tabsyet\n      \\global\\setbox\\@ne\\lastbox}% now \\box\\@ne holds its size\n    \\ifvoid\\@ne\\global\\setbox\\@ne\\hbox to\\wd\\z@{}%\n    \\else\\setbox\\z@\\hbox to\\wd\\@ne{\\unhbox\\z@}\\fi\n    \\global\\setbox\\tabsdone\\hbox{\\box\\@ne\\unhbox\\tabsdone}\\fi\n  \\box\\z@}\n\n\\def\\hang{\\hangindent\\parindent}\n\\def\\textindent#1{\\indent\\llap{#1\\enspace}\\ignorespaces}\n\\def\\item{\\par\\hang\\textindent}\n\\def\\itemitem{\\par\\indent \\hangindent2\\parindent \\textindent}\n\\def\\narrower{\\advance\\leftskip\\parindent\n  \\advance\\rightskip\\parindent}\n\n\\outer\\def\\beginsection#1\\par{\\vskip\\z@ plus.3\\vsize\\penalty-250\n  \\vskip\\z@ plus-.3\\vsize\\bigskip\\vskip\\parskip\n  \\message{#1}\\leftline{\\bf#1}\\nobreak\\smallskip\\noindent}\n\\outer\\def\\proclaim #1. #2\\par{\\medbreak\n  \\noindent{\\bf#1.\\enspace}{\\sl#2\\par}%\n  \\ifdim\\lastskip<\\medskipamount \\removelastskip\\penalty55\\medskip\\fi}\n\n\\def\\raggedright{\\rightskip\\z@ plus2em \\spaceskip.3333em \\xspaceskip.5em\\relax}\n\\def\\ttraggedright{\\tt\\rightskip\\z@ plus2em\\relax} % for use with \\tt only\n\n\\chardef\\%=`\\%\n\\chardef\\&=`\\&\n\\chardef\\#=`\\#\n\\chardef\\$=`\\$\n\\chardef\\ss=\"19\n\\chardef\\ae=\"1A\n\\chardef\\oe=\"1B\n\\chardef\\o=\"1C\n\\chardef\\AE=\"1D\n\\chardef\\OE=\"1E\n\\chardef\\O=\"1F\n\\chardef\\i=\"10 \\chardef\\j=\"11 % dotless letters\n\\def\\aa{\\accent23a}\n\\def\\l{\\char32l}\n\\def\\L{\\leavevmode\\setbox0\\hbox{L}\\hbox to\\wd0{\\hss\\char32L}}\n\n\\def\\leavevmode{\\unhbox\\voidb@x} % begins a paragraph, if necessary\n\\def\\_{\\leavevmode \\kern.06em \\vbox{\\hrule width.3em}}\n\\def\\AA{\\leavevmode\\setbox0\\hbox{!}\\dimen@\\ht0\\advance\\dimen@-1ex%\n  \\rlap{\\raise.67\\dimen@\\hbox{\\char'27}}A}\n\n\\def\\mathhexbox#1#2#3{\\leavevmode\n  \\hbox{$\\m@th \\mathchar\"#1#2#3$}}\n\\def\\dag{\\mathhexbox279}\n\\def\\ddag{\\mathhexbox27A}\n\\def\\S{\\mathhexbox278}\n\\def\\P{\\mathhexbox27B}\n\\def\\Orb{\\mathhexbox20D}\n\n\\def\\oalign#1{\\leavevmode\\vtop{\\baselineskip\\z@skip \\lineskip.25ex%\n  \\ialign{##\\crcr#1\\crcr}}} \\def\\o@lign{\\lineskiplimit\\z@ \\oalign}\n\\def\\ooalign{\\lineskiplimit-\\maxdimen \\oalign} % chars over each other\n{\\catcode`p=12 \\catcode`t=12 \\gdef\\\\#1pt{#1}} \\let\\getf@ctor=\\\\\n\\def\\sh@ft#1{\\dimen@#1\\kern\\expandafter\\getf@ctor\\the\\fontdimen1\\font\n  \\dimen@} % kern by #1 times the current slant\n\\def\\d#1{{\\o@lign{\\relax#1\\crcr\\hidewidth\\sh@ft{-1ex}.\\hidewidth}}}\n\\def\\b#1{{\\o@lign{\\relax#1\\crcr\\hidewidth\\sh@ft{-3ex}%\n    \\vbox to.2ex{\\hbox{\\char22}\\vss}\\hidewidth}}}\n\\def\\c#1{{\\setbox\\z@\\hbox{#1}\\ifdim\\ht\\z@=1ex\\accent24 #1%\n  \\else\\ooalign{\\unhbox\\z@\\crcr\\hidewidth\\char24\\hidewidth}\\fi}}\n\\def\\copyright{{\\ooalign{\\hfil\\raise.07ex\\hbox{c}\\hfil\\crcr\\Orb}}}\n\n\\def\\dots{\\relax\\ifmmode\\ldots\\else$\\m@th\\ldots\\,$\\fi}\n\\def\\TeX{T\\kern-.1667em\\lower.5ex\\hbox{E}\\kern-.125emX}\n\n\\def\\`#1{{\\accent18 #1}}\n\\def\\'#1{{\\accent19 #1}}\n\\def\\v#1{{\\accent20 #1}} \\let\\^^_=\\v\n\\def\\u#1{{\\accent21 #1}} \\let\\^^S=\\u\n\\def\\=#1{{\\accent22 #1}}\n\\def\\^#1{{\\accent94 #1}} \\let\\^^D=\\^\n\\def\\.#1{{\\accent95 #1}}\n\\def\\H#1{{\\accent\"7D #1}}\n\\def\\~#1{{\\accent\"7E #1}}\n\\def\\\"#1{{\\accent\"7F #1}}\n\\def\\t#1{{\\edef\\next{\\the\\font}\\the\\textfont1\\accent\"7F\\next#1}}\n\n\\def\\hrulefill{\\leaders\\hrule\\hfill}\n\\def\\dotfill{\\cleaders\\hbox{$\\m@th \\mkern1.5mu.\\mkern1.5mu$}\\hfill}\n\\def\\rightarrowfill{$\\m@th\\smash-\\mkern-7mu%\n  \\cleaders\\hbox{$\\mkern-2mu\\smash-\\mkern-2mu$}\\hfill\n  \\mkern-7mu\\mathord\\rightarrow$}\n\\def\\leftarrowfill{$\\m@th\\mathord\\leftarrow\\mkern-7mu%\n  \\cleaders\\hbox{$\\mkern-2mu\\smash-\\mkern-2mu$}\\hfill\n  \\mkern-7mu\\smash-$}\n\\mathchardef\\braceld=\"37A \\mathchardef\\bracerd=\"37B\n\\mathchardef\\bracelu=\"37C \\mathchardef\\braceru=\"37D\n\\def\\downbracefill{$\\m@th \\setbox\\z@\\hbox{$\\braceld$}%\n  \\braceld\\leaders\\vrule height\\ht\\z@ depth\\z@\\hfill\\braceru\n  \\bracelu\\leaders\\vrule height\\ht\\z@ depth\\z@\\hfill\\bracerd$}\n\\def\\upbracefill{$\\m@th \\setbox\\z@\\hbox{$\\braceld$}%\n  \\bracelu\\leaders\\vrule height\\ht\\z@ depth\\z@\\hfill\\bracerd\n  \\braceld\\leaders\\vrule height\\ht\\z@ depth\\z@\\hfill\\braceru$}\n\n\\outer\\def\\bye{\\par\\vfill\\supereject\\end}\n\n% Macros for math setting\n\\message{math definitions,}\n\n\\let\\sp=^ \\let\\sb=_\n\\def\\,{\\mskip\\thinmuskip}\n\\def\\>{\\mskip\\medmuskip}\n\\def\\;{\\mskip\\thickmuskip}\n\\def\\!{\\mskip-\\thinmuskip}\n\\def\\*{\\discretionary{\\thinspace\\the\\textfont2\\char2}{}{}}\n{\\catcode`\\'=\\active \\gdef'{^\\bgroup\\prim@s}}\n\\def\\prim@s{\\prime\\futurelet\\next\\pr@m@s}\n\\def\\pr@m@s{\\ifx'\\next\\let\\nxt\\pr@@@s \\else\\ifx^\\next\\let\\nxt\\pr@@@t\n  \\else\\let\\nxt\\egroup\\fi\\fi \\nxt}\n\\def\\pr@@@s#1{\\prim@s} \\def\\pr@@@t#1#2{#2\\egroup}\n{\\catcode`\\^^Z=\\active \\gdef^^Z{\\not=}} % ^^Z is like \\ne in math\n\n{\\catcode`\\_=\\active \\global\\let_=\\_} % _ in math is either subscript or \\_\n\n\\mathchardef\\alpha=\"010B\n\\mathchardef\\beta=\"010C\n\\mathchardef\\gamma=\"010D\n\\mathchardef\\delta=\"010E\n\\mathchardef\\epsilon=\"010F\n\\mathchardef\\zeta=\"0110\n\\mathchardef\\eta=\"0111\n\\mathchardef\\theta=\"0112\n\\mathchardef\\iota=\"0113\n\\mathchardef\\kappa=\"0114\n\\mathchardef\\lambda=\"0115\n\\mathchardef\\mu=\"0116\n\\mathchardef\\nu=\"0117\n\\mathchardef\\xi=\"0118\n\\mathchardef\\pi=\"0119\n\\mathchardef\\rho=\"011A\n\\mathchardef\\sigma=\"011B\n\\mathchardef\\tau=\"011C\n\\mathchardef\\upsilon=\"011D\n\\mathchardef\\phi=\"011E\n\\mathchardef\\chi=\"011F\n\\mathchardef\\psi=\"0120\n\\mathchardef\\omega=\"0121\n\\mathchardef\\varepsilon=\"0122\n\\mathchardef\\vartheta=\"0123\n\\mathchardef\\varpi=\"0124\n\\mathchardef\\varrho=\"0125\n\\mathchardef\\varsigma=\"0126\n\\mathchardef\\varphi=\"0127\n\\mathchardef\\Gamma=\"7000\n\\mathchardef\\Delta=\"7001\n\\mathchardef\\Theta=\"7002\n\\mathchardef\\Lambda=\"7003\n\\mathchardef\\Xi=\"7004\n\\mathchardef\\Pi=\"7005\n\\mathchardef\\Sigma=\"7006\n\\mathchardef\\Upsilon=\"7007\n\\mathchardef\\Phi=\"7008\n\\mathchardef\\Psi=\"7009\n\\mathchardef\\Omega=\"700A\n\n\\mathchardef\\aleph=\"0240\n\\def\\hbar{{\\mathchar'26\\mkern-9muh}}\n\\mathchardef\\imath=\"017B\n\\mathchardef\\jmath=\"017C\n\\mathchardef\\ell=\"0160\n\\mathchardef\\wp=\"017D\n\\mathchardef\\Re=\"023C\n\\mathchardef\\Im=\"023D\n\\mathchardef\\partial=\"0140\n\\mathchardef\\infty=\"0231\n\\mathchardef\\prime=\"0230\n\\mathchardef\\emptyset=\"023B\n\\mathchardef\\nabla=\"0272\n\\def\\surd{{\\mathchar\"1270}}\n\\mathchardef\\top=\"023E\n\\mathchardef\\bot=\"023F\n\\def\\angle{{\\vbox{\\ialign{$\\m@th\\scriptstyle##$\\crcr\n      \\not\\mathrel{\\mkern14mu}\\crcr\n      \\noalign{\\nointerlineskip}\n      \\mkern2.5mu\\leaders\\hrule height.34pt\\hfill\\mkern2.5mu\\crcr}}}}\n\\mathchardef\\triangle=\"0234\n\\mathchardef\\forall=\"0238\n\\mathchardef\\exists=\"0239\n\\mathchardef\\neg=\"023A \\let\\lnot=\\neg\n\\mathchardef\\flat=\"015B\n\\mathchardef\\natural=\"015C\n\\mathchardef\\sharp=\"015D\n\\mathchardef\\clubsuit=\"027C\n\\mathchardef\\diamondsuit=\"027D\n\\mathchardef\\heartsuit=\"027E\n\\mathchardef\\spadesuit=\"027F\n\n\\mathchardef\\coprod=\"1360\n\\mathchardef\\bigvee=\"1357\n\\mathchardef\\bigwedge=\"1356\n\\mathchardef\\biguplus=\"1355\n\\mathchardef\\bigcap=\"1354\n\\mathchardef\\bigcup=\"1353\n\\mathchardef\\intop=\"1352 \\def\\int{\\intop\\nolimits}\n\\mathchardef\\prod=\"1351\n\\mathchardef\\sum=\"1350\n\\mathchardef\\bigotimes=\"134E\n\\mathchardef\\bigoplus=\"134C\n\\mathchardef\\bigodot=\"134A\n\\mathchardef\\ointop=\"1348 \\def\\oint{\\ointop\\nolimits}\n\\mathchardef\\bigsqcup=\"1346\n\\mathchardef\\smallint=\"1273\n\n\\mathchardef\\triangleleft=\"212F\n\\mathchardef\\triangleright=\"212E\n\\mathchardef\\bigtriangleup=\"2234\n\\mathchardef\\bigtriangledown=\"2235\n\\mathchardef\\wedge=\"225E \\let\\land=\\wedge\n\\mathchardef\\vee=\"225F \\let\\lor=\\vee\n\\mathchardef\\cap=\"225C\n\\mathchardef\\cup=\"225B\n\\mathchardef\\ddagger=\"227A\n\\mathchardef\\dagger=\"2279\n\\mathchardef\\sqcap=\"2275\n\\mathchardef\\sqcup=\"2274\n\\mathchardef\\uplus=\"225D\n\\mathchardef\\amalg=\"2271\n\\mathchardef\\diamond=\"2205\n\\mathchardef\\bullet=\"220F\n\\mathchardef\\wr=\"226F\n\\mathchardef\\div=\"2204\n\\mathchardef\\odot=\"220C\n\\mathchardef\\oslash=\"220B\n\\mathchardef\\otimes=\"220A\n\\mathchardef\\ominus=\"2209\n\\mathchardef\\oplus=\"2208\n\\mathchardef\\mp=\"2207\n\\mathchardef\\pm=\"2206\n\\mathchardef\\circ=\"220E\n\\mathchardef\\bigcirc=\"220D\n\\mathchardef\\setminus=\"226E % for set difference A\\setminus B\n\\mathchardef\\cdot=\"2201\n\\mathchardef\\ast=\"2203\n\\mathchardef\\times=\"2202\n\\mathchardef\\star=\"213F\n\n\\mathchardef\\propto=\"322F\n\\mathchardef\\sqsubseteq=\"3276\n\\mathchardef\\sqsupseteq=\"3277\n\\mathchardef\\parallel=\"326B\n\\mathchardef\\mid=\"326A\n\\mathchardef\\dashv=\"3261\n\\mathchardef\\vdash=\"3260\n\\mathchardef\\nearrow=\"3225\n\\mathchardef\\searrow=\"3226\n\\mathchardef\\nwarrow=\"322D\n\\mathchardef\\swarrow=\"322E\n\\mathchardef\\Leftrightarrow=\"322C\n\\mathchardef\\Leftarrow=\"3228\n\\mathchardef\\Rightarrow=\"3229\n\\def\\neq{\\not=} \\let\\ne=\\neq\n\\mathchardef\\leq=\"3214 \\let\\le=\\leq\n\\mathchardef\\geq=\"3215 \\let\\ge=\\geq\n\\mathchardef\\succ=\"321F\n\\mathchardef\\prec=\"321E\n\\mathchardef\\approx=\"3219\n\\mathchardef\\succeq=\"3217\n\\mathchardef\\preceq=\"3216\n\\mathchardef\\supset=\"321B\n\\mathchardef\\subset=\"321A\n\\mathchardef\\supseteq=\"3213\n\\mathchardef\\subseteq=\"3212\n\\mathchardef\\in=\"3232\n\\mathchardef\\ni=\"3233 \\let\\owns=\\ni\n\\mathchardef\\gg=\"321D\n\\mathchardef\\ll=\"321C\n\\mathchardef\\not=\"3236\n\\mathchardef\\leftrightarrow=\"3224\n\\mathchardef\\leftarrow=\"3220 \\let\\gets=\\leftarrow\n\\mathchardef\\rightarrow=\"3221 \\let\\to=\\rightarrow\n\\mathchardef\\mapstochar=\"3237 \\def\\mapsto{\\mapstochar\\rightarrow}\n\\mathchardef\\sim=\"3218\n\\mathchardef\\simeq=\"3227\n\\mathchardef\\perp=\"323F\n\\mathchardef\\equiv=\"3211\n\\mathchardef\\asymp=\"3210\n\\mathchardef\\smile=\"315E\n\\mathchardef\\frown=\"315F\n\\mathchardef\\leftharpoonup=\"3128\n\\mathchardef\\leftharpoondown=\"3129\n\\mathchardef\\rightharpoonup=\"312A\n\\mathchardef\\rightharpoondown=\"312B\n\n\\def\\joinrel{\\mathrel{\\mkern-3mu}}\n\\def\\relbar{\\mathrel{\\smash-}} % \\smash, because - has the same height as +\n\\def\\Relbar{\\mathrel=}\n\\mathchardef\\lhook=\"312C \\def\\hookrightarrow{\\lhook\\joinrel\\rightarrow}\n\\mathchardef\\rhook=\"312D \\def\\hookleftarrow{\\leftarrow\\joinrel\\rhook}\n\\def\\bowtie{\\mathrel\\triangleright\\joinrel\\mathrel\\triangleleft}\n\\def\\models{\\mathrel|\\joinrel=}\n\\def\\Longrightarrow{\\Relbar\\joinrel\\Rightarrow}\n\\def\\longrightarrow{\\relbar\\joinrel\\rightarrow}\n\\def\\longleftarrow{\\leftarrow\\joinrel\\relbar}\n\\def\\Longleftarrow{\\Leftarrow\\joinrel\\Relbar}\n\\def\\longmapsto{\\mapstochar\\longrightarrow}\n\\def\\longleftrightarrow{\\leftarrow\\joinrel\\rightarrow}\n\\def\\Longleftrightarrow{\\Leftarrow\\joinrel\\Rightarrow}\n\\def\\iff{\\;\\Longleftrightarrow\\;}\n\n\\mathchardef\\ldotp=\"613A % ldot as a punctuation mark\n\\mathchardef\\cdotp=\"6201 % cdot as a punctuation mark\n\\mathchardef\\colon=\"603A % colon as a punctuation mark\n\\def\\ldots{\\mathinner{\\ldotp\\ldotp\\ldotp}}\n\\def\\cdots{\\mathinner{\\cdotp\\cdotp\\cdotp}}\n\\def\\vdots{\\vbox{\\baselineskip4\\p@ \\lineskiplimit\\z@\n    \\kern6\\p@\\hbox{.}\\hbox{.}\\hbox{.}}}\n\\def\\ddots{\\mathinner{\\mkern1mu\\raise7\\p@\\vbox{\\kern7\\p@\\hbox{.}}\\mkern2mu\n    \\raise4\\p@\\hbox{.}\\mkern2mu\\raise\\p@\\hbox{.}\\mkern1mu}}\n\n\\def\\acute{\\mathaccent\"7013 }\n\\def\\grave{\\mathaccent\"7012 }\n\\def\\ddot{\\mathaccent\"707F }\n\\def\\tilde{\\mathaccent\"707E }\n\\def\\bar{\\mathaccent\"7016 }\n\\def\\breve{\\mathaccent\"7015 }\n\\def\\check{\\mathaccent\"7014 }\n\\def\\hat{\\mathaccent\"705E }\n\\def\\vec{\\mathaccent\"017E }\n\\def\\dot{\\mathaccent\"705F }\n\\def\\widetilde{\\mathaccent\"0365 }\n\\def\\widehat{\\mathaccent\"0362 }\n\\def\\overrightarrow#1{\\vbox{\\m@th\\ialign{##\\crcr\n      \\rightarrowfill\\crcr\\noalign{\\kern-\\p@\\nointerlineskip}\n      $\\hfil\\displaystyle{#1}\\hfil$\\crcr}}}\n\\def\\overleftarrow#1{\\vbox{\\m@th\\ialign{##\\crcr\n      \\leftarrowfill\\crcr\\noalign{\\kern-\\p@\\nointerlineskip}\n      $\\hfil\\displaystyle{#1}\\hfil$\\crcr}}}\n\\def\\overbrace#1{\\mathop{\\vbox{\\m@th\\ialign{##\\crcr\\noalign{\\kern3\\p@}\n      \\downbracefill\\crcr\\noalign{\\kern3\\p@\\nointerlineskip}\n      $\\hfil\\displaystyle{#1}\\hfil$\\crcr}}}\\limits}\n\\def\\underbrace#1{\\mathop{\\vtop{\\m@th\\ialign{##\\crcr\n      $\\hfil\\displaystyle{#1}\\hfil$\\crcr\\noalign{\\kern3\\p@\\nointerlineskip}\n      \\upbracefill\\crcr\\noalign{\\kern3\\p@}}}}\\limits}\n\\def\\skew#1#2#3{{\\muskip\\z@#1mu\\divide\\muskip\\z@\\tw@ \\mkern\\muskip\\z@\n    #2{\\mkern-\\muskip\\z@{#3}\\mkern\\muskip\\z@}\\mkern-\\muskip\\z@}{}}\n\n\\def\\lmoustache{\\delimiter\"437A340 } % top from (, bottom from )\n\\def\\rmoustache{\\delimiter\"537B341 } % top from ), bottom from (\n\\def\\lgroup{\\delimiter\"462833A } % extensible ( with sharper tips\n\\def\\rgroup{\\delimiter\"562933B } % extensible ) with sharper tips\n\\def\\arrowvert{\\delimiter\"26A33C } % arrow without arrowheads\n\\def\\Arrowvert{\\delimiter\"26B33D } % double arrow without arrowheads\n\\def\\bracevert{\\delimiter\"77C33E } % the vertical bar that extends braces\n\\def\\Vert{\\delimiter\"26B30D } \\let\\|=\\Vert\n\\def\\vert{\\delimiter\"26A30C }\n\\def\\uparrow{\\delimiter\"3222378 }\n\\def\\downarrow{\\delimiter\"3223379 }\n\\def\\updownarrow{\\delimiter\"326C33F }\n\\def\\Uparrow{\\delimiter\"322A37E }\n\\def\\Downarrow{\\delimiter\"322B37F }\n\\def\\Updownarrow{\\delimiter\"326D377 }\n\\def\\backslash{\\delimiter\"26E30F } % for double coset G\\backslash H\n\\def\\rangle{\\delimiter\"526930B }\n\\def\\langle{\\delimiter\"426830A }\n\\def\\rbrace{\\delimiter\"5267309 } \\let\\}=\\rbrace\n\\def\\lbrace{\\delimiter\"4266308 } \\let\\{=\\lbrace\n\\def\\rceil{\\delimiter\"5265307 }\n\\def\\lceil{\\delimiter\"4264306 }\n\\def\\rfloor{\\delimiter\"5263305 }\n\\def\\lfloor{\\delimiter\"4262304 }\n\n\\def\\bigl{\\mathopen\\big}\n\\def\\bigm{\\mathrel\\big}\n\\def\\bigr{\\mathclose\\big}\n\\def\\Bigl{\\mathopen\\Big}\n\\def\\Bigm{\\mathrel\\Big}\n\\def\\Bigr{\\mathclose\\Big}\n\\def\\biggl{\\mathopen\\bigg}\n\\def\\biggm{\\mathrel\\bigg}\n\\def\\biggr{\\mathclose\\bigg}\n\\def\\Biggl{\\mathopen\\Bigg}\n\\def\\Biggm{\\mathrel\\Bigg}\n\\def\\Biggr{\\mathclose\\Bigg}\n\\def\\big#1{{\\hbox{$\\left#1\\vbox to8.5\\p@{}\\right.\\n@space$}}}\n\\def\\Big#1{{\\hbox{$\\left#1\\vbox to11.5\\p@{}\\right.\\n@space$}}}\n\\def\\bigg#1{{\\hbox{$\\left#1\\vbox to14.5\\p@{}\\right.\\n@space$}}}\n\\def\\Bigg#1{{\\hbox{$\\left#1\\vbox to17.5\\p@{}\\right.\\n@space$}}}\n\\def\\n@space{\\nulldelimiterspace\\z@ \\m@th}\n\n\\def\\choose{\\atopwithdelims()}\n\\def\\brack{\\atopwithdelims[]}\n\\def\\brace{\\atopwithdelims\\{\\}}\n\n\\def\\sqrt{\\radical\"270370 }\n\n\\def\\mathpalette#1#2{\\mathchoice{#1\\displaystyle{#2}}%\n  {#1\\textstyle{#2}}{#1\\scriptstyle{#2}}{#1\\scriptscriptstyle{#2}}}\n\\newbox\\rootbox\n\\def\\root#1\\of{\\setbox\\rootbox\n  \\hbox{$\\m@th\\scriptscriptstyle{#1}$}\\mathpalette\\r@@t}\n\\def\\r@@t#1#2{\\setbox\\z@\\hbox{$\\m@th#1\\sqrt{#2}$}\\dimen@\\ht\\z@\n  \\advance\\dimen@-\\dp\\z@\n  \\mkern5mu\\raise.6\\dimen@\\copy\\rootbox \\mkern-10mu\\box\\z@}\n\\newif\\ifv@ \\newif\\ifh@\n\\def\\vphantom{\\v@true\\h@false\\ph@nt}\n\\def\\hphantom{\\v@false\\h@true\\ph@nt}\n\\def\\phantom{\\v@true\\h@true\\ph@nt}\n\\def\\ph@nt{\\ifmmode\\def\\next{\\mathpalette\\mathph@nt}%\n  \\else\\let\\next\\makeph@nt\\fi\\next}\n\\def\\makeph@nt#1{\\setbox\\z@\\hbox{#1}\\finph@nt}\n\\def\\mathph@nt#1#2{\\setbox\\z@\\hbox{$\\m@th#1{#2}$}\\finph@nt}\n\\def\\finph@nt{\\setbox\\tw@\\null\n  \\ifv@ \\ht\\tw@\\ht\\z@ \\dp\\tw@\\dp\\z@\\fi\n  \\ifh@ \\wd\\tw@\\wd\\z@\\fi \\box\\tw@}\n\\def\\mathstrut{\\vphantom(}\n\\def\\smash{\\relax % \\relax, in case this comes first in \\halign\n  \\ifmmode\\def\\next{\\mathpalette\\mathsm@sh}\\else\\let\\next\\makesm@sh\n  \\fi\\next}\n\\def\\makesm@sh#1{\\setbox\\z@\\hbox{#1}\\finsm@sh}\n\\def\\mathsm@sh#1#2{\\setbox\\z@\\hbox{$\\m@th#1{#2}$}\\finsm@sh}\n\\def\\finsm@sh{\\ht\\z@\\z@ \\dp\\z@\\z@ \\box\\z@}\n\n\\def\\cong{\\mathrel{\\mathpalette\\@vereq\\sim}} % congruence sign\n\\def\\@vereq#1#2{\\lower.5\\p@\\vbox{\\lineskiplimit\\maxdimen\\lineskip-.5\\p@\n    \\ialign{$\\m@th#1\\hfil##\\hfil$\\crcr#2\\crcr=\\crcr}}}\n\\def\\notin{\\mathrel{\\mathpalette\\c@ncel\\in}}\n\\def\\c@ncel#1#2{\\m@th\\ooalign{$\\hfil#1\\mkern1mu/\\hfil$\\crcr$#1#2$}}\n\\def\\rightleftharpoons{\\mathrel{\\mathpalette\\rlh@{}}}\n\\def\\rlh@#1{\\vcenter{\\m@th\\hbox{\\ooalign{\\raise2pt\n          \\hbox{$#1\\rightharpoonup$}\\crcr\n        $#1\\leftharpoondown$}}}}\n\\def\\buildrel#1\\over#2{\\mathrel{\\mathop{\\kern\\z@#2}\\limits^{#1}}}\n\\def\\doteq{\\buildrel\\textstyle.\\over=}\n\n\\def\\log{\\mathop{\\rm log}\\nolimits}\n\\def\\lg{\\mathop{\\rm lg}\\nolimits}\n\\def\\ln{\\mathop{\\rm ln}\\nolimits}\n\\def\\lim{\\mathop{\\rm lim}}\n\\def\\limsup{\\mathop{\\rm lim\\,sup}}\n\\def\\liminf{\\mathop{\\rm lim\\,inf}}\n\\def\\sin{\\mathop{\\rm sin}\\nolimits}\n\\def\\arcsin{\\mathop{\\rm arcsin}\\nolimits}\n\\def\\sinh{\\mathop{\\rm sinh}\\nolimits}\n\\def\\cos{\\mathop{\\rm cos}\\nolimits}\n\\def\\arccos{\\mathop{\\rm arccos}\\nolimits}\n\\def\\cosh{\\mathop{\\rm cosh}\\nolimits}\n\\def\\tan{\\mathop{\\rm tan}\\nolimits}\n\\def\\arctan{\\mathop{\\rm arctan}\\nolimits}\n\\def\\tanh{\\mathop{\\rm tanh}\\nolimits}\n\\def\\cot{\\mathop{\\rm cot}\\nolimits}\n\\def\\coth{\\mathop{\\rm coth}\\nolimits}\n\\def\\sec{\\mathop{\\rm sec}\\nolimits}\n\\def\\csc{\\mathop{\\rm csc}\\nolimits}\n\\def\\max{\\mathop{\\rm max}}\n\\def\\min{\\mathop{\\rm min}}\n\\def\\sup{\\mathop{\\rm sup}}\n\\def\\inf{\\mathop{\\rm inf}}\n\\def\\arg{\\mathop{\\rm arg}\\nolimits}\n\\def\\ker{\\mathop{\\rm ker}\\nolimits}\n\\def\\dim{\\mathop{\\rm dim}\\nolimits}\n\\def\\hom{\\mathop{\\rm hom}\\nolimits}\n\\def\\det{\\mathop{\\rm det}}\n\\def\\exp{\\mathop{\\rm exp}\\nolimits}\n\\def\\Pr{\\mathop{\\rm Pr}}\n\\def\\gcd{\\mathop{\\rm gcd}}\n\\def\\deg{\\mathop{\\rm deg}\\nolimits}\n\n\\def\\bmod{\\nonscript\\mskip-\\medmuskip\\mkern5mu\n  \\mathbin{\\rm mod}\\penalty900\\mkern5mu\\nonscript\\mskip-\\medmuskip}\n\\def\\pmod#1{\\allowbreak\\mkern18mu({\\rm mod}\\,\\,#1)}\n\n\\def\\cases#1{\\left\\{\\,\\vcenter{\\normalbaselines\\m@th\n    \\ialign{$##\\hfil$&\\quad##\\hfil\\crcr#1\\crcr}}\\right.}\n\\def\\matrix#1{\\null\\,\\vcenter{\\normalbaselines\\m@th\n    \\ialign{\\hfil$##$\\hfil&&\\quad\\hfil$##$\\hfil\\crcr\n      \\mathstrut\\crcr\\noalign{\\kern-\\baselineskip}\n      #1\\crcr\\mathstrut\\crcr\\noalign{\\kern-\\baselineskip}}}\\,}\n\\def\\pmatrix#1{\\left(\\matrix{#1}\\right)}\n\\newdimen\\p@renwd\n\\setbox0=\\hbox{\\tenex B} \\p@renwd=\\wd0 % width of the big left (\n\\def\\bordermatrix#1{\\begingroup \\m@th\n  \\setbox\\z@\\vbox{\\def\\cr{\\crcr\\noalign{\\kern2\\p@\\global\\let\\cr\\endline}}%\n    \\ialign{$##$\\hfil\\kern2\\p@\\kern\\p@renwd&\\thinspace\\hfil$##$\\hfil\n      &&\\quad\\hfil$##$\\hfil\\crcr\n      \\omit\\strut\\hfil\\crcr\\noalign{\\kern-\\baselineskip}%\n      #1\\crcr\\omit\\strut\\cr}}%\n  \\setbox\\tw@\\vbox{\\unvcopy\\z@\\global\\setbox\\@ne\\lastbox}%\n  \\setbox\\tw@\\hbox{\\unhbox\\@ne\\unskip\\global\\setbox\\@ne\\lastbox}%\n  \\setbox\\tw@\\hbox{$\\kern\\wd\\@ne\\kern-\\p@renwd\\left(\\kern-\\wd\\@ne\n    \\global\\setbox\\@ne\\vbox{\\box\\@ne\\kern2\\p@}%\n    \\vcenter{\\kern-\\ht\\@ne\\unvbox\\z@\\kern-\\baselineskip}\\,\\right)$}%\n  \\null\\;\\vbox{\\kern\\ht\\@ne\\box\\tw@}\\endgroup}\n\n\\def\\openup{\\afterassignment\\@penup\\dimen@=}\n\\def\\@penup{\\advance\\lineskip\\dimen@\n  \\advance\\baselineskip\\dimen@\n  \\advance\\lineskiplimit\\dimen@}\n\\def\\eqalign#1{\\null\\,\\vcenter{\\openup\\jot\\m@th\n  \\ialign{\\strut\\hfil$\\displaystyle{##}$&$\\displaystyle{{}##}$\\hfil\n      \\crcr#1\\crcr}}\\,}\n\\newif\\ifdt@p\n\\def\\displ@y{\\global\\dt@ptrue\\openup\\jot\\m@th\n  \\everycr{\\noalign{\\ifdt@p \\global\\dt@pfalse \\ifdim\\prevdepth>-1000\\p@\n      \\vskip-\\lineskiplimit \\vskip\\normallineskiplimit \\fi\n      \\else \\penalty\\interdisplaylinepenalty \\fi}}}\n\\def\\@lign{\\tabskip\\z@skip\\everycr{}} % restore inside \\displ@y\n\\def\\displaylines#1{\\displ@y \\tabskip\\z@skip\n  \\halign{\\hbox to\\displaywidth{$\\@lign\\hfil\\displaystyle##\\hfil$}\\crcr\n    #1\\crcr}}\n\\def\\eqalignno#1{\\displ@y \\tabskip\\centering\n  \\halign to\\displaywidth{\\hfil$\\@lign\\displaystyle{##}$\\tabskip\\z@skip\n    &$\\@lign\\displaystyle{{}##}$\\hfil\\tabskip\\centering\n    &\\llap{$\\@lign##$}\\tabskip\\z@skip\\crcr\n    #1\\crcr}}\n\\def\\leqalignno#1{\\displ@y \\tabskip\\centering\n  \\halign to\\displaywidth{\\hfil$\\@lign\\displaystyle{##}$\\tabskip\\z@skip\n    &$\\@lign\\displaystyle{{}##}$\\hfil\\tabskip\\centering\n    &\\kern-\\displaywidth\\rlap{$\\@lign##$}\\tabskip\\displaywidth\\crcr\n    #1\\crcr}}\n\n% Definitions related to output\n\n\\message{output routines,}\n\n\\countdef\\pageno=0 \\pageno=1 % first page is number 1\n\\newtoks\\headline \\headline={\\hfil} % headline is normally blank\n\\newtoks\\footline \\footline={\\hss\\tenrm\\folio\\hss}\n  % footline is normally a centered page number in font \\tenrm\n\\newif\\ifr@ggedbottom\n\\def\\raggedbottom{\\topskip 10\\p@ plus60\\p@ \\r@ggedbottomtrue}\n\\def\\normalbottom{\\topskip 10\\p@ \\r@ggedbottomfalse} % undoes \\raggedbottom\n\\def\\folio{\\ifnum\\pageno<\\z@ \\romannumeral-\\pageno \\else\\number\\pageno \\fi}\n\\def\\nopagenumbers{\\footline{\\hfil}} % blank out the footline\n\\def\\advancepageno{\\ifnum\\pageno<\\z@ \\global\\advance\\pageno\\m@ne\n  \\else\\global\\advance\\pageno\\@ne \\fi} % increase |pageno|\n\n\\newinsert\\footins\n\\def\\footnote#1{\\let\\@sf\\empty % parameter #2 (the text) is read later\n  \\ifhmode\\edef\\@sf{\\spacefactor\\the\\spacefactor}\\/\\fi\n  #1\\@sf\\vfootnote{#1}}\n\\def\\vfootnote#1{\\insert\\footins\\bgroup\n  \\interlinepenalty\\interfootnotelinepenalty\n  \\splittopskip\\ht\\strutbox % top baseline for broken footnotes\n  \\splitmaxdepth\\dp\\strutbox \\floatingpenalty\\@MM\n  \\leftskip\\z@skip \\rightskip\\z@skip \\spaceskip\\z@skip \\xspaceskip\\z@skip\n  \\textindent{#1}\\footstrut\\futurelet\\next\\fo@t}\n\\def\\fo@t{\\ifcat\\bgroup\\noexpand\\next \\let\\next\\f@@t\n  \\else\\let\\next\\f@t\\fi \\next}\n\\def\\f@@t{\\bgroup\\aftergroup\\@foot\\let\\next}\n\\def\\f@t#1{#1\\@foot}\n\\def\\@foot{\\strut\\egroup}\n\\def\\footstrut{\\vbox to\\splittopskip{}}\n\\skip\\footins=\\bigskipamount % space added when footnote is present\n\\count\\footins=1000 % footnote magnification factor (1 to 1)\n\\dimen\\footins=8in % maximum footnotes per page\n\n\\newinsert\\topins\n\\newif\\ifp@ge \\newif\\if@mid\n\\def\\topinsert{\\@midfalse\\p@gefalse\\@ins}\n\\def\\midinsert{\\@midtrue\\@ins}\n\\def\\pageinsert{\\@midfalse\\p@getrue\\@ins}\n\\skip\\topins=\\z@skip % no space added when a topinsert is present\n\\count\\topins=1000 % magnification factor (1 to 1)\n\\dimen\\topins=\\maxdimen % no limit per page\n\\def\\@ins{\\par\\begingroup\\setbox\\z@\\vbox\\bgroup} % start a \\vbox\n\\def\\endinsert{\\egroup % finish the \\vbox\n  \\if@mid \\dimen@\\ht\\z@ \\advance\\dimen@\\dp\\z@ \\advance\\dimen@12\\p@\n    \\advance\\dimen@\\pagetotal \\advance\\dimen@-\\pageshrink\n    \\ifdim\\dimen@>\\pagegoal\\@midfalse\\p@gefalse\\fi\\fi\n  \\if@mid \\bigskip\\box\\z@\\bigbreak\n  \\else\\insert\\topins{\\penalty100 % floating insertion\n    \\splittopskip\\z@skip\n    \\splitmaxdepth\\maxdimen \\floatingpenalty\\z@\n    \\ifp@ge \\dimen@\\dp\\z@\n    \\vbox to\\vsize{\\unvbox\\z@\\kern-\\dimen@}% depth is zero\n    \\else \\box\\z@\\nobreak\\bigskip\\fi}\\fi\\endgroup}\n\n\\output{\\plainoutput}\n\\def\\plainoutput{\\shipout\\vbox{\\makeheadline\\pagebody\\makefootline}%\n  \\advancepageno\n  \\ifnum\\outputpenalty>-\\@MM \\else\\dosupereject\\fi}\n\\def\\pagebody{\\vbox to\\vsize{\\boxmaxdepth\\maxdepth \\pagecontents}}\n\\def\\makeheadline{\\vbox to\\z@{\\vskip-22.5\\p@\n  \\line{\\vbox to8.5\\p@{}\\the\\headline}\\vss}\\nointerlineskip}\n\\def\\makefootline{\\baselineskip24\\p@\\lineskiplimit\\z@\\line{\\the\\footline}}\n\\def\\dosupereject{\\ifnum\\insertpenalties>\\z@ % something is being held over\n  \\line{}\\kern-\\topskip\\nobreak\\vfill\\supereject\\fi}\n\n\\def\\pagecontents{\\ifvoid\\topins\\else\\unvbox\\topins\\fi\n  \\dimen@=\\dp\\@cclv \\unvbox\\@cclv % open up \\box255\n  \\ifvoid\\footins\\else % footnote info is present\n    \\vskip\\skip\\footins\n    \\footnoterule\n    \\unvbox\\footins\\fi\n  \\ifr@ggedbottom \\kern-\\dimen@ \\vfil \\fi}\n\\def\\footnoterule{\\kern-3\\p@\n  \\hrule width 2truein \\kern 2.6\\p@} % the \\hrule is .4pt high\n\n% Hyphenation, miscellaneous macros, and initial values for standard layout\n\\message{hyphenation}\n\n\\lefthyphenmin=2 \\righthyphenmin=3 % disallow x- or -xx breaks\n\\input hyphen\n\n\\def\\magnification{\\afterassignment\\m@g\\count@}\n\\def\\m@g{\\mag\\count@\n  \\hsize6.5truein\\vsize8.9truein\\dimen\\footins8truein}\n\n\\def\\loggingall{\\tracingcommands\\tw@\\tracingstats\\tw@\n  \\tracingpages\\@ne\\tracingoutput\\@ne\\tracinglostchars\\@ne\n  \\tracingmacros\\tw@\\tracingparagraphs\\@ne\\tracingrestores\\@ne\n  \\showboxbreadth\\maxdimen\\showboxdepth\\maxdimen}\n\\def\\tracingall{\\tracingonline\\@ne\\loggingall}\n\n\\def\\showhyphens#1{\\setbox0\\vbox{\\parfillskip\\z@skip\\hsize\\maxdimen\\tenrm\n  \\pretolerance\\m@ne\\tolerance\\m@ne\\hbadness0\\showboxdepth0\\ #1}}\n\n\\normalbaselines\\rm % select roman font\n\\nonfrenchspacing % punctuation affects the spacing\n\\catcode`@=12 % at signs are no longer letters\n\n\\def\\fmtname{plain}\\def\\fmtversion{3.141592653} % identifies the current format\n",
	"/texfonts/cmbxsl10.tfm":    "\x01\u007f\x00\x12\x00\x00\x00\u007f\x00.\x00\x0f\x00\n\x007\x00X\x00\n\x00\x00\x00\a\x8eM\xa7\x16\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMBXSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x14\xb0\x90\x00(\xb0\x00\x00#\xb0T\x00\x1b\xb0\x00\x00\x18\xb0\xb4\x00$\xb0\xc4\x00\x1d\xb0p\x00#\xb0\x80\x00\x1d\xb04\x00#\xb0\x80\x00\x1d\xb0t\x00\x13\xc0\xd9\n\x12\xc0P\x00\x12\xc0P\x00(\xc0P\x00(\xc0P\x00\x010\x04\x00\x038\x04\x00\r\xc0\x00\x00\r\xc0(\x00\rp \x00\r\xc0H\x00\r`h\x00'\xc0\x00\x00\t\x06\x00\x00\x0f\xc0p\x00\x1d0|\x00#0|\x00\rT\x00\x00)\xb0p\x00,\xb0p\x00#\xd2T\x00\x010\x01\x00\x02\xc0e\x17\x10\xc0\x14\x00(\xc7@\x00\r\xe3\x9c\x00(\xe3\x84\x00#\xc0X\x00\x01\xc0\x8d\x12\x06\xe9\xbc\x00\x06\xe9\x18\x00\r\xe0\xa0\x00#\x85\x18\x00\x01\x18\x00\x00\x040\t\x15\x01\x10\x00\x00\r\xe9\xbc\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\r\xa0\x9c\x00\x0100\x00\x0180\x00\x02H$\x00#!@\x00\vH\x00\x00\v\xc0\xb9\x18#\xc0\\\x00 \xb0\x01L\x1c\xb0t\x00\x1d\xb0\xac\x00!\xb0U5\x17\xb0p\x00\x16\xb0\x91$&\xb0\x10\x00$\xb0\xc4\x00\x05\xb0\xc1W\x0e\xb0\xa8\x00%\xb0\xad*\x14\xb0\x01R*\xb0\xc4\x00$\xb0\xc4\x00\x1f\xb0U5\x19\xb0u\x1e\x1f\xb8T\x00\x1e\xb0\x01L\x12\xb0d\x00\x1a\xb0\x91.\"\xb0\xc4\x00 \xb0\xd1$-\xb0\xd1$ \xb0\xc1* \xb0\xd5/\x15\xb0\xac\x00\x01\xe9\xcc\x00\x10\xc0\xc8\x00\x01\xe98\x00\r\xc0\f\x00\x01\xc0\x8c\x00\x01\xc0\x8d\x11\f0\x01H\x12\xc0-B\t0\x89@\x12\xc0P\x00\n0|\x00\x03\xc0\xd9\x02\r8\xb1V\x12\xc0\x01:\x01\xc0\x8c\x00\x03\xc8P\x00\x11\xc0\x89\x19\x01\xc0P\x00(0\x01:\x120\x01:\r0mB\x128=B\x118D\x00\b0\x98\x00\a0L\x00\x06\x90\x1dJ\x120\x05K\x110\xb1\x19\x1d0\xb1\x1a\x110\x94\x00\x118\xb1\x1f\t0x\x00\r0\xa5\x16+0\xa4\x00\r\xc0p\x00\r\xc0p\x00\r\xc0`\x00\x00\x00\x00\x00\x00\x05\x1cp\x00\x05\x99\x98\x00\x05\x9fH\x00\x06\" \x00\x06\xfaN\x00\a'\xd0\x00\aA\xfb\x00\a\x93\xe8\x00\b-\x80\x00\bn\xed\x00\b\xb0X\x00\b\xf1\xc3\x00\t30\x00\t\x82\xd5\x00\t\x8e6\x00\t\xa4\xf8\x00\t\xb6\b\x00\n8\xe0\x00\n\xbb\xb8\x00\v\x11\r\x00\v>\x90\x00\v\x93\xe5\x00\f\x16\xbd\x00\fD@\x00\f\x93\xe5\x00\f\xcc\xc8\x00\f\xe3\x8a\x00\r\x16\xbd\x00\rI\xf0\x00\r\xcc\xc8\x00\r\xd2x\x00\r\xe9:\x00\x0e\x1cm\x00\x0e'\xce\x00\x0eO\xa0\x00\x0efb\x00\x0el\x12\x00\x0ews\x00\x0e\xcc\xca\x00\x0fUP\x00\x10\xaa\xa5\x00\x11wr\x00\x12f`\x00\x12\xb6\x05\x00\x13\x05\xaa\x00\x00\x00\x00\x00\x02}(\x00\x06A\xfe\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t\x89\xaa\x00\n\x1cr\x00\n\" \x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x1cr\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeA\xfe\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x02\" \x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\rJ\x00\x00\x14\xdd\x00\x00\x1b\x82\x00\x00$\v\x00\x00&S\x00\x00'\xd5\x00\x00C\xe6\x00\x00F-\x00\x00I\xf8\x00\x00Q\x8e\x00\x00VH\x00\x00b\xa0\x00\x00g[\x00\x00o\x86\x00\x00}\x8a\x00\x00\x88*\x00\x00\x90\"\x00\x00\x9b\x83\x00\x00\x9f}\x00\x00\xb7\xf5\x00\x00\xc5\n\x00\x00ƾ\x00\x00\xc9\x05\x00\x00\xcb\xde\x00\x00ζ\x00\x00Ұ\x00\x00\xd4e\x00\x00\xd4f\x00\x00\xdcu\x00\x00\xe0\xea\x00\x00\xe8N\x00\x00\xf3\xe0\x00\x00\xfaU\x00\x00\xfb\x15\x00\x01\rK\x00\x01\x15\xd2\x00\x01\"U\x00\x01/k\x00\x015\x1d\x00\x01;\xc0\x00\x01>]\x00\x01I\x06\x00\x01Q\x8e\x00\x01p\xd8\x00\x01x\xce\x00\x01{F\x00\x01}-\x00\x01\x92\xfa\x00\x01\xb7\xf5\x00\x01\xbf\xeb\x00\x02\x00\x05\x00\x02\x15\xd3\x00\x02J(\x00\x03\x98\xaa\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa\xe3\x90\xff\xf9\xf4\xa0\x00\x01\xbe\x93\x00\x02\v`\xff\xfe\xfaP\xff\xff}(\xff\xfewx\xff\xfd\xf4\xa0\x00\x00\x82\xd8\x00\x01\x05\xb0\x00\x02\xaa\xb0\x00\x06\" \x00\x03\x11\x10\x00\x02\v`\x00\a\x1cr\x00\x12f`\x00\x02\v`",
	"/texfonts/cmssi8.tfm":      "\x01w\x00\x12\x00\x00\x00\u007f\x000\x00\x10\x00\v\x007\x00N\x00\b\x00\x00\x00\a R\x16\xbc\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x15\xd0\xc4\x00*\xd0\x00\x00'\xd0P\x00\x1a\xd0\x00\x00\x1dм\x00\"\xd0h\x00#и\x00'Ј\x00#\xd00\x00'Ј\x00#\xd0l\x00\x18\xd0\xd9\n\x14Р\x00\x14М\x00)Р\x00)М\x00\x010,\x00\x029,\x00\x12\xd0\x00\x00\x12Ќ\x00\x12\x90d\x00\x12И\x00\x12\x80|\x00$\xd0\x00\x00\r\a\x00\x00\x10Ќ\x00#0H\x00'0H\x00\x12T4\x00+и\x00.и\x00'\xe2P\x00\x010\x01\x00\x06\xd0=\x17\x12\xd0\x00\x00*\xd88\x00\x12\xf3\xac\x00*\xf3 \x00&\xd0\x1c\x00\x03\xd0U\x12\v\xfa\xc0\x00\v\xfa\x18\x00\x12\xf0\xb0\x00'u\x18\x00\x03\x16\x00\x00\a0\x11\x15\x03\x10\x00\x00\x12\xfa\xc0\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x12\xa0\xac\x00\x030\x14\x00\x036\x14\x00\x06I\b\x00'!8\x00\x0fI\x00\x00\x0fе\x18\x1d\xd0P\x00\x1d\xd0\x01B\x1d\xd0l\x00\x1bи\x00#\xd0Q4\x19и\x00\x17\xd0\xc5#\x1dи\x00\"\xd0h\x00\x03\xd0\xc5M\x0f\xd0h\x00!й)\x15\xd0\x01H,\xd0h\x00\"\xd0h\x00%\xd0Q4\x1b\xd0m\x1d%\xd6P\x00\x1c\xd0l\x00\x16Ќ\x00\x1f\xd0\xc5- \xd0h\x00\x1d\xd0\xd1#-\xd0\xd1#\x1d\xd0\xc5)\x1d\xd0\xd5.\x1aи\x00\x04\xfa\xcc\x00\x12\xd0\xc8\x00\x04\xfat\x00\x12\xd0X\x00\x03\xc0`\x00\x03\xd0U\x11\x100\x05?\x13\xd0%9\r0p\x00\x13М\x00\r0H\x00\x05\xd0\xd9\x02\x129\xa9L\x13\xd0\f\x00\x01\xc0\xa4\x00\x02ɔ\x00\x11\xd0q\x19\x01М\x00(0\f\x00\x130\f\x00\x120E9\x139)9\x139,\x00\b0\xa8\x00\n0\\\x00\t`M@\x130-A\x0e0\xa8\x00\x1e0\xa9\x19\x0e0\x90\x00\x0e9\xa9\x1e\f0\x80\x00\x120\x85\x16/0\x84\x00\x12Ќ\x00\x12\xb0x\x00\x12\xc0@\x00\x00\x00\x00\x00\x00\x04\x0e<\x00\x04\x87 \x00\x04\xb8\xe8\x00\x04\xf1\xcc\x00\x051\xcc\x00\x05c\x92\x00\x05\xaa\xb0\x00\x05\xce>\x00\x06#\x94\x00\x06\x84J\x00\x06\x9cx\x00\ac\x94\x00\a\x8e@\x00\a\xd5\\\x00\b\a$\x00\b*\xb2\x00\bN@\x00\b\x80\b\x00\b\xc7$\x00\t\x1cz\x00\t@\n\x00\tq\xd0\x00\t\xb8\xee\x00\t\xea\xb4\x00\n1\xd2\x00\nc\x98\x00\n\xdc|\x00\v\x00\n\x00\vU`\x00\v\x9c|\x00\v\x9c~\x00\v\xaa\xb6\x00\v\xceD\x00\f\x00\n\x00\fG(\x00\fw\x96\x00\f\x8eF\x00\f\xe3\x9a\x00\r8\xf0\x00\r\x80\f\x00\r\xd5b\x00\x0e*\xb8\x00\x0e\xa3\x9c\x00\x0e\xd5b\x00\x10\x0eH\x00\x10\x87,\x00\x11\x00\x10\x00\x00\x00\x00\x00\x01q\xc8\x00\x06\x1a,\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xac\x00\t$\x96\x00\t\xaa\xb0\x00\t\xd5T\x00\n\x1cr\x00\n\x80\x00\x00\n\xe1\x88\x00\n\xf6\xde\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x1a,\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xaa\xb0\x00\x02\x0e8\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00#\x80\x00\x003N\x00\x00D@\x00\x00H\x96\x00\x00XF\x00\x00`\xc4\x00\x00m\x9c\x00\x00x\xf2\x00\x00\x81z\x00\x00\xa5\xbe\x00\x00\xa6\x80\x00\x00\xb5j\x00\x00\xb7\x94\x00\x00\xd3(\x00\x00ܘ\x00\x01\x02\xd6\x00\x01\x0e\xdc\x00\x01\x1d\"\x00\x01\"<\x00\x01.T\x00\x011\xee\x00\x014\n\x00\x01:j\x00\x01?H\x00\x01F.\x00\x01GD\x00\x01L\x90\x00\x01R\x96\x00\x01[0\x00\x01^L\x00\x01a\xbc\x00\x01e\x16\x00\x01h\b\x00\x01j\xca\x00\x01j\xd2\x00\x01v\xdc\x00\x01x,\x00\x01y\n\x00\x01\x80(\x00\x01\x87D\x00\x01\x94\x9e\x00\x01\xbfd\x00\x01\xc2v\x00\x01ע\x00\x01\xe3\xae\x00\x01\xe3\xb6\x00\x02\a\xfa\x00\x02\x14\x14\x00\x02 (\x00\x02Dl\x00\x02\x8c\xf8\x00\x02\x99\f\x00\x02\xc9h\x00\x03\x8a\xd4\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfb\xf1\xc4\xff\xfb\x9cn\x00\x01.:\x00\x01\xe3\x90\xff\xff\x87\x1c\xff\xfe\x95T\x00\x00x\xe4\xff\xfe\x1cp\x00\x03f\xa0\x00\x05\xaa\xb0\x00\x02\xd5X\x00\x01\xe3\x90\x00\a\x1cr\x00\x11\x00\x10\x00\x01\xe3\x90",
	"/texfonts/cmsy8.tfm":       "\x01\x18\x00\x12\x00\x00\x00\u007f\x00+\x00\x0f\x00\x10\x00\x12\x00\a\x00\a\x00\x00\x00\x16\xbeK\xc8\v\x00\x80\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x1f\xa9\x00\x00\x03B\x00\x00\x1f\xa9\x00\x00\aS\x00\x00\x1f\xa9\x00\x00\aB\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00\x1f\xa9\x00\x00)\xdd\x00\x00\aB\x00\x00\aB\x00\x00\x1fd\x00\x00\x1fd\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f!\x00\x00\x1fu\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)\x97\x00\x00)\x97\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)!\x00\x00)!\x00\x00\a\xdc\x00\x00\a\xdc\x00\x00)!\x00\x00)\xdc\x00\x00)\xdc\x00\x00\x1fd\x00\x00)!\x00\x00)!\x00\x00\x0f\xdc\x00\x00\x0f\xdc\x00\x00)!\x00\x00)\xdc\x00\x00)\xdc\x00\x00\x1f0\x00\x00\x02\x80\x00\x00)0\x00\x00\x14\x97\x00\x00\x14\x97\x00\x00'\xdd\x00\x00'\xdd\x00\x00\x01\xdc\x00\x00\x01!\x00\x00\f\xd0\x00\x00\f\xd0\x00\x00\x140\x00\x00\a\xe6\x00\x00\x1b\xd0\x00\x00\x1b\xd0\x00\x00\x1f\xd0\x00\x00\x1f\xd0\x00\x00\x0f\xd0\x00\x00!\xc0\x01\x06\x12\xc0\r\x04\t\xc0\x15\x04\x1e\xc0\x11\x02\b\xc0-\x03\x19\xc01\x03\r\xc8\x19\x03%\xc0\x05\x03\n\xc0\x1d\x00\x15\xc8A\x05\x1d\xc0\t\x01\x16\xc0\x01\x04*\xc0\x01\x04#\xc0=\x02 \xc0\x11\x03\x17\xc0)\x02\"\xc8\x01\x03&\xc0\x01\x02\x0e\xc0!\x04\v\xc0E\x00\x11\xc01\x02\x10\xc0)\x00(\xc0)\x02\x18\xc09\x04\x13\xc8)\x02\x1a\xc0%\x04\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x0f\xd0\x00\x00\x0f\xd0\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\a\xee\x00\x00\a\xee\x00\x00\x04\xee\x00\x00\x04\xee\x00\x00\x03\xee\x00\x00\a\xee\x00\x00\a\xee\x00\x00\x0f\xee\x00\x00\a\xee\x00\x00\x03\xdc\x00\x00$\x1f\x00\x00\x1c\xc0\x00\x00$\xc0\x00\x00\x05\xdd4\x00\x14\x80\x00\x00\x14\x80\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x06\xdd\x00\x00\x06\xdd\x00\x00\x06\xdd\x00\x00\x0f\xdd\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x9cr\x00\x04\xb8\xe8\x00\x06\x9cx\x00\a\x18\xea\x00\a\x8e@\x00\b\x80\b\x00\b\xf8\xec\x00\t\x00\x9a\x00\t^.\x00\ta\x90\x00\tq\xd0\x00\n\x18\x80\x00\nKj\x00\nc\x98\x00\n\u007f\xc4\x00\n\x9a\xe6\x00\v\x1dV\x00\vK\"\x00\vU`\x00\v\x85\xbc\x00\v\xb0\xf6\x00\v\xe4\x9a\x00\f\x1a\f\x00\f\"(\x00\f7\xcc\x00\fG(\x00\f\xbb\xc8\x00\f\xebL\x00\r%\xe2\x00\r8\xf0\x00\rw:\x00\r\x97\\\x00\r\xe20\x00\r\xe7\xde\x00\x0e*\xb8\x00\x0ew\xce\x00\x0e\x82\x9e\x00\x0f\x1c\x80\x00\x10\xdf\xca\x00\x11\x00\x10\x00\x14;z\x00\x00\x00\x00\x00\x00\xb8R\x00\x06\f<\x00\x06\xe3\x8e\x00\aN<\x00\aq\xc8\x00\a\xbcN\x00\b\x12\xb6\x00\b\xe3\x90\x00\t\x02\x90\x00\t\xaa\xb0\x00\n\xb2\xa2\x00\n\xee\xee\x00\v\x1cr\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\f<\xff\xffN<\xff\xffq\xc8\xff\xff\xbcN\x00\x00\x12\xb6\x00\x00\xe3\x8e\x00\x01\x02\x90\x00\x01\x8e:\x00\x01\xaa\xb0\x00\x02\x12\xf6\x00\x02\xb2\xa2\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x0fG\xae\x00\x00\x00\x00\x00\x00\x04\xd8\x00\x00\x1b\xe0\x00\x00n~\x00\x00x\xe4\x00\x00\xda\xe4\x00\x00\xec:\x00\x01\x16\xc4\x00\x01,&\x00\x01H>\x00\x01TV\x00\x01bD\x00\x01\x9aP\x00\x01\xe3\x90\x00\x02W\xc6\x00\x02b\xb4\x00\x02\xf8.\x00\x04&h\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00x\xe4\x00\x00\xf1\xc8\x00\x01j\xac\x00\x01\xe3\x90\x00\x02\\t\x00\x02\xd5X\x00\x03N<\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x11\x00\x10\x00\x00\x00\x00\x00\v$,\x00\x06\x8a\x94\x00\aQ\xb0\x00\v\xfcZ\x00\x06FP\x00\x06\xa5\x8c\x00\x05\xa5\x8c\x00\x04\x8e8\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06UV\x00\x01\x00\x00\x00\x17\xcc\xcc\x00\x1234\x00\x04\x00\x00",
	"/texfonts/cmtt12.tfm":      "\x00\xc1\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\r\x00\x01\x00\x02\x00\x00\x00\x00\x00\a߆\xb5T\x00\xc0\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd4\x00\x00\x01\xd4\x00\x00\x01\xd0\x00\x00\x01<\x00\x00\x01<\x00\x00\x01P\x00\x00\x01\\\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x00\x00\x01\v\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x89\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xe5\x00\x00\x01)\x00\x00\x01\xd0\x01\x00\x01\xd0\x00\x00\x01\xd4\x00\x00\x01\xf7\x00\x00\x01\xf7\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01`\x00\x00\x01r\x00\x00\x01\x1a\x00\x00\x01r\x00\x00\x01\x10\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01Z\x00\x00\x01\x93\x00\x00\x01A\x00\x00\x01\x93\x00\x00\x01\xd0\x01\x01\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xda\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\b\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01\\\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xdc\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\\\x00\x00\x01\\\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\xa0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\\\x00\x00\x01P\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x00\x00\x00\x00\x00\b;\xbc\x00\x00\x00\x00\x00\x01\xce8\x00\x03\x84\xbd\x00\x068\xe3\x00\x06\x9c\xe9\x00\x06\xe3\x8f\x00\bUW\x00\bj\xe0\x00\b\xaa\xac\x00\b\xda\x14\x00\b\xdbq\x00\b\xfe\x19\x00\t\x0e9\x00\t\xc7\x1c\x00\n\xaa\xab\x00\v\x1cq\x00\x00\x00\x00\xff\xfc\xd5\xcc\xff\xfe\xa3\xc3\xff\xff\x12\xf7\xff\xff\xff\xfd\x00\x00\xe3\x8f\x00\x01US\x00\x01UU\x00\x01|0\x00\x01\xc7\x1d\x00\x028\xe4\x00\x03\x1cs\x00\x03\x8e9\x00\x00\x00\x00\x80`\x00\x0e\x80`\x00\x0f\x00\x00\x00\x00\x00\b;\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8f\x00\x10wx\x00\b;\xbc",
	"/texfonts/cmtt9.tfm":       "\x00\xbf\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\v\x00\x01\x00\x02\x00\x00\x00\x00\x00\aߤN\x00\x00\x90\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01:\x00\x00\x01:\x00\x00\x01P\x00\x00\x01Z\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x00\x00\x01\t\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x87\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xe4\x00\x00\x01'\x00\x00\x01\xd0\x01\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01`\x00\x00\x01r\x00\x00\x01\x18\x00\x00\x01r\x00\x00\x01\x10\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01X\x00\x00\x01\xa3\x00\x00\x01A\x00\x00\x01\xa3\x00\x00\x01\xd0\x01\x01\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd8\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\x06\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01Z\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xda\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01Z\x00\x00\x01Z\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x90\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01Z\x00\x00\x01P\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x00\x00\x00\x00\x00\bf`\x00\x00\x00\x00\x00\x02\t|\x00\x03\x81\x95\x00\x068\xe4\x00\x06\xaf\xe2\x00\x06\xe3\x8e\x00\bUU\x00\b}%\x00\b\xaa\xab\x00\b\xdbp\x00\b\xed\v\x00\t\x0e9\x00\t\x1cp\x00\t\xc7\x1c\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xe8\xc5\xff\xfe\xb6\t\xff\xff%\xee\x00\x00\xe3\x8e\x00\x01UU\x00\x01\x8f+\x00\x01\xc7\x1c\x00\x028\xe4\x00\x03\x1cr\x00\x03\x8e9\x00\x00\x00\x00\x80`\x00\x0e\x80`\x00\x0f\x00\x00\x00\x00\x00\bf`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc0\x00\bf`",
	"/texfonts/slantlj6.tfm":    "\x00a\x00\x12\x00\x01\x00\x1e\x00\x1f\x00\x02\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\bC\x9d\xdb~\x01\x00\x00\x00\aGFSLANT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bSLANTLJ6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\x01\x10\x00\x00\x02\x10\x00\x00\x03\x10\x00\x00\x04\x10\x00\x00\x05\x10\x00\x00\x06\x10\x00\x00\a\x10\x00\x00\b\x10\x00\x00\t\x10\x00\x00\n\x10\x00\x00\v\x10\x00\x00\f\x10\x00\x00\r\x10\x00\x00\x0e\x10\x00\x00\x0f\x10\x00\x00\x10\x10\x00\x00\x11\x10\x00\x00\x12\x10\x00\x00\x13\x10\x00\x00\x14\x10\x00\x00\x15\x10\x00\x00\x16\x10\x00\x00\x17\x10\x00\x00\x18\x10\x00\x00\x19\x10\x00\x00\x1a\x10\x00\x00\x1b\x10\x00\x00\x1c\x10\x00\x00\x1d\x10\x00\x00\x1e\x10\x00\x00\x00\x00\x00\x00\x00\x00\nG\x00\x00\x14\x8f\x00\x00\x1e\xd6\x00\x00)\x1e\x00\x003e\x00\x00=\xac\x00\x00G\xf4\x00\x00R;\x00\x00\\\x83\x00\x00f\xca\x00\x00q\x12\x00\x00{Y\x00\x00\x85\xa0\x00\x00\x8f\xe8\x00\x00\x9a/\x00\x00\xa4w\x00\x00\xae\xbe\x00\x00\xb9\x05\x00\x00\xc3M\x00\x00͔\x00\x00\xd7\xdc\x00\x00\xe2#\x00\x00\xeck\x00\x00\xf6\xb2\x00\x01\x00\xf9\x00\x01\vA\x00\x01\x15\x88\x00\x01\x1f\xd0\x00\x01*\x17\x00\x014^\x00\x00\x00\x00\x00\a:(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xaa\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ff",
	"/texfonts/cmbx8.tfm":       "\x01M\x00\x12\x00\x00\x00\u007f\x00.\x00\x0f\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a2\xc7@\xc9\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x15\xb0\x00\x00(\xb0\x00\x00$\xb0\x00\x00\x1c\xb0\x00\x00\x19\xb0\x00\x00%\xb0\x00\x00\x1e\xb0\x00\x00$\xb0\x00\x00\x1e\xb0\x00\x00$\xb0\x00\x00\x1e\xb0\x00\x00\x14\xc0\x11\n\x13\xc0\x00\x00\x13\xc0\x00\x00(\xc0\x00\x00(\xc0\x00\x00\x010\x00\x00\x038\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\rp\x00\x00\r\xc0\x00\x00\r`\x00\x00!\xc0\x00\x00\t\x06\x00\x00\x10\xc0\x00\x00\x1e0\x00\x00$0\x00\x00\rT\x00\x00)\xb0\x00\x00,\xb0\x00\x00$\xd2\x00\x00\x010\x01\x00\x02\xc0\x01\x17\x0f\xc0\x00\x00(\xc7\x00\x00\r\xe3\x00\x00(\xe3\x00\x00$\xc0\x00\x00\x01\xc0\x01\x12\x06\xe9\x00\x00\x06\xe9\x00\x00\r\xe0\x00\x00$\xa5\x00\x00\x01\x18\x00\x00\x040\x01\x15\x01\x10\x00\x00\r\xe9\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\r\x90\x00\x00\x010\x00\x00\x018\x00\x00\x02H\x00\x00$!\x00\x00\vH\x00\x00\v\xc0\x01\x18$\xc0\x00\x00!\xb0\x01L\x1d\xb0\x00\x00\x1e\xb0\x00\x00\"\xb0\x015\x18\xb0\x00\x00\x17\xb0\x01$'\xb0\x00\x00%\xb0\x00\x00\x05\xb0\x01W\x0e\xb0\x00\x00&\xb0\x01*\x15\xb0\x01R*\xb0\x00\x00%\xb0\x00\x00 \xb0\x015\x1a\xb0\x01\x1e \xb8\x00\x00\x1f\xb0\x01L\x13\xb0\x00\x00\x1b\xb0\x01.#\xb0\x00\x00!\xb0\x05$-\xb0\x05$!\xb0\x01*!\xb0\t/\x16\xb0\x00\x00\x01\xe9\x00\x00\x0f\xc0\x00\x00\x01\xe9\x00\x00\r\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\f0\x01H\x13\xc0\x01B\t0\x01@\x13\xc0\x00\x00\n0\x00\x00\x03\xc0\x11\x02\r8\x05V\x13\xc0\x01:\x01\xc0\x00\x00\x03\xc8\x00\x00\x12\xc0\x01\x19\x01\xc0\x00\x00(0\x01:\x130\x01:\r0\x01B\x138\x01B\x118\x00\x00\b0\x00\x00\a0\x00\x00\x06\x80\x01J\x130\x01K\x120\x05\x19\x1e0\x05\x1a\x120\x00\x00\x128\x05\x1f\t0\x00\x00\r0\r\x16+0\f\x00\r\xc0\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\x00\x00\x00\x00\x00\x05q\xca\x00\x05\xf7z\x00\x05\xfd,\x00\x06\x88\x8c\x00\aX.\x00\a\x9fN\x00\a\xbb.\x00\b\x19\x9e\x00\b\xb6\x10\x00\b\xfaT\x00\tAr\x00\t\x87\"\x00\t\xcc\xd2\x00\n\x19\x9e\x00\n-\x86\x00\n4\xa2\x00\nX2\x00\nX4\x00\n\xe3\x94\x00\vn\xf6\x00\v\xc1r\x00\v\xfaV\x00\fL\xd4\x00\f\xd84\x00\r\x11\x18\x00\r]\xe4\x00\r\xa2*\x00\r\xaa\xb0\x00\r\xe9F\x00\x0e'\xda\x00\x0e\xa5\x00\x00\x0e\xb8\xec\x00\x0e\xc1r\x00\x0f\x00\b\x00\x0f\x04J\x00\x0f>\x9c\x00\x0fG\"\x00\x0fL\xd4\x00\x0fe\x02\x00\x10U^\x00\x11\xb8\xec\x00\x12\x8bh\x00\x13\x99\xa4\x00\x13\xe6p\x00\x143<\x00\x00\x00\x00\x00\x02\x8e8\x00\x06u\xc4\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xac\x00\t\xa2 \x00\n\x1cr\x00\n(\xa4\x00\nO\xa6\x00\n\x88\x8c\x00\n\xfaP\x00\v\x1cr\x00\v\xc1l\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeu\xc4\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x02\x88\x8c\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00E\xb0\x00\x00}p\x00\x00\x8bb\x00\x01\xe4\xfa\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa\x8e6\xff\xf9\x9b\x02\x00\x01\xe4\xfa\x00\x02-\x84\xff\xfe\xe9>\xff\xfft\x9e\xff\xfe]\xdc\xff\xfd\xd2|\x00\x00\x8bb\x00\x01\x16\xc2\x00\x00\x00\x00\x00\x06\x88\x8c\x00\x03DF\x00\x02-\x84\x00\a\x1cr\x00\x13\x99\xa4\x00\x02-\x84",
	"/texfonts/cmitt10.tfm":     "\x00\xc0\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x0f\x00\f\x00\x02\x00\x02\x00\x00\x00\x00\x00\a\xdf\xea<x\x00\xa0\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMITT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01;\x04\x00\x01;\x04\x00\x01P\x04\x00\x01[\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xb0\x04\x00\x01\xc0\x04\x00\x01\xa0\x04\x00\x01\xc0\x04\x00\x01\n\x04\x00\x01\xcb\x04\x00\x01P\x04\x00\x01P\x04\x00\x01\x88\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xd4\x04\x00\x01(\x04\x00\x01\xc0\x05\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xe6\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xe5\x04\x00\x01\xe5\x04\x00\x01`\x04\x00\x01r\x04\x00\x01\x19\x04\x00\x01r\x04\x00\x01\x10\x04\x00\x01\xe5\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xcb\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xcb\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01Y\x04\x00\x01\x93\x04\x00\x01A\x04\x00\x01\x93\x04\x00\x01\xc0\x05\x01\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc9\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xe5\x04\x00\x01\xe5\x04\x00\x01\xe5\x04\x00\x01\xc0\x04\x00\x01\a\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01\xcb\x04\x00\x01[\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01\xcb\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01[\x04\x00\x01[\x04\x00\x01P\x04\x00\x01P\x04\x00\x01\xc0\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01[\x04\x00\x01P\x04\x00\x01\xe5\x04\x00\x01\xe5\x04\x00\x01\xe5\x04\x00\x01\xc0\x04\x00\x01\xc0\x04\x00\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x82\xd8\x00\x068\xe3\x00\x06\xa6e\x00\x06\xe3\x8e\x00\bUV\x00\b}&\x00\b\xaa\xab\x00\b\xe3\x8e\x00\t\f\x83\x00\t\x0e:\x00\t\xc7\x1d\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\xff\xfe\xb6\n\xff\xff\x1cr\x00\x00\xe3\x8e\x00\x01US\x00\x01UU\x00\x01\x85\xad\x00\x01\xc7\x1d\x00\x028\xe3\x00\x03\x1cs\x00\x03\x8e:\x00\x00\x00\x00\x00\x02\xc7\x1d\x80`\x00\x0e\x80`\x00\x0f\x00\x04\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\bfb",
	"/texfonts/cmmi9.tfm":       "\x01}\x00\x12\x00\x00\x00\u007f\x00a\x00\x0f\x00\t\x00!\x00:\x00\v\x00\x00\x00\x065\xf9\x9e\"\x00\x90\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec9\xb0u\x1d[\xb0\x01'P\xb0\x15\x18H\xb0\x01'L\xb0Q\x18Y\xb0]\x10R\xb09\x183\xb0u\fD\xb0\x01\x18;\xb0m\bQ\xb0-\x18A@\x05\x03+\xc71\x18$G<\x00\x12\xc0!\t\n@\x01\v\x10\xc7M\x18 G\x1d\v\x19\xc0\x15\x18\x05@\x01\v0@\x00\x003\xc0\x00\x007G\x01\x03\x1f@E\x01\x10\xc7%!.@\x1c\x00#G\x01\x18-@\x1d/\x11@q\x01)@\x1d\x036\xc7\x01\x18=G\x01\vB\xc7\x1d!<@\x1c\x00\x15@\x01\x185\xc0\x01\x18Z@\x14\x00#G\x01\x18\aFY\x18CG\x01\x18`2\x00\x00`2\x00\x00`2\x00\x00`2\x00\x00\x01d\x00\x00\x01d\x00\x00!S\x00\x00!S\x00\x00!@\x00\x00!@\x00\x00!@\x00\x00!G\x00\x00!G\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Su\x00\x00!\xe8\x014Su\x00\x00!S\x00\x00'\xc0=\x18M\xb0\x01\"O\xb0-\x18I\xb0I\x15W\xb0\x15\vK\xb09\x18@\xb0u\x1dT\xb0\x01\x18Y\xb0]\x10\x0f\xb0U!*\xb0a+\\\xb0I\bG\xb0\x01\x03_\xb0e\x19V\xb0e\x14P\xb0\x15\x18?\xb0u\x1dU\xb7\x01\x18N\xb0\t\x18:\xb05\x194\xb0u\x15E\xb0e\x042\xb0}1^\xb0u1X\xb0U\x141\xb0}1F\xb0I\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00`!\x00\x00`!\x00\x00\f\xc0\x01!(@\x00\x00\r\xc0\x00\x00\x0e@\x01\v%\xc0\x01#\x16@\x01\v\x1c\xc7i(\x1aG\x1d\x030\xc0\x01\x00\x04\xa0\x00\x00\v\xa7A/&\xc0\x18\x00\x02\xc0\r\x18]@\x00\x008@\x00\x00\x1b@\x01\v\"G\x01\x18\x13G\x1d\x18\x14@\x15\t\x18@\x01\v\x06\x80\x01\x18/@\x01\x03\x1d@\x1d\x03J@\x11\x18,@\x01\x03\x1eG\x1d\v\x17@)\v\x03@\x01\x03\bG\x01\x18>G\x01!!\xd0x\x00\x01\xc0\x80\x00\x00\x00\x00\x00\x00\x04\x91`\x00\x04\xe8K\x00\x05Z\x12\x00\x05\xa0\x84\x00\x05\xd2+\x00\x05\xf00\x00\x05\xfd\x9e\x00\x06C\xf2\x00\x06e \x00\x06\xa9\x8c\x00\x06\xb8\xe2\x00\x06\xcaD\x00\a\f\x00\x00\a\x1e|\x00\a00\x00\a5\xb7\x00\a=$\x00\aK5\x00\aX\xf4\x00\akt\x00\a\xa2G\x00\a\xa5 \x00\a\xa5\xeb\x00\a\xa9\x15\x00\a\xb2\x90\x00\a\xd7^\x00\a\xf5\xe0\x00\a\xfb@\x00\a\xfc\xd4\x00\b\x19E\x00\b\x1cn\x00\b6\t\x00\b8\xe0\x00\bAB\x00\bx\x92\x00\b~W\x00\b\x854\x00\b\x8f\xcb\x00\b\xb3\a\x00\b\xb60\x00\b\xe6\xb4\x00\t\x0f{\x00\tDk\x00\tR+\x00\tg,\x00\tib\x00\tv\x82\x00\ty\xab\x00\t\x8b\\\x00\t\x97\x10\x00\t\x97\xb0\x00\t\x97\xd9\x00\t\xc0w\x00\tɠ\x00\t\xe8I\x00\t\xebr\x00\n\v\f\x00\n\v\xae\x00\n\x19\x10\x00\n;\x15\x00\n@\xc7\x00\ns\xd2\x00\n\u007f\xd4\x00\n\u007f\xfc\x00\n\x89\xf0\x00\n\xbat\x00\n\xbc\xfb\x00\n\xf6\x80\x00\v/T\x00\v0\a\x00\v0\xa7\x00\vj\xce\x00\v\xbc\xeb\x00\v\xc9\x12\x00\f\x19\xe7\x00\f+p\x00\fT\xae\x00\fq+\x00\fq\x85\x00\f\x83T\x00\f\xacN\x00\fɠ\x00\f\xca@\x00\f\xe0P\x00\f\xf8D\x00\r%G\x00\r\x8fg\x00\r\x95P\x00\r\x9a7\x00\r\xa3\xd9\x00\r\xb4 \x00\r\xed\x05\x00\x0e|\xd2\x00\x0f\x87@\x00\x0f\xe2\xe7\x00\x10q\xc0\x00\x00\x00\x00\x00\x01\xbay\x00\x05\xb8\xe4\x00\x05\xf4\xe9\x00\x06\xe3\x8e\x00\aq\xc7\x00\a\x93W\x00\b\xd0\xc9\x00\t\xd7^\x00\nO\xa5\x00\n\x8e\xae\x00\n\xee\xee\x00\v\x1cr\x00\vr\xeb\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe4\xff\xfd\xf4\xe9\xff\xffq\xc7\xff\xff\x93W\x00\x00\xd0\xc9\x00\x01\x8e9\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x03)\x00\x00\x1c\xe0\x00\x00C\xf4\x00\x00n9\x00\x00t\xf0\x00\x00x\x19\x00\x00\x92\xf7\x00\x00\x9ad\x00\x00\xaf\xce\x00\x00\xb0\xfc\x00\x00\xcb\xee\x00\x00ե\x00\x00\xe8\xee\x00\x00\xe9>\x00\x00\xe9\xe0\x00\x00\xea\xc9\x00\x01\a\xe7\x00\x01#e\x00\x01$\xbe\x00\x014\xf0\x00\x01@\xa2\x00\x01C\xf4\x00\x01E\x89\x00\x01\x86R\x00\x01\xbay\x00\x01\xbd\xa2\x00\x01\xc7P\x00\x01\xd5U\x00\x02H\xb0\x00\x02v\v\x00\x03\xa7\x80\x00\x06\x86P\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xff\x8b\x10\xff\xff\x16 \x00\x00t\xf0\xff\xfe,@\x00\x00\xe9\xe0\xff\xfe\xa10\x00\x01^\xd0\x00\x01\xd3\xc0\x00\x02H\xb0\xff\xfdB`\x00\x02\xbd\xa0\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10q\xc0",
	"/texfonts/cmsl10.tfm":      "\x01y\x00\x12\x00\x00\x00\u007f\x00%\x00\x10\x00\n\x009\x00X\x00\n\x00\x00\x00\ap\xae0J\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x12\xc0\xa4\x00\x1f\xc0\x00\x00\x1c\xc0`\x00\x16\xc0\x00\x00\x14\xc0\xc0\x00\x1a\xc0\xcc\x00\x18\xc0\x84\x00\x1c\xc0\x90\x00\x18\xc00\x00\x1c\xc0\x90\x00\x18\xc0\x80\x00\x10\xd0\xe1\n\x0f\xd0L\x00\x0f\xd0L\x00\x1f\xd0L\x00\x1f\xd0L\x00\x010\x00\x00\x028\x00\x00\n\xd0\x00\x00\n\xd08\x00\n\x90\x18\x00\n\xd0T\x00\n`d\x00\x1e\xd0\x00\x00\b\x06\x00\x00\vЈ\x00\x180x\x00\x1c0x\x00\nU\x04\x00 \xc0\x84\x00#\xc0\x84\x00\x1c\xe2`\x00\x010\x01\x00\x01\xd0}\x17\n\xd0\x00\x00\x1f\xd7<\x00\n\xf3\xa8\x00\x1f\xf3\x98\x00\x1c\xd0X\x00\x01\xd0}\x12\x05\xf9\xc4\x00\x05\xf9\x14\x00\n\xf0\xb0\x00\x1ct\x14\x00\x01\x18\x00\x00\x030\t\x15\x01\x10\x00\x00\n\xf9\xc4\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\n\xa0\xa8\x00\x010\x10\x00\x018\x10\x00\x01H,\x00\x1c!<\x00\tH\x00\x00\tн\x18\x1c\xd0l\x00\x1a\xc0\x01L\x17\xc0\x80\x00\x18\xc0\xb8\x00\x1b\xc0a5\x15\xc0\x84\x00\x13\xc0\xa5$\x1d\xc0(\x00\x1a\xc0\xcc\x00\x04\xc0\xc9W\f\xc0\xac\x00\x1c\xc0\xb9*\x12\xc0\x01R!\xc0\xcc\x00\x1a\xc0\xcc\x00\x1c\xc0a5\x15\xc0\x81\x1e\x1c\xc8`\x00\x19\xc0\x01L\x0f\xc0\x84\x00\x18\xc0\xa5.\x1a\xc0\xcc\x00\x1a\xc0\xd9$$\xc0\xd9$\x1a\xc0\xc9*\x1a\xc0\xdd/\x11\xc0\xb8\x00\x01\xf9\xd4\x00\n\xd0\xd0\x00\x01\xf9@\x00\n\xd0\f\x00\x01\xb0h\x00\x01\xd0}\x11\n0\x01H\x0f\xd0!B\b0\x8d@\x0f\xd0L\x00\b0x\x00\x02\xd0\xe1\x02\n8\xb5V\x0f\xd0\x01:\x01\xb0h\x00\x02\xb8D\x00\x0eЍ\x19\x01\xd0L\x00\x1f0\x01:\x0f0\x01:\n0]B\x0f85B\r8$\x00\x060\x9c\x00\a0P\x00\x05\x80\x1dJ\x0f0\x01K\x0e0\xb5\x19\x180\xb5\x1a\x0e0\x94\x00\x0e8\xb5\x1f\b0p\x00\n0\xa1\x16\"0\xa0\x00\nЈ\x00\n\xb0t\x00\n\xb0H\x00\x00\x00\x00\x00\x00\x04q\xc8\x00\x04\xe3\x90\x00\x05UV\x00\x05\xc7\x1d\x00\x068\xe5\x00\x06DF\x00\x06O\xa6\x00\a\x1cs\x00\a\x8e;\x00\b\x00\x02\x00\b\x00\x03\x00\b8\xe5\x00\bq\xc8\x00\bq\xca\x00\b\xe3\x90\x00\tUX\x00\t\xc7\x1e\x00\n\x00\x02\x00\nq\xca\x00\n\xaa\xad\x00\n\xe3\x90\x00\v\x1cs\x00\vUX\x00\v\x8e;\x00\v\xc7\x1e\x00\f\x00\x02\x00\f8\xe6\x00\fq\xca\x00\f\x8e;\x00\f\xf06\x00\rUX\x00\x0eq\xca\x00\x0e\xaa\xad\x00\x10\x00\x03\x00\x108\xe6\x00\x10q\xca\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t\x15\x9d\x00\tUV\x00\t\xd7^\x00\n\x0e:\x00\nO\xa5\x00\n\xaf\x8d\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\a\x98\x00\x00!0\x00\x00$\xfd\x00\x007\x02\x00\x008\xe5\x00\x00R\x06\x00\x00Y#\x00\x00Z\x15\x00\x00^\xd5\x00\x00`\xb8\x00\x00fj\x00\x00wx\x00\x00|6\x00\x00\x84\xc0\x00\x00\x88\xae\x00\x00\x8a\xd3\x00\x00\x8f\r\x00\x00\xa0\x1e\x00\x00\xa13\x00\x00\xa8\xc8\x00\x00\xb2C\x00\x00\xca\xeb\x00\x00\xcd\xc2\x00\x00\xd4\xc5\x00\x00\xd8\xf2\x00\x00\xd9\x02\x00\x00\xda\x15\x00\x00\xe1\xab\x00\x00\xe4b\x00\x00\xe5s\x00\x00\xeb(\x00\x00\xec\x18\x00\x00\xee\xf2\x00\x00\xf6\x88\x00\x00\xf8m\x00\x01\x03m\x00\x01\x1a\x8e\x00\x01\x1cv\x00\x01%\xf0\x00\x01'r\x00\x01'\xd6\x00\x01F-\x00\x01R~\x00\x01UZ\x00\x01^\xd3\x00\x01`\xb8\x00\x01{F\x00\x01\x82\xdb\x00\x01\x8e=\x00\x01\x99\x9d\x00\x01\xbb\xbd\x00\x01\xc3U\x00\x02\x00\x05\x00\x02\vc\x00\x028\xe6\x00\x03\x18\xab\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\x8e8\xff\xfa\xe3\x8d\x00\x01>\x95\x00\x01\xc7\x1d\xff\xff\x1cr\xff\xff\x8e8\xff\xfe\xaa\xaa\xff\xfe8\xe3\x00\x00q\xc8\x00\x00\xe3\x8e\x00\x02\xaa\xb0\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\x06\xe3\x8e\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/cmvtt10.tfm":     "\x018\x00\x12\x00\x00\x00\u007f\x00\x1a\x00\x0e\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a\u00a0ՙ\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMVTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x10\xa0\x00\x00\x17\xa0\x00\x00\x16\xa0\x00\x00\x12\xa0\x00\x00\x12\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x16\xa0\x00\x00\x14\xa0\x00\x00\x16\xa0\x00\x00\x14\xa0\x00\x00\x0f\xa0\x11\n\x0e\xa0\x00\x00\x0e\xa0\x00\x00\x17\xa0\x00\x00\x17\xa0\x00\x00\x01@\x00\x00\x03I\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\x90\x00\x00\n\xa0\x00\x00\n\x80\x00\x00\x14\xa0\x00\x00\a\b\x00\x00\v\xa0\x00\x00\x14@\x00\x00\x16@\x00\x00\nf\x00\x00\x18\xa0\x00\x00\x19\xa0\x00\x00\x16\xc3\x00\x00\x01@\x01\x00\x01\xa0\x01\x17\n\xa0\x00\x00\x17\xa0\x00\x00\n\xd5\x00\x00\x17\xd5\x00\x00\x16\xa0\x00\x00\x01\xa0\x01\x12\x05\xd4\x00\x00\x05\xd4\x00\x00\nP\x00\x00\x16\xb2\x00\x00\x01\x17\x00\x00\x04@\x01\x15\x01\x10\x00\x00\n\xd4\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\x01@\x00\x00\x01G\x00\x00\x01)\x00\x00\x161\x00\x00\b)\x00\x00\b\xa0\x01\x18\x12\xa0\x00\x00\x14\xa0\x01L\x13\xa0\x00\x00\x14\xa0\x00\x00\x15\xa0\x015\x12\xa0\x00\x00\x11\xa0\x01$\x16\xa0\x00\x00\x14\xa0\x00\x00\x04\xa0\x01W\n\xa0\x00\x00\x15\xa0\x01*\x10\xa0\x01R\x18\xa0\x00\x00\x14\xa0\x00\x00\x16\xa0\x015\x12\xa0\x01\x1e\x16\xa7\x00\x00\x14\xa0\x01L\x0e\xa0\x00\x00\x14\xa0\x01.\x14\xa0\x00\x00\x14\xa0\x05$\x19\xa0\x05$\x14\xa0\x01*\x14\xa0\t/\x10\xa0\x00\x00\x02\xd4\x00\x00\n\xa0\x00\x00\x02\xd4\x00\x00\n\xa0\x00\x00\x01\xa0\x00\x00\x01\xa0\x01\x11\t@\x01H\x0e\xa0\x01B\a@\x01@\x0e\xa0\x00\x00\a@\x00\x00\x03\xa0\x11\x02\nI\x05V\x0e\xa0\x01:\x01\xa0\x00\x00\x03\xa9\x00\x00\r\xa0\x01\x19\x01\xa0\x00\x00\x17@\x01:\x0e@\x01:\n@\x01B\x0eI\x01B\fI\x00\x00\x05@\x00\x00\x06@\x00\x00\x05p\x01J\x0e@\x01K\r@\x05\x19\x14@\x05\x1a\r@\x00\x00\rI\x05\x1f\a@\x00\x00\n@\r\x16\x19@\f\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\x00\x00\x00\x00\x00\x04\xaa\xa8\x00\x04\xc1k\x00\x05\" \x00\x05\x99\x96\x00\x06\x88\x85\x00\x06\xa0j\x00\aws\x00\a\xee\xeb\x00\b*\xa6\x00\bfb\x00\bfc\x00\b\xdd\xd8\x00\b\xdd\xda\x00\tUP\x00\t\xcc\xc8\x00\nD>\x00\n\xbb\xb6\x00\v3-\x00\v\xaa\xa5\x00\f\"\x1b\x00\f\x99\x93\x00\r\x11\n\x00\r\xff\xf8\x00\x0e\xee\xe6\x00\x10\xcc\xc3\x00\x00\x00\x00\x00\x01\x99\x9a\x00\x068\xe3\x00\x06\xa6e\x00\x06\xe3\x8e\x00\bUV\x00\b\xaa\xab\x00\b\xdbr\x00\t\f\x83\x00\t\x0e:\x00\t\xc7\x1d\x00\n}%\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\x00\x00\xb6\b\x00\x00\xe3\x8e\x00\x01US\x00\x01UU\x00\x01\xc7\x1d\x00\x028\xe3\x00\x03\x1cs\x00\x03\x8e:\x00\x00\x00\x00\x00\x00;\xbb\x00\x00k\x85\x00\x00wx\x00\x010[\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfbUX\xff\xfa\xdd\xe0\x00\x010[\x00\x01\xdd\xdd\xff\xff\x11\x12\xff\xff\x88\x88\xff\xfe\x99\x9a\xff\xfe\"#\x00\x00wx\x00\x00\xee\xee\x00\x00\x00\x00\x00\x05\x99\x96\x00\x02\xcc\xcb\x00\x01\xdd\xdd\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\x01\xdd\xdd",
	"/texfonts/cmmi5.tfm":       "\x01y\x00\x12\x00\x00\x00\u007f\x00`\x00\x0f\x00\t\x00\x1e\x00:\x00\v\x00\x00\x00\x06O\r\xda\\\x00P\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf42\xb0m\x1d[\xb0\x01'O\xb0\x19\x18G\xb0\x01'K\xb0I\x18W\xb0M\x10R\xb0-\x183\xb0m\fE\xb0\x01\x18?\xb0e\bP\xb0%\x18@@\x01\x03)\xc7-\x18$G<\x00\x0f\xc0\x15\t\v@\x01\v\x11\xc71\x18#G\x1d\v\x16\xc0\x19\x18\x04@\x01\v.@\x00\x003\xc0\x00\x006G\x01\x03\x1c@A\x01\x11\xc7\r!0@\x1c\x00\x1eG\x01\x18,@\x1d/\x17@]\x01+@\x1d\x034\xc7\x01\x189G\x01\vB\xc7\x1d!=@\x1c\x00\x14@\x01\x187\xc0\x01\x18Z@\x18\x00\x1eG\x01\x18\aEE\x18AG\x01\x18_2\x00\x00_2\x00\x00_2\x00\x00_2\x00\x00\x01d\x00\x00\x01d\x00\x00 S\x00\x00 S\x00\x00 @\x00\x00 @\x00\x00 @\x00\x00 G\x00\x00 G\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Uv\x00\x00 \xe8\x014Uv\x00\x00 S\x00\x00%\xc0=\x18M\xb0\x01\"N\xb0%\x18H\xb09\x15V\xb0\x19\vI\xb0-\x18:\xb0m\x1dQ\xb0\x01\x18W\xb0M\x10\f\xb0Q!'\xb0U+Y\xb09\bF\xb0\x01\x03^\xb0Y\x19S\xb0Y\x14O\xb0\x19\x18;\xb0m\x1dT\xb7\x01\x18L\xb0\x05\x188\xb0)\x191\xb0m\x15D\xb0Y\x04/\xb0q1]\xb0m1X\xb0Q\x14-\xb0q1C\xb09\x19\n\xe0\x00\x00\n\xc7\x00\x00\n\xc7\x00\x00_!\x00\x00_!\x00\x00\t\xc0\x01!(@\x00\x00\r\xc0\x00\x00\x0e@\x01\v!\xc0\x01#\x15@\x01\v\x18\xc7a(\x1aG\x1d\x03.\xc0\x01\x00\x03\xa0\x00\x00\b\xa75/&\xc0\b\x00\x02\xc0\x01\x18\\@\x00\x00<@\x00\x00\x1b@\x01\v\"G\x01\x18\x10G\x1d\x18\x13@\x19\t\x12@\x01\v\x06\x80\x01\x185@\x01\x03\x1d@\x1d\x03J@\x11\x18*@\x01\x03\x1fG\x1d\v\x19@!\v\x03@\x01\x03\x05G\x01\x18>G\x01! \xd0h\x00\x01\xc0t\x00\x00\x00\x00\x00\x00\aUZ\x00\a\xafm\x00\b\x89\x83\x00\b\xcb\xe0\x00\b\xdb\n\x00\t\x04\xc6\x00\t@\x06\x00\tiC\x00\t\x8e=\x00\t\x8e@\x00\t\xd1\x16\x00\n\a#\x00\n\"&\x00\nd\r\x00\nw}\x00\n\x8a\xed\x00\n\xaa\xb3\x00\n\xb8\xea\x00\n\xbd\xaa\x00\n\xcbf\x00\n\xd5\x10\x00\n\xd5Z\x00\n\xe7\xdd\x00\n\xf1\xcd\x00\v\x04\xc6\x00\v5\x9a\x00\v>\x9a\x00\vd\x8a\x00\v\x8eC\x00\v\x9d\xe6\x00\v\xb0f\x00\v\xc7&\x00\v\xd5\xd6\x00\v\xd5\xda\x00\v\xe6s\x00\v\xf3S\x00\v\xfb\xc0\x00\f!:\x00\f]\xe6\x00\fd\x10\x00\f\xa6p\x00\f\xaa\xb3\x00\f\xaa\xb6\x00\r\n\xf0\x00\r0f\x00\r=\xad\x00\r>\xa0\x00\rL`\x00\rQ\x1d\x00\rR\x86\x00\rq\xd3\x00\rw\x80\x00\r\x89\x8a\x00\r\x98\xb3\x00\r\xafv\x00\r\xb3@\x00\r\xd5`\x00\r\xe0\xc0\x00\x0e\x01v\x00\x0e\x17\xc3\x00\x0e.\x83\x00\x0e:]\x00\x0eK\xb6\x00\x0e\x9c\xf6\x00\x0e\xb0f\x00\x0e\xe3\x9d\x00\x0f\x16\xd0\x00\x0f\x1a6\x00\x0f\x1c\x80\x00\x0fJ\x03\x00\x0fw\x86\x00\x0f\xef\x90\x00\x10\x1c\x80\x00\x10$\xcd\x00\x10H\x96\x00\x10z\xba\x00\x10\x93\xfa\x00\x10\x97\x86\x00\x10\u009d\x00\x10\xf8=\x00\x11\x06P\x00\x11\vp\x00\x116\x1a\x00\x11P\xd6\x00\x11Uf\x00\x11\xc2\r\x00\x11\xc4S\x00\x11\xceJ\x00\x128\xf6\x00\x12Q#\x00\x12q\xda\x00\x13\xa6\x03\x00\x14w\x8d\x00\x14\x8bs\x00\x15\xc73\x00\x00\x00\x00\x00\x01\xf4\xa0\x00\x05\xb8\xe3\x00\x06W\xad\x00\x06\xe3\x8d\x00\aq\xc6\x00\b<\xa6\x00\t\x9dZ\x00\t\xd7]\x00\nO\xa6\x00\n\xa9\xda\x00\n\xee\xf0\x00\v\x1cs\x00\v\x8f#\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe3\xff\xfeW\xad\xff\xffq\xc6\x00\x00<\xa6\x00\x01\x8e:\x00\x01\x9dZ\x00\x03\x1cs\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x06\xc0\x00\x00B]\x00\x00J\xaa\x00\x00n:\x00\x00\x84C\x00\x00\x8e:\x00\x00\x92\xf6\x00\x00\x97\xb3\x00\x00\xbfJ\x00\x00ϣ\x00\x00\xd2}\x00\x00\xd8\xe3\x00\x00\xf1\x93\x00\x01\x16\xc0\x00\x01\x1cs\x00\x01!0\x00\x01*\xaa\x00\x01,\x16\x00\x010Z\x00\x01:P\x00\x01\x85\xb0\x00\x01\xbe\x93\x00\x01\xdb\x06\x00\x01\xe3\x90\x00\x01\xed=\x00\x02v\r\x00\x02\xc7 \x00\x04q\xcd\x00\tMs\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xffq\xc6\xff\xfe\xe3\x8d\x00\x00\x8e:\xff\xfd\xc7\x1a\x00\x01\x1cs\xff\xfeUS\x00\x01\xaa\xad\x00\x028\xe6\x00\x02\xc7 \xff\xfc\xaa\xa6\x00\x03UZ\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8d\x00\x17\x8eM",
	"/texfonts/cmr17.tfm":       "\x01C\x00\x12\x00\x00\x00\u007f\x00$\x00\x10\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\aD\xd3\xedt\x01\x14z\xe0\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\x10\xc0\x00\x00\x1e\xc0\x00\x00\x1b\xc0\x00\x00\x14\xc0\x00\x00\x12\xc0\x00\x00\x18\xc0\x00\x00\x16\xc0\x00\x00\x1b\xc0\x00\x00\x16\xc0\x00\x00\x1b\xc0\x00\x00\x16\xc0\x00\x00\x0e\xd0\x11\n\f\xd0\x00\x00\f\xd0\x00\x00\x1d\xd0\x00\x00\x1d\xd0\x00\x00\x010\x00\x00\x027\x00\x00\t\xd0\x00\x00\t\xd0\x00\x00\t\x90\x00\x00\t\xd0\x00\x00\t`\x00\x00\x18\xd0\x00\x00\a\x06\x00\x00\t\xd0\x00\x00\x160\x00\x00\x1b0\x00\x00\tU\x00\x00\x1f\xc0\x00\x00\"\xc0\x00\x00\x1b\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\t\xd0\x00\x00\x1e\xd7\x00\x00\t\xf3\x00\x00\x1e\xf3\x00\x00\x1b\xd0\x00\x00\x01\xd0\x01\x12\x05\xf8\x00\x00\x05\xf8\x00\x00\t\xf0\x00\x00\x1bt\x00\x00\x01\x17\x00\x00\x030\x01\x15\x01\x10\x00\x00\t\xf8\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\x010\x00\x00\x017\x00\x00\x01G\x00\x00\x1b!\x00\x00\bG\x00\x00\b\xd0\x01\x18\x1b\xd0\x00\x00\x18\xc0\x01L\x15\xc0\x00\x00\x16\xc0\x00\x00\x19\xc0\x015\x13\xc0\x00\x00\x11\xc0\x01$\x1c\xc0\x00\x00\x18\xc0\x00\x00\x04\xc0\x01W\n\xc0\x00\x00\x1a\xc0\x01*\x10\xc0\x01R \xc0\x00\x00\x18\xc0\x00\x00\x1b\xc0\x015\x13\xc0\x01\x1e\x1b\xc7\x00\x00\x17\xc0\x01L\r\xc0\x00\x00\x16\xc0\x01.\x18\xc0\x00\x00\x18\xc0\x05$#\xc0\x05$\x18\xc0\x01*\x18\xc0\t/\x0f\xc0\x00\x00\x01\xf8\x00\x00\t\xd0\x00\x00\x01\xf8\x00\x00\t\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\t0\x01H\r\xd0\x01B\a0\x01@\r\xd0\x00\x00\a0\x00\x00\x02\xd0\x11\x02\t7\x05V\r\xd0\x01:\x01\xb0\x00\x00\x02\xb7\x00\x00\v\xd0\x01\x19\x01\xd0\x00\x00\x1e0\x01:\r0\x01:\t0\x01B\r7\x01B\v7\x00\x00\x050\x00\x00\x060\x00\x00\x05\x80\x01J\r0\x01K\v0\x05\x19\x160\x05\x1a\v0\x00\x00\v7\x05\x1f\a0\x00\x00\t0\r\x16!0\f\x00\t\xd0\x00\x00\t\xb0\x00\x00\t\xb0\x00\x00\x00\x00\x00\x00\x00\x03\xfe\x8a\x00\x04i\x89\x00\x04Ԉ\x00\x05=\xe2\x00\x05\xaa\x85\x00\x05\xbf\xec\x00\x06\x80\x83\x00\x06\xeb\x82\x00\aV\x80\x00\a\x8b.\x00\a\xc1\u007f\x00\a\xfd\x15\x00\b,~\x00\bh\x14\x00\t\x02{\x00\t7(\x00\t\xa2'\x00\t\xd8y\x00\n\r&\x00\nA\xd3\x00\nx%\x00\n\xaev\x00\n\xe3#\x00\v\x17\xd1\x00\vN\"\x00\v\x82\xcf\x00\v\x84t\x00\v\x9e\xca\x00\v\xfb\x9f\x00\fZq\x00\re\x1c\x00\r\x99\xc9\x00\x0e\xad\x01\x00\x0f\x11\x17\x00\x0fE\xc4\x00\x00\x00\x00\x00\x01O\xce\x00\x05\xb0s\x00\x06\xe3K\x00\a\xff\xbc\x00\bq\xa6\x00\b\xf3\xe0\x00\t\x03\xcf\x00\t\xd6\xfe\x00\n\x0e(\x00\nPT\x00\n~\xe5\x00\n\xee[\x00\v\x1cr\x00\v\xb5\x89\x00\v\xfcP\x00\x00\x00\x00\xff\xfd\xb0\xb7\x00\x00\xc7.\x00\x00\xdf\xde\x00\x01\x04\x13\x00\x01\x8e[\x00\x02\xb9\x1f\x00\x03\x1c\xb5\x00\x03\xfc\x93\x00\x00\x00\x00\x00\x005\u007f\x00\x00`L\x00\x00j\xff\x00\x00\xf2\xcc\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfc\x01v\xff\xfba\xca\x00\x00\xf2\xcc\x00\x01\xab\xfb\xff\xff*\x03\xff\xff\x95\x01\xff\xfe\xbf\x04\xff\xfeT\x05\x00\x00j\xff\x00\x00\xd5\xfd\x00\x00\x00\x00\x00\x04Ԉ\x00\x02\x81\xf8\x00\x01\xab\xfb\x00\x06\xe3K\x00\x0e\xad\x01\x00\x01\xab\xfb",
	"/texfonts/cmsy9.tfm":       "\x01\x17\x00\x12\x00\x00\x00\u007f\x00+\x00\x0f\x00\x0f\x00\x12\x00\a\x00\a\x00\x00\x00\x16\xa9\xb1\x90\xca\x00\x90\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x1f\xa8\x00\x00\x03B\x00\x00\x1f\xa8\x00\x00\aS\x00\x00\x1f\xa8\x00\x00\aB\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00\x1f\xa8\x00\x00)\xdc\x00\x00\aB\x00\x00\aB\x00\x00\x1fd\x00\x00\x1fd\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x1f!\x00\x00\x1fu\x00\x00\x1f\x86\x00\x00\x1f\x86\x00\x00)\x86\x00\x00)\x86\x00\x00\x1f\x86\x00\x00\x1f\x86\x00\x00)!\x00\x00)!\x00\x00\a\xdc\x00\x00\a\xdc\x00\x00)!\x00\x00)\xdc\x00\x00)\xdc\x00\x00\x1fd\x00\x00)!\x00\x00)!\x00\x00\x0f\xdc\x00\x00\x0f\xdc\x00\x00)!\x00\x00)\xdc\x00\x00)\xdc\x00\x00\x1f0\x00\x00\x02\x90\x00\x00)0\x00\x00\x14\x86\x00\x00\x14\x86\x00\x00'\xdc\x00\x00'\xdc\x00\x00\x01\xdc\x00\x00\x01!\x00\x00\f\xd0\x00\x00\f\xd0\x00\x00\x140\x00\x00\a\xe7\x00\x00\x1b\xd0\x00\x00\x1b\xd0\x00\x00\x1f\xd0\x00\x00\x1f\xd0\x00\x00\x0f\xd0\x00\x00!\xc0\x01\x06\x12\xc0\x11\x04\t\xc0\x15\x04\x1e\xc0\r\x02\b\xc0-\x03\x19\xc01\x03\r\xc9\x19\x03%\xc0\x05\x03\n\xc0\x1d\x00\x15\xc9A\x05\x1d\xc0\t\x01\x16\xc0\x01\x04*\xc0\x01\x04#\xc0=\x02 \xc0\r\x03\x17\xc0)\x02\"\xc9\x01\x03&\xc0\x01\x02\x0e\xc0!\x04\v\xc0E\x00\x11\xc01\x02\x10\xc0)\x00(\xc0)\x02\x18\xc09\x04\x13\xc9)\x02\x1a\xc0%\x04\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x0f\xd0\x00\x00\x0f\xd0\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\a\xed\x00\x00\a\xed\x00\x00\x04\xed\x00\x00\x04\xed\x00\x00\x03\xed\x00\x00\a\xed\x00\x00\a\xed\x00\x00\x0f\xed\x00\x00\a\xed\x00\x00\x03\xdc\x00\x00$\x1e\x00\x00\x1c\xc0\x00\x00$\xc0\x00\x00\x05\xdc4\x00\x14\x90\x00\x00\x14\x90\x00\x00\x1f\xbb\x00\x00\x1f\xbb\x00\x00\x06\xdc\x00\x00\x06\xdc\x00\x00\x06\xdc\x00\x00\x0f\xdc\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x1f\xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04x\x19\x00\x04\x91`\x00\x06e \x00\x06\xda\x12\x00\aO\x00\x00\b8\xe0\x00\b\xad\xd0\x00\b\xae`\x00\t\x00\xe5\x00\t\x02\xb0\x00\t\"\xc0\x00\t\xc6G\x00\t\xf5<\x00\n\f\xa0\x00\n\x1c\xf0\x00\nF\xb4\x00\n\xc7)\x00\n\xf5\xc2\x00\n\xf6\x80\x00\v%E\x00\vS\xac\x00\vw\xe4\x00\v\xb8\x04\x00\v\xc8\a\x00\v\xdf>\x00\v\xe0`\x00\fT\xae\x00\f\x83\xb9\x00\f\xb3>\x00\f\xca@\x00\r\x0f\xa7\x00\r#K\x00\rm\xf5\x00\ry.\x00\r\xb4 \x00\r\xef\xd0\x00\r\xfbk\x00\x0e\x9e\x00\x00\x10G\x97\x00\x10q\xc0\x00\x13\xaa\xa4\x00\x00\x00\x00\x00\x00\xac\xf2\x00\x05\xf4\xe9\x00\x06\xe3\x8e\x00\a2\x90\x00\aq\xc7\x00\a\x93W\x00\a\xe69\x00\b\xd0\xc9\x00\b\xe3\x90\x00\t{@\x00\no7\x00\n\xee\xee\x00\v\x1cr\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xf4\xe9\xff\xff2\x90\xff\xffq\xc7\xff\xff\x93W\xff\xff\xe69\x00\x00\xd0\xc9\x00\x00\xe3\x8e\x00\x01{@\x00\x01\x8e9\x00\x02\x12\xf7\x00\x02o7\x00\x03\x1cr\x00\x04\x00\x00\x00\x0fS\x0e\x00\x00\x00\x00\x00\x00\x18\"\x00\x00-G\x00\x00t\xf0\x00\x00vR\x00\x00\xe6\v\x00\x00\xef\xf0\x00\x01#\xe4\x00\x010\x0e\x00\x01F\xab\x00\x01R\\\x00\x01h\xfc\x00\x01\x98U\x00\x01\xd3\xc0\x00\x02W\xc5\x00\x02^\xc0\x00\x02\xf65\x00\x04\x1a\x8c\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00t\xf0\x00\x00\xe9\xe0\x00\x01^\xd0\x00\x01\xd3\xc0\x00\x02H\xb0\x00\x02\xbd\xa0\x00\x032\x90\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10q\xc0\x00\x00\x00\x00\x00\nY\v\x00\x06\x8e$\x00\a2|\x00\n\xda\x00\x00\x05m\xeb\x00\a\xaf\x95\x00\x06\xcc\a\x00\x04\x97\xb4\x00\x01\xc7\x1c\x00\x02О\x00\x05\xa14\x00\x00\xe3\x8e\x00*}'\x00\x10-\x84\x00\x04\x00\x00",
	"/texfonts/graycx.tfm":      "\x00\xb0\x00\x12\x00\x00\x00z\x00\x05\x00\x03\x00\f\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\x1a\x02\x88\x03\x00{W\x00\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06GRAYCX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x03 \x00\x00\x01\x10\x00\x00\x01\x11\x00\x00\x01\x11\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x02y\x02\x1b\x02z\x04\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x02\x00\b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\b\x00\x00\x00\n\x00\x00\x00\f\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00",
	"/texfonts/grayimagen3.tfm": "\x00\xa9\x00\x12\x00\x00\x00\u007f\x00\x03\x00\x02\x00\x03\x00\x01\x00\x00\x00\x00\x00\x00\x00\bk]\xf7}\x01r\x05\x80\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\vGRAY3IMAGEN\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd0\x01\x10\x00\x00\x01\x10\x02y\x01\x11\x02z\x01\x11\x02{\x01\x12\x02|\x01\x12\x02}\x01\x12\x02~\x01\x12\x02\u007f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x11\x00\x00\x02\x11\x00\x00\x02\x12\x00\x00\x02\x12\x00\x00\x02\x12\x00\x00\x02\x12\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00UU",
	"/texfonts/cmcsc10.tfm":     "\x01E\x00\x12\x00\x00\x00\u007f\x001\x00\x10\x00\v\x00\x06\x00I\x00\v\x00\x00\x00\a\x8c-\xf8\x14\x00\xa0\x00\x00\x1cTeX text without f-ligatures\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMCSC\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x1a\xc0\x00\x00+\xc0\x00\x00)\xc0\x00\x00 \xc0\x00\x00\x1c\xc0\x00\x00$\xc0\x00\x00\"\xc0\x00\x00)\xc0\x00\x00\"\xc0\x00\x00)\xc0\x00\x00\"\xc0\x00\x00\r\xd8\x00\x00\r\xd8\x00\x00\x02\xd0\x00\x00\x02I\x00\x00\vI\x00\x00\x01P\x00\x00\x05P\x00\x00\r\xd0\x00\x00\r\xd0\x00\x00\r\x90\x00\x00\r\xd0\x00\x00\rp\x00\x00$\xd0\x00\x00\b\a\x00\x00,P\x00\x00\x1dP\x00\x00%P\x00\x00\x16s\x00\x00-\xc0\x00\x00/\xc0\x00\x00)\xe3\x00\x00\x020\x01\x00\x02\xd0\x01\b\r\xd0\x00\x00+\xd8\x00\x00\r\xf4\x00\x00+\xf4\x00\x00)\xd0\x00\x00\x02\xd0\x01\x03\x06\xfa\x00\x00\x06\xfa\x00\x00\r\xf0\x00\x00)\x85\x00\x00\x02\x19\x00\x00\x030\x01\x06\x02\x10\x00\x00\r\xfa\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\x020\x00\x00\x029\x00\x00)b\x00\x00)!\x00\x00)b\x00\x00\v\xd0\x01\t)\xd0\x00\x00$\xc0\x01 !\xc0\x00\x00\"\xc0\x00\x00&\xc0\x01\x16\x1e\xc0\x00\x00\x1b\xc0\x01\f*\xc0\x00\x00$\xc0\x00\x00\x04\xc0\x012\x0f\xc0\x00\x00(\xc0\x01\x0e\x1a\xc0\x01*.\xc0\x00\x00$\xc0\x00\x00)\xc0\x01\x16\x1e\xc0\x01\n)\xc9\x00\x00#\xc0\x01 \x13\xc0\x00\x00\"\xc0\x01\n$\xc0\x00\x00$\xc0\t\f0\xc0\t\f$\xc0\x01\x0e$\xc0\x11\n\x19\xc0\x00\x00\x02\xfa\x00\x00\r\xd0\x00\x00\x02\xfa\x00\x00\r\xd0\x00\x00\x02\xb0\x00\x00\x02\xd0\x01\x02\x14P\x01>\x10P\x00\x00\x11P\x00\x00\x15P\x019\x0eP\x00\x00\fP\x014\x18P\x00\x00\x14P\x00\x00\x01P\x01H\x05P\x00\x00\x17P\x015\nP\x01C\x1fP\x00\x00\x14P\x00\x00\x16P\x019\x0eP\x013\x16V\x00\x00\x12P\x01>\aP\x00\x00\x11P\x013\x14P\x00\x00\x14P\x054'P\x054\x14P\x015\x14P\r3\tP\x00\x00\r0\x15\a00\x14\x00\r\xd0\x00\x00\r\xb0\x00\x00\r\xb0\x00\x00\x00\x00\x00\x00\x00\x04\xd5\xe6\x00\x05\x1cn\x00\x06\v]\x00\x06}#\x00\x06ʅ\x00\x06\xfaK\x00\aS\r\x00\a\xe9:\x00\b\t\x18\x00\b6\x9b\x00\b`\xb2\x00\b\x91\xa2\x00\b\xd8(\x00\b\xec\xa6\x00\t\x11\v\x00\tG\xad\x00\tu.\x00\t\xa2\xb2\x00\t\xc7\x16\x00\t\xd05\x00\t\xfd\xb8\x00\n+:\x00\n+;\x00\nA\xfb\x00\n\xb6\x05\x00\n\xee\xe8\x00\vf`\x00\v\xa4\xf3\x00\v\xc4\xd3\x00\v\xdd\xd6\x00\v\xf2V\x00\f\x16\xba\x00\fUN\x00\f\x93\xe2\x00\f\xcc\xc5\x00\r\x05\xa8\x00\r0\xea\x00\rD=\x00\r^m\x00\r} \x00\r\x82\xd0\x00\r\x9fB\x00\x0eq\xbe\x00\x0e\xa6\x1a\x00\x0f\x99\x90\x00\x0f\xd2s\x00\x11wm\x00\x11\xb0P\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\b\x00\x00\x00\b8\xe3\x00\b\xa0%\x00\t\n\xce\x00\t\x99\x96\x00\n\x0e:\x00\nO\xa5\x00\n\xaf\x8d\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xa0%\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01\x99\x96\x00\x02O\xa5\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00-\x83\x00\x00;\xbb\x00\x00Q\xeb\x00\x00k\x85\x00\x00wx\x00l\x80\x00\x80L\x80\x01\x80`\x00\\\x00'\x00\"\x00?\x80\x02\x80!\x80\x02\x80-\x00{\x80-\x00|\x80`\x00\x0e\x80`\x00\x0f\x00a\x80\x03\x80A\x80\x03\x00a\x80\x04\x00A\x80\x04\x00o\x80\x05\x00O\x80\x05\x00c\x80\x05\x00C\x80\x05\x00g\x80\x05\x00G\x80\x05\x00q\x80\x05\x80Q\x80\x05\x00x\x80\x05\x00X\x80\x05\x00w\x80\x05\x00W\x80\x05\x00a\x80\x05\x00A\x80\x05\x00v\x80\x05\x00V\x80\x05\x00y\x80\x05\x80Y\x80\x05\x00c\x80\x05\x00C\x80\x05\x00o\x80\x05\x00O\x80\x05\x00g\x80\x05\x00G\x80\x05\x00u\x80\x05\x00U\x80\x05\x00q\x80\x05\x00Q\x80\x05\x00T\x80\x03\x00t\x80\x03\x00Y\x80\x03\x00y\x80\x03\x00V\x80\x04\x00v\x80\x04\x00W\x80\x04\x80w\x80\x04\x80I\x80\x06\x80a\x80\a\x00a\x80\b\x00o\x80\t\x00c\x80\t\x00g\x80\t\x80q\x80\t\x00x\x80\t\x00w\x80\t\x00a\x80\t\x00v\x80\t\x80y\x80\t\x00c\x80\t\x00o\x80\t\x00g\x80\t\x00u\x80\t\x00q\x80\t\x00'\x80\a\x00t\x80\a\x00y\x80\a\x00v\x80\b\x80w\x80\b\x80i\x80\n\xff\xfa\xe3\x92\xff\xfa36\x00\x01\xdd\xdd\xff\xfe\x99\x9a\xff\xfe\"#\xff\xff\x88\x88\x00\x00wx\xff\xfe\xee\xee\xff\xfe\x93\xea\xff\xff\xa4\xfa\x00\x00[\x06\x00\x00\x00\x00\x00\x06\v]\x00\x02\xcc\xcb\x00\x01\xdd\xdd\x00\x06\xe3\x8e\x00\x11\xb0P\x00\x01\xdd\xdd",
	"/texfonts/gray.tfm":        "\x00\xb0\x00\x12\x00\x00\x00z\x00\x05\x00\x03\x00\f\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\x1a\x02\x88\x03\x00{W\x00\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06GRAYCX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x03 \x00\x00\x01\x10\x00\x00\x01\x11\x00\x00\x01\x11\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x02y\x02\x1b\x02z\x04\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x02\x00\b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\b\x00\x00\x00\n\x00\x00\x00\f\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00",
	"/texinputs/hyphen.tex":     "% The Plain TeX hyphenation tables [NOT TO BE CHANGED IN ANY WAY!]\n% Unlimited copying and redistribution of this file are permitted as long\n% as this file is not modified. Modifications are permitted, but only if\n% the resulting file is not named hyphen.tex.\n\\patterns{ % just type <return> if you're not using INITEX\n.ach4\n.ad4der\n.af1t\n.al3t\n.am5at\n.an5c\n.ang4\n.ani5m\n.ant4\n.an3te\n.anti5s\n.ar5s\n.ar4tie\n.ar4ty\n.as3c\n.as1p\n.as1s\n.aster5\n.atom5\n.au1d\n.av4i\n.awn4\n.ba4g\n.ba5na\n.bas4e\n.ber4\n.be5ra\n.be3sm\n.be5sto\n.bri2\n.but4ti\n.cam4pe\n.can5c\n.capa5b\n.car5ol\n.ca4t\n.ce4la\n.ch4\n.chill5i\n.ci2\n.cit5r\n.co3e\n.co4r\n.cor5ner\n.de4moi\n.de3o\n.de3ra\n.de3ri\n.des4c\n.dictio5\n.do4t\n.du4c\n.dumb5\n.earth5\n.eas3i\n.eb4\n.eer4\n.eg2\n.el5d\n.el3em\n.enam3\n.en3g\n.en3s\n.eq5ui5t\n.er4ri\n.es3\n.eu3\n.eye5\n.fes3\n.for5mer\n.ga2\n.ge2\n.gen3t4\n.ge5og\n.gi5a\n.gi4b\n.go4r\n.hand5i\n.han5k\n.he2\n.hero5i\n.hes3\n.het3\n.hi3b\n.hi3er\n.hon5ey\n.hon3o\n.hov5\n.id4l\n.idol3\n.im3m\n.im5pin\n.in1\n.in3ci\n.ine2\n.in2k\n.in3s\n.ir5r\n.is4i\n.ju3r\n.la4cy\n.la4m\n.lat5er\n.lath5\n.le2\n.leg5e\n.len4\n.lep5\n.lev1\n.li4g\n.lig5a\n.li2n\n.li3o\n.li4t\n.mag5a5\n.mal5o\n.man5a\n.mar5ti\n.me2\n.mer3c\n.me5ter\n.mis1\n.mist5i\n.mon3e\n.mo3ro\n.mu5ta\n.muta5b\n.ni4c\n.od2\n.odd5\n.of5te\n.or5ato\n.or3c\n.or1d\n.or3t\n.os3\n.os4tl\n.oth3\n.out3\n.ped5al\n.pe5te\n.pe5tit\n.pi4e\n.pio5n\n.pi2t\n.pre3m\n.ra4c\n.ran4t\n.ratio5na\n.ree2\n.re5mit\n.res2\n.re5stat\n.ri4g\n.rit5u\n.ro4q\n.ros5t\n.row5d\n.ru4d\n.sci3e\n.self5\n.sell5\n.se2n\n.se5rie\n.sh2\n.si2\n.sing4\n.st4\n.sta5bl\n.sy2\n.ta4\n.te4\n.ten5an\n.th2\n.ti2\n.til4\n.tim5o5\n.ting4\n.tin5k\n.ton4a\n.to4p\n.top5i\n.tou5s\n.trib5ut\n.un1a\n.un3ce\n.under5\n.un1e\n.un5k\n.un5o\n.un3u\n.up3\n.ure3\n.us5a\n.ven4de\n.ve5ra\n.wil5i\n.ye4\n4ab.\na5bal\na5ban\nabe2\nab5erd\nabi5a\nab5it5ab\nab5lat\nab5o5liz\n4abr\nab5rog\nab3ul\na4car\nac5ard\nac5aro\na5ceou\nac1er\na5chet\n4a2ci\na3cie\nac1in\na3cio\nac5rob\nact5if\nac3ul\nac4um\na2d\nad4din\nad5er.\n2adi\na3dia\nad3ica\nadi4er\na3dio\na3dit\na5diu\nad4le\nad3ow\nad5ran\nad4su\n4adu\na3duc\nad5um\nae4r\naeri4e\na2f\naff4\na4gab\naga4n\nag5ell\nage4o\n4ageu\nag1i\n4ag4l\nag1n\na2go\n3agog\nag3oni\na5guer\nag5ul\na4gy\na3ha\na3he\nah4l\na3ho\nai2\na5ia\na3ic.\nai5ly\na4i4n\nain5in\nain5o\nait5en\na1j\nak1en\nal5ab\nal3ad\na4lar\n4aldi\n2ale\nal3end\na4lenti\na5le5o\nal1i\nal4ia.\nali4e\nal5lev\n4allic\n4alm\na5log.\na4ly.\n4alys\n5a5lyst\n5alyt\n3alyz\n4ama\nam5ab\nam3ag\nama5ra\nam5asc\na4matis\na4m5ato\nam5era\nam3ic\nam5if\nam5ily\nam1in\nami4no\na2mo\na5mon\namor5i\namp5en\na2n\nan3age\n3analy\na3nar\nan3arc\nanar4i\na3nati\n4and\nande4s\nan3dis\nan1dl\nan4dow\na5nee\na3nen\nan5est.\na3neu\n2ang\nang5ie\nan1gl\na4n1ic\na3nies\nan3i3f\nan4ime\na5nimi\na5nine\nan3io\na3nip\nan3ish\nan3it\na3niu\nan4kli\n5anniz\nano4\nan5ot\nanoth5\nan2sa\nan4sco\nan4sn\nan2sp\nans3po\nan4st\nan4sur\nantal4\nan4tie\n4anto\nan2tr\nan4tw\nan3ua\nan3ul\na5nur\n4ao\napar4\nap5at\nap5ero\na3pher\n4aphi\na4pilla\nap5illar\nap3in\nap3ita\na3pitu\na2pl\napoc5\nap5ola\napor5i\napos3t\naps5es\na3pu\naque5\n2a2r\nar3act\na5rade\nar5adis\nar3al\na5ramete\naran4g\nara3p\nar4at\na5ratio\nar5ativ\na5rau\nar5av4\naraw4\narbal4\nar4chan\nar5dine\nar4dr\nar5eas\na3ree\nar3ent\na5ress\nar4fi\nar4fl\nar1i\nar5ial\nar3ian\na3riet\nar4im\nar5inat\nar3io\nar2iz\nar2mi\nar5o5d\na5roni\na3roo\nar2p\nar3q\narre4\nar4sa\nar2sh\n4as.\nas4ab\nas3ant\nashi4\na5sia.\na3sib\na3sic\n5a5si4t\nask3i\nas4l\na4soc\nas5ph\nas4sh\nas3ten\nas1tr\nasur5a\na2ta\nat3abl\nat5ac\nat3alo\nat5ap\nate5c\nat5ech\nat3ego\nat3en.\nat3era\nater5n\na5terna\nat3est\nat5ev\n4ath\nath5em\na5then\nat4ho\nath5om\n4ati.\na5tia\nat5i5b\nat1ic\nat3if\nation5ar\nat3itu\na4tog\na2tom\nat5omiz\na4top\na4tos\na1tr\nat5rop\nat4sk\nat4tag\nat5te\nat4th\na2tu\nat5ua\nat5ue\nat3ul\nat3ura\na2ty\nau4b\naugh3\nau3gu\nau4l2\naun5d\nau3r\nau5sib\naut5en\nau1th\na2va\nav3ag\na5van\nave4no\nav3era\nav5ern\nav5ery\nav1i\navi4er\nav3ig\nav5oc\na1vor\n3away\naw3i\naw4ly\naws4\nax4ic\nax4id\nay5al\naye4\nays4\nazi4er\nazz5i\n5ba.\nbad5ger\nba4ge\nbal1a\nban5dag\nban4e\nban3i\nbarbi5\nbari4a\nbas4si\n1bat\nba4z\n2b1b\nb2be\nb3ber\nbbi4na\n4b1d\n4be.\nbeak4\nbeat3\n4be2d\nbe3da\nbe3de\nbe3di\nbe3gi\nbe5gu\n1bel\nbe1li\nbe3lo\n4be5m\nbe5nig\nbe5nu\n4bes4\nbe3sp\nbe5str\n3bet\nbet5iz\nbe5tr\nbe3tw\nbe3w\nbe5yo\n2bf\n4b3h\nbi2b\nbi4d\n3bie\nbi5en\nbi4er\n2b3if\n1bil\nbi3liz\nbina5r4\nbin4d\nbi5net\nbi3ogr\nbi5ou\nbi2t\n3bi3tio\nbi3tr\n3bit5ua\nb5itz\nb1j\nbk4\nb2l2\nblath5\nb4le.\nblen4\n5blesp\nb3lis\nb4lo\nblun4t\n4b1m\n4b3n\nbne5g\n3bod\nbod3i\nbo4e\nbol3ic\nbom4bi\nbon4a\nbon5at\n3boo\n5bor.\n4b1ora\nbor5d\n5bore\n5bori\n5bos4\nb5ota\nboth5\nbo4to\nbound3\n4bp\n4brit\nbroth3\n2b5s2\nbsor4\n2bt\nbt4l\nb4to\nb3tr\nbuf4fer\nbu4ga\nbu3li\nbumi4\nbu4n\nbunt4i\nbu3re\nbus5ie\nbuss4e\n5bust\n4buta\n3butio\nb5uto\nb1v\n4b5w\n5by.\nbys4\n1ca\ncab3in\nca1bl\ncach4\nca5den\n4cag4\n2c5ah\nca3lat\ncal4la\ncall5in\n4calo\ncan5d\ncan4e\ncan4ic\ncan5is\ncan3iz\ncan4ty\ncany4\nca5per\ncar5om\ncast5er\ncas5tig\n4casy\nca4th\n4cativ\ncav5al\nc3c\nccha5\ncci4a\nccompa5\nccon4\nccou3t\n2ce.\n4ced.\n4ceden\n3cei\n5cel.\n3cell\n1cen\n3cenc\n2cen4e\n4ceni\n3cent\n3cep\nce5ram\n4cesa\n3cessi\nces5si5b\nces5t\ncet4\nc5e4ta\ncew4\n2ch\n4ch.\n4ch3ab\n5chanic\nch5a5nis\nche2\ncheap3\n4ched\nche5lo\n3chemi\nch5ene\nch3er.\nch3ers\n4ch1in\n5chine.\nch5iness\n5chini\n5chio\n3chit\nchi2z\n3cho2\nch4ti\n1ci\n3cia\nci2a5b\ncia5r\nci5c\n4cier\n5cific.\n4cii\nci4la\n3cili\n2cim\n2cin\nc4ina\n3cinat\ncin3em\nc1ing\nc5ing.\n5cino\ncion4\n4cipe\nci3ph\n4cipic\n4cista\n4cisti\n2c1it\ncit3iz\n5ciz\nck1\nck3i\n1c4l4\n4clar\nc5laratio\n5clare\ncle4m\n4clic\nclim4\ncly4\nc5n\n1co\nco5ag\ncoe2\n2cog\nco4gr\ncoi4\nco3inc\ncol5i\n5colo\ncol3or\ncom5er\ncon4a\nc4one\ncon3g\ncon5t\nco3pa\ncop3ic\nco4pl\n4corb\ncoro3n\ncos4e\ncov1\ncove4\ncow5a\ncoz5e\nco5zi\nc1q\ncras5t\n5crat.\n5cratic\ncre3at\n5cred\n4c3reta\ncre4v\ncri2\ncri5f\nc4rin\ncris4\n5criti\ncro4pl\ncrop5o\ncros4e\ncru4d\n4c3s2\n2c1t\ncta4b\nct5ang\nc5tant\nc2te\nc3ter\nc4ticu\nctim3i\nctu4r\nc4tw\ncud5\nc4uf\nc4ui\ncu5ity\n5culi\ncul4tis\n3cultu\ncu2ma\nc3ume\ncu4mi\n3cun\ncu3pi\ncu5py\ncur5a4b\ncu5ria\n1cus\ncuss4i\n3c4ut\ncu4tie\n4c5utiv\n4cutr\n1cy\ncze4\n1d2a\n5da.\n2d3a4b\ndach4\n4daf\n2dag\nda2m2\ndan3g\ndard5\ndark5\n4dary\n3dat\n4dativ\n4dato\n5dav4\ndav5e\n5day\nd1b\nd5c\nd1d4\n2de.\ndeaf5\ndeb5it\nde4bon\ndecan4\nde4cil\nde5com\n2d1ed\n4dee.\nde5if\ndeli4e\ndel5i5q\nde5lo\nd4em\n5dem.\n3demic\ndem5ic.\nde5mil\nde4mons\ndemor5\n1den\nde4nar\nde3no\ndenti5f\nde3nu\nde1p\nde3pa\ndepi4\nde2pu\nd3eq\nd4erh\n5derm\ndern5iz\nder5s\ndes2\nd2es.\nde1sc\nde2s5o\ndes3ti\nde3str\nde4su\nde1t\nde2to\nde1v\ndev3il\n4dey\n4d1f\nd4ga\nd3ge4t\ndg1i\nd2gy\nd1h2\n5di.\n1d4i3a\ndia5b\ndi4cam\nd4ice\n3dict\n3did\n5di3en\nd1if\ndi3ge\ndi4lato\nd1in\n1dina\n3dine.\n5dini\ndi5niz\n1dio\ndio5g\ndi4pl\ndir2\ndi1re\ndirt5i\ndis1\n5disi\nd4is3t\nd2iti\n1di1v\nd1j\nd5k2\n4d5la\n3dle.\n3dled\n3dles.\n4dless\n2d3lo\n4d5lu\n2dly\nd1m\n4d1n4\n1do\n3do.\ndo5de\n5doe\n2d5of\nd4og\ndo4la\ndoli4\ndo5lor\ndom5iz\ndo3nat\ndoni4\ndoo3d\ndop4p\nd4or\n3dos\n4d5out\ndo4v\n3dox\nd1p\n1dr\ndrag5on\n4drai\ndre4\ndrea5r\n5dren\ndri4b\ndril4\ndro4p\n4drow\n5drupli\n4dry\n2d1s2\nds4p\nd4sw\nd4sy\nd2th\n1du\nd1u1a\ndu2c\nd1uca\nduc5er\n4duct.\n4ducts\ndu5el\ndu4g\nd3ule\ndum4be\ndu4n\n4dup\ndu4pe\nd1v\nd1w\nd2y\n5dyn\ndy4se\ndys5p\ne1a4b\ne3act\nead1\nead5ie\nea4ge\nea5ger\nea4l\neal5er\neal3ou\neam3er\ne5and\near3a\near4c\near5es\near4ic\near4il\near5k\near2t\neart3e\nea5sp\ne3ass\neast3\nea2t\neat5en\neath3i\ne5atif\ne4a3tu\nea2v\neav3en\neav5i\neav5o\n2e1b\ne4bel.\ne4bels\ne4ben\ne4bit\ne3br\ne4cad\necan5c\necca5\ne1ce\nec5essa\nec2i\ne4cib\nec5ificat\nec5ifie\nec5ify\nec3im\neci4t\ne5cite\ne4clam\ne4clus\ne2col\ne4comm\ne4compe\ne4conc\ne2cor\nec3ora\neco5ro\ne1cr\ne4crem\nec4tan\nec4te\ne1cu\ne4cul\nec3ula\n2e2da\n4ed3d\ne4d1er\nede4s\n4edi\ne3dia\ned3ib\ned3ica\ned3im\ned1it\nedi5z\n4edo\ne4dol\nedon2\ne4dri\ne4dul\ned5ulo\nee2c\need3i\nee2f\neel3i\nee4ly\nee2m\nee4na\nee4p1\nee2s4\neest4\nee4ty\ne5ex\ne1f\ne4f3ere\n1eff\ne4fic\n5efici\nefil4\ne3fine\nef5i5nite\n3efit\nefor5es\ne4fuse.\n4egal\neger4\neg5ib\neg4ic\neg5ing\ne5git5\neg5n\ne4go.\ne4gos\neg1ul\ne5gur\n5egy\ne1h4\neher4\nei2\ne5ic\nei5d\neig2\nei5gl\ne3imb\ne3inf\ne1ing\ne5inst\neir4d\neit3e\nei3th\ne5ity\ne1j\ne4jud\nej5udi\neki4n\nek4la\ne1la\ne4la.\ne4lac\nelan4d\nel5ativ\ne4law\nelaxa4\ne3lea\nel5ebra\n5elec\ne4led\nel3ega\ne5len\ne4l1er\ne1les\nel2f\nel2i\ne3libe\ne4l5ic.\nel3ica\ne3lier\nel5igib\ne5lim\ne4l3ing\ne3lio\ne2lis\nel5ish\ne3liv3\n4ella\nel4lab\nello4\ne5loc\nel5og\nel3op.\nel2sh\nel4ta\ne5lud\nel5ug\ne4mac\ne4mag\ne5man\nem5ana\nem5b\ne1me\ne2mel\ne4met\nem3ica\nemi4e\nem5igra\nem1in2\nem5ine\nem3i3ni\ne4mis\nem5ish\ne5miss\nem3iz\n5emniz\nemo4g\nemoni5o\nem3pi\ne4mul\nem5ula\nemu3n\ne3my\nen5amo\ne4nant\nench4er\nen3dic\ne5nea\ne5nee\nen3em\nen5ero\nen5esi\nen5est\nen3etr\ne3new\nen5ics\ne5nie\ne5nil\ne3nio\nen3ish\nen3it\ne5niu\n5eniz\n4enn\n4eno\neno4g\ne4nos\nen3ov\nen4sw\nent5age\n4enthes\nen3ua\nen5uf\ne3ny.\n4en3z\ne5of\neo2g\ne4oi4\ne3ol\neop3ar\ne1or\neo3re\neo5rol\neos4\ne4ot\neo4to\ne5out\ne5ow\ne2pa\ne3pai\nep5anc\ne5pel\ne3pent\nep5etitio\nephe4\ne4pli\ne1po\ne4prec\nep5reca\ne4pred\nep3reh\ne3pro\ne4prob\nep4sh\nep5ti5b\ne4put\nep5uta\ne1q\nequi3l\ne4q3ui3s\ner1a\nera4b\n4erand\ner3ar\n4erati.\n2erb\ner4bl\ner3ch\ner4che\n2ere.\ne3real\nere5co\nere3in\ner5el.\ner3emo\ner5ena\ner5ence\n4erene\ner3ent\nere4q\ner5ess\ner3est\neret4\ner1h\ner1i\ne1ria4\n5erick\ne3rien\neri4er\ner3ine\ne1rio\n4erit\ner4iu\neri4v\ne4riva\ner3m4\ner4nis\n4ernit\n5erniz\ner3no\n2ero\ner5ob\ne5roc\nero4r\ner1ou\ner1s\ner3set\nert3er\n4ertl\ner3tw\n4eru\neru4t\n5erwau\ne1s4a\ne4sage.\ne4sages\nes2c\ne2sca\nes5can\ne3scr\nes5cu\ne1s2e\ne2sec\nes5ecr\nes5enc\ne4sert.\ne4serts\ne4serva\n4esh\ne3sha\nesh5en\ne1si\ne2sic\ne2sid\nes5iden\nes5igna\ne2s5im\nes4i4n\nesis4te\nesi4u\ne5skin\nes4mi\ne2sol\nes3olu\ne2son\nes5ona\ne1sp\nes3per\nes5pira\nes4pre\n2ess\nes4si4b\nestan4\nes3tig\nes5tim\n4es2to\ne3ston\n2estr\ne5stro\nestruc5\ne2sur\nes5urr\nes4w\neta4b\neten4d\ne3teo\nethod3\net1ic\ne5tide\netin4\neti4no\ne5tir\ne5titio\net5itiv\n4etn\net5ona\ne3tra\ne3tre\net3ric\net5rif\net3rog\net5ros\net3ua\net5ym\net5z\n4eu\ne5un\ne3up\neu3ro\neus4\neute4\neuti5l\neu5tr\neva2p5\ne2vas\nev5ast\ne5vea\nev3ell\nevel3o\ne5veng\neven4i\nev1er\ne5verb\ne1vi\nev3id\nevi4l\ne4vin\nevi4v\ne5voc\ne5vu\ne1wa\ne4wag\ne5wee\ne3wh\newil5\new3ing\ne3wit\n1exp\n5eyc\n5eye.\neys4\n1fa\nfa3bl\nfab3r\nfa4ce\n4fag\nfain4\nfall5e\n4fa4ma\nfam5is\n5far\nfar5th\nfa3ta\nfa3the\n4fato\nfault5\n4f5b\n4fd\n4fe.\nfeas4\nfeath3\nfe4b\n4feca\n5fect\n2fed\nfe3li\nfe4mo\nfen2d\nfend5e\nfer1\n5ferr\nfev4\n4f1f\nf4fes\nf4fie\nf5fin.\nf2f5is\nf4fly\nf2fy\n4fh\n1fi\nfi3a\n2f3ic.\n4f3ical\nf3ican\n4ficate\nf3icen\nfi3cer\nfic4i\n5ficia\n5ficie\n4fics\nfi3cu\nfi5del\nfight5\nfil5i\nfill5in\n4fily\n2fin\n5fina\nfin2d5\nfi2ne\nf1in3g\nfin4n\nfis4ti\nf4l2\nf5less\nflin4\nflo3re\nf2ly5\n4fm\n4fn\n1fo\n5fon\nfon4de\nfon4t\nfo2r\nfo5rat\nfor5ay\nfore5t\nfor4i\nfort5a\nfos5\n4f5p\nfra4t\nf5rea\nfres5c\nfri2\nfril4\nfrol5\n2f3s\n2ft\nf4to\nf2ty\n3fu\nfu5el\n4fug\nfu4min\nfu5ne\nfu3ri\nfusi4\nfus4s\n4futa\n1fy\n1ga\ngaf4\n5gal.\n3gali\nga3lo\n2gam\nga5met\ng5amo\ngan5is\nga3niz\ngani5za\n4gano\ngar5n4\ngass4\ngath3\n4gativ\n4gaz\ng3b\ngd4\n2ge.\n2ged\ngeez4\ngel4in\nge5lis\nge5liz\n4gely\n1gen\nge4nat\nge5niz\n4geno\n4geny\n1geo\nge3om\ng4ery\n5gesi\ngeth5\n4geto\nge4ty\nge4v\n4g1g2\ng2ge\ng3ger\ngglu5\nggo4\ngh3in\ngh5out\ngh4to\n5gi.\n1gi4a\ngia5r\ng1ic\n5gicia\ng4ico\ngien5\n5gies.\ngil4\ng3imen\n3g4in.\ngin5ge\n5g4ins\n5gio\n3gir\ngir4l\ng3isl\ngi4u\n5giv\n3giz\ngl2\ngla4\nglad5i\n5glas\n1gle\ngli4b\ng3lig\n3glo\nglo3r\ng1m\ng4my\ngn4a\ng4na.\ngnet4t\ng1ni\ng2nin\ng4nio\ng1no\ng4non\n1go\n3go.\ngob5\n5goe\n3g4o4g\ngo3is\ngon2\n4g3o3na\ngondo5\ngo3ni\n5goo\ngo5riz\ngor5ou\n5gos.\ngov1\ng3p\n1gr\n4grada\ng4rai\ngran2\n5graph.\ng5rapher\n5graphic\n4graphy\n4gray\ngre4n\n4gress.\n4grit\ng4ro\ngruf4\ngs2\ng5ste\ngth3\ngu4a\n3guard\n2gue\n5gui5t\n3gun\n3gus\n4gu4t\ng3w\n1gy\n2g5y3n\ngy5ra\nh3ab4l\nhach4\nhae4m\nhae4t\nh5agu\nha3la\nhala3m\nha4m\nhan4ci\nhan4cy\n5hand.\nhan4g\nhang5er\nhang5o\nh5a5niz\nhan4k\nhan4te\nhap3l\nhap5t\nha3ran\nha5ras\nhar2d\nhard3e\nhar4le\nharp5en\nhar5ter\nhas5s\nhaun4\n5haz\nhaz3a\nh1b\n1head\n3hear\nhe4can\nh5ecat\nh4ed\nhe5do5\nhe3l4i\nhel4lis\nhel4ly\nh5elo\nhem4p\nhe2n\nhena4\nhen5at\nheo5r\nhep5\nh4era\nhera3p\nher4ba\nhere5a\nh3ern\nh5erou\nh3ery\nh1es\nhe2s5p\nhe4t\nhet4ed\nheu4\nh1f\nh1h\nhi5an\nhi4co\nhigh5\nh4il2\nhimer4\nh4ina\nhion4e\nhi4p\nhir4l\nhi3ro\nhir4p\nhir4r\nhis3el\nhis4s\nhith5er\nhi2v\n4hk\n4h1l4\nhlan4\nh2lo\nhlo3ri\n4h1m\nhmet4\n2h1n\nh5odiz\nh5ods\nho4g\nhoge4\nhol5ar\n3hol4e\nho4ma\nhome3\nhon4a\nho5ny\n3hood\nhoon4\nhor5at\nho5ris\nhort3e\nho5ru\nhos4e\nho5sen\nhos1p\n1hous\nhouse3\nhov5el\n4h5p\n4hr4\nhree5\nhro5niz\nhro3po\n4h1s2\nh4sh\nh4tar\nht1en\nht5es\nh4ty\nhu4g\nhu4min\nhun5ke\nhun4t\nhus3t4\nhu4t\nh1w\nh4wart\nhy3pe\nhy3ph\nhy2s\n2i1a\ni2al\niam4\niam5ete\ni2an\n4ianc\nian3i\n4ian4t\nia5pe\niass4\ni4ativ\nia4tric\ni4atu\nibe4\nib3era\nib5ert\nib5ia\nib3in\nib5it.\nib5ite\ni1bl\nib3li\ni5bo\ni1br\ni2b5ri\ni5bun\n4icam\n5icap\n4icar\ni4car.\ni4cara\nicas5\ni4cay\niccu4\n4iceo\n4ich\n2ici\ni5cid\nic5ina\ni2cip\nic3ipa\ni4cly\ni2c5oc\n4i1cr\n5icra\ni4cry\nic4te\nictu2\nic4t3ua\nic3ula\nic4um\nic5uo\ni3cur\n2id\ni4dai\nid5anc\nid5d\nide3al\nide4s\ni2di\nid5ian\nidi4ar\ni5die\nid3io\nidi5ou\nid1it\nid5iu\ni3dle\ni4dom\nid3ow\ni4dr\ni2du\nid5uo\n2ie4\nied4e\n5ie5ga\nield3\nien5a4\nien4e\ni5enn\ni3enti\ni1er.\ni3esc\ni1est\ni3et\n4if.\nif5ero\niff5en\nif4fr\n4ific.\ni3fie\ni3fl\n4ift\n2ig\niga5b\nig3era\night3i\n4igi\ni3gib\nig3il\nig3in\nig3it\ni4g4l\ni2go\nig3or\nig5ot\ni5gre\nigu5i\nig1ur\ni3h\n4i5i4\ni3j\n4ik\ni1la\nil3a4b\ni4lade\ni2l5am\nila5ra\ni3leg\nil1er\nilev4\nil5f\nil1i\nil3ia\nil2ib\nil3io\nil4ist\n2ilit\nil2iz\nill5ab\n4iln\nil3oq\nil4ty\nil5ur\nil3v\ni4mag\nim3age\nima5ry\nimenta5r\n4imet\nim1i\nim5ida\nimi5le\ni5mini\n4imit\nim4ni\ni3mon\ni2mu\nim3ula\n2in.\ni4n3au\n4inav\nincel4\nin3cer\n4ind\nin5dling\n2ine\ni3nee\niner4ar\ni5ness\n4inga\n4inge\nin5gen\n4ingi\nin5gling\n4ingo\n4ingu\n2ini\ni5ni.\ni4nia\nin3io\nin1is\ni5nite.\n5initio\nin3ity\n4ink\n4inl\n2inn\n2i1no\ni4no4c\nino4s\ni4not\n2ins\nin3se\ninsur5a\n2int.\n2in4th\nin1u\ni5nus\n4iny\n2io\n4io.\nioge4\nio2gr\ni1ol\nio4m\nion3at\nion4ery\nion3i\nio5ph\nior3i\ni4os\nio5th\ni5oti\nio4to\ni4our\n2ip\nipe4\niphras4\nip3i\nip4ic\nip4re4\nip3ul\ni3qua\niq5uef\niq3uid\niq3ui3t\n4ir\ni1ra\nira4b\ni4rac\nird5e\nire4de\ni4ref\ni4rel4\ni4res\nir5gi\nir1i\niri5de\nir4is\niri3tu\n5i5r2iz\nir4min\niro4g\n5iron.\nir5ul\n2is.\nis5ag\nis3ar\nisas5\n2is1c\nis3ch\n4ise\nis3er\n3isf\nis5han\nis3hon\nish5op\nis3ib\nisi4d\ni5sis\nis5itiv\n4is4k\nislan4\n4isms\ni2so\niso5mer\nis1p\nis2pi\nis4py\n4is1s\nis4sal\nissen4\nis4ses\nis4ta.\nis1te\nis1ti\nist4ly\n4istral\ni2su\nis5us\n4ita.\nita4bi\ni4tag\n4ita5m\ni3tan\ni3tat\n2ite\nit3era\ni5teri\nit4es\n2ith\ni1ti\n4itia\n4i2tic\nit3ica\n5i5tick\nit3ig\nit5ill\ni2tim\n2itio\n4itis\ni4tism\ni2t5o5m\n4iton\ni4tram\nit5ry\n4itt\nit3uat\ni5tud\nit3ul\n4itz.\ni1u\n2iv\niv3ell\niv3en.\ni4v3er.\ni4vers.\niv5il.\niv5io\niv1it\ni5vore\niv3o3ro\ni4v3ot\n4i5w\nix4o\n4iy\n4izar\nizi4\n5izont\n5ja\njac4q\nja4p\n1je\njer5s\n4jestie\n4jesty\njew3\njo4p\n5judg\n3ka.\nk3ab\nk5ag\nkais4\nkal4\nk1b\nk2ed\n1kee\nke4g\nke5li\nk3en4d\nk1er\nkes4\nk3est.\nke4ty\nk3f\nkh4\nk1i\n5ki.\n5k2ic\nk4ill\nkilo5\nk4im\nk4in.\nkin4de\nk5iness\nkin4g\nki4p\nkis4\nk5ish\nkk4\nk1l\n4kley\n4kly\nk1m\nk5nes\n1k2no\nko5r\nkosh4\nk3ou\nkro5n\n4k1s2\nk4sc\nks4l\nk4sy\nk5t\nk1w\nlab3ic\nl4abo\nlaci4\nl4ade\nla3dy\nlag4n\nlam3o\n3land\nlan4dl\nlan5et\nlan4te\nlar4g\nlar3i\nlas4e\nla5tan\n4lateli\n4lativ\n4lav\nla4v4a\n2l1b\nlbin4\n4l1c2\nlce4\nl3ci\n2ld\nl2de\nld4ere\nld4eri\nldi4\nld5is\nl3dr\nl4dri\nle2a\nle4bi\nleft5\n5leg.\n5legg\nle4mat\nlem5atic\n4len.\n3lenc\n5lene.\n1lent\nle3ph\nle4pr\nlera5b\nler4e\n3lerg\n3l4eri\nl4ero\nles2\nle5sco\n5lesq\n3less\n5less.\nl3eva\nlev4er.\nlev4era\nlev4ers\n3ley\n4leye\n2lf\nl5fr\n4l1g4\nl5ga\nlgar3\nl4ges\nlgo3\n2l3h\nli4ag\nli2am\nliar5iz\nli4as\nli4ato\nli5bi\n5licio\nli4cor\n4lics\n4lict.\nl4icu\nl3icy\nl3ida\nlid5er\n3lidi\nlif3er\nl4iff\nli4fl\n5ligate\n3ligh\nli4gra\n3lik\n4l4i4l\nlim4bl\nlim3i\nli4mo\nl4im4p\nl4ina\n1l4ine\nlin3ea\nlin3i\nlink5er\nli5og\n4l4iq\nlis4p\nl1it\nl2it.\n5litica\nl5i5tics\nliv3er\nl1iz\n4lj\nlka3\nl3kal\nlka4t\nl1l\nl4law\nl2le\nl5lea\nl3lec\nl3leg\nl3lel\nl3le4n\nl3le4t\nll2i\nl2lin4\nl5lina\nll4o\nlloqui5\nll5out\nl5low\n2lm\nl5met\nlm3ing\nl4mod\nlmon4\n2l1n2\n3lo.\nlob5al\nlo4ci\n4lof\n3logic\nl5ogo\n3logu\nlom3er\n5long\nlon4i\nl3o3niz\nlood5\n5lope.\nlop3i\nl3opm\nlora4\nlo4rato\nlo5rie\nlor5ou\n5los.\nlos5et\n5losophiz\n5losophy\nlos4t\nlo4ta\nloun5d\n2lout\n4lov\n2lp\nlpa5b\nl3pha\nl5phi\nlp5ing\nl3pit\nl4pl\nl5pr\n4l1r\n2l1s2\nl4sc\nl2se\nl4sie\n4lt\nlt5ag\nltane5\nl1te\nlten4\nltera4\nlth3i\nl5ties.\nltis4\nl1tr\nltu2\nltur3a\nlu5a\nlu3br\nluch4\nlu3ci\nlu3en\nluf4\nlu5id\nlu4ma\n5lumi\nl5umn.\n5lumnia\nlu3o\nluo3r\n4lup\nluss4\nlus3te\n1lut\nl5ven\nl5vet4\n2l1w\n1ly\n4lya\n4lyb\nly5me\nly3no\n2lys4\nl5yse\n1ma\n2mab\nma2ca\nma5chine\nma4cl\nmag5in\n5magn\n2mah\nmaid5\n4mald\nma3lig\nma5lin\nmal4li\nmal4ty\n5mania\nman5is\nman3iz\n4map\nma5rine.\nma5riz\nmar4ly\nmar3v\nma5sce\nmas4e\nmas1t\n5mate\nmath3\nma3tis\n4matiza\n4m1b\nmba4t5\nm5bil\nm4b3ing\nmbi4v\n4m5c\n4me.\n2med\n4med.\n5media\nme3die\nm5e5dy\nme2g\nmel5on\nmel4t\nme2m\nmem1o3\n1men\nmen4a\nmen5ac\nmen4de\n4mene\nmen4i\nmens4\nmensu5\n3ment\nmen4te\nme5on\nm5ersa\n2mes\n3mesti\nme4ta\nmet3al\nme1te\nme5thi\nm4etr\n5metric\nme5trie\nme3try\nme4v\n4m1f\n2mh\n5mi.\nmi3a\nmid4a\nmid4g\nmig4\n3milia\nm5i5lie\nm4ill\nmin4a\n3mind\nm5inee\nm4ingl\nmin5gli\nm5ingly\nmin4t\nm4inu\nmiot4\nm2is\nmis4er.\nmis5l\nmis4ti\nm5istry\n4mith\nm2iz\n4mk\n4m1l\nm1m\nmma5ry\n4m1n\nmn4a\nm4nin\nmn4o\n1mo\n4mocr\n5mocratiz\nmo2d1\nmo4go\nmois2\nmoi5se\n4mok\nmo5lest\nmo3me\nmon5et\nmon5ge\nmoni3a\nmon4ism\nmon4ist\nmo3niz\nmonol4\nmo3ny.\nmo2r\n4mora.\nmos2\nmo5sey\nmo3sp\nmoth3\nm5ouf\n3mous\nmo2v\n4m1p\nmpara5\nmpa5rab\nmpar5i\nm3pet\nmphas4\nm2pi\nmpi4a\nmp5ies\nm4p1in\nm5pir\nmp5is\nmpo3ri\nmpos5ite\nm4pous\nmpov5\nmp4tr\nm2py\n4m3r\n4m1s2\nm4sh\nm5si\n4mt\n1mu\nmula5r4\n5mult\nmulti3\n3mum\nmun2\n4mup\nmu4u\n4mw\n1na\n2n1a2b\nn4abu\n4nac.\nna4ca\nn5act\nnag5er.\nnak4\nna4li\nna5lia\n4nalt\nna5mit\nn2an\nnanci4\nnan4it\nnank4\nnar3c\n4nare\nnar3i\nnar4l\nn5arm\nn4as\nnas4c\nnas5ti\nn2at\nna3tal\nnato5miz\nn2au\nnau3se\n3naut\nnav4e\n4n1b4\nncar5\nn4ces.\nn3cha\nn5cheo\nn5chil\nn3chis\nnc1in\nnc4it\nncour5a\nn1cr\nn1cu\nn4dai\nn5dan\nn1de\nnd5est.\nndi4b\nn5d2if\nn1dit\nn3diz\nn5duc\nndu4r\nnd2we\n2ne.\nn3ear\nne2b\nneb3u\nne2c\n5neck\n2ned\nne4gat\nneg5ativ\n5nege\nne4la\nnel5iz\nne5mi\nne4mo\n1nen\n4nene\n3neo\nne4po\nne2q\nn1er\nnera5b\nn4erar\nn2ere\nn4er5i\nner4r\n1nes\n2nes.\n4nesp\n2nest\n4nesw\n3netic\nne4v\nn5eve\nne4w\nn3f\nn4gab\nn3gel\nnge4n4e\nn5gere\nn3geri\nng5ha\nn3gib\nng1in\nn5git\nn4gla\nngov4\nng5sh\nn1gu\nn4gum\nn2gy\n4n1h4\nnha4\nnhab3\nnhe4\n3n4ia\nni3an\nni4ap\nni3ba\nni4bl\nni4d\nni5di\nni4er\nni2fi\nni5ficat\nn5igr\nnik4\nn1im\nni3miz\nn1in\n5nine.\nnin4g\nni4o\n5nis.\nnis4ta\nn2it\nn4ith\n3nitio\nn3itor\nni3tr\nn1j\n4nk2\nn5kero\nn3ket\nnk3in\nn1kl\n4n1l\nn5m\nnme4\nnmet4\n4n1n2\nnne4\nnni3al\nnni4v\nnob4l\nno3ble\nn5ocl\n4n3o2d\n3noe\n4nog\nnoge4\nnois5i\nno5l4i\n5nologis\n3nomic\nn5o5miz\nno4mo\nno3my\nno4n\nnon4ag\nnon5i\nn5oniz\n4nop\n5nop5o5li\nnor5ab\nno4rary\n4nosc\nnos4e\nnos5t\nno5ta\n1nou\n3noun\nnov3el3\nnowl3\nn1p4\nnpi4\nnpre4c\nn1q\nn1r\nnru4\n2n1s2\nns5ab\nnsati4\nns4c\nn2se\nn4s3es\nnsid1\nnsig4\nn2sl\nns3m\nn4soc\nns4pe\nn5spi\nnsta5bl\nn1t\nnta4b\nnter3s\nnt2i\nn5tib\nnti4er\nnti2f\nn3tine\nn4t3ing\nnti4p\nntrol5li\nnt4s\nntu3me\nnu1a\nnu4d\nnu5en\nnuf4fe\nn3uin\n3nu3it\nn4um\nnu1me\nn5umi\n3nu4n\nn3uo\nnu3tr\nn1v2\nn1w4\nnym4\nnyp4\n4nz\nn3za\n4oa\noad3\no5a5les\noard3\noas4e\noast5e\noat5i\nob3a3b\no5bar\nobe4l\no1bi\no2bin\nob5ing\no3br\nob3ul\no1ce\noch4\no3chet\nocif3\no4cil\no4clam\no4cod\noc3rac\noc5ratiz\nocre3\n5ocrit\noctor5a\noc3ula\no5cure\nod5ded\nod3ic\nodi3o\no2do4\nodor3\nod5uct.\nod5ucts\no4el\no5eng\no3er\noe4ta\no3ev\no2fi\nof5ite\nofit4t\no2g5a5r\nog5ativ\no4gato\no1ge\no5gene\no5geo\no4ger\no3gie\n1o1gis\nog3it\no4gl\no5g2ly\n3ogniz\no4gro\nogu5i\n1ogy\n2ogyn\no1h2\nohab5\noi2\noic3es\noi3der\noiff4\noig4\noi5let\no3ing\noint5er\no5ism\noi5son\noist5en\noi3ter\no5j\n2ok\no3ken\nok5ie\no1la\no4lan\nolass4\nol2d\nold1e\nol3er\no3lesc\no3let\nol4fi\nol2i\no3lia\no3lice\nol5id.\no3li4f\no5lil\nol3ing\no5lio\no5lis.\nol3ish\no5lite\no5litio\no5liv\nolli4e\nol5ogiz\nolo4r\nol5pl\nol2t\nol3ub\nol3ume\nol3un\no5lus\nol2v\no2ly\nom5ah\noma5l\nom5atiz\nom2be\nom4bl\no2me\nom3ena\nom5erse\no4met\nom5etry\no3mia\nom3ic.\nom3ica\no5mid\nom1in\no5mini\n5ommend\nomo4ge\no4mon\nom3pi\nompro5\no2n\non1a\non4ac\no3nan\non1c\n3oncil\n2ond\non5do\no3nen\non5est\non4gu\non1ic\no3nio\non1is\no5niu\non3key\non4odi\non3omy\non3s\nonspi4\nonspir5a\nonsu4\nonten4\non3t4i\nontif5\non5um\nonva5\noo2\nood5e\nood5i\noo4k\noop3i\no3ord\noost5\no2pa\nope5d\nop1er\n3opera\n4operag\n2oph\no5phan\no5pher\nop3ing\no3pit\no5pon\no4posi\no1pr\nop1u\nopy5\no1q\no1ra\no5ra.\no4r3ag\nor5aliz\nor5ange\nore5a\no5real\nor3ei\nore5sh\nor5est.\norew4\nor4gu\n4o5ria\nor3ica\no5ril\nor1in\no1rio\nor3ity\no3riu\nor2mi\norn2e\no5rof\nor3oug\nor5pe\n3orrh\nor4se\nors5en\norst4\nor3thi\nor3thy\nor4ty\no5rum\no1ry\nos3al\nos2c\nos4ce\no3scop\n4oscopi\no5scr\nos4i4e\nos5itiv\nos3ito\nos3ity\nosi4u\nos4l\no2so\nos4pa\nos4po\nos2ta\no5stati\nos5til\nos5tit\no4tan\notele4g\not3er.\not5ers\no4tes\n4oth\noth5esi\noth3i4\not3ic.\not5ica\no3tice\no3tif\no3tis\noto5s\nou2\nou3bl\nouch5i\nou5et\nou4l\nounc5er\noun2d\nou5v\nov4en\nover4ne\nover3s\nov4ert\no3vis\noviti4\no5v4ol\now3der\now3el\now5est\now1i\nown5i\no4wo\noy1a\n1pa\npa4ca\npa4ce\npac4t\np4ad\n5pagan\np3agat\np4ai\npain4\np4al\npan4a\npan3el\npan4ty\npa3ny\npa1p\npa4pu\npara5bl\npar5age\npar5di\n3pare\npar5el\np4a4ri\npar4is\npa2te\npa5ter\n5pathic\npa5thy\npa4tric\npav4\n3pay\n4p1b\npd4\n4pe.\n3pe4a\npear4l\npe2c\n2p2ed\n3pede\n3pedi\npedia4\nped4ic\np4ee\npee4d\npek4\npe4la\npeli4e\npe4nan\np4enc\npen4th\npe5on\np4era.\npera5bl\np4erag\np4eri\nperi5st\nper4mal\nperme5\np4ern\nper3o\nper3ti\npe5ru\nper1v\npe2t\npe5ten\npe5tiz\n4pf\n4pg\n4ph.\nphar5i\nphe3no\nph4er\nph4es.\nph1ic\n5phie\nph5ing\n5phisti\n3phiz\nph2l\n3phob\n3phone\n5phoni\npho4r\n4phs\nph3t\n5phu\n1phy\npi3a\npian4\npi4cie\npi4cy\np4id\np5ida\npi3de\n5pidi\n3piec\npi3en\npi4grap\npi3lo\npi2n\np4in.\npind4\np4ino\n3pi1o\npion4\np3ith\npi5tha\npi2tu\n2p3k2\n1p2l2\n3plan\nplas5t\npli3a\npli5er\n4plig\npli4n\nploi4\nplu4m\nplum4b\n4p1m\n2p3n\npo4c\n5pod.\npo5em\npo3et5\n5po4g\npoin2\n5point\npoly5t\npo4ni\npo4p\n1p4or\npo4ry\n1pos\npos1s\np4ot\npo4ta\n5poun\n4p1p\nppa5ra\np2pe\np4ped\np5pel\np3pen\np3per\np3pet\nppo5site\npr2\npray4e\n5preci\npre5co\npre3em\npref5ac\npre4la\npre3r\np3rese\n3press\npre5ten\npre3v\n5pri4e\nprin4t3\npri4s\npris3o\np3roca\nprof5it\npro3l\npros3e\npro1t\n2p1s2\np2se\nps4h\np4sib\n2p1t\npt5a4b\np2te\np2th\npti3m\nptu4r\np4tw\npub3\npue4\npuf4\npul3c\npu4m\npu2n\npur4r\n5pus\npu2t\n5pute\nput3er\npu3tr\nput4ted\nput4tin\np3w\nqu2\nqua5v\n2que.\n3quer\n3quet\n2rab\nra3bi\nrach4e\nr5acl\nraf5fi\nraf4t\nr2ai\nra4lo\nram3et\nr2ami\nrane5o\nran4ge\nr4ani\nra5no\nrap3er\n3raphy\nrar5c\nrare4\nrar5ef\n4raril\nr2as\nration4\nrau4t\nra5vai\nrav3el\nra5zie\nr1b\nr4bab\nr4bag\nrbi2\nrbi4f\nr2bin\nr5bine\nrb5ing.\nrb4o\nr1c\nr2ce\nrcen4\nr3cha\nrch4er\nr4ci4b\nrc4it\nrcum3\nr4dal\nrd2i\nrdi4a\nrdi4er\nrdin4\nrd3ing\n2re.\nre1al\nre3an\nre5arr\n5reav\nre4aw\nr5ebrat\nrec5oll\nrec5ompe\nre4cre\n2r2ed\nre1de\nre3dis\nred5it\nre4fac\nre2fe\nre5fer.\nre3fi\nre4fy\nreg3is\nre5it\nre1li\nre5lu\nr4en4ta\nren4te\nre1o\nre5pin\nre4posi\nre1pu\nr1er4\nr4eri\nrero4\nre5ru\nr4es.\nre4spi\nress5ib\nres2t\nre5stal\nre3str\nre4ter\nre4ti4z\nre3tri\nreu2\nre5uti\nrev2\nre4val\nrev3el\nr5ev5er.\nre5vers\nre5vert\nre5vil\nrev5olu\nre4wh\nr1f\nrfu4\nr4fy\nrg2\nrg3er\nr3get\nr3gic\nrgi4n\nrg3ing\nr5gis\nr5git\nr1gl\nrgo4n\nr3gu\nrh4\n4rh.\n4rhal\nri3a\nria4b\nri4ag\nr4ib\nrib3a\nric5as\nr4ice\n4rici\n5ricid\nri4cie\nr4ico\nrid5er\nri3enc\nri3ent\nri1er\nri5et\nrig5an\n5rigi\nril3iz\n5riman\nrim5i\n3rimo\nrim4pe\nr2ina\n5rina.\nrin4d\nrin4e\nrin4g\nri1o\n5riph\nriph5e\nri2pl\nrip5lic\nr4iq\nr2is\nr4is.\nris4c\nr3ish\nris4p\nri3ta3b\nr5ited.\nrit5er.\nrit5ers\nrit3ic\nri2tu\nrit5ur\nriv5el\nriv3et\nriv3i\nr3j\nr3ket\nrk4le\nrk4lin\nr1l\nrle4\nr2led\nr4lig\nr4lis\nrl5ish\nr3lo4\nr1m\nrma5c\nr2me\nr3men\nrm5ers\nrm3ing\nr4ming.\nr4mio\nr3mit\nr4my\nr4nar\nr3nel\nr4ner\nr5net\nr3ney\nr5nic\nr1nis4\nr3nit\nr3niv\nrno4\nr4nou\nr3nu\nrob3l\nr2oc\nro3cr\nro4e\nro1fe\nro5fil\nrok2\nro5ker\n5role.\nrom5ete\nrom4i\nrom4p\nron4al\nron4e\nro5n4is\nron4ta\n1room\n5root\nro3pel\nrop3ic\nror3i\nro5ro\nros5per\nros4s\nro4the\nro4ty\nro4va\nrov5el\nrox5\nr1p\nr4pea\nr5pent\nrp5er.\nr3pet\nrp4h4\nrp3ing\nr3po\nr1r4\nrre4c\nrre4f\nr4reo\nrre4st\nrri4o\nrri4v\nrron4\nrros4\nrrys4\n4rs2\nr1sa\nrsa5ti\nrs4c\nr2se\nr3sec\nrse4cr\nrs5er.\nrs3es\nrse5v2\nr1sh\nr5sha\nr1si\nr4si4b\nrson3\nr1sp\nr5sw\nrtach4\nr4tag\nr3teb\nrten4d\nrte5o\nr1ti\nrt5ib\nrti4d\nr4tier\nr3tig\nrtil3i\nrtil4l\nr4tily\nr4tist\nr4tiv\nr3tri\nrtroph4\nrt4sh\nru3a\nru3e4l\nru3en\nru4gl\nru3in\nrum3pl\nru2n\nrunk5\nrun4ty\nr5usc\nruti5n\nrv4e\nrvel4i\nr3ven\nrv5er.\nr5vest\nr3vey\nr3vic\nrvi4v\nr3vo\nr1w\nry4c\n5rynge\nry3t\nsa2\n2s1ab\n5sack\nsac3ri\ns3act\n5sai\nsalar4\nsal4m\nsa5lo\nsal4t\n3sanc\nsan4de\ns1ap\nsa5ta\n5sa3tio\nsat3u\nsau4\nsa5vor\n5saw\n4s5b\nscan4t5\nsca4p\nscav5\ns4ced\n4scei\ns4ces\nsch2\ns4cho\n3s4cie\n5scin4d\nscle5\ns4cli\nscof4\n4scopy\nscour5a\ns1cu\n4s5d\n4se.\nse4a\nseas4\nsea5w\nse2c3o\n3sect\n4s4ed\nse4d4e\ns5edl\nse2g\nseg3r\n5sei\nse1le\n5self\n5selv\n4seme\nse4mol\nsen5at\n4senc\nsen4d\ns5ened\nsen5g\ns5enin\n4sentd\n4sentl\nsep3a3\n4s1er.\ns4erl\nser4o\n4servo\ns1e4s\nse5sh\nses5t\n5se5um\n5sev\nsev3en\nsew4i\n5sex\n4s3f\n2s3g\ns2h\n2sh.\nsh1er\n5shev\nsh1in\nsh3io\n3ship\nshiv5\nsho4\nsh5old\nshon3\nshor4\nshort5\n4shw\nsi1b\ns5icc\n3side.\n5sides\n5sidi\nsi5diz\n4signa\nsil4e\n4sily\n2s1in\ns2ina\n5sine.\ns3ing\n1sio\n5sion\nsion5a\nsi2r\nsir5a\n1sis\n3sitio\n5siu\n1siv\n5siz\nsk2\n4ske\ns3ket\nsk5ine\nsk5ing\ns1l2\ns3lat\ns2le\nslith5\n2s1m\ns3ma\nsmall3\nsman3\nsmel4\ns5men\n5smith\nsmol5d4\ns1n4\n1so\nso4ce\nsoft3\nso4lab\nsol3d2\nso3lic\n5solv\n3som\n3s4on.\nsona4\nson4g\ns4op\n5sophic\ns5ophiz\ns5ophy\nsor5c\nsor5d\n4sov\nso5vi\n2spa\n5spai\nspa4n\nspen4d\n2s5peo\n2sper\ns2phe\n3spher\nspho5\nspil4\nsp5ing\n4spio\ns4ply\ns4pon\nspor4\n4spot\nsqual4l\ns1r\n2ss\ns1sa\nssas3\ns2s5c\ns3sel\ns5seng\ns4ses.\ns5set\ns1si\ns4sie\nssi4er\nss5ily\ns4sl\nss4li\ns4sn\nsspend4\nss2t\nssur5a\nss5w\n2st.\ns2tag\ns2tal\nstam4i\n5stand\ns4ta4p\n5stat.\ns4ted\nstern5i\ns5tero\nste2w\nstew5a\ns3the\nst2i\ns4ti.\ns5tia\ns1tic\n5stick\ns4tie\ns3tif\nst3ing\n5stir\ns1tle\n5stock\nstom3a\n5stone\ns4top\n3store\nst4r\ns4trad\n5stratu\ns4tray\ns4trid\n4stry\n4st3w\ns2ty\n1su\nsu1al\nsu4b3\nsu2g3\nsu5is\nsuit3\ns4ul\nsu2m\nsum3i\nsu2n\nsu2r\n4sv\nsw2\n4swo\ns4y\n4syc\n3syl\nsyn5o\nsy5rin\n1ta\n3ta.\n2tab\nta5bles\n5taboliz\n4taci\nta5do\n4taf4\ntai5lo\nta2l\nta5la\ntal5en\ntal3i\n4talk\ntal4lis\nta5log\nta5mo\ntan4de\ntanta3\nta5per\nta5pl\ntar4a\n4tarc\n4tare\nta3riz\ntas4e\nta5sy\n4tatic\nta4tur\ntaun4\ntav4\n2taw\ntax4is\n2t1b\n4tc\nt4ch\ntch5et\n4t1d\n4te.\ntead4i\n4teat\ntece4\n5tect\n2t1ed\nte5di\n1tee\nteg4\nte5ger\nte5gi\n3tel.\nteli4\n5tels\nte2ma2\ntem3at\n3tenan\n3tenc\n3tend\n4tenes\n1tent\nten4tag\n1teo\nte4p\nte5pe\nter3c\n5ter3d\n1teri\nter5ies\nter3is\nteri5za\n5ternit\nter5v\n4tes.\n4tess\nt3ess.\nteth5e\n3teu\n3tex\n4tey\n2t1f\n4t1g\n2th.\nthan4\nth2e\n4thea\nth3eas\nthe5at\nthe3is\n3thet\nth5ic.\nth5ica\n4thil\n5think\n4thl\nth5ode\n5thodic\n4thoo\nthor5it\ntho5riz\n2ths\n1tia\nti4ab\nti4ato\n2ti2b\n4tick\nt4ico\nt4ic1u\n5tidi\n3tien\ntif2\nti5fy\n2tig\n5tigu\ntill5in\n1tim\n4timp\ntim5ul\n2t1in\nt2ina\n3tine.\n3tini\n1tio\nti5oc\ntion5ee\n5tiq\nti3sa\n3tise\ntis4m\nti5so\ntis4p\n5tistica\nti3tl\nti4u\n1tiv\ntiv4a\n1tiz\nti3za\nti3zen\n2tl\nt5la\ntlan4\n3tle.\n3tled\n3tles.\nt5let.\nt5lo\n4t1m\ntme4\n2t1n2\n1to\nto3b\nto5crat\n4todo\n2tof\nto2gr\nto5ic\nto2ma\ntom4b\nto3my\nton4ali\nto3nat\n4tono\n4tony\nto2ra\nto3rie\ntor5iz\ntos2\n5tour\n4tout\nto3war\n4t1p\n1tra\ntra3b\ntra5ch\ntraci4\ntrac4it\ntrac4te\ntras4\ntra5ven\ntrav5es5\ntre5f\ntre4m\ntrem5i\n5tria\ntri5ces\n5tricia\n4trics\n2trim\ntri4v\ntro5mi\ntron5i\n4trony\ntro5phe\ntro3sp\ntro3v\ntru5i\ntrus4\n4t1s2\nt4sc\ntsh4\nt4sw\n4t3t2\nt4tes\nt5to\nttu4\n1tu\ntu1a\ntu3ar\ntu4bi\ntud2\n4tue\n4tuf4\n5tu3i\n3tum\ntu4nis\n2t3up.\n3ture\n5turi\ntur3is\ntur5o\ntu5ry\n3tus\n4tv\ntw4\n4t1wa\ntwis4\n4two\n1ty\n4tya\n2tyl\ntype3\nty5ph\n4tz\ntz4e\n4uab\nuac4\nua5na\nuan4i\nuar5ant\nuar2d\nuar3i\nuar3t\nu1at\nuav4\nub4e\nu4bel\nu3ber\nu4bero\nu1b4i\nu4b5ing\nu3ble.\nu3ca\nuci4b\nuc4it\nucle3\nu3cr\nu3cu\nu4cy\nud5d\nud3er\nud5est\nudev4\nu1dic\nud3ied\nud3ies\nud5is\nu5dit\nu4don\nud4si\nu4du\nu4ene\nuens4\nuen4te\nuer4il\n3ufa\nu3fl\nugh3en\nug5in\n2ui2\nuil5iz\nui4n\nu1ing\nuir4m\nuita4\nuiv3\nuiv4er.\nu5j\n4uk\nu1la\nula5b\nu5lati\nulch4\n5ulche\nul3der\nul4e\nu1len\nul4gi\nul2i\nu5lia\nul3ing\nul5ish\nul4lar\nul4li4b\nul4lis\n4ul3m\nu1l4o\n4uls\nuls5es\nul1ti\nultra3\n4ultu\nu3lu\nul5ul\nul5v\num5ab\num4bi\num4bly\nu1mi\nu4m3ing\numor5o\num2p\nunat4\nu2ne\nun4er\nu1ni\nun4im\nu2nin\nun5ish\nuni3v\nun3s4\nun4sw\nunt3ab\nun4ter.\nun4tes\nunu4\nun5y\nun5z\nu4ors\nu5os\nu1ou\nu1pe\nuper5s\nu5pia\nup3ing\nu3pl\nup3p\nupport5\nupt5ib\nuptu4\nu1ra\n4ura.\nu4rag\nu4ras\nur4be\nurc4\nur1d\nure5at\nur4fer\nur4fr\nu3rif\nuri4fic\nur1in\nu3rio\nu1rit\nur3iz\nur2l\nurl5ing.\nur4no\nuros4\nur4pe\nur4pi\nurs5er\nur5tes\nur3the\nurti4\nur4tie\nu3ru\n2us\nu5sad\nu5san\nus4ap\nusc2\nus3ci\nuse5a\nu5sia\nu3sic\nus4lin\nus1p\nus5sl\nus5tere\nus1tr\nu2su\nusur4\nuta4b\nu3tat\n4ute.\n4utel\n4uten\nuten4i\n4u1t2i\nuti5liz\nu3tine\nut3ing\nution5a\nu4tis\n5u5tiz\nu4t1l\nut5of\nuto5g\nuto5matic\nu5ton\nu4tou\nuts4\nu3u\nuu4m\nu1v2\nuxu3\nuz4e\n1va\n5va.\n2v1a4b\nvac5il\nvac3u\nvag4\nva4ge\nva5lie\nval5o\nval1u\nva5mo\nva5niz\nva5pi\nvar5ied\n3vat\n4ve.\n4ved\nveg3\nv3el.\nvel3li\nve4lo\nv4ely\nven3om\nv5enue\nv4erd\n5vere.\nv4erel\nv3eren\nver5enc\nv4eres\nver3ie\nvermi4n\n3verse\nver3th\nv4e2s\n4ves.\nves4te\nve4te\nvet3er\nve4ty\nvi5ali\n5vian\n5vide.\n5vided\n4v3iden\n5vides\n5vidi\nv3if\nvi5gn\nvik4\n2vil\n5vilit\nv3i3liz\nv1in\n4vi4na\nv2inc\nvin5d\n4ving\nvio3l\nv3io4r\nvi1ou\nvi4p\nvi5ro\nvis3it\nvi3so\nvi3su\n4viti\nvit3r\n4vity\n3viv\n5vo.\nvoi4\n3vok\nvo4la\nv5ole\n5volt\n3volv\nvom5i\nvor5ab\nvori4\nvo4ry\nvo4ta\n4votee\n4vv4\nv4y\nw5abl\n2wac\nwa5ger\nwag5o\nwait5\nw5al.\nwam4\nwar4t\nwas4t\nwa1te\nwa5ver\nw1b\nwea5rie\nweath3\nwed4n\nweet3\nwee5v\nwel4l\nw1er\nwest3\nw3ev\nwhi4\nwi2\nwil2\nwill5in\nwin4de\nwin4g\nwir4\n3wise\nwith3\nwiz5\nw4k\nwl4es\nwl3in\nw4no\n1wo2\nwom1\nwo5ven\nw5p\nwra4\nwri4\nwrita4\nw3sh\nws4l\nws4pe\nw5s4t\n4wt\nwy4\nx1a\nxac5e\nx4ago\nxam3\nx4ap\nxas5\nx3c2\nx1e\nxe4cuto\nx2ed\nxer4i\nxe5ro\nx1h\nxhi2\nxhil5\nxhu4\nx3i\nxi5a\nxi5c\nxi5di\nx4ime\nxi5miz\nx3o\nx4ob\nx3p\nxpan4d\nxpecto5\nxpe3d\nx1t2\nx3ti\nx1u\nxu3a\nxx4\ny5ac\n3yar4\ny5at\ny1b\ny1c\ny2ce\nyc5er\ny3ch\nych4e\nycom4\nycot4\ny1d\ny5ee\ny1er\ny4erf\nyes4\nye4t\ny5gi\n4y3h\ny1i\ny3la\nylla5bl\ny3lo\ny5lu\nymbol5\nyme4\nympa3\nyn3chr\nyn5d\nyn5g\nyn5ic\n5ynx\ny1o4\nyo5d\ny4o5g\nyom4\nyo5net\ny4ons\ny4os\ny4ped\nyper5\nyp3i\ny3po\ny4poc\nyp2ta\ny5pu\nyra5m\nyr5ia\ny3ro\nyr4r\nys4c\ny3s2e\nys3ica\nys3io\n3ysis\ny4so\nyss4\nys1t\nys3ta\nysur4\ny3thin\nyt3ic\ny1w\nza1\nz5a2b\nzar2\n4zb\n2ze\nze4n\nze4p\nz1er\nze3ro\nzet4\n2z1i\nz4il\nz4is\n5zl\n4zm\n1zo\nzo4m\nzo5ol\nzte4\n4z1z2\nz4zy\n}\n\\hyphenation{ % Do NOT make any alterations to this list! --- DEK\nas-so-ciate\nas-so-ciates\ndec-li-na-tion\noblig-a-tory\nphil-an-thropic\npresent\npresents\nproject\nprojects\nreci-procity\nre-cog-ni-zance\nref-or-ma-tion\nret-ri-bu-tion\nta-ble\n}\n",
	"/texinputs/webmac.tex":     "% standard macros for WEB listings (in addition to PLAIN.TEX)\n\\xdef\\fmtversion{\\fmtversion+WEBMAC4.1} % identifies current set of macros\n\\parskip 0pt % no stretch between paragraphs\n\\parindent 1em % for paragraphs and for the first line of Pascal text\n\n\\font\\eightrm=cmr8 \\let\\sc=\\eightrm % NOT a caps-and-small-caps font!\n\\let\\mainfont=\\tenrm\n\\font\\titlefont=cmr7 scaled\\magstep4 % title on the contents page\n\\font\\ttitlefont=cmtt10 scaled\\magstep2 % typewriter type in title\n\\font\\tentex=cmtex10 % TeX extended character set (used in strings)\n\\fontdimen7\\tentex=0pt % no extra space after punctuation\n\n\\def\\\\#1{\\hbox{\\it#1\\/\\kern.05em}} % italic type for identifiers\n\\def\\|#1{\\hbox{$#1$}} % one-letter identifiers look a bit better this way\n\\def\\&#1{\\hbox{\\bf#1\\/}} % boldface type for reserved words\n\\def\\.#1{\\hbox{\\tentex % typewriter type for strings\n  \\let\\\\=\\BS % backslash in a string\n  \\let\\'=\\RQ % right quote in a string\n  \\let\\`=\\LQ % left quote in a string\n  \\let\\{=\\LB % left brace in a string\n  \\let\\}=\\RB % right brace in a string\n  \\let\\~=\\TL % tilde in a string\n  \\let\\ =\\SP % space in a string\n  \\let\\_=\\UL % underline in a string\n  \\let\\&=\\AM % ampersand in a string\n  #1}}\n\\def\\#{\\hbox{\\tt\\char`\\#}} % parameter sign\n\\def\\${\\hbox{\\tt\\char`\\$}} % dollar sign\n\\def\\%{\\hbox{\\tt\\char`\\%}} % percent sign\n\\def\\^{\\ifmmode\\mathchar\"222 \\else\\char`^ \\fi} % pointer or hat\n% circumflex accents can be obtained from \\^^D instead of \\^\n\\def\\AT!{@} % at sign for control text\n\n\\chardef\\AM=`\\& % ampersand character in a string\n\\chardef\\BS=`\\\\ % backslash in a string\n\\chardef\\LB=`\\{ % left brace in a string\n\\def\\LQ{{\\tt\\char'22}} % left quote in a string\n\\chardef\\RB=`\\} % right brace in a string\n\\def\\RQ{{\\tt\\char'23}} % right quote in a string\n\\def\\SP{{\\tt\\char`\\ }} % (visible) space in a string\n\\chardef\\TL=`\\~ % tilde in a string\n\\chardef\\UL=`\\_ % underline character in a string\n\n\\newbox\\bak \\setbox\\bak=\\hbox to -1em{} % backspace one em\n\\newbox\\bakk\\setbox\\bakk=\\hbox to -2em{} % backspace two ems\n\n\\newcount\\ind % current indentation in ems\n\\def\\1{\\global\\advance\\ind by1\\hangindent\\ind em} % indent one more notch\n\\def\\2{\\global\\advance\\ind by-1} % indent one less notch\n\\def\\3#1{\\hfil\\penalty#10\\hfilneg} % optional break within a statement\n\\def\\4{\\copy\\bak} % backspace one notch\n\\def\\5{\\hfil\\penalty-1\\hfilneg\\kern2.5em\\copy\\bakk\\ignorespaces}% optional break\n\\def\\6{\\ifmmode\\else\\par % forced break\n  \\hangindent\\ind em\\noindent\\kern\\ind em\\copy\\bakk\\ignorespaces\\fi}\n\\def\\7{\\Y\\6} % forced break and a little extra space\n\n\\let\\yskip=\\smallskip\n\\def\\to{\\mathrel{.\\,.}} % double dot, used only in math mode\n\\def\\note#1#2.{\\Y\\noindent{\\hangindent2em\\baselineskip10pt\\eightrm#1~#2.\\par}}\n\\def\\lapstar{\\rlap{*}}\n\\def\\startsection{\\Q\\noindent{\\let\\*=\\lapstar\\bf\\modstar.\\quad}}\n\\def\\defin#1{\\global\\advance\\ind by 2 \\1\\&{#1 }} % begin `define' or `format'\n\\def\\A{\\note{See also section}} % crossref for doubly defined section name\n\\def\\As{\\note{See also sections}} % crossref for multiply defined section name\n\\def\\B{\\mathopen{\\.{@\\{}}} % begin controlled comment\n\\def\\C#1{\\ifmmode\\gdef\\XX{\\null$\\null}\\else\\gdef\\XX{}\\fi % Pascal comments\n  \\XX\\hfil\\penalty-1\\hfilneg\\quad$\\{\\,$#1$\\,\\}$\\XX}\n\\def\\D{\\defin{define}} % macro definition\n\\def\\E{\\cdot10^} % exponent in floating point constant\n\\def\\ET{ and~} % conjunction between two section numbers\n\\def\\ETs{, and~} % conjunction between the last two of several section numbers\n\\def\\F{\\defin{format}} % format definition\n\\let\\G=\\ge % greater than or equal sign\n\\def\\H#1{\\hbox{\\rm\\char\"7D\\tt#1}} % hexadecimal constant\n\\let\\I=\\ne % unequal sign\n\\def\\J{\\.{@\\&}} % TANGLE's join operation\n\\let\\K=\\gets % left arrow\n\\let\\L=\\le % less than or equal sign\n\\outer\\def\\M#1.{\\MN#1.\\ifon\\vfil\\penalty-100\\vfilneg % beginning of section\n  \\vskip12ptminus3pt\\startsection\\ignorespaces}\n\\outer\\def\\N#1.#2.{\\MN#1.\\vfil\\eject % beginning of starred section\n  \\def\\rhead{\\uppercase{\\ignorespaces#2}} % define running headline\n  \\message{*\\modno} % progress report\n  \\edef\\next{\\write\\cont{\\Z{#2}{\\modno}{\\the\\pageno}}}\\next % to contents file\n  \\ifon\\startsection{\\bf\\ignorespaces#2.\\quad}\\ignorespaces}\n\\def\\MN#1.{\\par % common code for \\M, \\N\n  {\\xdef\\modstar{#1}\\let\\*=\\empty\\xdef\\modno{#1}}\n  \\ifx\\modno\\modstar \\onmaybe \\else\\ontrue \\fi \\mark{\\modno}}\n\\def\\O#1{\\hbox{\\rm\\char'23\\kern-.2em\\it#1\\/\\kern.05em}} % octal constant\n\\def\\P{\\rightskip=0pt plus 100pt minus 10pt % go into Pascal mode\n  \\sfcode`;=3000\n  \\pretolerance 10000\n  \\hyphenpenalty 10000 \\exhyphenpenalty 10000\n  \\global\\ind=2 \\1\\ \\unskip}\n\\def\\Q{\\rightskip=0pt % get out of Pascal mode\n  \\sfcode`;=1500 \\pretolerance 200 \\hyphenpenalty 50 \\exhyphenpenalty 50 }\n\\let\\R=\\lnot % logical not\n\\let\\S=\\equiv % equivalence sign\n\\def\\T{\\mathclose{\\.{@\\}}}} % terminate controlled comment\n\\def\\U{\\note{This code is used in section}} % crossref for use of a section\n\\def\\Us{\\note{This code is used in sections}} % crossref for uses of a section\n\\let\\V=\\lor % logical or\n\\let\\W=\\land % logical and\n\\def\\X#1:#2\\X{\\ifmmode\\gdef\\XX{\\null$\\null}\\else\\gdef\\XX{}\\fi % section name\n  \\XX$\\langle\\,$#2{\\eightrm\\kern.5em#1}$\\,\\rangle$\\XX}\n\\def\\Y{\\par\\yskip}\n\\let\\Z=\\let % now you can \\send the control sequence \\Z\n\\def\\){\\hbox{\\.{@\\$}}} % sign for string pool check sum\n\\def\\]{\\hbox{\\.{@\\\\}}} % sign for forced line break\n\\def\\=#1{\\kern2pt\\hbox{\\vrule\\vtop{\\vbox{\\hrule\n        \\hbox{\\strut\\kern2pt\\.{#1}\\kern2pt}}\n      \\hrule}\\vrule}\\kern2pt} % verbatim string\n\\let\\~=\\ignorespaces\n\\let\\*=*\n\n\\def\\onmaybe{\\let\\ifon=\\maybe} \\let\\maybe=\\iftrue\n\\newif\\ifon \\newif\\iftitle \\newif\\ifpagesaved\n\\def\\lheader{\\mainfont\\the\\pageno\\eightrm\\qquad\\rhead\\hfill\\title\\qquad\n  \\tensy x\\mainfont\\topmark} % top line on left-hand pages\n\\def\\rheader{\\tensy x\\mainfont\\topmark\\eightrm\\qquad\\title\\hfill\\rhead\n  \\qquad\\mainfont\\the\\pageno} % top line on right-hand pages\n\\def\\page{\\box255 }\n\\def\\normaloutput#1#2#3{\\ifodd\\pageno\\hoffset=\\pageshift\\fi\n  \\shipout\\vbox{\n    \\vbox to\\fullpageheight{\n      \\iftitle\\global\\titlefalse\n      \\else\\hbox to\\pagewidth{\\vbox to10pt{}\\ifodd\\pageno #3\\else#2\\fi}\\fi\n      \\vfill#1}} % parameter #1 is the page itself\n  \\global\\advance\\pageno by1}\n\n\\def\\rhead{\\.{WEB} OUTPUT} % this running head is reset by starred sections\n\\def\\title{} % an optional title can be set by the user\n\\def\\topofcontents{\\centerline{\\titlefont\\title}\n  \\vfill} % this material will start the table of contents page\n\\def\\botofcontents{\\vfill} % this material will end the table of contents page\n\\def\\contentspagenumber{0} % default page number for table of contents\n\\newdimen\\pagewidth \\pagewidth=6.5in % the width of each page\n\\newdimen\\pageheight \\pageheight=8.7in % the height of each page\n\\newdimen\\fullpageheight \\fullpageheight=9in % page height including headlines\n\\newdimen\\pageshift \\pageshift=0in % shift righthand pages wrt lefthand ones\n\\def\\magnify#1{\\mag=#1\\pagewidth=6.5truein\\pageheight=8.7truein\n  \\fullpageheight=9truein\\setpage}\n\\def\\setpage{\\hsize\\pagewidth\\vsize\\pageheight} % use after changing page size\n\\def\\contentsfile{CONTENTS} % file that gets table of contents info\n\\def\\readcontents{\\input CONTENTS}\n\n\\newwrite\\cont\n\\output{\\setbox0=\\page % the first page is garbage\n  \\openout\\cont=\\contentsfile\n  \\global\\output{\\normaloutput\\page\\lheader\\rheader}}\n\\setpage\n\\vbox to \\vsize{} % the first \\topmark won't be null\n\n\\def\\ch{\\note{The following sections were changed by the change file:}\n  \\let\\*=\\relax}\n\\newbox\\sbox % saved box preceding the index\n\\newbox\\lbox % lefthand column in the index\n\\def\\inx{\\par\\vskip6pt plus 1fil % we are beginning the index\n  \\write\\cont{} % ensure that the contents file isn't empty\n  \\closeout\\cont % the contents information has been fully gathered\n  \\output{\\ifpagesaved\\normaloutput{\\box\\sbox}\\lheader\\rheader\\fi\n    \\global\\setbox\\sbox=\\page \\global\\pagesavedtrue}\n  \\pagesavedfalse \\eject % eject the page-so-far and predecessors\n  \\setbox\\sbox\\vbox{\\unvbox\\sbox} % take it out of its box\n  \\vsize=\\pageheight \\advance\\vsize by -\\ht\\sbox % the remaining height\n  \\hsize=.5\\pagewidth \\advance\\hsize by -10pt\n    % column width for the index (20pt between cols)\n  \\parfillskip 0pt plus .6\\hsize % try to avoid almost empty lines\n  \\def\\lr{L} % this tells whether the left or right column is next\n  \\output{\\if L\\lr\\global\\setbox\\lbox=\\page \\gdef\\lr{R}\n    \\else\\normaloutput{\\vbox to\\pageheight{\\box\\sbox\\vss\n        \\hbox to\\pagewidth{\\box\\lbox\\hfil\\page}}}\\lheader\\rheader\n    \\global\\vsize\\pageheight\\gdef\\lr{L}\\global\\pagesavedfalse\\fi}\n  \\message{Index:}\n  \\parskip 0pt plus .5pt\n  \\outer\\def\\:##1, {\\par\\hangindent2em\\noindent##1:\\kern1em} % index entry\n  \\let\\ttentry=\\. \\def\\.##1{\\ttentry{##1\\kern.2em}} % give \\tt a little room\n  \\def\\[##1]{$\\underline{##1}$} % underlined index item\n  \\rm \\rightskip0pt plus 2.5em \\tolerance 10000 \\let\\*=\\lapstar\n  \\hyphenpenalty 10000 \\parindent0pt}\n\\def\\fin{\\par\\vfill\\eject % this is done when we are ending the index\n  \\ifpagesaved\\null\\vfill\\eject\\fi % output a null index column\n  \\if L\\lr\\else\\null\\vfill\\eject\\fi % finish the current page\n  \\parfillskip 0pt plus 1fil\n  \\def\\rhead{NAMES OF THE SECTIONS}\n  \\message{Section names:}\n  \\output{\\normaloutput\\page\\lheader\\rheader}\n  \\setpage\n  \\def\\note##1##2.{\\hfil\\penalty-1\\hfilneg\\quad{\\eightrm##1~##2.}}\n  \\linepenalty=10 % try to conserve lines\n  \\def\\U{\\note{Used in section}} % crossref for use of a section\n  \\def\\Us{\\note{Used in sections}} % crossref for uses of a section\n  \\def\\:{\\par\\hangindent 2em}\\let\\*=*\\let\\.=\\ttentry}\n\\def\\con{\\par\\vfill\\eject % finish the section names\n  \\rightskip 0pt \\hyphenpenalty 50 \\tolerance 200\n  \\setpage\n  \\output{\\normaloutput\\page\\lheader\\rheader}\n  \\titletrue % prepare to output the table of contents\n  \\pageno=\\contentspagenumber \\def\\rhead{TABLE OF CONTENTS}\n  \\message{Table of contents:}\n  \\topofcontents\n  \\line{\\hfil Section\\hbox to3em{\\hss Page}}\n  \\def\\Z##1##2##3{\\line{\\ignorespaces##1\n    \\leaders\\hbox to .5em{.\\hfil}\\hfil\\ ##2\\hbox to3em{\\hss##3}}}\n  \\readcontents\\relax % read the contents info\n  \\botofcontents \\end} % print the contents page(s) and terminate\n",
	"/texfonts/slantcx6.tfm":    "\x00a\x00\x12\x00\x01\x00\x1e\x00\x1f\x00\x02\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\xd6\xd9~\xba\x01\x00\x00\x00\aGFSLANT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bSLANTCX6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xde\x01\x10\x00\x00\x02\x10\x00\x00\x03\x10\x00\x00\x04\x10\x00\x00\x05\x10\x00\x00\x06\x10\x00\x00\a\x10\x00\x00\b\x10\x00\x00\t\x10\x00\x00\n\x10\x00\x00\v\x10\x00\x00\f\x10\x00\x00\r\x10\x00\x00\x0e\x10\x00\x00\x0f\x10\x00\x00\x10\x10\x00\x00\x11\x10\x00\x00\x12\x10\x00\x00\x13\x10\x00\x00\x14\x10\x00\x00\x15\x10\x00\x00\x16\x10\x00\x00\x17\x10\x00\x00\x18\x10\x00\x00\x19\x10\x00\x00\x1a\x10\x00\x00\x1b\x10\x00\x00\x1c\x10\x00\x00\x1d\x10\x00\x00\x1e\x10\x00\x00\x00\x00\x00\x00\x00\x00\x14\x8f\x00\x00)\x1d\x00\x00=\xac\x00\x00R;\x00\x00f\xc9\x00\x00{X\x00\x00\x8f\xe7\x00\x00\xa4u\x00\x00\xb9\x04\x00\x00͓\x00\x00\xe2!\x00\x00\xf6\xb0\x00\x01\v?\x00\x01\x1f\xcd\x00\x014\\\x00\x01H\xeb\x00\x01]y\x00\x01r\b\x00\x01\x86\x97\x00\x01\x9b%\x00\x01\xaf\xb4\x00\x01\xc4C\x00\x01\xd8\xd1\x00\x01\xed`\x00\x02\x01\xef\x00\x02\x16}\x00\x02+\f\x00\x02?\x9a\x00\x02T)\x00\x02h\xb8\x00\x00\x00\x00\x00\x0et2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\xaa\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00ff",
	"/texfonts/cmb10.tfm":       "\x01N\x00\x12\x00\x00\x00\u007f\x000\x00\x0f\x00\n\x00\x05\x00X\x00\t\x00\x00\x00\a\xd2\v\x9e&\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xb0\x00\x00*\xb0\x00\x00&\xb0\x00\x00\x1e\xb0\x00\x00\x1b\xb0\x00\x00'\xb0\x00\x00 \xb0\x00\x00&\xb0\x00\x00 \xb0\x00\x00&\xb0\x00\x00 \xb0\x00\x00\x16\xc0\x11\n\x14\xc0\x00\x00\x14\xc0\x00\x00*\xc0\x00\x00*\xc0\x00\x00\x010\x00\x00\x048\x00\x00\x0f\xc0\x00\x00\x0f\xc0\x00\x00\x0f\x80\x00\x00\x0f\xc0\x00\x00\x0fp\x00\x00\"\xc0\x00\x00\v\x06\x00\x00\x15\xc0\x00\x00 0\x00\x00&0\x00\x00\x0fU\x00\x00+\xb0\x00\x00.\xb0\x00\x00&\xd2\x00\x00\x010\x01\x00\x03\xc0\x01\x17\x13\xc0\x00\x00*\xc7\x00\x00\x0f\xe3\x00\x00*\xe3\x00\x00&\xc0\x00\x00\x01\xc0\x01\x12\x06\xe9\x00\x00\x06\xe9\x00\x00\x0f\xe0\x00\x00&d\x00\x00\x01\x18\x00\x00\x050\x01\x15\x01\x10\x00\x00\x0f\xe9\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x0f\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x03H\x00\x00&!\x00\x00\rH\x00\x00\r\xc0\x01\x18&\xc0\x00\x00\"\xb0\x01L\x1f\xb0\x00\x00 \xb0\x00\x00$\xb0\x015\x1a\xb0\x00\x00\x19\xb0\x01$)\xb0\x00\x00'\xb0\x00\x00\t\xb0\x01W\x10\xb0\x00\x00(\xb0\x01*\x17\xb0\x01R,\xb0\x00\x00'\xb0\x00\x00!\xb0\x015\x1c\xb0\x01\x1e!\xb8\x00\x00#\xb0\x01L\x14\xb0\x00\x00\x1d\xb0\x01.%\xb0\x00\x00\"\xb0\x05$/\xb0\x05$\"\xb0\x01*\"\xb0\t/\x18\xb0\x00\x00\x02\xe9\x00\x00\x13\xc0\x00\x00\x02\xe9\x00\x00\x0f\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\x0e0\x01H\x14\xc0\x01B\v0\x01@\x14\xc0\x00\x00\f0\x00\x00\x04\xc0\x11\x02\x0f8\x05V\x14\xc0\x01:\x01\xc0\x00\x00\x04\xc8\x00\x00\x12\xc0\x01\x19\x01\xc0\x00\x00*0\x01:\x140\x01:\x0f0\x01B\x148\x01B\x118\x00\x00\n0\x00\x00\b0\x00\x00\a\x90\x01J\x140\x01K\x120\x05\x19 0\x05\x1a\x120\x00\x00\x128\x05\x1f\v0\x00\x00\x0f0\r\x16-0\f\x00\x0f\xc0\x00\x00\x0f\xc0\x00\x00\x0f\xc0\x00\x00\x00\x00\x00\x00\x00\x04q\xc8\x00\x04z\xe3\x00\x04\xe3\x8e\x00\x04\xe3\x90\x00\x05UV\x00\x068\xe5\x00\x06>\x95\x00\x06O\xa6\x00\x06[\b\x00\x06\xd80\x00\a\x1cs\x00\awx\x00\a\x8e;\x00\a\xc7\x1e\x00\b\x00\x02\x00\bDF\x00\bq\xc8\x00\bq\xca\x00\b\xb6\r\x00\b\xe3\x90\x00\b\xf4\xa0\x00\tUX\x00\t\x99\x9d\x00\t\xc7\x1e\x00\n\ve\x00\n}+\x00\n\xaa\xad\x00\n\xee\xf2\x00\v\x1cu\x00\v36\x00\v`\xba\x00\v\x8e;\x00\f\x00\x03\x00\f\x16\xc5\x00\f'\xd5\x00\fDH\x00\fO\xa8\x00\fq\xca\x00\f\x88\x8b\x00\f\x88\x8d\x00\f\x93\xed\x00\rUX\x00\x0e}+\x00\x0f36\x00\x10\x00\x03\x00\x10DH\x00\x10\x88\x8d\x00\x00\x00\x00\x00\x02}(\x00\x06A\xfe\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\tUV\x00\t\x89\xaa\x00\n\x1cr\x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x1cr\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeA\xfe\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x008\xe3\x00\x00ff\x00\x00q\xc8\x00\x01\xc7\x1d\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x02\x80!\x80\x02\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x03\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x04\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00t\x80\x04\x00u\x80\x04\x00b\x80\x04\x00y\x80\x04\x00v\x80\x04\x80w\x80\x04\x00h\x80\x04\x80k\x80\x04\x00e\x80\a\x00o\x80\a\x00x\x80\x04\x00d\x80\a\x00c\x80\a\x00q\x80\a\x00v\x80\x04\x00j\x80\b\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x80W\x80\x06\x80j\x80\a\x80I\x80\a\xff\xfb\x8e8\xff\xfa\x99\x96\x00\x01\xc7\x1d\xff\xff\x1cr\xff\xff\x8e8\xff\xfe\xaa\xaa\xff\xfe8\xe3\x00\x00q\xc8\x00\x00\xe3\x8e\x00\x00\x00\x00\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\a\x1cr\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/cmbsy10.tfm":     "\x01\x17\x00\x12\x00\x00\x00\u007f\x00,\x00\x0f\x00\x10\x00\x10\x00\a\x00\a\x00\x00\x00\x16\xe0Ɍ\f\x00\xa0\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMBSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x1f\xaa\x00\x00\x02S\x00\x00\x1f\xaa\x00\x00\bB\x00\x00\x1f\xaa\x00\x00\bS\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00)\xcc\x00\x00\bS\x00\x00\bS\x00\x00\x1fd\x00\x00\x1fd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f!\x00\x00\x1fu\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)\x97\x00\x00)\x97\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)!\x00\x00)!\x00\x00\b\xcb\x00\x00\b\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1fd\x00\x00)!\x00\x00)!\x00\x00\x10\xcb\x00\x00\x10\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1f0\x00\x00\x03\x80\x00\x00)0\x00\x00\x15\x97\x00\x00\x15\x97\x00\x00(\xcc\x00\x00(\xcc\x00\x00\x01\xcb\x00\x00\x01!\x00\x00\v\xc0\x00\x00\v\xc0\x00\x00\x150\x00\x00\b\xe6\x00\x00\x1c\xc0\x00\x00\x1c\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x10\xc0\x00\x00\"\xb0\x01\x06\x13\xb0\x05\x04\n\xb0\r\x04\x1e\xb0\t\x02\t\xb0!\x03\x19\xb0)\x03\x0e\xb8\x11\x03&\xb0\x01\x03\f\xb0\x1d\x00\x16\xb89\x05\x1d\xb0\x01\x01\x17\xb0\x01\x04+\xb0\x01\x04#\xb05\x02!\xb0\t\x03\x18\xb0%\x02$\xb8\x01\x03'\xb0\x01\x02\x0f\xb0\x15\x04\r\xb0=\x00\x11\xb0)\x02\x12\xb0%\x00*\xb0%\x02\x1a\xb01\x04\x14\xb8%\x02\x1b\xb0\x19\x04\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x05\xee\x00\x00\x05\xee\x00\x00\x05\xee\x00\x00\x05\xee\x00\x00\b\xee\x00\x00\b\xee\x00\x00\x04\xee\x00\x00\x04\xee\x00\x00\x02\xee\x00\x00\b\xee\x00\x00\b\xee\x00\x00\x10\xee\x00\x00\b\xee\x00\x00\x02\xcb\x00\x00%\x1f\x00\x00 \xb0\x00\x00%\xb0\x00\x00\a\xcc,\x00\x15\x80\x00\x00\x15\x80\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x06\xcc\x00\x00\x05\xcc\x00\x00\x05\xcc\x00\x00\x10\xcc\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x1cp\x00\x05\x82\xd6\x00\a'\xd0\x00\b-\x80\x00\bl\x15\x00\t\x19\x9a\x00\t30\x00\t\xb6\b\x00\t\xce\xc6\x00\n8\xe0\x00\nG;\x00\nNh\x00\n\xe7\xd0\x00\v$e\x00\v>\x90\x00\vox\x00\v\xcc8\x00\v\xf7+\x00\f#C\x00\fD@\x00\fx\x96\x00\f\x9cm\x00\f\xf5-\x00\r\x06\x82\x00\r\x11K\x00\r\x18u\x00\rI\xf0\x00\r\xf0\xa3\x00\x0eE\xf5\x00\x0eO\xa0\x00\x0efb\x00\x0e}#\x00\x0e\xbbM\x00\x0e\xffE\x00\x0f\x06\xce\x00\x0fUP\x00\x0f\xccX\x00\x0f\xd5N\x00\x10[\x00\x00\x12f`\x00\x12\xb2\x9b\x00\x16\v\x93\x00\x00\x00\x00\x00\x00\xf5\xc3\x00\x06A\xfe\x00\a\x1cr\x00\a\x8e:\x00\a\x93\xe8\x00\b\t\x1b\x00\bd \x00\b\xe3\x90\x00\t^p\x00\n\" \x00\n\xfaP\x00\v\x1cr\x00\v%\x8d\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeA\xfe\xff\xff\x8e:\xff\xff\x93\xe8\x00\x00\t\x1b\x00\x00d \x00\x00\xe3\x8e\x00\x01^p\x00\x01\x8e:\x00\x02\x12\xf6\x00\x02\" \x00\x03\x1cp\x00\x03\x1cr\x00\x03%\x8d\x00\x04\x00\x00\x00\x0f\n=\x00\x00\x00\x00\x00\x00\\3\x00\x00\x82\xd8\x00\x00\xc1\x1b\x00\x00\xe4K\x00\x01$\x00\x00\x01M]\x00\x01Mz\x00\x01S\x9e\x00\x01Zs\x00\x01\xa0\xb6\x00\x02\v`\x00\x02Z6\x00\x02n\xa6\x00\x03\x00\x02\x00\x04G\x1d\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00\x82\xd8\x00\x01\x05\xb0\x00\x01\x88\x88\x00\x02\v`\x00\x02\x8e8\x00\x03\x11\x10\x00\x03\x93\xe8\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\a\x1cr\x00\x12f`\x00\x00\x00\x00\x00\v\xf2\x88\x00\x06\xc8n\x00\a\x95;\x00\f\x196\x00\x06\x00-\x00\x06\x9b5\x00\x05\xceh\x00\x04\x9fJ\x00\x02ff\x00\x04\xf2\x90\x00\x06-\x80\x00\x00\xcc\xcd\x00&=p\x00\x10(\xf6\x00\x04\x00\x00",
	"/texfonts/cmdunh10.tfm":    "\x01D\x00\x12\x00\x00\x00\u007f\x00$\x00\x10\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\aK\xf1`y\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMDUNH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x12\xc0\x00\x00\x1e\xc0\x00\x00\x1c\xc0\x00\x00\x16\xc0\x00\x00\x14\xc0\x00\x00\x1a\xc0\x00\x00\x18\xc0\x00\x00\x1c\xc0\x00\x00\x18\xc0\x00\x00\x1c\xc0\x00\x00\x18\xc0\x00\x00\x10\xd0\x11\n\x0f\xd0\x00\x00\x0f\xd0\x00\x00\x1e\xd0\x00\x00\x1e\xd0\x00\x00\x010\x00\x00\x027\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\x80\x00\x00\n\xa0\x00\x00\np\x00\x00\x1a\xd0\x00\x00\b\x06\x00\x00\v\xd0\x00\x00\x180\x00\x00\x1c0\x00\x00\nE\x00\x00\x1f\xc0\x00\x00\"\xc0\x00\x00\x1c\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\n\xd0\x00\x00\x1e\xd8\x00\x00\n\xf3\x00\x00\x1e\xf3\x00\x00\x1c\xd0\x00\x00\x01\xd0\x01\x12\x05\xf9\x00\x00\x05\xf9\x00\x00\n\xf0\x00\x00\x1cT\x00\x00\x01\x17\x00\x00\x030\x01\x15\x01\x10\x00\x00\n\xf9\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\x010\x00\x00\x017\x00\x00\x01\x97\x00\x00\x1c!\x00\x00\t\x97\x00\x00\t\xd0\x01\x18\x1c\xd0\x00\x00\x1a\xc0\x01L\x17\xc0\x00\x00\x18\xc0\x00\x00\x1b\xc0\x015\x15\xc0\x00\x00\x13\xc0\x01$\x1d\xc0\x00\x00\x1a\xc0\x00\x00\x04\xc0\x01W\f\xc0\x00\x00\x1c\xc0\x01*\x12\xc0\x01R \xc0\x00\x00\x1a\xc0\x00\x00\x1c\xc0\x015\x15\xc0\x01\x1e\x1c\xc7\x00\x00\x19\xc0\x01L\x0f\xc0\x00\x00\x18\xc0\x01.\x1a\xc0\x00\x00\x1a\xc0\x05$#\xc0\x05$\x1a\xc0\x01*\x1a\xc0\t/\x11\xc0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xf9\x00\x00\n\xa0\x00\x00\x01p\x00\x00\x01\xd0\x01\x11\n0\x01H\x0f\xd0\x01B\b0\x01@\x0f\xd0\x00\x00\b0\x00\x00\x02\xd0\x11\x02\n7\x05V\x0f\xd0\x01:\x01p\x00\x00\x02w\x00\x00\x0e\xd0\x01\x19\x01\xd0\x00\x00\x1e0\x01:\x0f0\x01:\n0\x01B\x0f7\x01B\r7\x00\x00\x060\x00\x00\a0\x00\x00\x05`\x01J\x0f0\x01K\x0e0\x05\x19\x180\x05\x1a\x0e0\x00\x00\x0e7\x05\x1f\b0\x00\x00\n0\r\x16!0\f\x00\n\xa0\x00\x00\np\x00\x00\np\x00\x00\x00\x00\x00\x00\x00\x04q\xc8\x00\x04\xe3\x90\x00\x05UV\x00\x05\xc7\x1d\x00\x068\xe5\x00\x06DF\x00\x06O\xa6\x00\a\x1cs\x00\a\x8e;\x00\b\x00\x02\x00\b\x00\x03\x00\b8\xe5\x00\bq\xc8\x00\bq\xca\x00\b\xe3\x90\x00\tUX\x00\t\xc7\x1e\x00\n\x00\x02\x00\nq\xca\x00\n\xaa\xad\x00\n\xe3\x90\x00\v\x1cs\x00\vUX\x00\v\x8e;\x00\v\xc7\x1e\x00\f\x00\x02\x00\f8\xe6\x00\fq\xca\x00\f\x8e;\x00\rUX\x00\x0eq\xca\x00\x0e\xaa\xad\x00\x10\x00\x03\x00\x108\xe6\x00\x10q\xca\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\bq\xc8\x00\tUV\x00\t\xd7^\x00\n\xc6\"\x00\f\x0e:\x00\fq\xc8\x00\r\xc7\x1d\x00\x0e\xc1m\x00\x0f`\xb6\x00\x0f\x8e:\x00\x10'\xd3\x00\x10q\xc6\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xc7\x1d\x00\x00\xe3\x8d\x00\x01UV\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cr\x00\a\x8e:\x00\bq\xc6\x00\x00\x00\x00\x00\x008\xe3\x00\x00ff\x00\x00q\xc8\x00\x01>\x95\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\x8e8\xff\xfa\xe3\x8d\x00\x01>\x95\x00\x01\xc7\x1d\xff\xff\x1cr\xff\xff\x8e8\xff\xfe\xaa\xaa\xff\xfe8\xe3\x00\x00q\xc8\x00\x00\xe3\x8e\x00\x00\x00\x00\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\x06\xe3\x8e\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/cmss10.tfm":      "\x01I\x00\x12\x00\x00\x00\u007f\x004\x00\x10\x00\v\x00\x05\x00N\x00\b\x00\x00\x00\am#\xbdR\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xd0\x00\x00.\xd0\x00\x00+\xd0\x00\x00\x1d\xd0\x00\x00 \xd0\x00\x00&\xd0\x00\x00'\xd0\x00\x00+\xd0\x00\x00'\xd0\x00\x00+\xd0\x00\x00'\xd0\x00\x00\x1a\xd0\x11\n\x16\xd0\x00\x00\x16\xd0\x00\x00-\xd0\x00\x00-\xd0\x00\x00\x010\x00\x00\x029\x00\x00\x14\xd0\x00\x00\x14\xd0\x00\x00\x14\x90\x00\x00\x14\xd0\x00\x00\x14\x80\x00\x00!\xd0\x00\x00\x0e\a\x00\x00\x12\xd0\x00\x00'0\x00\x00+0\x00\x00\x14U\x00\x00/\xd0\x00\x002\xd0\x00\x00+\xe2\x00\x00\x010\x01\x00\a\xd0\x01\x17\x14\xd0\x00\x00.\xd8\x00\x00\x14\xf3\x00\x00.\xf3\x00\x00*\xd0\x00\x00\x03\xd0\x01\x12\f\xfa\x00\x00\f\xfa\x00\x00\x14\xf0\x00\x00+t\x00\x00\x03\x16\x00\x00\b0\x01\x15\x03\x10\x00\x00\x14\xfa\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x030\x00\x00\x036\x00\x00\aI\x00\x00+!\x00\x00\x10I\x00\x00\x10\xd0\x01\x18 \xd0\x00\x00!\xd0\x01B!\xd0\x00\x00\x1e\xd0\x00\x00(\xd0\x014\x1b\xd0\x00\x00\x19\xd0\x01# \xd0\x00\x00&\xd0\x00\x00\x04\xd0\x01M\x10\xd0\x00\x00%\xd0\x01)\x17\xd0\x01H0\xd0\x00\x00&\xd0\x00\x00)\xd0\x014\x1e\xd0\x01\x1d)\xd6\x00\x00\x1f\xd0\x00\x00\x18\xd0\x00\x00\"\xd0\x01-$\xd0\x00\x00!\xd0\x05#1\xd0\x05#!\xd0\x01)!\xd0\t.\x1c\xd0\x00\x00\x05\xfa\x00\x00\x14\xd0\x00\x00\x05\xfa\x00\x00\x14\xd0\x00\x00\x03\xc0\x00\x00\x03\xd0\x01\x11\x110\x01?\x15\xd0\x019\x0e0\x00\x00\x15\xd0\x00\x00\x0e0\x00\x00\x06\xd0\x11\x02\x149\x05L\x15\xd0\x00\x00\x01\xc0\x00\x00\x02\xc9\x00\x00\x13\xd0\x01\x19\x01\xd0\x00\x00,0\x00\x00\x150\x00\x00\x140\x019\x159\x019\x159\x00\x00\t0\x04\x00\v0\x00\x00\n`\x01@\x150\x01A\x0f0\x04\x00#0\x05\x19\x0f0\x00\x00\x0f9\x05\x1e\r0\x00\x00\x140\r\x1630\f\x00\x14\xd0\x00\x00\x14\xb0\x00\x00\x14\xc0\x00\x00\x00\x00\x00\x00\x00\x03\xd2~\x00\x04DF\x00\x04q\xc8\x00\x04q\xca\x00\x04\x9fK\x00\x04\xe3\x90\x00\x05\x1cs\x00\x05UV\x00\x05wz\x00\x05\xc7\x1d\x00\x06\"#\x00\x068\xe5\x00\x06\xf4\xa0\x00\a\x1cs\x00\a`\xb8\x00\a\x8e;\x00\a\xb0]\x00\a\xb0^\x00\aҀ\x00\b\x00\x02\x00\bDF\x00\b\x93\xeb\x00\b\xaa\xad\x00\b\xe3\x90\x00\t\x1cu\x00\tUX\x00\t\x8e;\x00\t\xc7\x1e\x00\t\xc7 \x00\n8\xe6\x00\nUX\x00\n\xaa\xad\x00\n\xaa\xae\x00\n\xe3\x90\x00\n\xee\xf2\x00\v\x00\x05\x00\v\x1cv\x00\vUZ\x00\v\x8e;\x00\v\x8e=\x00\v\xc7\x1e\x00\f\"%\x00\fq\xca\x00\f\xb6\x0e\x00\r\x05\xb3\x00\rUX\x00\r\xc7 \x00\x0e\x00\x05\x00\x0f\x1cv\x00\x0f\x8e=\x00\x10\x00\x03\x00\x00\x00\x00\x00\x01UU\x00\x05\xeb\x85\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\tUV\x00\t\xbe\x00\x00\n\x1cr\x00\n}(\x00\n\xd3N\x00\nޮ\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xeb\x85\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\x00\x00\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x008\xe3\x00\x00ff\x00\x00q\xc8\x00\x01\x1cr\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfc-\x82\xff\xfb\xdd\xdb\x00\x01\x1cr\x00\x01\xc7\x1d\xff\xff\x8e8\xff\xfe\xaa\xaa\x00\x00q\xc8\xff\xfe8\xe3\x00\x00\x00\x00\x00\x05UV\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\a\x1cr\x00\x10\x00\x03\x00\x01\xc7\x1d",
	"/texfonts/cmssi9.tfm":      "\x01}\x00\x12\x00\x00\x00\u007f\x007\x00\x10\x00\n\x007\x00N\x00\b\x00\x00\x00\a+\xa1\x97\x17\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x18\xd0\xc4\x001\xd0\x00\x00.\xd0P\x00\x1e\xd0\x00\x00\"м\x00(\xd0d\x00)и\x00.Ј\x00)\xd00\x00.Ј\x00)\xd0h\x00\x1b\xd0\xd9\n\x17Р\x00\x17М\x000Р\x000М\x00\x010,\x00\x028,\x00\x15\xd0\x00\x00\x15Ќ\x00\x15\x90l\x00\x15И\x00\x15\x80\x84\x00+\xd0\x00\x00\x0e\a\x00\x00\x13Ќ\x00)0H\x00.0H\x00\x15U4\x002и\x005и\x00.\xe2P\x00\x010\x01\x00\a\xd0=\x17\x15\xd0\x00\x001\xd88\x00\x15\xf3\xac\x001\xf3 \x00-\xd0\x1c\x00\x03\xd0U\x12\f\xf9\xc0\x00\f\xf9\x18\x00\x15\xf0\xb0\x00.t\x18\x00\x03\x16\x00\x00\b0\x11\x15\x03\x10\x00\x00\x15\xf9\xc0\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x15\xa0\xac\x00\x030\x14\x00\x036\x14\x00\aH\b\x00.!8\x00\x11H\x00\x00\x11е\x18\"\xd0P\x00$\xd0\x01B#\xd0h\x00\x1fи\x00*\xd0Q4\x1cи\x00\x1a\xd0\xc5#\"и\x00(\xd0d\x00\x04\xd0\xc5M\x12\xd0d\x00'й)\x18\xd0\x01H3\xd0d\x00(\xd0d\x00,\xd0Q4 \xd0i\x1d,\xd6P\x00!\xd0h\x00\x19Ќ\x00%\xd0\xc5-&\xd0d\x00$\xd0\xd1#4\xd0\xd1#$\xd0\xc5)$\xd0\xd5.\x1dи\x00\x05\xf9\xcc\x00\x15\xd0\xc8\x00\x05\xf9t\x00\x15\xd0\\\x00\x03\xc0`\x00\x03\xd0U\x11\x130\x05?\x16\xd0%9\x0e0p\x00\x16М\x00\x0f0H\x00\x06\xd0\xd9\x02\x158\xa9L\x16\xd0\f\x00\x01\xc0\xa4\x00\x02Ȕ\x00\x14\xd0q\x19\x01М\x00/0\f\x00\x160\f\x00\x150E9\x168)9\x168,\x00\t0\xa8\x00\v0X\x00\n`M@\x160-A\x100\xa8\x00%0\xa9\x19\x100\x90\x00\x108\xa9\x1e\r0\x80\x00\x150y\x1660x\x00\x15Ќ\x00\x15\xb0|\x00\x15\xc0@\x00\x00\x00\x00\x00\x00\x03\xed\a\x00\x04a\xf7\x00\x04\x91`\x00\x04\x97\xb2\x00\x04\xc7\x1b\x00\x05\x06P\x00\x055\xb9\x00\x05{@\x00\x05\x9e\x04\x00\x05\xf00\x00\x06M\xbe\x00\x06e \x00\a%\xe9\x00\aO\x00\x00\aO\x02\x00\a\x94\x87\x00\a\xc3\xf0\x00\a\xc7\x19\x00\a\xe6\xb4\x00\b\tw\x00\b8\xe0\x00\b~g\x00\bД\x00\b\xf6\x80\x00\t\"\xc0\x00\tkp\x00\t\x97\xb0\x00\t\xe0`\x00\n\f\xa0\x00\n\x12\xf2\x00\n\x81\x90\x00\n\x84\xb9\x00\n\xa7|\x00\n\xf6\x80\x00\n\xf9\xa9\x00\n\xfc\xd2\x00\v<\a\x00\vN\xfe\x00\vq\xc2\x00\v\xa1+\x00\v\xe0`\x00\v\xe3\x89\x00\f\x1f\a\x00\f%\xe7\x00\fx\x14\x00\f\xca@\x00\r\x0f\xc7\x00\ra\xf4\x00\r\xb4 \x00\x0e,9\x00\x0e^\xcb\x00\x0f\x8e2\x00\x0f\xff\xf9\x00\x10q\xc0\x00\x00\x00\x00\x00\x01a\xf9\x00\x06\x02G\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\t{@\x00\tβ\x00\n\x1cr\x00\nx\x19\x00\n٠\x00\n\xec\x97\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x02G\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01{@\x00\x01\x8e9\x00\x02\x06R\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00)D\x00\x00>`\x00\x00I\xf5\x00\x00L\x89\x00\x00`.\x00\x00d\xb9\x00\x00vN\x00\x00|\xe7\x00\x00\x82D\x00\x00\xa5W\x00\x00\xac\t\x00\x00\xb9\\\x00\x00\xc3\f\x00\x00\xd2\a\x00\x00\xe7\xab\x00\x01\b)\x00\x01\x0e\xdc\x00\x01\x1c \x00\x01%e\x00\x012I\x00\x019\xd7\x00\x01<\xc7\x00\x01>\xb7\x00\x01B\xa2\x00\x01I\xa5\x00\x01P\x84\x00\x01P\xdb\x00\x01T,\x00\x01c\xe4\x00\x01d\x14\x00\x01d\x85\x00\x01e\xde\x00\x01f@\x00\x01n\xbe\x00\x01r\xbb\x00\x01w@\x00\x01{\x85\x00\x01\x82\x89\x00\x01\x85\xb2\x00\x01\x8c\x04\x00\x01\x94\xce\x00\x01\xbdk\x00\x01Ļ\x00\x01ݐ\x00\x01\xe3\xae\x00\x01\xe7\xab\x00\x02\n\xbe\x00\x02\x18\t\x00\x02\"\"\x00\x02E7\x00\x02\x8c\xf9\x00\x02\x97\x14\x00\x02\xc5\xd9\x00\x03\x80\xf4\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfc\x12\xf9\xff\xfb\xbd\xa4\x00\x01$Y\x00\x01\xd3\xc0\xff\xff\x8b\x10\xff\xfe\xa10\x00\x00t\xf0\xff\xfe,@\x00\x03f\xa0\x00\x05{@\x00\x02\xbd\xa0\x00\x01\xd3\xc0\x00\a\x1cr\x00\x10q\xc0\x00\x01\xd3\xc0",
	"/texfonts/logobf10.tfm":    "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\xf0MP\xb0\x00\xa0\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MFLOGO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\n\xf3z\x00\v\xc4\xd3\x00\f\x96-\x00\x0f\n:\x00\x00\x00\x00\x00\t\x99\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00h\xad\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\x97S\xff\xff.\xa6\x00\x00\xd1Z\x00\x00\x00\x00\x00\x05:\x06\x00\x02t\r\x00\x01\xa2\xb3\x00\x00\x00\x00\x00\x0f\n:",
	"/texfonts/cmssi12.tfm":     "\x01\u007f\x00\x12\x00\x00\x00\u007f\x007\x00\x10\x00\v\x008\x00N\x00\b\x00\x00\x00\a\xda\x03\"\xcd\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x17\xd0\xc8\x001\xd0\x00\x00.\xd0T\x00\x1c\xd0\x00\x00#\xd0\xc0\x00(\xd0p\x00*м\x00.Ќ\x00*\xd04\x00.Ќ\x00*\xd0h\x00\x1a\xd0\xdd\n\x16Ш\x00\x16Р\x000Ш\x000Р\x00\x0100\x00\x0290\x00\x14\xd0\x00\x00\x14Д\x00\x14\x90t\x00\x14М\x00\x14\x80|\x00+\xd0\x00\x00\x0e\a\x00\x00\x12Д\x00*0L\x00.0L\x00\x14U8\x002м\x005м\x00.\xe2T\x00\x010\x01\x00\a\xd0A\x17\x14\xd0\x04\x001\xd8<\x00\x14\xf3\xb0\x001\xf3$\x00-\xd0(\x00\x04\xd0a\x12\f\xfa\xc4\x00\f\xfa\x18\x00\x14\xf0\xb8\x00.t\x18\x00\x04\x16\x00\x00\b0\x11\x15\x04\x10\x00\x00\x14\xfa\xc4\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x14\xa0\xb0\x00\x040\x1c\x00\x046\x1c\x00\aI\f\x00.!<\x00\x11I\x00\x00\x11е\x18#\xd0T\x00!\xd0\x01B\"\xd0h\x00\x1fм\x00)\xd0U4\x1bм\x00\x19\xd0\xc9##м\x00(\xd0p\x00\x03\xd0\xc9M\x10\xd0p\x00'н)\x17\xd0\x01H3\xd0p\x00(\xd0p\x00,\xd0U4\x1e\xd0i\x1d,\xd6T\x00 \xd0h\x00\x18Д\x00&\xd0\xc9-%\xd0p\x00!\xd0\xd5#4\xd0\xd5#!\xd0\xc9)!\xd0\xd9.\x1dм\x00\x05\xfa\xd0\x00\x14\xd0\xcc\x00\x05\xfa\x84\x00\x14\xd0d\x00\x04\xc0X\x00\x04\xd0a\x11\x120\t?\x15\xd0!9\x0e0l\x00\x15Р\x00\x0e0L\x00\x06\xd0\xdd\x02\x149\xadL\x15\xd0\x14\x00\x01\xc0\xa4\x00\x02ɘ\x00\x13\xd0m\x19\x01Р\x00/0\x14\x00\x150\x14\x00\x140I9\x159-9\x1590\x00\t0\xac\x00\v0\\\x00\n`Q@\x1501A\x0f0\xac\x00$0\xad\x19\x0f0\x90\x00\x0f9\xad\x1e\r0\x80\x00\x140y\x1660x\x00\x14Д\x00\x14\xb0\x88\x00\x14\xc0D\x00\x00\x00\x00\x00\x00\x03\xafe\x00\x04\x1e\xcd\x00\x04B[\x00\x04Z\x10\x00\x04\x87\x1b\x00\x04\xc9x\x00\x04\xfb@\x00\x058\xe0\x00\x05R\xf3\x00\x05\xa8H\x00\x06\x01h\x00\x06\x17\xb0\x00\x06\xcb\xd5\x00\x06\xf6\x80\x00\a*\xa5\x00\aZ\r\x00\ae\xe8\x00\a\u007f\xfb\x00\a\x9a\r\x00\a\xd5P\x00\b\tu\x00\b^\xcb\x00\bv}\x00\b\xb4 \x00\b\xe5\xe5\x00\t#\x88\x00\tUM\x00\t{;\x00\t\x92\xf0\x00\t\xf6}\x00\n\x02X\x00\n\x15M\x00\nZ\v\x00\ne\xe5\x00\nq\xc0\x00\n\xa5\xe5\x00\n\xaa\xa3\x00\n\xaf`\x00\n\xc9s\x00\n\xfb;\x00\vD\xb5\x00\vP\x90\x00\v|@\x00\v\x8e0\x00\v\xda\v\x00\f/`\x00\fc\x85\x00\f\xb8\xdb\x00\r\x0e0\x00\rq\xbd\x00\r\x97\xab\x00\x0e\xb4\x1b\x00\x0f/]\x00\x0f\xaa\xa0\x00\x00\x00\x00\x00\x01K\xdb\x00\x05\xd2|\x00\a\x1cq\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\t8\xe0\x00\t\xb9\xd5\x00\n\x1cq\x00\n{C\x00\nΐ\x00\n\xd8\v\x00\v\x1cq\x00\v\xe3\x8d\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xd2|\x00\x00\xc7\x1c\x00\x00\xe3\x8f\x00\x018\xe0\x00\x01\x8e9\x00\x02\x00\x00\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x16\xec\x00\x007w\x00\x00K\x05\x00\x00R\x11\x00\x00W_\x00\x00j@\x00\x00k?\x00\x00\u007f\x1c\x00\x00\x82o\x00\x00\x8a\x0f\x00\x00\xa0\x88\x00\x00\xb7\x19\x00\x00\xbe\xe5\x00\x00\xcc\xed\x00\x00\xcdg\x00\x00\xf4O\x00\x01\b$\x00\x01\x0e\xdc\x00\x01\x18\x8c\x00\x01)\xd1\x00\x017\xd0\x00\x01?\xd8\x00\x01@\x19\x00\x01D\xe7\x00\x01K\xc0\x00\x01V\f\x00\x01Va\x00\x01Z<\x00\x01]\xe4\x00\x01^\x8c\x00\x01j\x1d\x00\x01j\xc4\x00\x01k\xcb\x00\x01m<\x00\x01tG\x00\x01w\xcd\x00\x01}\xc9\x00\x01\x828\x00\x01\x89\xa4\x00\x01\x90\xc1\x00\x01\x95-\x00\x01\x9a<\x00\x01\xba\xa5\x00\x01\xca\xef\x00\x01\xe3\xaf\x00\x01\xe5\xdc\x00\x01\xed1\x00\x02\x0e\x9d\x00\x02\x1d\x90\x00\x02$\xe5\x00\x02FQ\x00\x02\x8c\xf8\x00\x02\x94M\x00\x02\xc0\xdd\x00\x03s\x1d\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfcP\x9b\xff\xfc\a \x00\x01\x16\x84\x00\x01\xbd\xa0\xff\xff\x90\x98\xff\xfe\xb1\xc8\x00\x00oh\xff\xfeB`\x00\x03f\xa0\x00\x058\xe0\x00\x02\x9cp\x00\x01\xbd\xa0\x00\a\x1cq\x00\x0f\xaa\xa0\x00\x01\xbd\xa0",
	"/texfonts/cmtex8.tfm":      "\x00\xc0\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\x0e\x00\x01\x00\x00\x00\x00\x00\x00\x00\a\xdfC\xcas\x00\x80\x00\x00\x12TeX extended ASCII\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMTEX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x01c\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xcd\x00\x00\x01@\x00\x00\x010\x00\x00\x01\xa5\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01=\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\x84\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01\xa5\x00\x00\x01\xa5\x00\x00\x01@\x00\x00\x01@\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\xb6\x00\x00\x01!\x00\x00\x01!\x00\x00\x01\xe8\x00\x00\x01c\x00\x00\x01\xd7\x00\x00\x01\xd7\x00\x00\x01R\x00\x00\x01@\x00\x00\x01\x00\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xfa\x00\x00\x01\xfa\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01p\x00\x00\x01\x84\x00\x00\x01\x1c\x00\x00\x01\x84\x00\x00\x01\x10\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01<\x00\x00\x01\xa5\x00\x00\x01!\x00\x00\x01\xa5\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcc\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\v\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01=\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcd\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01=\x00\x00\x01=\x00\x00\x010\x00\x00\x010\x00\x00\x01\x90\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01=\x00\x00\x010\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xcd\x00\x00\x00\x00\x00\x00\x00\b\x80\b\x00\x00\x00\x00\x00\x02'\x1e\x00\x06\xb4\x9e\x00\x06\xe3\x8e\x00\a\xd2~\x00\a\xe9:\x00\b1\xca\x00\bUV\x00\b\x88$\x00\b\xdbp\x00\b\xf1\xc8\x00\t\xa3\x8e\x00\t\xc7\x1c\x00\n&d\x00\nRt\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xed\x82\xff\xfe\"\x1e\xff\xfej\xae\xff\xfe\xc1\b\xff\xff*\xac\xff\xff\xdcr\x00\x00_H\x00\x00\x8bX\x00\x01UT\x00\x01UV\x00\x01\x93\xe4\x00\x028\xe4\x00\x03\x8e8\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x80\b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x11\x00\x10\x00\b\x80\b",
	"/texfonts/cmmi10.tfm":      "\x01~\x00\x12\x00\x00\x00\u007f\x00b\x00\x0f\x00\t\x00 \x00:\x00\f\x00\x00\x00\x06\v\xa0b>\x00\xa0\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea<\xb0q\x1d\\\xb0\x01'Q\xb0\x15\x18I\xb0\x01'M\xb0M\x18[\xb0Y\x10T\xb0=\x182\xb0q\fE\xb0\x01\x18:\xb0i\bR\xb0-\x18@@\x05\x03+\xc71\x18$G4\x00\x12\xc0!\t\n@\x01\v\x10\xc7I\x18 G\x1d\v\x19\xc0\x15\x18\x05@\x01\v0@\x00\x004\xc0\x00\x009G\x01\x03\x1f@A\x01\x10\xc7)!,@\x1c\x00#G\x01\x18-@\x1d/\x0f@m\x01)@\x1d\x037\xc7\x01\x18>G\x01\vC\xc7\x1d!=@\x1c\x00\x17@\x01\x186\xc0\x01\x18Y@\x14\x00#G\x01\x18\aFU\x18DG\x01\x18a2\x00\x00a2\x00\x00a2\x00\x00a2\x00\x00\x01S\x00\x00\x01S\x00\x00!d\x00\x00!d\x00\x00!@\x00\x00!@\x00\x00!@\x00\x00!G\x00\x00!G\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00!\x90\x00\x00!G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Su\x00\x00!\xe8\x014Su\x00\x00!d\x00\x00(\xc05\x18N\xb0\x01\"O\xb0-\x18J\xb0E\x15X\xb0\x15\vL\xb0=\x18B\xb0q\x1dU\xb0\x01\x18[\xb0Y\x10\x11\xb0Q!*\xb0]+]\xb0E\bF\xb0\x01\x03`\xb0e\x19W\xb0e\x14Q\xb0\x15\x18A\xb0q\x1dV\xb7\x01\x18P\xb0\t\x18;\xb0=\x195\xb0q\x15H\xb0e\x043\xb0y1_\xb0q1Z\xb0Q\x141\xb0y1G\xb0E\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00a!\x00\x00a!\x00\x00\f\xc0\x01!'@\x00\x00\r\xc0\x00\x00\x0e@\x01\v%\xc0\x01#\x16@\x01\v\x1d\xc7a(\x1aG\x1d\x030\xc0\x01\x00\x04\xa0\x00\x00\v\xa79/&\xc0\x18\x00\x02\xc0\r\x18^@\x00\x008@\x00\x00\x1b@\x01\v\"G\x01\x18\x13G\x1d\x18\x14@\x15\t\x18@\x01\v\x06\x80\x01\x18/@\x01\x03\x1c@\x1d\x03K@\x11\x18.@\x01\x03\x1eG\x1d\v\x15@%\v\x03@\x01\x03\bG\x01\x18?G\x01!!\xd0t\x00\x01\xc0|\x00\x00\x00\x00\x00\x00\x04q\xc8\x00\x04\xc6*\x00\x05(\xc8\x00\x05\x83 \x00\x05\xa9\xba\x00\x05\xc7\x1e\x00\x05\xce:\x00\x06$\xfd\x00\x068\xe5\x00\x06~\x95\x00\x06\x96\xc3\x00\x06\xaa\xae\x00\x06\xdd\xde\x00\x06\xec\x92\x00\x06\xfe\x96\x00\a\x00\x02\x00\a\b\x8a\x00\a\x1cr\x00\a$\x83\x00\a7\xf3\x00\ap\xd8\x00\as5\x00\av\n\x00\a\x80\x00\x00\a\x82\xd8\x00\a\xa1\xaa\x00\a\xc1m\x00\a\xc1n\x00\a\xd5X\x00\a\xd82\x00\a\xe7[\x00\a\xf1\xcb\x00\b\x00\x02\x00\b\f\xce\x00\bE\xb2\x00\bH\xa0\x00\bS\xeb\x00\bTe\x00\bu\x1b\x00\b~\x95\x00\b\xa4\xfd\x00\b\xdfJ\x00\t\f\xce\x00\t\x1e\xd5\x00\t$\x83\x00\t$\xfb\x00\t(\xca\x00\t7\xf3\x00\tI\xf6\x00\tUU\x00\tUV\x00\tUX\x00\tY\x9b\x00\tv\x8a\x00\t\x88\x8a\x00\t\x9a\x90\x00\t\xa4\v\x00\t˪\x00\tϦ\x00\t\xd8.\x00\t\xf5\x93\x00\n\x02\xd6\x00\n.\xf0\x00\n<8\x00\nE\xb0\x00\nI\xf6\x00\nl\x1a\x00\nwx\x00\n\xaa\xab\x00\n\xe3\x90\x00\n\xec\x18\x00\n\xec\xa8\x00\v\x1cs\x00\vo\x80\x00\vtf\x00\vϦ\x00\v\xe0\xb8\x00\f\x00\x02\x00\f\"\xdb\x00\f&\r\x00\f4U\x00\f[\xbe\x00\fq\xca\x00\fzR\x00\f\x94z\x00\f\xa6\x1d\x00\f\xdb\x06\x00\r?&\x00\r@\x05\x00\rAn\x00\rL\xce\x00\rUX\x00\r\x96\xc3\x00\x0e\fX\x00\x0f\x1cs\x00\x0f\x85\xb2\x00\x10\x00\x03\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\xb8\xe5\x00\x05\u07b8\x00\x06\xe3\x8e\x00\ak\x83\x00\aq\xc8\x00\b\xa0%\x00\t\xd7^\x00\nO\xa5\x00\n\x8dj\x00\n\xee\xee\x00\v\x1cr\x00\vn]\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe5\xff\xfd\u07b8\xff\xffk\x83\xff\xffq\xc8\x00\x00\xa0%\x00\x01\x8e:\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x0f*\x00\x00\x1f\xa5\x00\x00P\x9a\x00\x00n8\x00\x00q\xc8\x00\x00\x80\xf2\x00\x00\x92\xf6\x00\x00\x9b\x05\x00\x00\xb4%\x00\x00\xbcr\x00\x00͂\x00\x00\xd8.\x00\x00\xe3\x8e\x00\x00\xeax\x00\x00\xec\x16\x00\x01\x04\xbe\x00\x01$\xfa\x00\x01.8\x00\x016\v\x00\x01Ak\x00\x01G\x1b\x00\x01L\xcb\x00\x01\x89\xf5\x00\x01\xb8\xe5\x00\x01\xbe\x93\x00\x01\u0090\x00\x01Ϧ\x00\x028\xe5\x00\x02v\v\x00\x03\x8e:\x00\x06d2\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\t\x00Z\x80\x01\x00j\x80\x03\x00f\x80\n\x80\u007f\x80\v\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\v\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\v\x00;\x80\x01\x80:\x80\x01\x00;\x80\n\x00:\x80\n\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\t\x80Z\x80\x01\xff\xff\x8e8\xff\xff\x1cr\x00\x00q\xc8\xff\xfe8\xe3\x00\x00\xe3\x90\xff\xfe\xaa\xaa\x00\x01UX\x00\x01\xc7 \x00\x028\xe8\x00\x00\xe3\x8e\xff\xfdUU\x00\x02\xaa\xb0\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\x00\x03",
	"/texfonts/cmmib10.tfm":     "\x01}\x00\x12\x00\x00\x00\u007f\x00b\x00\x0f\x00\t\x00 \x00:\x00\v\x00\x00\x00\x06DF\x89\x94\x00\xa0\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMMIB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea,\xa0u\x1dZ\xa0\x01'O\xa0\x19\x18H\xa0\x01'M\xa0M\x18]\xa0Y\x10T\xa05\x180\xa0u\fE\xa0\x01\x18<\xa0i\bS\xa0-\x18D@\x01\x03.\xc7\x1d\x18 G@\x00\x12\xc0%\t\f@\x01\v\r\xc79\x18\"G!\v\x1a\xc0\x19\x18\x05@\x01\v/@\x00\x000\xc0\x00\x009G\x01\x03\x1e@E\x01\r\xc7\x15!4@ \x00&G\x01\x185@!/\x11@m\x01(@!\x03:\xc7\x01\x18>G\x01\vC\xc7!!=@ \x00\x14@\x01\x187\xc0\x01\x18\\@\x18\x00&G\x01\x18\aFU\x18AG\x01\x18a2\x00\x00a2\x00\x00a2\x00\x00a2\x00\x00\x01d\x00\x00\x01d\x00\x00\x1dS\x00\x00\x1dS\x00\x00\x1d@\x00\x00\x1d@\x00\x00\x1d@\x00\x00\x1dG\x00\x00\x1dG\x00\x00\x1dG\x00\x00\x1d\x90\x00\x00\x1dG\x00\x00\x1d\x90\x00\x00\x1dG\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Vu\x00\x00\x1d\xe8\x014Vu\x00\x00\x1dS\x00\x00'\xc0A\x18Q\xa0\x01\"N\xa0-\x18J\xa0I\x15W\xa0\x19\vI\xa05\x186\xa0u\x1dU\xa0\x01\x18]\xa0Y\x10\x0e\xa0Q!)\xa0]+[\xa0I\bB\xa0\x01\x03`\xa0e\x19Y\xa0e\x14L\xa0\x19\x18?\xa0u\x1dP\xa7\x01\x18R\xa0\x05\x188\xa01\x19+\xa0u\x15G\xa0e\x042\xa0y1_\xa0u1X\xa0Q\x141\xa0y1F\xa0I\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00a!\x00\x00a!\x00\x00\v\xc0\x01!*@\x00\x00\x10\xc0\x00\x00\x0f@\x01\v%\xc0\x01#\x18@\x01\v\x1c\xc7a(\x17G!\x03/\xc0\x01\x00\x04\xb0\x00\x00\n\xb7=/$\xc0\f\x00\x02\xc0\t\x18^@\x00\x00;@\x00\x00\x1f@\x01\v#G\x01\x18\x16G!\x18\x13@\x19\t\x15@\x01\v\x06\x80\x01\x183@\x01\x03\x1b@!\x03K@\x11\x18-@\x01\x03!G!\v\x19@)\v\x03@\x01\x03\bG\x01\x18@G\x01!\x1d\xd0p\x00\x01\xc0|\x00\x00\x00\x00\x00\x00\x05\x1cp\x00\x05\x92\x03\x00\x06K\xda\x00\x06z\v\x00\x06\x97\xb3\x00\x06\xa4\xf8\x00\x06\xc7\x1a\x00\a\x05\xb0\x00\a'\xd0\x00\a\x88\x88\x00\a\x93\xea\x00\a\xbb\xba\x00\b\" \x00\b-\x82\x00\b6\xfb\x00\bUR\x00\bUS\x00\b[\x02\x00\bu\x92\x00\bv\n\x00\b\x80\x00\x00\b\xac\x8d\x00\b\xb7\xed\x00\bە\x00\b\xe1\xa8\x00\b\xfd%\x00\t\x11\x0e\x00\t\x16\xc3\x00\t30\x00\t:\xc6\x00\t[\x02\x00\tp\xc3\x00\tq\xc5\x00\t\x99\x98\x00\t\x9db\x00\t\xa8\xc3\x00\t\xc1j\x00\t\xc9\xf3\x00\n\x0e5\x00\n\x16\xbe\x00\n\x19\x98\x00\n :\x00\n/\xa0\x00\n\x82\xd5\x00\n\x8b`\x00\n\x8e6\x00\n\xaes\x00\n\xbb\xb8\x00\n\xcb\x13\x00\n\xd8+\x00\n\xe5r\x00\n\xeb\"\x00\n\xf9Z\x00\v\x05\xad\x00\v\x10\x95\x00\v\x15S\x00\vSn\x00\vfb\x00\vhJ\x00\vl\xa2\x00\v|0\x00\v}&\x00\v\x91\xc5\x00\v\xd8*\x00\v\xf4\x9a\x00\f\x16\xbd\x00\f\"\x1e\x00\f+\x9a\x00\fD@\x00\f\\n\x00\f\xcd\xed\x00\f\xe3\x8a\x00\f\xf6\b\x00\r\x120\x00\rM\xbd\x00\rb\xf8\x00\ru\xbe\x00\r\xdc\xca\x00\r\xe0 \x00\r\xe5\xd0\x00\r\xe9:\x00\r\xf5%\x00\x0e\x0f\xfd\x00\x0e);\x00\x0e0\x0e\x00\x0eO\xa0\x00\x0f\x02\x8b\x00\x0f'\xce\x00\x0f4\x9b\x00\x0fUP\x00\x0f\x89\xf0\x00\x0f\x99\x96\x00\x0f\xb7s\x00\x10\x84\xba\x00\x11}#\x00\x12E\xab\x00\x12f`\x00\x00\x00\x00\x00\x02}(\x00\x05\xc7\x1d\x00\x06A\xfe\x00\a\x1cr\x00\a\x8e:\x00\b\t\x1b\x00\t^p\x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x17\x93\x00\v\x1cr\x00\v\x97S\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xc7\x1d\xff\xfeA\xfe\xff\xff\x8e:\x00\x00\t\x1b\x00\x01^p\x00\x01\x8e:\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x11>\x00\x00$\b\x00\x00K\xda\x00\x00q\xc6\x00\x00{\xbd\x00\x00\x82\xd8\x00\x00\x8bb\x00\x00\x97\xb5\x00\x00\x9cr\x00\x00\xac\x90\x00\x00\xc6\v\x00\x00\xdcr\x00\x00\xdfJ\x00\x00\xfe\x95\x00\x00\xfe\xc8\x00\x01\x05\xb0\x00\x01\x1a\x8d\x00\x01\x1d\xde\x00\x011~\x00\x01>\x93\x00\x01DE\x00\x01Q\x12\x00\x01\x9cr\x00\x01\xc4E\x00\x01\xd3\xea\x00\x01\xddN\x00\x02'\xd3\x00\x02zP\x00\x02\x8e8\x00\x04\x16\xc0\x00\a32\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xff}(\xff\xfe\xfaP\x00\x00\x82\xd8\xff\xfd\xf4\xa0\x00\x01\x05\xb0\xff\xfewx\x00\x01\x88\x88\x00\x02\v`\x00\x02\x8e8\xff\xfc\xee\xf0\x00\x03\x11\x10\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\a\x1cr\x00\x12f`",
	"/texfonts/cmr7.tfm":        "\x01E\x00\x12\x00\x00\x00\u007f\x00&\x00\x10\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\aٓ\xa0R\x00p\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x12\xc0\x00\x00\x1f\xc0\x00\x00\x1d\xc0\x00\x00\x16\xc0\x00\x00\x14\xc0\x00\x00\x1a\xc0\x00\x00\x18\xc0\x00\x00\x1d\xc0\x00\x00\x18\xc0\x00\x00\x1d\xc0\x00\x00\x18\xc0\x00\x00\x10\xd0\x11\n\x0f\xd0\x00\x00\x0f\xd0\x00\x00 \xd0\x00\x00 \xd0\x00\x00\x010\x00\x00\x027\x00\x00\t\xd0\x00\x00\t\xd0\x00\x00\t\x90\x00\x00\t\xd0\x00\x00\t`\x00\x00\x1a\xd0\x00\x00\a\x06\x00\x00\n\xd0\x00\x00\x180\x00\x00\x1d0\x00\x00\tT\x00\x00!\xc0\x00\x00#\xc0\x00\x00\x1d\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\t\xd0\x00\x00\x1f\xd7\x00\x00\t\xf3\x00\x00\x1f\xf3\x00\x00\x1d\xd0\x00\x00\x01\xd0\x01\x12\x05\xf8\x00\x00\x05\xf8\x00\x00\t\xf0\x00\x00\x1d\x85\x00\x00\x01\x17\x00\x00\x030\x01\x15\x01\x10\x00\x00\t\xf8\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\x010\x00\x00\x017\x00\x00\x01G\x00\x00\x1d!\x00\x00\bG\x00\x00\b\xd0\x01\x18\x1d\xd0\x00\x00\x1a\xc0\x01L\x17\xc0\x00\x00\x18\xc0\x00\x00\x1b\xc0\x015\x15\xc0\x00\x00\x13\xc0\x01$\x1e\xc0\x00\x00\x1a\xc0\x00\x00\x04\xc0\x01W\v\xc0\x00\x00\x1c\xc0\x01*\x12\xc0\x01R\"\xc0\x00\x00\x1a\xc0\x00\x00\x1d\xc0\x015\x15\xc0\x01\x1e\x1d\xc7\x00\x00\x19\xc0\x01L\x0e\xc0\x00\x00\x18\xc0\x01.\x1a\xc0\x00\x00\x1a\xc0\x05$%\xc0\x05$\x1a\xc0\x01*\x1a\xc0\t/\x11\xc0\x00\x00\x01\xf8\x00\x00\t\xd0\x00\x00\x01\xf8\x00\x00\t\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\t0\x01H\x0e\xd0\x01B\a0\x01@\x0e\xd0\x00\x00\a0\x00\x00\x02\xd0\x11\x02\t7\x05V\x0e\xd0\x01:\x01\xb0\x00\x00\x02\xb7\x00\x00\r\xd0\x01\x19\x01\xd0\x00\x00\x1f0\x01:\x0e0\x01:\t0\x01B\x0e7\x01B\f7\x00\x00\x050\x00\x00\x060\x00\x00\x05p\x01J\x0e0\x01K\r0\x05\x19\x180\x05\x1a\r0\x00\x00\r7\x05\x1f\a0\x00\x00\t0\r\x16$0\f\x00\t\xd0\x00\x00\t\xb0\x00\x00\t\xb0\x00\x00\x00\x00\x00\x00\x00\x05,\xb5\x00\x05\xaa\xae\x00\x06(\xa5\x00\x06\x9an\x00\a$\x95\x00\a=\xc7\x00\b \x85\x00\b\x9e~\x00\t\x1cu\x00\t\x1cw\x00\tUY\x00\t\x9ak\x00\t\x9an\x00\n\x18e\x00\nYi\x00\n\xd7b\x00\v\x14U\x00\vM9\x00\v\xcb2\x00\f\x10E\x00\fI)\x00\f\x82\x0e\x00\f\xc7\"\x00\r\f5\x00\rE\x19\x00\r}\xfe\x00\r\xc3\x12\x00\r\xfb\xf7\x00\x0e\b%\x00\x0e$\x97\x00\x0f\x04\x15\x00\x0f\x86\x1e\x00\x108\xe9\x00\x10q\xce\x00\x120\xc9\x00\x128\xe9\x00\x12i\xae\x00\x00\x00\x00\x00\x01\xd7^\x00\x06%0\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc7\x00\t/\xf0\x00\t\xd7^\x00\t\xe7\xa0\x00\n\x0e9\x00\nO\xa5\x00\n\xc3\x0e\x00\n\xee\xf0\x00\v\x1cr\x00\v\xb6\x0e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe%0\x00\x00\xc7\x1e\x00\x00\xe3\x8e\x00\x01\x8e9\x00\x01\xe7\xa0\x00\x02\xb8\xe5\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00>\xfb\x00\x00q`\x00\x00}\xf9\x00\x01G\x1e\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa\xd3K\xff\xfa\x1cn\x00\x01G\x1e\x00\x01\xf7\xe0\xff\xff\x04\x10\xff\xff\x82\a\xff\xfe\x86\x17\xff\xfe\b \x00\x00}\xf9\x00\x00\xfb\xf0\x00\x00\x00\x00\x00\x06(\xa5\x00\x02\xf3\xd0\x00\x01\xf7\xe0\x00\x06\xe3\x8e\x00\x128\xe9\x00\x01\xf7\xe0",
	"/texfonts/cmss12.tfm":      "\x01K\x00\x12\x00\x00\x00\u007f\x006\x00\x10\x00\v\x00\x05\x00N\x00\b\x00\x00\x00\a\x82\xceR6\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x17\xd0\x00\x000\xd0\x00\x00-\xd0\x00\x00\x1c\xd0\x00\x00#\xd0\x00\x00(\xd0\x00\x00*\xd0\x00\x00-\xd0\x00\x00*\xd0\x00\x00-\xd0\x00\x00*\xd0\x00\x00\x1a\xd0\x11\n\x16\xd0\x00\x00\x16\xd0\x00\x00/\xd0\x00\x00/\xd0\x00\x00\x010\x00\x00\x029\x00\x00\x14\xd0\x00\x00\x14\xd0\x00\x00\x14\x90\x00\x00\x14\xd0\x00\x00\x14\x80\x00\x00!\xd0\x00\x00\x0e\a\x00\x00\x12\xd0\x00\x00*0\x00\x00-0\x00\x00\x14U\x00\x001\xd0\x00\x004\xd0\x00\x00-\xe2\x00\x00\x010\x01\x00\a\xd0\x01\x17\x14\xd0\x00\x000\xd8\x00\x00\x14\xf3\x00\x000\xf3\x00\x00,\xd0\x00\x00\x04\xd0\x01\x12\f\xfa\x00\x00\f\xfa\x00\x00\x14\xf0\x00\x00-t\x00\x00\x04\x16\x00\x00\b0\x01\x15\x04\x10\x00\x00\x14\xfa\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x14\xa0\x00\x00\x040\x00\x00\x046\x00\x00\aI\x00\x00-!\x00\x00\x11I\x00\x00\x11\xd0\x01\x18#\xd0\x00\x00!\xd0\x01B\"\xd0\x00\x00\x1f\xd0\x00\x00)\xd0\x014\x1b\xd0\x00\x00\x19\xd0\x01##\xd0\x00\x00(\xd0\x00\x00\x03\xd0\x01M\x10\xd0\x00\x00'\xd0\x01)\x17\xd0\x01H2\xd0\x00\x00(\xd0\x00\x00+\xd0\x014\x1e\xd0\x01\x1d+\xd6\x00\x00 \xd0\x00\x00\x18\xd0\x00\x00&\xd0\x01-%\xd0\x00\x00!\xd0\x05#3\xd0\x05#!\xd0\x01)!\xd0\t.\x1d\xd0\x00\x00\x05\xfa\x00\x00\x14\xd0\x00\x00\x05\xfa\x00\x00\x14\xd0\x00\x00\x04\xc0\x00\x00\x04\xd0\x01\x11\x120\x01?\x15\xd0\x019\x0e0\x00\x00\x15\xd0\x00\x00\x0e0\x00\x00\x06\xd0\x11\x02\x149\x05L\x15\xd0\x00\x00\x01\xc0\x00\x00\x02\xc9\x00\x00\x13\xd0\x01\x19\x01\xd0\x00\x00.0\x00\x00\x150\x00\x00\x140\x019\x159\x019\x159\x00\x00\t0\x04\x00\v0\x00\x00\n`\x01@\x150\x01A\x0f0\x04\x00$0\x05\x19\x0f0\x00\x00\x0f9\x05\x1e\r0\x00\x00\x140\r\x1650\f\x00\x14\xd0\x00\x00\x14\xb0\x00\x00\x14\xc0\x00\x00\x00\x00\x00\x00\x00\x03\xafe\x00\x04\x1e\xcd\x00\x04B[\x00\x04Z\x10\x00\x04\x87\x1b\x00\x04\xc9x\x00\x04\xfb@\x00\x058\xe0\x00\x05R\xf3\x00\x05\xa8H\x00\x06\x01h\x00\x06\x17\xb0\x00\x06\xcb\xd5\x00\x06\xf6\x80\x00\a*\xa5\x00\aZ\r\x00\ae\xe8\x00\a\u007f\xfb\x00\a\x9a\r\x00\a\xd5P\x00\b\tu\x00\b^\xcb\x00\bv}\x00\b\xb4 \x00\b\xe5\xe5\x00\t#\x88\x00\tUM\x00\t{;\x00\t\x92\xf0\x00\t\xf6}\x00\n\x02X\x00\n\x15M\x00\nZ\v\x00\ne\xe5\x00\nq\xc0\x00\n\xa5\xe5\x00\n\xaa\xa3\x00\n\xaf`\x00\n\xc9s\x00\n\xfb;\x00\vD\xb5\x00\vP\x90\x00\v\x8e0\x00\v\xda\v\x00\f/`\x00\fc\x85\x00\f\xb8\xdb\x00\r\x0e0\x00\rq\xbd\x00\r\x97\xab\x00\x0e\xb4\x1b\x00\x0f/]\x00\x0f\xaa\xa0\x00\x00\x00\x00\x00\x01K\xdb\x00\x05\xd2|\x00\a\x1cq\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\t8\xe0\x00\t\xb9\xd5\x00\n\x1cq\x00\n{C\x00\nΐ\x00\n\xd8\v\x00\v\x1cq\x00\v\xe3\x8d\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xd2|\x00\x00\xc7\x1c\x00\x00\xe3\x8f\x00\x018\xe0\x00\x01\x8e9\x00\x02\x00\x00\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x007\xb4\x00\x00dD\x00\x00oh\x00\x01\x16\x84\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfcP\x9b\xff\xfc\a \x00\x01\x16\x84\x00\x01\xbd\xa0\xff\xff\x90\x98\xff\xfe\xb1\xc8\x00\x00oh\xff\xfeB`\x00\x00\x00\x00\x00\x058\xe0\x00\x02\x9cp\x00\x01\xbd\xa0\x00\a\x1cq\x00\x0f\xaa\xa0\x00\x01\xbd\xa0",
	"/texfonts/cmss17.tfm":      "\x01J\x00\x12\x00\x00\x00\u007f\x006\x00\x10\x00\n\x00\x05\x00N\x00\b\x00\x00\x00\a\x05\xd6\xc6\x1f\x01\x14z\xe0\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\x17\xd0\x00\x000\xd0\x00\x00-\xd0\x00\x00\x1c\xd0\x00\x00#\xd0\x00\x00(\xd0\x00\x00*\xd0\x00\x00-\xd0\x00\x00*\xd0\x00\x00-\xd0\x00\x00*\xd0\x00\x00\x1a\xd0\x11\n\x16\xd0\x00\x00\x16\xd0\x00\x00/\xd0\x00\x00/\xd0\x00\x00\x010\x00\x00\x028\x00\x00\x14\xd0\x00\x00\x14\xd0\x00\x00\x14\x90\x00\x00\x14\xd0\x00\x00\x14\x80\x00\x00!\xd0\x00\x00\x0e\a\x00\x00\x12\xd0\x00\x00*0\x00\x00-0\x00\x00\x14U\x00\x001\xd0\x00\x004\xd0\x00\x00-\xe2\x00\x00\x010\x01\x00\a\xd0\x01\x17\x14\xd0\x00\x000\xd8\x00\x00\x14\xf3\x00\x000\xf3\x00\x00,\xd0\x00\x00\x04\xd0\x01\x12\f\xf9\x00\x00\f\xf9\x00\x00\x14\xf0\x00\x00-t\x00\x00\x04\x16\x00\x00\b0\x01\x15\x04\x10\x00\x00\x14\xf9\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x14\xb0\x00\x00\x040\x00\x00\x046\x00\x00\aH\x00\x00-!\x00\x00\x11H\x00\x00\x11\xd0\x01\x18#\xd0\x00\x00!\xd0\x01B\"\xd0\x00\x00\x1f\xd0\x00\x00)\xd0\x014\x1b\xd0\x00\x00\x19\xd0\x01##\xd0\x00\x00(\xd0\x00\x00\x03\xd0\x01M\x10\xd0\x00\x00'\xd0\x01)\x17\xd0\x01H2\xd0\x00\x00(\xd0\x00\x00+\xd0\x014\x1e\xd0\x01\x1d+\xd6\x00\x00 \xd0\x00\x00\x18\xd0\x00\x00$\xd0\x01-&\xd0\x00\x00!\xd0\x05#3\xd0\x05#!\xd0\x01)!\xd0\t.\x1d\xd0\x00\x00\x05\xf9\x00\x00\x14\xd0\x00\x00\x05\xf9\x00\x00\x14\xd0\x00\x00\x04\xc0\x00\x00\x04\xd0\x01\x11\x120\x01?\x15\xd0\x019\x0e0\x00\x00\x15\xd0\x00\x00\x0e0\x00\x00\x06\xd0\x11\x02\x148\x05L\x15\xd0\x00\x00\x01\xc0\x00\x00\x02\xc8\x00\x00\x13\xd0\x01\x19\x01\xd0\x00\x00.0\x00\x00\x150\x00\x00\x140\x019\x158\x019\x158\x00\x00\t0\x04\x00\v0\x00\x00\n`\x01@\x150\x01A\x0f0\x04\x00%0\x05\x19\x0f0\x00\x00\x0f8\x05\x1e\r0\x00\x00\x140\r\x1650\f\x00\x14\xd0\x00\x00\x14\xa0\x00\x00\x14\xc0\x00\x00\x00\x00\x00\x00\x00\x03\x8f\xee\x00\x03\xfa\xec\x00\x04$\x12\x00\x04-\xf3\x00\x04]\xb1\x00\x04\x98\xf2\x00\x04\xcb\xfa\x00\x05\x03\xf1\x00\x05\x1f\xed\x00\x05n\xf0\x00\x05ĉ\x00\x05\xd9\xee\x00\x06\x88j\x00\x06\xaf\xec\x00\x06\xe7\xe4\x00\a\x15\xfa\x00\a\x1a\xeb\x00\a6\xe7\x00\aR\xe2\x00\a\x85\xe9\x00\a\xbd\xe1\x00\b\f\xe4\x00\b#\xee\x00\b[\xe7\x00\b\x8e\xed\x00\b\xc6\xe6\x00\b\xf9\xec\x00\t(\x03\x00\t1\xe4\x00\t\x97\xf2\x00\t\x9c\xe3\x00\t\xb3\xed\x00\t\xfe\x00\x00\n\x02\xf1\x00\n\a\xe2\x00\n?\xd9\x00\n?\xda\x00\nM\x04\x00\nh\xff\x00\n\x9c\a\x00\n\xd8\xee\x00\n\xdd\xdf\x00\v\x15\xd6\x00\vd\xda\x00\v\xb3\xdd\x00\v\xeb\xd5\x00\f:\xd7\x00\f\x89\xda\x00\f\xef\xe8\x00\r\x1d\xff\x00\x0e+\xf4\x00\x0e\x9b\xe3\x00\x0f\v\xd3\x00\x00\x00\x00\x00\x01I8\x00\x05\xb0s\x00\x06\xe3K\x00\a\xff\xbc\x00\bq\xa6\x00\b\xdb\x1a\x00\t\x03\xcf\x00\t\x99\xce\x00\n\x0e(\x00\n{\x9a\x00\n~k\x00\n\x820\x00\v\x1cr\x00\v\xe3\xa0\x00\v\xfcP\x00\x00\x00\x00\xff\xfd\xb0\xb7\x00\x00\xc7.\x00\x00\xdf\xde\x00\x01\x04\x13\x00\x01\x8e[\x00\x02\x01\x95\x00\x02\xb9\x1f\x00\x03\x1c\xb5\x00\x03\xfc\x93\x00\x00\x00\x00\x00\x005\u007f\x00\x00`L\x00\x00j\xff\x00\x01\v}\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfcp\x12\xff\xfc&\x00\x00\x01\v}\x00\x01\xab\xfb\xff\xff\x95\x01\xff\xfe\xbf\x04\x00\x00j\xff\xff\xfeT\x05\x00\x00\x00\x00\x00\x05\x03\xf1\x00\x02\x81\xf8\x00\x01\xab\xfb\x00\x06\xe3K\x00\x0f\v\xd3\x00\x01\xab\xfb",
	"/texfonts/cmssbx10.tfm":    "\x01>\x00\x12\x00\x00\x00\u007f\x00,\x00\r\x00\v\x00\x05\x00N\x00\b\x00\x00\x00\a\xf1kAH\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMSSBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x17\xa0\x00\x00%\xa0\x00\x00\"\xa0\x00\x00\x1b\xa0\x00\x00\x1d\xa0\x00\x00 \xa0\x00\x00 \xa0\x00\x00\"\xa0\x00\x00 \xa0\x00\x00\"\xa0\x00\x00 \xa0\x00\x00\x1a\xa0\x11\n\x18\xa0\x00\x00\x18\xa0\x00\x00$\xa0\x00\x00$\xa0\x00\x00\x010\x00\x00\x029\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\x80\x00\x00\x13\xa0\x00\x00\x13\x90\x00\x00\x1d\xa0\x00\x00\r\a\x00\x00\x16\xa0\x00\x00 0\x00\x00\"0\x00\x00\x13T\x00\x00&\xa0\x00\x00*\xa0\x00\x00\"\xb2\x00\x00\x010\x01\x00\a\xa0\x01\x17\x14\xa0\x00\x00%\xa8\x00\x00\x13\xc3\x00\x00(\xc3\x00\x00!\xa0\x00\x00\x03\xa0\x01\x12\v\xca\x00\x00\v\xca\x00\x00\x13\xc0\x00\x00\"v\x00\x00\x03\x15\x00\x00\a0\x01\x15\x03\x10\x00\x00\x13\xca\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x030\x00\x00\x035\x00\x00\aI\x00\x00\"!\x00\x00\x10I\x00\x00\x10\xa0\x01\x18\x1d\xa0\x00\x00\x1d\xa0\x01B\x1d\xa0\x00\x00\x1c\xa0\x00\x00 \xa0\x014\x1a\xa0\x00\x00\x19\xa0\x01#\x1d\xa0\x00\x00 \xa0\x00\x00\x04\xa0\x01M\x10\xa0\x00\x00\x1f\xa0\x01)\x17\xa0\x01H'\xa0\x00\x00 \xa0\x00\x00 \xa0\x014\x1c\xa0\x01\x1d \xa5\x00\x00\x1c\xa0\x00\x00\x19\xa0\x00\x00\x1d\xa0\x01-\x1f\xa0\x00\x00\x1d\xa0\x05#)\xa0\x05#\x1d\xa0\x01)\x1d\xa0\t.\x1b\xa0\x00\x00\x06\xca\x00\x00\x14\xa0\x00\x00\x06\xca\x00\x00\x13\xa0\x00\x00\x03\xa0\x00\x00\x03\xa0\x01\x11\x110\x01?\x15\xa0\x019\r0\x00\x00\x15\xa0\x00\x00\x0f0\x00\x00\x05\xa0\x11\x02\x139\x05L\x15\xa0\x00\x00\x01\xa0\x00\x00\x02\xa9\x00\x00\x12\xa0\x01\x19\x01\xa0\x00\x00#0\x00\x00\x150\x00\x00\x130\x019\x159\x019\x159\x00\x00\b0\x04\x00\n0\x00\x00\t`\x01@\x150\x01A\x0e0\x04\x00\x1e0\x05\x19\x0e0\x00\x00\x0e9\x05\x1e\f0\x00\x00\x130\r\x16+0\f\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x13\xa0\x00\x00\x00\x00\x00\x00\x00\x04\x16\xc3\x00\x04\x93\xeb\x00\x04\xe3\x90\x00\x05I\xf6\x00\x05`\xb8\x00\x05}*\x00\x05\xdd\xe0\x00\x05\xf4\xa2\x00\x06wz\x00\x06\xbf(\x00\x06\xd80\x00\a\x9fM\x00\aҀ\x00\b\x00\x03\x00\b-\x86\x00\bO\xa8\x00\bfj\x00\b}+\x00\b\xcc\xd0\x00\b\xee\xf2\x00\b\xfaS\x00\t\vc\x00\tI\xf8\x00\t`\xba\x00\t\xc7 \x00\nDH\x00\n\xc1p\x00\v>\x98\x00\v\xbb\xc0\x00\v\xe9C\x00\f8\xe8\x00\f\xb6\x10\x00\rI\xfa\x00\r\xb0`\x00\r\xdd\xe3\x00\x0eDJ\x00\x0e\xaa\xb0\x00\x0f'\xd8\x00\x0f\xa5\x00\x00\x10wE\x00\x10\x9fP\x00\x11\x1cx\x00\x11\x99\xa0\x00\x00\x00\x00\x00\x02\x16\xc2\x00\x06\x80\x00\x00\aUU\x00\b\x00\x00\x00\b\xe3\x8e\x00\tm\xba\x00\t\xdd\xe0\x00\n*\xab\x00\n4U\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x80\x00\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xb0[\x00\x01\xdd\xe0\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00>\x95\x00\x00p\xa3\x00\x00}(\x00\x018\xe5\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfb\xe9=\xff\xfbO\xa3\x00\x018\xe5\x00\x01\xf4\xa0\xff\xff\x82\xd8\xff\xfe\x88\x88\x00\x00}(\xff\xfe\v`\x00\x00\x00\x00\x00\x05\xdd\xe0\x00\x02\xee\xf0\x00\x01\xf4\xa0\x00\aUU\x00\x11\x99\xa0\x00\x01\xf4\xa0",
	"/texfonts/cmti12.tfm":      "\x01s\x00\x12\x00\x00\x00\u007f\x00)\x00\x10\x00\n\x00;\x00M\x00\t\x00\x00\x00\a\x9b\xbb\x88@\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x12\xc0\xac\x00 \xc0\x00\x00\x1c\xc0T\x00\x16\xc0\x00\x00\x14\xc0\xc8\x00\x1a\xc0\xcc\x00\x18\xc0\xa0\x00\x1c\xc0\x88\x00\x18\xc0\x1c\x00\x1c\xc0\x88\x00\x18\xc0l\x00\x11\xd8\xe9\b\x0f\xd8t\x00\x10\xd8t\x00\"\xd8t\x00$\xd8t\x00\x0208\x00\x038\f\x00\v\xd0\x00\x00\v\xd0`\x00\v\x90@\x00\vЄ\x00\vpp\x00!\xd0\x00\x00\t\x06\x00\x00\r\xd8|\x00\x1804\x00\x1804\x00\vUP\x00#\xc0\xa0\x00&\xc0\xa0\x00\x1c\xe2T\x00\x010\x01\x0f\x02Х\x17\v\xd0(\x00 \xd7$\x00\x1e\xd0\x00\x00 \xf4\xb8\x00\x1c\xd0`\x00\x02Х\x12\x06\xf9\xd4\x00\x06\xf9\b\x00\v\xf0\xc4\x00\x1cc\b\x00\x02\x18\x00\x00\x040\x05\x15\x02\x10\x00\x00\v\xf9\xd4\x00\v\xa0\xb4\x00\v\xa0\xb4\x00\v\xa0\xb4\x00\v\xa0\xb4\x00\v\xa8\xb4\x00\v\xa0\xb4\x00\v\xa0\xb4\x00\v\xa8\xb4\x00\v\xa0\xb4\x00\v\xa0\xb4\x00\x020\x14\x00\x028\x14\x00\x02H0\x00\x1c!$\x00\vH\x00\x00\vЩ\x18\x1c\xd0\\\x00\x1a\xc0\x010\x17\xc0l\x00\x18\xc0\xc0\x00\x1b\xc0U+\x15\xc0\xa0\x00\x13\xc0\xad\x1a\x1f\xc0H\x00\x1a\xc0\xcc\x00\x05\xc0\xd0\x00\f\xc0\xb0\x00\x1d\xc0\xc1 \x12\xc0\x01A%\xc0\xcc\x00\x1a\xc0\xcc\x00\x1c\xc0U+\x15\xc0m*\x1c\xc8T\x00\x19\xc0\x110\x0e\xc0\x98\x00\x18\xc0\xad$\x1a\xc0\xcc\x00\x1a\xc0\xdd\x1a'\xc0\xdd*\x1a\xc0\xd1 \x1a\xc0\xe5%\x11\xc0\xc0\x00\x02\xf9\xe0\x00\v\xd0\xd8\x00\x02\xf9x\x00\v\xd0,\x00\x02\xb0\x8c\x00\x02Х\x11\v08\x00\t\xd0!E\t0\x19E\v\xd0u\x19\t05E\x02\xd8\xe9\x00\t8D\x00\v\xd08\x00\x02\xa0d\x00\x02\xa8\xbc\x00\tЀ\x00\x01\xd0u\x19 08\x00\x0e09L\v0!E\v8!E\t8D\x00\b0\x81E\a0<\x00\x03\x80X\x00\r08\x00\t0\x80\x00\x140\x81\x19\t0\x94\x00\n8D\x00\x060\x9c\x00\v0M\x16(0L\x00\vШ\x00\v\xb0\x90\x00\v\xb0h\x00\x00\x00\x00\x00\x00\x04\x00\x03\x00\x04\xcc\xd0\x00\x0537\x00\x05\x99\x9d\x00\x06\a\x9b\x00\x06fk\x00\x06fl\x00\x06\x99\x9f\x00\a38\x00\a\x99\x9f\x00\b\x00\x05\x00\b7\x04\x00\bfl\x00\b\xcc\xd3\x00\b\xcc\xd4\x00\t3;\x00\t\x99\xa0\x00\tП\x00\n7\x05\x00\nfm\x00\n\x9dl\x00\n\xd4k\x00\v\x03\xd3\x00\v3;\x00\vj9\x00\v\xa18\x00\vР\x00\f\x00\b\x00\f\a\x9f\x00\f\x15\\\x00\f\x1b\x88\x00\f\xcc\xd5\x00\r\t\x84\x00\r\xcc\xd8\x00\rС\x00\x0e\x00\v\x00\x0e\a\xa0\x00\x0fj<\x00\x0f\xa1;\x00\x10\x00\v\x00\x00\x00\x00\x00\x01\x8e9\x00\x05\xc6A\x00\x06\xe3\x8f\x00\b\x00\x00\x00\bq\xc8\x00\b\xcc\xd0\x00\t\x05\xb0\x00\t\xd7_\x00\n\x0e9\x00\n_\\\x00\n\x9e|\x00\n\xee\xef\x00\v\x1cq\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xc6A\x00\x00\xc7\x1c\x00\x00\xcc\xd0\x00\x00\xe3\x8f\x00\x01\x8e9\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00v\f\x00\x00\x99\x99\x00\x00\x9a\x8c\x00\x00\xa6e\x00\x00\xe6g\x00\x00\xec\x17\x00\x00\xf7x\x00\x00\xfa\xc8\x00\x01\v)\x00\x01\r\xa5\x00\x01\x12|\x00\x01-\x83\x00\x012@\x00\x012A\x00\x01R}\x00\x01V\v\x00\x01gY\x00\x01m\b\x00\x01v\xe3\x00\x01w\xf1\x00\x01\x83i\x00\x01\x85\xb0\x00\x01\x8b`\x00\x01\x93\xe8\x00\x01\x99\xdf\x00\x01\xa1\xed\x00\x01\xa6g\x00\x01\xa7\xd1\x00\x01\xa8\xc4\x00\x01\xb1}\x00\x01\xb31\x00\x01\xb8\xe4\x00\x01\xbc4\x00\x01\xc9d\x00\x01\xd5!\x00\x01\xda\xd1\x00\x01\xec\x18\x00\x01\xee\xef\x00\x01\xf1\xc8\x00\x01\xf2\xb9\x00\x01\xf4\x9f\x00\x01\xfaO\x00\x02%\xec\x00\x02*\xa9\x00\x02-\x83\x00\x0233\x00\x02J;\x00\x02UU\x00\x02fe\x00\x02t\r\x00\x02\x84\xbc\x00\x02\x88\x88\x00\x02\x99\x99\x00\x02\xb2\xa1\x00\x02\xee\xf0\x00\x03\x00\x00\x00\x03\x17\xe5\x00\x03`\xb7\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01\xa7\xd4\xff\xfb\xff\xfd\xff\xfa\xfc1\x00\x01\x99\x9b\x00\x00\xcc\xcd\xff\xfe\xcc\xcc\xff\xfefe\xff\xff\x99\x99\xff\xff33\x00\x04\x00\x00\x00\x05\x99\x9d\x00\x02fh\x00\x01\x99\x9b\x00\x06\xe3\x8f\x00\x10\x00\v\x00\x01\x99\x9b",
	"/texfonts/cmtt10.tfm":      "\x00\xc0\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\f\x00\x01\x00\x02\x00\x00\x00\x00\x00\a\xdf\xea<x\x00\xa0\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01;\x00\x00\x01;\x00\x00\x01P\x00\x00\x01[\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x00\x00\x01\n\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x88\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xe4\x00\x00\x01(\x00\x00\x01\xd0\x01\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01`\x00\x00\x01r\x00\x00\x01\x19\x00\x00\x01r\x00\x00\x01\x10\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01Y\x00\x00\x01\xa3\x00\x00\x01A\x00\x00\x01\xa3\x00\x00\x01\xd0\x01\x01\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd9\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\a\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01[\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xdb\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01[\x00\x00\x01[\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x90\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01[\x00\x00\x01P\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x82\xd8\x00\x068\xe3\x00\x06\xa6e\x00\x06\xe3\x8e\x00\bUV\x00\b}&\x00\b\xaa\xab\x00\b\xdbr\x00\b\xe3\x8e\x00\t\f\x83\x00\t\x0e:\x00\t\xc7\x1d\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\xff\xfe\xb6\n\xff\xff\x1cr\x00\x00\xe3\x8e\x00\x01US\x00\x01UU\x00\x01\x85\xad\x00\x01\xc7\x1d\x00\x028\xe3\x00\x03\x1cs\x00\x03\x8e:\x00\x00\x00\x00\x80`\x00\x0e\x80`\x00\x0f\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\bfb",
	"/texfonts/cmsy10.tfm":      "\x01\x19\x00\x12\x00\x00\x00\u007f\x00,\x00\x0f\x00\x10\x00\x12\x00\a\x00\a\x00\x00\x00\x16!\",\x9a\x00\xa0\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea \xa8\x00\x00\x03B\x00\x00 \xa8\x00\x00\bd\x00\x00 \xa8\x00\x00\bB\x00\x00 \xa8\x00\x00 \xa8\x00\x00 \xa8\x00\x00 \xa8\x00\x00 \xa8\x00\x00 \xa8\x00\x00 \xa8\x00\x00*\xdd\x00\x00\bB\x00\x00\bB\x00\x00 S\x00\x00 S\x00\x00 \xbb\x00\x00 \xbb\x00\x00 \xbb\x00\x00 \xbb\x00\x00 \xbb\x00\x00 \xbb\x00\x00 !\x00\x00 u\x00\x00 \x86\x00\x00 \x86\x00\x00*\x86\x00\x00*\x86\x00\x00 \x86\x00\x00 \x86\x00\x00*!\x00\x00*!\x00\x00\b\xdc\x00\x00\b\xdc\x00\x00*!\x00\x00*\xdc\x00\x00*\xdc\x00\x00 S\x00\x00*!\x00\x00*!\x00\x00\x10\xdc\x00\x00\x10\xdc\x00\x00*!\x00\x00*\xdc\x00\x00*\xdc\x00\x00 0\x00\x00\x02\x90\x00\x00*0\x00\x00\x14\x86\x00\x00\x14\x86\x00\x00(\xdd\x00\x00(\xdd\x00\x00\x01\xdc\x00\x00\x01!\x00\x00\r\xd0\x00\x00\r\xd0\x00\x00\x140\x00\x00\b\xe7\x00\x00\x1b\xd0\x00\x00\x1b\xd0\x00\x00 \xd0\x00\x00 \xd0\x00\x00\x10\xd0\x00\x00\"\xc0\x01\x06\x13\xc0\x11\x04\t\xc0\x15\x04\x1f\xc0\r\x02\n\xc0-\x03\x1a\xc01\x03\x0e\xc9\x19\x03&\xc0\x05\x03\v\xc0\x1d\x00\x16\xc9A\x05\x1e\xc0\t\x01\x17\xc0\x01\x04+\xc0\x01\x04$\xc0=\x02!\xc0\r\x03\x18\xc0)\x02#\xc9\x01\x03'\xc0\x01\x02\x0f\xc0!\x04\f\xc0E\x00\x12\xc01\x02\x11\xc0)\x00)\xc0)\x02\x19\xc09\x04\x15\xc9)\x02\x1c\xc0%\x04\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x14\x90\x00\x00\x10\xd0\x00\x00\x10\xd0\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\b\xee\x00\x00\b\xee\x00\x00\x04\xee\x00\x00\x04\xee\x00\x00\x03\xee\x00\x00\b\xee\x00\x00\b\xee\x00\x00\x10\xee\x00\x00\b\xee\x00\x00\x03\xdc\x00\x00%\x1f\x00\x00\x1d\xc0\x00\x00%\xc0\x00\x00\x05\xdd4\x00\x14\x90\x00\x00\x14\x90\x00\x00 \xbb\x00\x00 \xbb\x00\x00\a\xdd\x00\x00\x06\xdd\x00\x00\x06\xdd\x00\x00\x10\xdd\x00\x00 \xda\x00\x00 \xda\x00\x00 \xda\x00\x00 \xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04ff\x00\x04q\xc8\x00\x068\xe5\x00\x06\xaa\xad\x00\a\x1cs\x00\a\x1cu\x00\b\x00\x02\x00\bl\xaa\x00\bq\xcb\x00\b\xb6V\x00\b\xb6\xdd\x00\b\xe3\x90\x00\t\x84\x92\x00\t\xb0^\x00\t\xc7\x1e\x00\t\xcd\xf5\x00\n\x03h\x00\n\x82K\x00\n\xaa\xad\x00\n\xb1\x82\x00\n\xd80\x00\v\t\x1d\x00\v!\x03\x00\vi\xaa\x00\v\u007f\xfe\x00\v\x8e;\x00\v\x98z\x00\f\x00\x02\x00\f0\xf3\x00\fW\xa0\x00\fq\xca\x00\f\xbc\xe2\x00\fƊ\x00\r\x11\x15\x00\r \xbb\x00\rUX\x00\r\x83%\x00\r\x8f`\x00\x0e8\xe6\x00\x0f\xcd\xf6\x00\x10\x00\x03\x00\x136\xe3\x00\x00\x00\x00\x00\x00\xa3\xd6\x00\x05\u07b8\x00\x06\xe3\x8e\x00\a\x1cs\x00\ak\x83\x00\aq\xc8\x00\a\xba\xde\x00\b\xa0%\x00\b\xe3\x90\x00\tUV\x00\n,\xf0\x00\n\xee\xee\x00\v\x1cr\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\xff\xff\x1cs\xff\xffk\x83\xff\xffq\xc8\xff\xff\xba\xde\x00\x00\xa0%\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\x12\xf6\x00\x02,\xf0\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x0f\\*\x00\x00\x00\x00\x00\x00'\x8b\x00\x00;+\x00\x00q\xc8\x00\x00|\x92\x00\x00\xee\xf2\x00\x00\xf2\xe8\x00\x01.`\x00\x013.\x00\x01Ef\x00\x01P\xc8\x00\x01nZ\x00\x01\x96\xc2\x00\x01\xc7\x1d\x00\x02W\xc5\x00\x02[\x96\x00\x02\xf4\x9e\x00\x04\x11\x12\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00q\xc8\x00\x00\xe3\x90\x00\x01UX\x00\x01\xc7 \x00\x028\xe8\x00\x02\xaa\xb0\x00\x03\x1cx\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\x00\x03\x00\x00\x00\x00\x00\n\xd2\xfa\x00\x06L\xba\x00\a\x19\x86\x00\n\xf9\xa8\x00\x05\x84x\x00\x06\x9b5\x00\x05\xceh\x00\x04\x9fJ\x00\x02ff\x00\x03\xf4\x9a\x00\x06-\x80\x00\x00\xcc\xcd\x00&=p\x00\x10(\xf6\x00\x04\x00\x00",
	"/texfonts/oneone.tfm":      "\x00\xb0\x00\x12\x00\x00\x00z\x00\x05\x00\x03\x00\f\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\xb1d\x94l\x00\x1e\xd6\x00\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\aBLACKCX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfa\x04 \x00\x00\x01\x10\x00\x00\x01\x11\x00\x00\x01\x11\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x02y\x02\x1b\x02z\x03\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\b\x00\x00\x00\x17\xff\xd6\x00\x00\x00\x00\x00\x02\x00\x00\x00\x17\xff\xd6\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\b\x00\x00\x00\n\x00\x00\x00\f\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00",
	"/texfonts/cmbx12.tfm":      "\x01K\x00\x12\x00\x00\x00\u007f\x00,\x00\x0f\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a\xc2\xd6N\xa0\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x13\xb0\x00\x00&\xb0\x00\x00\"\xb0\x00\x00\x1a\xb0\x00\x00\x17\xb0\x00\x00#\xb0\x00\x00\x1c\xb0\x00\x00\"\xb0\x00\x00\x1c\xb0\x00\x00\"\xb0\x00\x00\x1c\xb0\x00\x00\x12\xc0\x11\n\x11\xc0\x00\x00\x11\xc0\x00\x00&\xc0\x00\x00&\xc0\x00\x00\x010\x00\x00\x038\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\r\x80\x00\x00\r\xc0\x00\x00\r`\x00\x00\x1f\xc0\x00\x00\t\x06\x00\x00\x0e\xc0\x00\x00\x1c0\x00\x00\"0\x00\x00\rT\x00\x00'\xb0\x00\x00*\xb0\x00\x00\"\xd2\x00\x00\x010\x01\x00\x02\xc0\x01\x17\x0f\xc0\x00\x00&\xc7\x00\x00\r\xe3\x00\x00&\xe3\x00\x00\"\xc0\x00\x00\x01\xc0\x01\x12\x06\xe9\x00\x00\x06\xe9\x00\x00\r\xe0\x00\x00\"u\x00\x00\x01\x18\x00\x00\x040\x01\x15\x01\x10\x00\x00\r\xe9\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x02H\x00\x00\"!\x00\x00\vH\x00\x00\v\xc0\x01\x18\"\xc0\x00\x00\x1f\xb0\x01L\x1b\xb0\x00\x00\x1c\xb0\x00\x00 \xb0\x015\x16\xb0\x00\x00\x15\xb0\x01$%\xb0\x00\x00#\xb0\x00\x00\x05\xb0\x01W\x0f\xb0\x00\x00$\xb0\x01*\x13\xb0\x01R(\xb0\x00\x00#\xb0\x00\x00\x1e\xb0\x015\x18\xb0\x01\x1e\x1e\xb8\x00\x00\x1d\xb0\x01L\x11\xb0\x00\x00\x19\xb0\x01.!\xb0\x00\x00\x1f\xb0\x05$+\xb0\x05$\x1f\xb0\x01*\x1f\xb0\t/\x14\xb0\x00\x00\x01\xe9\x00\x00\x0f\xc0\x00\x00\x01\xe9\x00\x00\r\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\f0\x01H\x11\xc0\x01B\t0\x01@\x11\xc0\x00\x00\n0\x00\x00\x03\xc0\x11\x02\r8\x05V\x11\xc0\x01:\x01\xc0\x00\x00\x03\xc8\x00\x00\x10\xc0\x01\x19\x01\xc0\x00\x00&0\x01:\x110\x01:\r0\x01B\x118\x01B\x108\x00\x00\b0\x00\x00\a0\x00\x00\x06\x90\x01J\x110\x01K\x100\x05\x19\x1c0\x05\x1a\x100\x00\x00\x108\x05\x1f\t0\x00\x00\r0\r\x16)0\f\x00\r\xc0\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x05{C\x00\x05\x80\x00\x00\x06\x00\x00\x00\x06\xb4'\x00\a\x00\x00\x00\a\x19\x9b\x00\aZ\x14\x00\b\x00\x00\x00\b6\x85\x00\b\x80\x00\x00\b\xc0\x00\x00\t\x00\x00\x00\t/i\x00\tK\xdb\x00\t\x80\x00\x00\n\x00\x00\x00\n\x80\x00\x00\nИ\x00\v\x00\x00\x00\vP\x98\x00\vИ\x00\f\x00\x00\x00\fK\xdb\x00\f\x84\xbd\x00\f\x97\xb5\x00\f\xcb\xdb\x00\r\x00\x00\x00\rm\v\x00\r\x84\xbd\x00\r\x97\xb5\x00\r\xcb\xdb\x00\r\xd5W\x00\x0e\x00\x00\x00\x0e\x12\xf8\x00\x0e\x17\xb5\x00\x0e%\xed\x00\x0f\x00\x00\x00\x10K\xdb\x00\x11\x12\xf8\x00\x12\x00\x00\x00\x12K\xdb\x00\x12\x97\xb5\x00\x00\x00\x00\x00\x02K\xdb\x00\x06.\xa7\x00\a\x1cq\x00\b\x00\x00\x00\b\xaa\xab\x00\t{\xa1\x00\n\x00\x00\x00\n\x1cq\x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x1cq\x00\v\xc1l\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe.\xa7\x00\x00\xc7\x1c\x00\x00\xe3\x8f\x00\x01\x8e9\x00\x02\x00\x00\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00s3\x00\x00\x80\x00\x00\x01\xa3\x8f\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\x00\x00\xff\xfa%\xec\x00\x01\xa3\x8f\x00\x02\x00\x00\xff\xff\x00\x00\xff\xff\x80\x00\xff\xfe\x80\x00\xff\xfe\x00\x00\x00\x00\x80\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\a\x1cq\x00\x12\x00\x00\x00\x02\x00\x00",
	"/texfonts/cmex9.tfm":       "\x00\xf9\x00\x12\x00\x00\x00\u007f\x00!\x00\x06\x00\x0e\x00\x03\x00\x00\x00\x00\x00\x1c\x00\rz\xc0\xd3i\x00\x90\x00\x00\x12TeX math extension\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMEX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x04\x17\x02\x10\x04\x17\x02\x11\x02\x17\x02h\x02\x17\x02i\x05\x17\x02j\x05\x17\x02k\x05\x17\x02l\x05\x17\x02m\v\x17\x02n\v\x17\x02o\x06\x17\x02D\x06\x17\x02E\x01\x03\x03\x00\b\x03\x03\x01\t\x17\x02.\t\x17\x02/\f\x19\x02\x12\f\x19\x02\x13\x10\x1c\x02 \x10\x1c\x02!\a\x1c\x02\"\a\x1c\x02#\n\x1c\x02$\n\x1c\x02%\n\x1c\x02&\n\x1c\x02'\x11\x1c\x02(\x11\x1c\x02)\x11\x1c\x02*\x11\x1c\x02+\x1b\x1c\x02,\x1b\x1c\x02-\x13\x1d\x020\x13\x1d\x021\n\x1d\x022\n\x1d\x023\x0e\x1d\x024\x0e\x1d\x025\x0e\x1d\x026\x0e\x1d\x027\x14\x1d\x028\x14\x1d\x029\x14\x1d\x00\x00\x14\x1d\x00\x00\x1e\x1d\x00\x00\x1e\x1d\x00\x00\x15\x19\x02\x1e\x15\x19\x02\x1f\x17\x19\x03\x02\x17\x19\x03\x03\x0f\x19\x03\x04\x0f\x19\x03\x05\x0f\x19\x03\x06\x0f\x19\x03\a\x0f\x03\x03\b\x0f\x03\x03\t\x18\x04\x03\n\x18\x04\x03\v\x18\x04\x03\f\x18\x04\x03\r\x18\n\x03\x0e\x18\n\x03\x0f\x18\x01\x03\x10\x0f\x03\x03\x11\x17\x19\x03\x12\x17\x19\x03\x13\x17\x03\x03\x14\x17\x03\x03\x15\r\x19\x02\x1c\r\x19\x02\x1d\x16\x05\x02G\x1d(\x00\x00\x05\x06\x06I\b\v\b\x00\x1d\x05\x02K (\x00\x00\x1d\x05\x02M (\x00\x00\x1d\x05\x02O (\x00\x00\x1c\x05\x02X\x19\x05\x02Y\x05\x06\x06Z\x16\x05\x02[\x16\x05\x02\\\x16\x05\x02]\x16\x05\x02^\x16\x05\x02_\x1f(\x00\x00\x1e(\x00\x00\b\v\b\x00\x1d(\x00\x00\x1d(\x00\x00\x1d(\x00\x00\x1d(\x00\x00\x1d(\x00\x00\x19\x05\x02a\x1e(\x00\x00\b@\x02c\x1aP\x02d\x1fP\x00\x00\b@\x02f\x1aP\x02g\x1fP\x00\x00\x05\x19\x02\x14\x05\x19\x02\x15\a\x19\x02\x16\a\x19\x02\x17\a\x19\x02\x18\a\x19\x02\x19\x0f\x19\x02\x1a\x0f\x19\x02\x1b\x1a\x17\x02q\x1a\x19\x02r\x1a\x1c\x02s\x1a\x1d\x02t\x1c\n\x03\x16\x1c\x03\x00\x00\x1c\x12\x00\x00\x12\x03\x03\x17\x0f\x03\x03\x18\x0f\x03\x03\x19\x030\x00\x00\x030\x00\x00\x030\x00\x00\x030\x00\x00\x12\x03\x03\x1a\x12\x03\x03\x1b\x00\x00\x00\x00\x00\x05{@\x00\x06\xda\x10\x00\a39\x00\a\x89w\x00\a\xc3\xf0\x00\a\xc3\xf2\x00\b\xad\xd0\x00\t\"\xc0\x00\t\x80L\x00\t\x97\xb0\x00\t\x97\xb2\x00\t\xd2'\x00\n\f\xa0\x00\n\x81\x90\x00\n\xf6\x80\x00\f\x1a\xd7\x00\fUR\x00\f\xca@\x00\r\x04\xb7\x00\r?0\x00\rV\x94\x00\r\xb4 \x00\x0ec\x87\x00\x0e\x9e\x00\x00\x0f\x87\xe0\x00\x10q\xc0\x00\x11,\xdb\x00\x11[\xa0\x00\x12E\x80\x00\x15\x03 \x00\x17\xc0\xc0\x00\x18\xd9e\x00\x00\x00\x00\x00\x00\xac\xf2\x00\x01\x99\x9b\x00\x02\x06\xd5\x00\v\x8e9\x00\f\x00\x00\x00\x00\x00\x00\x00\x04\xcc\xd0\x00\b\xec\xae\x00\t\x99\xa0\x00\x0efp\x00\x10\x00\x0e\x00\x11\xc7)\x00\x12\x86N\x00\x18\x00\f\x00\x1c\x1f\xee\x00\x1c\xcc\xe0\x00#\x8eR\x00%\xb9\x8e\x00/S.\x00\x00\x00\x00\x00\x032\x90\x00\aO\x00\x00\x00\x00\f\x00\x00\x00\r0\x00@B1\x00AC2\x00463\x0057\x00\x0046\x00\x00572\x00\x0063\x00\x0078<:>9=;>8\x00:>9\x00;>\x00\x00\x00?\x00\x00\x00w\x00\x00\x00>x\x00y?8\x00;>9\x00:>\x00\x00\x00B\x00\x00\x00Cv\x00tu~\x00\u007fwx\x00\x00?\x00\x00y?~\x00\x00w\x00\x00\u007fw\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10q\xc0\x00\x00\x00\x00\x00\x00\xac\xf2\x00\x01\xc7\x1c\x00\x02\xaa\xab\x00\x0334\x00\t\xad\xd4\x00\x01\xc7\x1c",
	"/texfonts/cmr12.tfm":       "\x01B\x00\x12\x00\x00\x00\u007f\x00\"\x00\x10\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\aX\xabQ\v\x00\xc0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe6\x0f\xc0\x00\x00\x1c\xc0\x00\x00\x1a\xc0\x00\x00\x13\xc0\x00\x00\x11\xc0\x00\x00\x17\xc0\x00\x00\x15\xc0\x00\x00\x1a\xc0\x00\x00\x15\xc0\x00\x00\x1a\xc0\x00\x00\x15\xc0\x00\x00\r\xd0\x11\n\f\xd0\x00\x00\f\xd0\x00\x00\x1c\xd0\x00\x00\x1c\xd0\x00\x00\x010\x00\x00\x028\x00\x00\t\xd0\x00\x00\t\xd0\x00\x00\t\x90\x00\x00\t\xd0\x00\x00\t`\x00\x00\x17\xd0\x00\x00\a\x06\x00\x00\t\xd0\x00\x00\x150\x00\x00\x1a0\x00\x00\tU\x00\x00\x1d\xc0\x00\x00 \xc0\x00\x00\x1a\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\t\xd0\x00\x00\x1c\xd7\x00\x00\t\xf3\x00\x00\x1c\xf3\x00\x00\x1a\xd0\x00\x00\x01\xd0\x01\x12\x05\xf9\x00\x00\x05\xf9\x00\x00\t\xf0\x00\x00\x1at\x00\x00\x01\x18\x00\x00\x030\x01\x15\x01\x10\x00\x00\t\xf9\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\t\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x01H\x00\x00\x1a!\x00\x00\bH\x00\x00\b\xd0\x01\x18\x1a\xd0\x00\x00\x17\xc0\x01L\x14\xc0\x00\x00\x15\xc0\x00\x00\x18\xc0\x015\x12\xc0\x00\x00\x10\xc0\x01$\x1b\xc0\x00\x00\x17\xc0\x00\x00\x04\xc0\x01W\n\xc0\x00\x00\x19\xc0\x01*\x0f\xc0\x01R\x1e\xc0\x00\x00\x17\xc0\x00\x00\x1a\xc0\x015\x12\xc0\x01\x1e\x1a\xc8\x00\x00\x16\xc0\x01L\f\xc0\x00\x00\x15\xc0\x01.\x17\xc0\x00\x00\x17\xc0\x05$!\xc0\x05$\x17\xc0\x01*\x17\xc0\t/\x0e\xc0\x00\x00\x01\xf9\x00\x00\t\xd0\x00\x00\x01\xf9\x00\x00\t\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\t0\x01H\f\xd0\x01B\a0\x01@\f\xd0\x00\x00\a0\x00\x00\x02\xd0\x11\x02\t8\x05V\f\xd0\x01:\x01\xb0\x00\x00\x02\xb8\x00\x00\v\xd0\x01\x19\x01\xd0\x00\x00\x1c0\x01:\f0\x01:\t0\x01B\f8\x01B\v8\x00\x00\x050\x00\x00\x060\x00\x00\x05\x80\x01J\f0\x01K\v0\x05\x19\x150\x05\x1a\v0\x00\x00\v8\x05\x1f\a0\x00\x00\t0\r\x16\x1f0\f\x00\t\xd0\x00\x00\t\xb0\x00\x00\t\xb0\x00\x00\x00\x00\x00\x00\x00\x04Z\x10\x00\x04\xc9x\x00\x058\xe0\x00\x05\xa6\xdd\x00\x06\x17\xb0\x00\x06-\xf8\x00\x06\xf6\x80\x00\ae\xe8\x00\a\xd5P\x00\b\fO\x00\bD\xb8\x00\b\xb4 \x00\t#\x88\x00\t\x92\xf0\x00\t\xc9\xef\x00\n9W\x00\nq\xc0\x00\n\xa8\xbf\x00\n߽\x00\v\x18'\x00\vP\x90\x00\v\x87\x8f\x00\v\xbe\x8d\x00\v\xf6\xf7\x00\f-\xf5\x00\f/`\x00\fJ\xe0\x00\r\x0e0\x00\x0e#\xff\x00\x0eZ\xfd\x00\x0f\xaa\xa0\x00\x0f\xe1\x9f\x00\x10\x18\x9d\x00\x00\x00\x00\x00\x01\x8e9\x00\x05\xc6A\x00\x06\xe3\x8f\x00\b\x00\x00\x00\bq\xc8\x00\t\ty\x00\t8\xe0\x00\t\xd7_\x00\n\x0e9\x00\nO\xa5\x00\n\x9e|\x00\n\xee\xef\x00\v\x1cq\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xc6A\x00\x00\xc7\x1c\x00\x00\xe3\x8f\x00\x018\xe0\x00\x01\x8e9\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cq\x00\x04\x00\x00\x00\x00\x00\x00\x00\x007\xb4\x00\x00dD\x00\x00oh\x00\x01\x1d\xa1\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfb\xa5\xf0\xff\xfa\xff\x89\x00\x01\x1d\xa1\x00\x01\xbd\xa0\xff\xff!0\xff\xff\x90\x98\xff\xfe\xb1\xc8\xff\xfeB`\x00\x00oh\x00\x00\xde\xd0\x00\x00\x00\x00\x00\x058\xe0\x00\x02\x9cp\x00\x01\xbd\xa0\x00\x06\xe3\x8f\x00\x0f\xaa\xa0\x00\x01\xbd\xa0",
	"/texfonts/cmsl8.tfm":       "\x01x\x00\x12\x00\x00\x00\u007f\x00$\x00\x10\x00\n\x009\x00X\x00\n\x00\x00\x00\a\xa18)\xcf\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x10\xc0\x9c\x00\x1e\xc0\x00\x00\x1b\xc0\\\x00\x14\xc0\x00\x00\x12\xc0\xc0\x00\x18\xc0\xc8\x00\x16\xc0|\x00\x1b\xc0\x90\x00\x16\xc00\x00\x1b\xc0\x90\x00\x16\xc0\x80\x00\x0e\xd0\xe1\n\r\xd0H\x00\r\xd0H\x00\x1e\xd0H\x00\x1e\xd0H\x00\x010\x00\x00\x028\x00\x00\n\xd0\x00\x00\n\xd0,\x00\n\x90\x14\x00\n\xd0P\x00\n`d\x00\x1d\xd0\x00\x00\b\x06\x00\x00\nЈ\x00\x160\x84\x00\x1b0\x84\x00\nT\x00\x00\x1f\xc0|\x00\"\xc0|\x00\x1b\xe2\\\x00\x010\x01\x00\x01\xd0q\x17\n\xd0\x00\x00\x1e\xd7@\x00\n\xf3\xac\x00\x1e\xf3\x94\x00\x1b\xd0T\x00\x01\xd0q\x12\x05\xf9\xc4\x00\x05\xf9\x10\x00\n\xf0\xb0\x00\x1bu\x10\x00\x01\x18\x00\x00\x030\t\x15\x01\x10\x00\x00\n\xf9\xc4\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\n\xa0\xac\x00\x010\f\x00\x018\f\x00\x01H \x00\x1b!@\x00\tH\x00\x00\tн\x18\x1b\xd0h\x00\x18\xc0\x01L\x15\xc0\x80\x00\x16\xc0\xb4\x00\x19\xc0]5\x13\xc0|\x00\x11\xc0\x9d$\x1c\xc0\x18\x00\x18\xc0\xc8\x00\x04\xc0\xcdW\v\xc0\xa4\x00\x1a\xc0\xb5*\x10\xc0\x01R \xc0\xc8\x00\x18\xc0\xc8\x00\x1b\xc0]5\x13\xc0\x81\x1e\x1b\xc8\\\x00\x17\xc0\x01L\r\xc0x\x00\x16\xc0\x9d.\x18\xc0\xc8\x00\x18\xc0\xd9$#\xc0\xd9$\x18\xc0\xcd*\x18\xc0\xdd/\x0f\xc0\xb4\x00\x01\xf9\xd4\x00\n\xd0\xd0\x00\x01\xf94\x00\n\xd0\x04\x00\x01\xb0X\x00\x01\xd0q\x11\n0\x01H\r\xd0%B\b0\x8d@\r\xd0H\x00\b0\x84\x00\x02\xd0\xe1\x02\n8\xb9V\r\xd0\x01:\x01\xb0X\x00\x02\xb8<\x00\fЍ\x19\x01\xd0H\x00\x1e0\x01:\r0\x01:\n0aB\r89B\f8(\x00\x060\xa0\x00\a0L\x00\x05\x80\x1dJ\r0\x01K\f0\xb9\x19\x160\xb9\x1a\f0\x98\x00\f8\xb9\x1f\b0t\x00\n0\xa9\x16!0\xa8\x00\nЈ\x00\n\xb0l\x00\n\xb0D\x00\x00\x00\x00\x00\x00\x04\xb8\xe8\x00\x051\xcc\x00\x05\xaa\xb0\x00\x06\x1fP\x00\x06\x9cx\x00\x06\xa0\x06\x00\x06\xb4\xa6\x00\a\x8e@\x00\b\a$\x00\b\x80\b\x00\b\xbaX\x00\b\xf8\xec\x00\tq\xd0\x00\t\xea\xb4\x00\nc\x98\x00\n\x9d\xe8\x00\v\x16\xcc\x00\vU`\x00\v\x8f\xb0\x00\v\xca\x00\x00\f\b\x94\x00\fG(\x00\f\x81x\x00\f\xbb\xc8\x00\f\xfa\\\x00\r4\xac\x00\r8\xf0\x00\rV\x18\x00\r\xab\xfc\x00\x0e*\xb8\x00\x0fV\xd0\x00\x0f\x91 \x00\x11\x00\x10\x00\x11:`\x00\x11t\xb0\x00\x00\x00\x00\x00\x01\xc7\x1c\x00\x06\f<\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t-\x82\x00\t\xaa\xb0\x00\t\xd7^\x00\n\x0e:\x00\nO\xa6\x00\n\xba\xec\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\n\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\f<\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x01\xaa\xb0\x00\x02\xb8\xe4\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x18\xe6\x00\x00\x1a\x14\x00\x00%\xee\x00\x001\xc8\x00\x00E\xf0\x00\x00J\xac\x00\x00LV\x00\x00UV\x00\x00V\x86\x00\x00W\xb6\x00\x00oj\x00\x00p\\\x00\x00x\x9e\x00\x00z\xca\x00\x00\x82\xb8\x00\x00\x89(\x00\x00\x8db\x00\x00\x92\xf8\x00\x00\xa0\xf6\x00\x00\xa8N\x00\x00\xc5:\x00\x00\xc9\xd4\x00\x00ͨ\x00\x00\xcd\xc0\x00\x00\xd2B\x00\x00\xd2\xf8\x00\x00\xd8\x0e\x00\x00\xda\x14\x00\x00\xddh\x00\x00\xe0\xb8\x00\x00\xe2$\x00\x00\xe4\xfc\x00\x00\xe5t\x00\x00\xe8N\x00\x00\xf5\x94\x00\x00\xfcP\x00\x01\x0e<\x00\x01\x19\xda\x00\x01\x1e\x96\x00\x01%\xf0\x00\x01-\x84\x00\x01.\x8c\x00\x01?\x10\x00\x01J\xae\x00\x01Y\x9c\x00\x01bb\x00\x01{F\x00\x01}\xe0\x00\x01\x87 \x00\x01\x94\xa0\x00\x01\x96\x0e\x00\x01\xc1\xe8\x00\x02\x00\x04\x00\x02\x0e\xf2\x00\x02?N\x00\x03\x1d\xa4\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfbG\x18\xff\xfa\x93\xe4\x00\x01C\x8e\x00\x01\xe3\x90\xff\xff\x0e8\xff\xff\x87\x1c\xff\xfe\x95T\xff\xfe\x1cp\x00\x00x\xe4\x00\x00\xf1\xc8\x00\x02\xaa\xb0\x00\x05\xaa\xb0\x00\x02\xd5X\x00\x01\xe3\x90\x00\x06\xe3\x8e\x00\x11\x00\x10\x00\x01\xe3\x90",
	"/texfonts/cmsltt10.tfm":    "\x00\xc1\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\f\x00\x02\x00\x02\x00\x00\x00\x00\x00\a\xdf\xea<x\x00\xa0\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06CMSLTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01;\x04\x00\x01;\x04\x00\x01P\x04\x00\x01[\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xc0\x04\x00\x01\xd0\x04\x00\x01\xb0\x04\x00\x01\xd0\x04\x00\x01\n\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01P\x04\x00\x01\x88\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xe4\x04\x00\x01(\x04\x00\x01\xd0\x05\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xf6\x04\x00\x01\xf6\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xf5\x04\x00\x01\xf5\x04\x00\x01`\x04\x00\x01r\x04\x00\x01\x19\x04\x00\x01r\x04\x00\x01\x10\x04\x00\x01\xf5\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01Y\x04\x00\x01\xa3\x04\x00\x01A\x04\x00\x01\xa3\x04\x00\x01\xd0\x05\x01\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd9\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xf5\x04\x00\x01\xf5\x04\x00\x01\xf5\x04\x00\x01\xd0\x04\x00\x01\a\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01\xd0\x04\x00\x01[\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01\xdb\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01[\x04\x00\x01[\x04\x00\x01P\x04\x00\x01P\x04\x00\x01\x90\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01P\x04\x00\x01[\x04\x00\x01P\x04\x00\x01\xf5\x04\x00\x01\xf5\x04\x00\x01\xf5\x04\x00\x01\xd0\x04\x00\x01\xd0\x04\x00\x00\x00\x00\x00\x00\bfb\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x82\xd8\x00\x068\xe3\x00\x06\xa6e\x00\x06\xe3\x8e\x00\bUV\x00\b}&\x00\b\xaa\xab\x00\b\xdbr\x00\b\xe3\x8e\x00\t\f\x83\x00\t\x0e:\x00\t\xc7\x1d\x00\n\xaa\xab\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xdfH\xff\xfe\xb6\n\xff\xff\x1cr\x00\x00\xe3\x8e\x00\x01US\x00\x01UU\x00\x01\x85\xad\x00\x01\xc7\x1d\x00\x028\xe3\x00\x03\x1cs\x00\x03\x8e:\x00\x00\x00\x00\x00\x01\xda\x16\x80`\x00\x0e\x80`\x00\x0f\x00\x02\xaa\xb0\x00\bfb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc3\x00\bfb",
	"/texfonts/cmssq8.tfm":      "\x01F\x00\x12\x00\x00\x00\u007f\x005\x00\x0f\x00\b\x00\x05\x00N\x00\b\x00\x00\x00\aKtEo\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSQ\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x17\xa0\x00\x000\xa0\x00\x00,\xa0\x00\x00\x19\xa0\x00\x00$\xa0\x00\x00!\xa0\x00\x00)\xa0\x00\x00,\xa0\x00\x00)\xa0\x00\x00,\xa0\x00\x00)\xa0\x00\x00\x18\xb0\x11\n\x15\xb0\x00\x00\x15\xb0\x00\x00.\xb0\x00\x00.\xb0\x00\x00\x010\x00\x00\x026\x00\x00\x13\xb0\x00\x00\x13\xb0\x00\x00\x13`\x00\x00\x13\xb0\x00\x00\x13p\x00\x00\x1f\xb0\x00\x00\x0e\x04\x00\x00\x12\xb0\x00\x00)0\x00\x00,0\x00\x00\x13S\x00\x001\xa0\x00\x003\xa0\x00\x00,\xd2\x00\x00\x010\x01\x00\x06\xb0\x01\x17\x13\xb0\x00\x000\xb5\x00\x00\x13\xe3\x00\x000\xe3\x00\x00*\xb0\x00\x00\x04\xb0\x01\x12\f\xe7\x00\x00\f\xe7\x00\x00\x13\xe0\x00\x00,\xc6\x00\x00\x04\x16\x00\x00\b0\x01\x15\x04\x10\x00\x00\x13\xe7\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x13\x80\x00\x00\x040\x00\x00\x046\x00\x00\x06F\x00\x00,!\x00\x00\x11F\x00\x00\x11\xb0\x01\x18$\xb0\x00\x00\x1f\xa0\x01B#\xa0\x00\x00\x1e\xa0\x00\x00'\xa0\x014\x1c\xa0\x00\x00\x1a\xa0\x01#$\xa0\x00\x00!\xa0\x00\x00\x03\xa0\x01M\x10\xa0\x00\x00&\xa0\x01)\x17\xa0\x01H/\xa0\x00\x00!\xa0\x00\x00+\xa0\x014\x1d\xa0\x01\x1d+\xa6\x00\x00\"\xa0\x00\x00\x16\xa0\x00\x00(\xa0\x01- \xa0\x00\x00\x1f\xa0\x05#2\xa0\x05#\x1f\xa0\x01)\x1f\xa0\t.\x1b\xa0\x00\x00\x05\xe7\x00\x00\x13\xb0\x00\x00\x05\xe7\x00\x00\x13\xb0\x00\x00\x04\xb0\x00\x00\x04\xb0\x01\x11\x110\x01?\x14\xb0\x019\x0e0\x00\x00\x14\xb0\x00\x00\x0e0\x00\x00\a\xb0\x11\x02\x146\x01L\x14\xb0\x00\x00\x01\xb0\x00\x00\x02\xb6\x00\x00\x12\xb0\x01\x19\x01\xb0\x00\x00-0\x00\x00\x140\x00\x00\x130\x019\x146\x019\x146\x00\x00\t0\x04\x00\v0\x00\x00\n\x90\x01@\x140\x01A\x0f0\x04\x00%0\x05\x19\x0f0\x00\x00\x0f6\x05\x1e\r0\x00\x00\x130\r\x1640\f\x00\x13\xb0\x00\x00\x13\xb0\x00\x00\x13\xb0\x00\x00\x00\x00\x00\x00\x00\x04q\xca\x00\x05\x00\x04\x00\x05\x1ct\x00\x05\x8e:\x00\x05\xa3\x90\x00\x05\xaa\xac\x00\x06\x1ct\x00\x06\xaa\xac\x00\x06\xaa\xae\x00\a8\xe4\x00\a\xaa\xac\x00\a\xc7\x1e\x00\b\x9ct\x00\b\xe3\x90\x00\b\xe3\x92\x00\t8\xe6\x00\tq\xca\x00\tq\xcc\x00\n\x00\x02\x00\n\x00\x04\x00\n\x8e<\x00\v\x1ct\x00\vUX\x00\v\xaa\xae\x00\v\xc7 \x00\v\xe3\x92\x00\f8\xe6\x00\fq\xca\x00\f\x8e<\x00\f\xc7 \x00\f\xe3\x92\x00\f\xf1\xcc\x00\r\x00\x04\x00\r\x0e<\x00\r\x1cv\x00\rUX\x00\rUZ\x00\rq\xcc\x00\x0e8\xe8\x00\x0eUX\x00\x0eq\xca\x00\x0f\x00\x04\x00\x0fq\xca\x00\x0f\x8e<\x00\x0f\x8e>\x00\x10\x1cv\x00\x10UZ\x00\x10\xaa\xae\x00\x11\x00\x04\x00\x12q\xcc\x00\x138\xe8\x00\x14\x00\x04\x00\x00\x00\x00\x00\x01\x8e8\x00\x06\xe0\x00\x00\bUV\x00\b\xe3\x8e\x00\tq\xc8\x00\nj\xac\x00\n\u007f\xfe\x00\n\x8e8\x00\n\xb6\xe0\x00\n\xf1\xc8\x00\v\x1cr\x00\v\x1ct\x00\v\x80\x02\x00\f8\xe4\x00\x00\x00\x00\xff\xfd\xfcp\x00\x00\x8e:\x00\x01\x1cr\x00\x01\xf1\xc8\x00\x028\xe0\x00\x028\xe4\x00\x03UT\x00\x00\x00\x00\x00\x00G\x1c\x00\x00\x80\x00\x00\x00\x8e:\x00\x01c\x8e\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfb\x8e6\xff\xfb8\xe0\x00\x01c\x8e\x00\x028\xe4\xff\xffq\xc6\xff\xfeUT\x00\x00\x8e:\xff\xfd\xc7\x1c\x00\x00\x00\x00\x00\x06\xaa\xac\x00\x03UV\x00\x028\xe4\x00\bUV\x00\x14\x00\x04\x00\x028\xe4",
	"/texfonts/cmex10.tfm":      "\x00\xf8\x00\x12\x00\x00\x00\u007f\x00 \x00\x06\x00\x0e\x00\x03\x00\x00\x00\x00\x00\x1c\x00\r\xfa\xb1u\x12\x00\xa0\x00\x00\x12TeX math extension\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMEX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x04\x17\x02\x10\x04\x17\x02\x11\x02\x17\x02h\x02\x17\x02i\x06\x17\x02j\x06\x17\x02k\x06\x17\x02l\x06\x17\x02m\n\x17\x02n\n\x17\x02o\x06\x17\x02D\x06\x17\x02E\x01\x03\x03\x00\b\x03\x03\x01\t\x17\x02.\t\x17\x02/\v\x19\x02\x12\v\x19\x02\x13\x0f\x1c\x02 \x0f\x1c\x02!\a\x1c\x02\"\a\x1c\x02#\n\x1c\x02$\n\x1c\x02%\n\x1c\x02&\n\x1c\x02'\x10\x1c\x02(\x10\x1c\x02)\x10\x1c\x02*\x10\x1c\x02+\x1a\x1c\x02,\x1a\x1c\x02-\x12\x1d\x020\x12\x1d\x021\n\x1d\x022\n\x1d\x023\r\x1d\x024\r\x1d\x025\r\x1d\x026\r\x1d\x027\x13\x1d\x028\x13\x1d\x029\x13\x1d\x00\x00\x13\x1d\x00\x00\x1d\x1d\x00\x00\x1d\x1d\x00\x00\x14\x19\x02\x1e\x14\x19\x02\x1f\x16\x19\x03\x02\x16\x19\x03\x03\x0e\x19\x03\x04\x0e\x19\x03\x05\x0e\x19\x03\x06\x0e\x19\x03\a\x0e\x03\x03\b\x0e\x03\x03\t\x17\x04\x03\n\x17\x04\x03\v\x17\x04\x03\f\x17\x04\x03\r\x17\n\x03\x0e\x17\n\x03\x0f\x17\x01\x03\x10\x0e\x03\x03\x11\x16\x19\x03\x12\x16\x19\x03\x13\x16\x03\x03\x14\x16\x03\x03\x15\f\x19\x02\x1c\f\x19\x02\x1d\x15\x05\x02G\x1c(\x00\x00\x05\x06\x06I\b\v\b\x00\x1c\x05\x02K\x1f(\x00\x00\x1c\x05\x02M\x1f(\x00\x00\x1c\x05\x02O\x1f(\x00\x00\x1b\x05\x02X\x18\x05\x02Y\x05\x06\x06Z\x15\x05\x02[\x15\x05\x02\\\x15\x05\x02]\x15\x05\x02^\x15\x05\x02_\x1e(\x00\x00\x1d(\x00\x00\b\v\b\x00\x1c(\x00\x00\x1c(\x00\x00\x1c(\x00\x00\x1c(\x00\x00\x1c(\x00\x00\x18\x05\x02a\x1d(\x00\x00\b@\x02c\x19P\x02d\x1eP\x00\x00\b@\x02f\x19P\x02g\x1eP\x00\x00\x06\x19\x02\x14\x06\x19\x02\x15\a\x19\x02\x16\a\x19\x02\x17\a\x19\x02\x18\a\x19\x02\x19\x0e\x19\x02\x1a\x0e\x19\x02\x1b\x19\x17\x02q\x19\x19\x02r\x19\x1c\x02s\x19\x1d\x02t\x1b\n\x03\x16\x1b\x03\x00\x00\x1b\x12\x00\x00\x11\x03\x03\x17\x0e\x03\x03\x18\x0e\x03\x03\x19\x030\x00\x00\x030\x00\x00\x030\x00\x00\x030\x00\x00\x11\x03\x03\x1a\x11\x03\x03\x1b\x00\x00\x00\x00\x00\x05UV\x00\x06\xaa\xad\x00\a38\x00\aUX\x00\a\x8e:\x00\a\x8e;\x00\bq\xca\x00\b\xe3\x90\x00\t>\x95\x00\tUX\x00\t\x8e;\x00\t\xc7\x1e\x00\n8\xe6\x00\n\xaa\xad\x00\v\xc7 \x00\f\x00\x02\x00\fq\xca\x00\f\xaa\xae\x00\f\xe3\x93\x00\f\xfaS\x00\rUX\x00\x0e\x00\x03\x00\x0e8\xe6\x00\x0f\x1cu\x00\x10\x00\x03\x00\x10\xb6\x0e\x00\x10\xe3\x92\x00\x11\xc7 \x00\x14q\xcb\x00\x17\x1cv\x00\x18-\x88\x00\x00\x00\x00\x00\x00\xa3\xd6\x00\x01\x99\x9b\x00\x01\xeb\x83\x00\v\x8e:\x00\f\x00\x00\x00\x00\x00\x00\x00\x04\xcc\xd0\x00\b\xf5\xca\x00\t\x99\xa0\x00\x0efp\x00\x10\x00\x0e\x00\x11\xc7(\x00\x12\x8fj\x00\x18\x00\r\x00\x1c)\n\x00\x1c\xcc\xe0\x00#\x8eR\x00%ª\x00/\\J\x00\x00\x00\x00\x00\x03\x1cs\x00\a\x1cs\x00\x00\x00\f\x00\x00\x00\r0\x00@B1\x00AC2\x00463\x0057\x00\x0046\x00\x00572\x00\x0063\x00\x0078<:>9=;>8\x00:>9\x00;>\x00\x00\x00?\x00\x00\x00w\x00\x00\x00>x\x00y?8\x00;>9\x00:>\x00\x00\x00B\x00\x00\x00Cv\x00tu~\x00\u007fwx\x00\x00?\x00\x00y?~\x00\x00w\x00\x00\u007fw\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\x00\x03\x00\x00\x00\x00\x00\x00\xa3\xd6\x00\x01\xc7\x1d\x00\x02\xaa\xab\x00\x0333\x00\t\x99\x9a\x00\x01\x99\x9a",
	"/texfonts/cmssi17.tfm":     "\x01~\x00\x12\x00\x00\x00\u007f\x007\x00\x10\x00\n\x008\x00N\x00\b\x00\x00\x00\a\xa0\x8f\xeeu\x01\x14z\xe0\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMSSI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdb\x17\xd0\xc8\x001\xd0\x00\x00.\xd0\\\x00\x1c\xd0\x00\x00#\xd0\xc0\x00(\xd0x\x00*м\x00.Ќ\x00*\xd04\x00.Ќ\x00*\xd0p\x00\x1a\xd0\xdd\n\x16Ш\x00\x16Ф\x000Ш\x000Ф\x00\x0100\x00\x0280\x00\x14\xd0\x00\x00\x14И\x00\x14\x90\x80\x00\x14Р\x00\x14\x80\x84\x00,\xd0\x00\x00\x0e\a\x00\x00\x12И\x00*0L\x00.0L\x00\x14U<\x002м\x005м\x00.\xe2\\\x00\x010\x01\x00\a\xd0E\x17\x14\xd0\x04\x001\xd88\x00\x14\xf3\xb0\x001\xf3(\x00-\xd0$\x00\x04\xd0m\x12\f\xf9\xc4\x00\f\xf9\x18\x00\x14\xf0\xb8\x00.t\x18\x00\x04\x16\x00\x00\b0\r\x15\x04\x10\x00\x00\x14\xf9\xc4\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x14\xb0\xb0\x00\x040\x1c\x00\x046\x1c\x00\aH\x14\x00.!8\x00\x11H\x00\x00\x11е\x18#\xd0\\\x00!\xd0\x01B\"\xd0p\x00\x1fм\x00)\xd0]4\x1bм\x00\x19\xd0\xc9##м\x00(\xd0x\x00\x03\xd0\xc9M\x10\xd0x\x00'н)\x17\xd0\x01H3\xd0x\x00(\xd0x\x00+\xd0]4\x1e\xd0q\x1d+\xd6\\\x00 \xd0p\x00\x18И\x00$\xd0\xc9-&\xd0x\x00!\xd0\xd5#4\xd0\xd5#!\xd0\xc9)!\xd0\xd9.\x1dм\x00\x05\xf9\xd0\x00\x14\xd0\xcc\x00\x05\xf9\x94\x00\x14\xd0d\x00\x04\xc0X\x00\x04\xd0m\x11\x120\t?\x15\xd0!9\x0e0`\x00\x15Ф\x00\x0e0L\x00\x06\xd0\xdd\x02\x148\xadL\x15\xd0\x10\x00\x01\xc0\x9c\x00\x02Ȑ\x00\x13\xd0a\x19\x01Ф\x00/0\x10\x00\x150\x10\x00\x140I9\x158-9\x1580\x00\t0\xac\x00\v0T\x00\n`Q@\x1501A\x0f0\xac\x00%0\xad\x19\x0f0\x88\x00\x0f8\xad\x1e\r0t\x00\x140i\x1660h\x00\x14И\x00\x14\xa0|\x00\x14\xc0@\x00\x00\x00\x00\x00\x00\x03\x8f\xee\x00\x03\xfa\xec\x00\x04$\x12\x00\x04-\xf3\x00\x04]\xb1\x00\x04\x98\xf2\x00\x04\xcb\xfa\x00\x05\x03\xf1\x00\x05\x1f\xed\x00\x05n\xf0\x00\x05ĉ\x00\x05\xd9\xee\x00\x06\x88j\x00\x06\xaf\xec\x00\x06\xe7\xe4\x00\a\x15\xfa\x00\a\x1a\xeb\x00\a6\xe7\x00\aR\xe2\x00\a\x85\xe9\x00\a\xbd\xe1\x00\b\f\xe4\x00\b#\xee\x00\b[\xe7\x00\b\x8e\xed\x00\b\xc6\xe6\x00\b\xf9\xec\x00\t(\x03\x00\t1\xe4\x00\t\x97\xf2\x00\t\x9c\xe3\x00\t\xb3\xed\x00\t\xfe\x00\x00\n\x02\xf1\x00\n\a\xe2\x00\n?\xd9\x00\n?\xda\x00\nM\x04\x00\nh\xff\x00\n\x9c\a\x00\n\xd8\xee\x00\n\xdd\xdf\x00\v\x15\xd6\x00\v0h\x00\vd\xda\x00\v\xb3\xdd\x00\v\xeb\xd5\x00\f:\xd7\x00\f\x89\xda\x00\f\xef\xe8\x00\r\x1d\xff\x00\x0e+\xf4\x00\x0e\x9b\xe3\x00\x0f\v\xd3\x00\x00\x00\x00\x00\x01I8\x00\x05\xb0s\x00\x06\xe3K\x00\a\xff\xbc\x00\bq\xa6\x00\b\xdb\x1a\x00\t\x03\xcf\x00\t\x99\xce\x00\n\x0e(\x00\n{\x9a\x00\n~k\x00\n\x820\x00\v\x1cr\x00\v\xe3\xa0\x00\v\xfcP\x00\x00\x00\x00\xff\xfd\xb0\xb7\x00\x00\xc7.\x00\x00\xdf\xde\x00\x01\x04\x13\x00\x01\x8e[\x00\x02\x01\x95\x00\x02\xb9\x1f\x00\x03\x1c\xb5\x00\x03\xfc\x93\x00\x00\x00\x00\x00\x008u\x00\x009\x97\x00\x00Pg\x00\x00XU\x00\x00\\\xdf\x00\x00n\xa2\x00\x00om\x00\x00\x80%\x00\x00\x84\xd3\x00\x00\x86\xd7\x00\x00\xa0=\x00\x00\xb4\x90\x00\x00\xc3N\x00\x00ʔ\x00\x00\xd2\x17\x00\x01\x05\x88\x00\x01\x067\x00\x01\x06[\x00\x01\x14\xce\x00\x01!4\x00\x016\x9a\x00\x01;\a\x00\x01<9\x00\x01L\x00\x00\x01Q\xe1\x00\x01R\xa1\x00\x01U;\x00\x01Zu\x00\x01^\x1c\x00\x01`\xc2\x00\x01dl\x00\x01e\a\x00\x01i\xed\x00\x01l\x19\x00\x01x\xb0\x00\x01y\x94\x00\x01z\xf0\x00\x01\x86\x9c\x00\x01\x8a\n\x00\x01\x98\xb8\x00\x01\x9a^\x00\x01\xa4=\x00\x01\xacL\x00\x01\xd0\x04\x00\x01\xe3\xaf\x00\x01\xeb\xb1\x00\x01\xf1\x9b\x00\x02\x11\xb4\x00\x02!1\x00\x02'\x1a\x00\x02G3\x00\x02\x8c/\x00\x02\x92\x19\x00\x02\xbc\xe6\x00\x03h\x17\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfcp\x12\xff\xfc&\x00\x00\x01\v}\x00\x01\xab\xfb\xff\xff\x95\x01\xff\xfe\xbf\x04\x00\x00j\xff\xff\xfeT\x05\x00\x03f\xa0\x00\x05\x03\xf1\x00\x02\x81\xf8\x00\x01\xab\xfb\x00\x06\xe3K\x00\x0f\v\xd3\x00\x01\xab\xfb",
	"/texfonts/cmtex9.tfm":      "\x00\xbf\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\r\x00\x01\x00\x00\x00\x00\x00\x00\x00\aߤN\x00\x00\x90\x00\x00\x12TeX extended ASCII\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMTEX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x01c\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xcc\x00\x00\x01@\x00\x00\x010\x00\x00\x01\xa5\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01<\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\x84\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01\xa5\x00\x00\x01\xa5\x00\x00\x01@\x00\x00\x01@\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\x84\x00\x00\x01\xb6\x00\x00\x01!\x00\x00\x01!\x00\x00\x01\xe8\x00\x00\x01c\x00\x00\x01\xd7\x00\x00\x01\xd7\x00\x00\x01R\x00\x00\x01@\x00\x00\x01\x00\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01p\x00\x00\x01\x84\x00\x00\x01\x1b\x00\x00\x01\x84\x00\x00\x01\x10\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01;\x00\x00\x01\xa5\x00\x00\x01!\x00\x00\x01\xa5\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcb\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\n\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x01\xc0\x00\x00\x01<\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x01\xcc\x00\x00\x01\xc0\x00\x00\x01\xc0\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01<\x00\x00\x01<\x00\x00\x010\x00\x00\x010\x00\x00\x01\x90\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x010\x00\x00\x01<\x00\x00\x010\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xf9\x00\x00\x01\xc0\x00\x00\x01\xcc\x00\x00\x00\x00\x00\x00\x00\bf`\x00\x00\x00\x00\x00\x02\t|\x00\x06\xaf\xe2\x00\x06\xe3\x8e\x00\aҀ\x00\a\xe4\x80\x00\b'\xd0\x00\bUU\x00\b}%\x00\b\xdbp\x00\b\xed\v\x00\t\x9e\xd2\x00\t\xc7\x1c\x00\n!\xa9\x00\nM\xbc\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xe8\xc5\xff\xfe\x1dd\xff\xfe`\xb4\xff\xfe\xb6\t\xff\xff%\xee\xff\xff\u05f5\x00\x00Z\x8c\x00\x00\x86\xa0\x00\x01UU\x00\x01\x8f+\x00\x028\xe4\x00\x03\x8e9\x00\x00\x00\x00\x00\x00\x00\x00\x00\bf`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x10\xcc\xc0\x00\bf`",
	"/texfonts/cmti7.tfm":       "\x01u\x00\x12\x00\x00\x00\u007f\x00-\x00\x10\x00\t\x00:\x00M\x00\t\x00\x00\x00\at}\\\xca\x00p\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x15\xc0\xa8\x00%\xc0\x00\x00\"\xc0X\x00\x1a\xc0\x00\x00\x18\xc0\xc8\x00\x1e\xc0\xc4\x00\x1c\xc0\x94\x00\"\xc0\x84\x00\x1c\xc0 \x00\"\xc0\x84\x00\x1c\xc0x\x00\x16\xd7\xe5\b\x12\xd7`\x00\x13\xd7`\x00(\xd7`\x00)\xd7`\x00\x020L\x00\x047\f\x00\r\xd0\x00\x00\r\xd0D\x00\r\x908\x00\rЀ\x00\r`|\x00$\xd0\x00\x00\n\x06\x00\x00\x10\xd7t\x00\x1c04\x00\x1c04\x00\rTP\x00&\xc0\x94\x00*\xc0\x94\x00\"\xe2X\x00\x010\x01\x0f\x02Й\x17\r\xd0\x18\x00%\xd70\x00\x1f\xd0\x00\x00%\xf3\xb0\x00\"\xd0D\x00\x02Й\x12\a\xf8\xd0\x00\a\xf8\x10\x00\r\xf0\xc0\x00\"u\x10\x00\x02\x17\x00\x00\x050\x05\x15\x02\x10\x00\x00\r\xf8\xd0\x00\r\xa0\xb4\x00\r\xa0\xb4\x00\r\xa0\xb4\x00\r\xa0\xb4\x00\r\xa7\xb4\x00\r\xa0\xb4\x00\r\xa0\xb4\x00\r\xa7\xb4\x00\r\xa0\xb4\x00\r\xa0\xb4\x00\x020\x14\x00\x027\x14\x00\x02G,\x00\"!0\x00\rG\x00\x00\rН\x18\"\xd0\\\x00\x1e\xc0\x010\x1b\xc0x\x00\x1c\xc0\xb8\x00 \xc0Y+\x19\xc0\x94\x00\x17\xc0\xa9\x1a#\xc0<\x00\x1e\xc0\xc4\x00\x06\xc0\xcc\x00\x0e\xc0\xa4\x00!\xc0\xb9 \x15\xc0\x01A'\xc0\xc4\x00\x1e\xc0\xc4\x00\"\xc0Y+\x19\xc0y*\"\xc7X\x00\x1d\xc0\t0\x11\xc0\x94\x00\x1c\xc0\xa9$\x1e\xc0\xc4\x00\x1e\xc0\xd9\x1a+\xc0\xd9*\x1e\xc0\xcd \x1e\xc0\xe1%\x14\xc0\xb8\x00\x02\xf8\xdc\x00\r\xd0\xd4\x00\x02\xf8l\x00\r\xd0$\x00\x02\xc0\x8c\x00\x02Й\x11\r0L\x00\n\xd0)E\n0\x1dE\r\xd0a\x19\n05E\x03\xd7\xe5\x00\n7H\x00\r\xd0L\x00\x02\xb0T\x00\x02\xb7\xbc\x00\nЈ\x00\x01\xd0a\x19%0L\x00\x110ML\r0)E\r7)E\n7H\x00\t0\x89E\a0@\x00\x04\x80d\x00\x0f0L\x00\n0\x88\x00\x180\x89\x19\v0\xa0\x00\f7H\x00\b0\xac\x00\r0q\x16,0p\x00\rМ\x00\r\xc0\x90\x00\r\xc0h\x00\x00\x00\x00\x00\x00\x04\xf3\xd2\x00\x05\xe4b\x00\x05\xe4e\x00\x06\\\xab\x00\x06\xd4\xf2\x00\aF\xbb\x00\ał\x00\aŅ\x00\b\x01\xa7\x00\b\xb6\x12\x00\b\xb6\x15\x00\t.[\x00\t\xa6\xa2\x00\t߇\x00\n\x1e\xeb\x00\n\x1e\xee\x00\n\x972\x00\n\xd89\x00\vP\x80\x00\v\x87\xc2\x00\v\xc0\xa7\x00\v\xc8\xc7\x00\f8\xf0\x00\fxR\x00\f\xb17\x00\f\xea\x1b\x00\r)\x80\x00\rh\xe2\x00\r\xa1\xc7\x00\rګ\x00\x0e\x15`\x00\x0e\x1a\x10\x00\x0eR\xf5\x00\x0eYr\x00\x0eu\xe5\x00\x0fB\xf7\x00\x0fJ\x02\x00\x10sw\x00\x10\xac[\x00\x10\xf8\xbe\x00\x114\xe2\x00\x12T\x97\x00\x12\x8d{\x00\x13ME\x00\x00\x00\x00\x00\x01\xd7^\x00\x06%0\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc7\x00\t+\x10\x00\t\xa3`\x00\t\xd7^\x00\n\x0e9\x00\nO\xa5\x00\n\x82\t\x00\n\xd8\xfe\x00\v\x1cr\x00\v\xb6\x0e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe%0\x00\x00\xc7\x1e\x00\x00\xe3\x8e\x00\x01\x8e9\x00\x01\xa3`\x00\x02\xb8\xe5\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00d)\x00\x00g\xd2\x00\x00n\x1e\x00\x00\x87\xb7\x00\x00\xc3u\x00\x00\xc4.\x00\x00\xc8U\x00\x00\xe5\x95\x00\x00\xf0[\x00\x00\xf2\xcb\x00\x01\n\x90\x00\x01\x11\x02\x00\x01*\xab\x00\x013\xe9\x00\x016p\x00\x01@\x9b\x00\x01^E\x00\x01^\xae\x00\x01`\x97\x00\x01d\xc7\x00\x01j\x0e\x00\x01q\x87\x00\x01y~\x00\x01|W\x00\x01|\xc0\x00\x01\u007f0\x00\x01\x82Y\x00\x01\x88\xc5\x00\x01\x8fp\x00\x01\x94\x85\x00\x01\x96Y\x00\x01\x97)\x00\x01\xb7\x82\x00\x01\xb8\xe5\x00\x01\xbbU\x00\x01\xc05\x00\x01\xcb+\x00\x01Ѯ\x00\x01֎\x00\x01\xf5\t\x00\x01\xfc\xbb\x00\x02\aP\x00\x02\x0e;\x00\x02\x0fp\x00\x02\x1b\xa0\x00\x02Cr\x00\x02FK\x00\x02K\x95\x00\x02^B\x00\x02g\x89\x00\x02\u007f\x97\x00\x02\x87\xb7\x00\x02\xaf\x10\x00\x02\xf7\xe0\x00\x03\x00\x00\x00\x03'\xfb\x00\x03{\x89\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x01¥\xff\xfb\f.\xff\xf9\xe2\xb9\x00\x01\xe1 \x00\x00\xf0\x90\xff\xfe\x97'\xff\xfe\x1e\xe0\xff\xff\x87\xb7\xff\xff\x0fp\x00\x04\x00\x00\x00\x06\xd4\xf2\x00\x02Ѱ\x00\x01\xe1 \x00\x06\xe3\x8e\x00\x13ME\x00\x01\xe1 ",
	"/texfonts/logosl8.tfm":     "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\xd3\xfa\xf6\x82\x00\x80\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\bMFLOGOSL\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\nF\x84\x00\v\x01\x1c\x00\v\xbb\xb4\x00\r\xeb|\x00\x00\x00\x00\x00\t\x99\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02ô\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa2\xb4\xff\xffEh\x00\x00\xba\x98\x00\x00\x00\x00\x00\x05,\\\x00\x02/\xc8\x00\x01u0\x00\x00\x00\x00\x00\r\xeb|",
	"/texfonts/cmbx7.tfm":       "\x01N\x00\x12\x00\x00\x00\u007f\x000\x00\x0f\x00\t\x00\x05\x00X\x00\n\x00\x00\x00\af\x17$\xd8\x00p\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0\x16\xb0\x00\x00)\xb0\x00\x00&\xb0\x00\x00\x1c\xb0\x00\x00\x1a\xb0\x00\x00%\xb0\x00\x00\x1f\xb0\x00\x00&\xb0\x00\x00\x1f\xb0\x00\x00&\xb0\x00\x00\x1f\xb0\x00\x00\x15\xc0\x11\n\x14\xc0\x00\x00\x14\xc0\x00\x00*\xc0\x00\x00*\xc0\x00\x00\x010\x00\x00\x047\x00\x00\x0e\xc0\x00\x00\x0e\xc0\x00\x00\x0ep\x00\x00\x0e\xc0\x00\x00\x0e`\x00\x00!\xc0\x00\x00\n\x05\x00\x00\x11\xc0\x00\x00\x1f0\x00\x00&0\x00\x00\x0eT\x00\x00+\xb0\x00\x00.\xb0\x00\x00&\xd2\x00\x00\x010\x01\x00\x03\xc0\x01\x17\x10\xc0\x00\x00)\xc7\x00\x00\x0e\xe3\x00\x00)\xe3\x00\x00&\xc0\x00\x00\x01\xc0\x01\x12\a\xe8\x00\x00\a\xe8\x00\x00\x0e\xe0\x00\x00&\xa6\x00\x00\x01\x17\x00\x00\x050\x01\x15\x01\x10\x00\x00\x0e\xe8\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x0e\x90\x00\x00\x010\x00\x00\x017\x00\x00\x03G\x00\x00&!\x00\x00\fG\x00\x00\f\xc0\x01\x18&\xc0\x00\x00!\xb0\x01L\x1e\xb0\x00\x00\x1f\xb0\x00\x00$\xb0\x015\x19\xb0\x00\x00\x18\xb0\x01$(\xb0\x00\x00%\xb0\x00\x00\x06\xb0\x01W\x0f\xb0\x00\x00'\xb0\x01*\x16\xb0\x01R,\xb0\x00\x00%\xb0\x00\x00\"\xb0\x015\x1b\xb0\x01\x1e\"\xb7\x00\x00 \xb0\x01L\x13\xb0\x00\x00\x1d\xb0\x01.#\xb0\x00\x00!\xb0\x05$/\xb0\x05$!\xb0\x01*!\xb0\t/\x17\xb0\x00\x00\x02\xe8\x00\x00\x10\xc0\x00\x00\x02\xe8\x00\x00\x0e\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\r0\x01H\x13\xc0\x01B\n0\x01@\x13\xc0\x00\x00\v0\x00\x00\x04\xc0\x11\x02\x0e7\x05V\x13\xc0\x01:\x01\xc0\x00\x00\x04\xc7\x00\x00\x12\xc0\x01\x19\x01\xc0\x00\x00)0\x01:\x130\x01:\x0e0\x01B\x137\x01B\x127\x00\x00\t0\x00\x00\b0\x00\x00\a\x80\x01J\x130\x01K\x120\x05\x19\x1f0\x05\x1a\x120\x00\x00\x127\x05\x1f\n0\x00\x00\x0e0\r\x16-0\f\x00\x0e\xc0\x00\x00\x0e\xc0\x00\x00\x0e\xc0\x00\x00\x00\x00\x00\x00\x00\x05\xcf;\x00\x05\xd2\xf9\x00\x06[\x05\x00\x06`\xb5\x00\x06\xf2.\x00\a\xaby\x00\b\x15 \x00\b29\x00\b\x8di\x00\t8\x12\x00\tzP\x00\tɋ\x00\n\x12G\x00\n[\x05\x00\n\xa5\xc9\x00\n\xaf\x89\x00\n\xb3\x9b\x00\n\xec~\x00\v}\xf7\x00\v\x9ew\x00\f/\xf0\x00\f_\xe5\x00\f\xa0\xe9\x00\f\xf1^\x00\r\x82\xd7\x00\r\xc3\xdb\x00\x0e\x0e\xa0\x00\x0eYe\x00\x0e[\x05\x00\x0e\xa0\x19\x00\x0e\xe6\xce\x00\x0f[\xd5\x00\x0f|W\x00\x0f}\xf7\x00\x0f\xc2;\x00\x0f\xc3\v\x00\x10\b \x00\x10\t\xc0\x00\x10\r\xd0\x00\x10/\"\x00\x11,\xb2\x00\x11m\xb2\x00\x12\x9ai\x00\x13p\xf7\x00\x14\xb6\t\x00\x14\xe0N\x00\x15+\x12\x00\x00\x00\x00\x00\x02\x9ai\x00\x06\x92\xf0\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t\xb3\x9b\x00\n\x1cr\x00\n(\xa5\x00\nO\xa5\x00\nѮ\x00\n\xfaP\x00\v\x1cr\x00\v\xc1n\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x92\xf0\x00\x00\xc7\x1e\x00\x00\xe3\x8e\x00\x01\x8e9\x00\x02\xb8\xe5\x00\x02Ѯ\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00H\xbe\x00\x00\x82\xee\x00\x00\x91y\x00\x01\xf0'\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa0\xc5\xff\xf9B\xa5\x00\x01\xf0'\x00\x02E\xe5\xff\xfe\xdd\x0e\xff\xffn\x87\xff\xfeK\x95\xff\xfd\xba\x1b\x00\x00\x91y\x00\x01\"\xf2\x00\x00\x00\x00\x00\x06\xf2.\x00\x03h\xd7\x00\x02E\xe5\x00\a\x1cr\x00\x14\xb6\t\x00\x02E\xe5",
	"/texfonts/cmmi8.tfm":       "\x01|\x00\x12\x00\x00\x00\u007f\x00a\x00\x0f\x00\t\x00 \x00:\x00\v\x00\x00\x00\x06\xd7\x01\x172\x00\x80\x00\x00\x0fTeX math italic\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMMI\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee8\xb0q\x1d[\xb0\x01'P\xb0\x15\x18H\xb0\x01'L\xb0M\x18X\xb0Q\x10R\xb05\x184\xb0q\fD\xb0\x01\x18;\xb0i\bQ\xb0)\x18A@\x01\x03+\xc7-\x18%G<\x00\x11\xc0\x1d\t\n@\x01\v\x10\xc7E\x18!G\x19\v\x19\xc0\x15\x18\x05@\x01\v/@\x00\x004\xc0\x00\x007G\x01\x03\x1e@A\x01\x10\xc7!!.@\x18\x00#G\x01\x18-@\x19/\x12@m\x01)@\x19\x035\xc7\x01\x18<G\x01\vC\xc7\x19!=@\x18\x00\x15@\x01\x186\xc0\x01\x18Z@\x14\x00#G\x01\x18\aFY\x18BG\x01\x18`2\x00\x00`2\x00\x00`2\x00\x00`2\x00\x00\x01d\x00\x00\x01d\x00\x00 S\x00\x00 S\x00\x00 @\x00\x00 @\x00\x00 @\x00\x00 G\x00\x00 G\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00 \x90\x00\x00 G\x00\x00\x01\x10\x00\x00\x01\x17\x00\x00Su\x00\x00 \xe8\x014Su\x00\x00 S\x00\x00'\xc0=\x18M\xb0\x01\"O\xb0)\x18I\xb0I\x15W\xb0\x15\vK\xb05\x18>\xb0q\x1dT\xb0\x01\x18X\xb0Q\x10\x0f\xb0U!*\xb0]+\\\xb0I\bG\xb0\x01\x03_\xb0a\x19V\xb0a\x14P\xb0\x15\x18@\xb0q\x1dU\xb7\x01\x18N\xb0\x05\x18:\xb01\x192\xb0q\x15E\xb0a\x043\xb0y1^\xb0q1Y\xb0U\x141\xb0y1F\xb0I\x19\t\xe0\x00\x00\t\xc7\x00\x00\t\xc7\x00\x00`!\x00\x00`!\x00\x00\f\xc0\x01!(@\x00\x00\r\xc0\x00\x00\x0e@\x01\v$\xc0\x01#\x17@\x01\v\x1b\xc7e(\x1aG\x19\x03/\xc0\x01\x00\x04\xa0\x00\x00\v\xa79/&\xc0\f\x00\x02\xc0\t\x18]@\x00\x009@\x00\x00\x1c@\x01\v\"G\x01\x18\x13G\x19\x18\x14@\x15\t\x16@\x01\v\x06\x80\x01\x180@\x01\x03\x1d@\x19\x03J@\x11\x18,@\x01\x03\x1fG\x19\v\x18@%\v\x03@\x01\x03\bG\x01\x18?G\x01! \xd0t\x00\x01\xc0|\x00\x00\x00\x00\x00\x00\x04\xb8\xe8\x00\x05\x12\xfa\x00\x05\x97\xb8\x00\x05ɴ\x00\x06\x04\xc2\x00\x06#\x94\x00\x068\xea\x00\x06g \x00\x06\x9cx\x00\x06\xdfP\x00\x06\xe0\x04\x00\x06\xf1\xcc\x00\aE\xb8\x00\a\\\xf2\x00\a^\xf6\x00\ax\xec\x00\a\x85\xb8\x00\a\x8bh\x00\a\x97\x06\x00\a\xab\xe0\x00\a٠\x00\a\xdcx\x00\a\xe2\xe0\x00\a\xe8R\x00\a\xee>\x00\b\x17\x06\x00\b*\xb0\x00\b7\x80\x00\bG$\x00\b[J\x00\bg$\x00\b\x80\b\x00\b\x87\xda\x00\b\x8e\xba\x00\b\xb4\xa6\x00\b\xbfP\x00\b\xc1\x8c\x00\b\xda\x1a\x00\b\xf4\xa6\x00\t\a\x9e\x00\t8\xec\x00\tIF\x00\t\x89\xfc\x00\t\x91\xce\x00\t\xb7\b\x00\t\xc3\x1e\x00\t\xcb\xe2\x00\t\u05fc\x00\t\xdaZ\x00\t\xe5\xba\x00\t\xe6p\x00\t\xea\xb4\x00\n\x1b\x10\x00\n\x1c\xf4\x00\n:\x1a\x00\nIF\x00\nP\xa0\x00\nV\xca\x00\ny\xec\x00\n\x8e@\x00\n\x92\x0e\x00\n\xc2*\x00\n\xc6p\x00\n\xc7$\x00\n\xeb.\x00\v\x13\xf4\x00\v\x1c|\x00\vU`\x00\v\x80@\x00\v\x85\x04\x00\v\x8f\xb0\x00\v\xca\x00\x00\f\x1d\xc4\x00\f3\x02\x00\fu`\x00\f\x88\xee\x00\f\xbb\xc8\x00\fͺ\x00\f҈\x00\f\xe6(\x00\r\x11\x1c\x00\r,\xd8\x00\r8\xf0\x00\r?0\x00\r_\f\x00\r~D\x00\r\xf2d\x00\r\xf7(\x00\r\xfbn\x00\x0e\x1d4\x00\x0e*\xb8\x00\x0eV\x18\x00\x0f\t\x88\x00\x10\n\x04\x00\x10S\x9c\x00\x11\x00\x10\x00\x00\x00\x00\x00\x01\xc7\x1c\x00\x05\xb8\xe4\x00\x06\f<\x00\x06\xe3\x8e\x00\aq\xc8\x00\a\xbcN\x00\t\x02\x90\x00\t\xd7^\x00\nO\xa6\x00\n\x93\xd0\x00\n\xee\xee\x00\v\x1cr\x00\vx\x9c\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\xb8\xe4\xff\xfe\f<\xff\xffq\xc8\xff\xff\xbcN\x00\x01\x02\x90\x00\x01\x8e:\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x19l\x00\x000\x96\x00\x00m\n\x00\x00n8\x00\x00x\xe4\x00\x00\x92\xf6\x00\x00\x99\x98\x00\x00\x9f\xfe\x00\x00\xad\n\x00\x00\xc9\xf4\x00\x00\xd2|\x00\x00\xe4\xfa\x00\x00\xe5\xb0\x00\x00\xec\x10\x00\x00\xf1\xc8\x00\x01\v\xda\x00\x01\x18\xe2\x00\x01!l\x00\x013\x8e\x00\x01;`\x00\x01?\xa4\x00\x01@\x00\x00\x01\x80\xb6\x00\x01\xb4D\x00\x01Î\x00\x01\xcd<\x00\x01\xd8\xe4\x00\x02\\t\x00\x02v\f\x00\x03\xc7 \x00\x06\xb1\x00\x80\u007f\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x02\x00;\x80\x03\x00:\x80\x03\x00=\x80\x01\x80\u007f\x80\x02\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x04\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x04\x00=\x80\x05\x00=\x80\x00\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\x06\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\x06\x80\u007f\x80\a\x80\u007f\x80\b\x00Y\x80\x04\x00Z\x80\x01\x00j\x80\x03\x00f\x80\t\x80\u007f\x80\n\x00;\x80\x01\x00:\x80\x01\x80\u007f\x80\n\x00=\x80\x01\x00;\x80\x03\x00:\x80\x03\x80\u007f\x80\n\x00;\x80\x01\x80:\x80\x01\x00;\x80\t\x00:\x80\t\x80=\x80\x03\x00\x01\x80\x01\x00A\x80\x01\x00M\x80\x01\x00N\x80\x01\x00Y\x80\x04\x80Z\x80\x01\xff\xff\x87\x1c\xff\xff\x0e8\x00\x00x\xe4\xff\xfe\x1cp\x00\x00\xf1\xc8\xff\xfe\x95T\x00\x01j\xac\x00\x01\xe3\x90\x00\x02\\t\xff\xfd*\xa8\x00\x02\xd5X\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x11\x00\x10",
	"/texfonts/cmss9.tfm":       "\x01J\x00\x12\x00\x00\x00\u007f\x006\x00\x10\x00\n\x00\x05\x00N\x00\b\x00\x00\x00\a\xd2o\xc7w\x00\x90\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSS\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x18\xd0\x00\x000\xd0\x00\x00-\xd0\x00\x00\x1e\xd0\x00\x00\"\xd0\x00\x00(\xd0\x00\x00)\xd0\x00\x00-\xd0\x00\x00)\xd0\x00\x00-\xd0\x00\x00)\xd0\x00\x00\x1b\xd0\x11\n\x17\xd0\x00\x00\x17\xd0\x00\x00/\xd0\x00\x00/\xd0\x00\x00\x010\x00\x00\x028\x00\x00\x15\xd0\x00\x00\x15\xd0\x00\x00\x15\x90\x00\x00\x15\xd0\x00\x00\x15\x80\x00\x00$\xd0\x00\x00\x0e\a\x00\x00\x13\xd0\x00\x00)0\x00\x00-0\x00\x00\x15U\x00\x001\xd0\x00\x004\xd0\x00\x00-\xe2\x00\x00\x010\x01\x00\a\xd0\x01\x17\x15\xd0\x00\x000\xd8\x00\x00\x15\xf3\x00\x000\xf3\x00\x00,\xd0\x00\x00\x03\xd0\x01\x12\f\xf9\x00\x00\f\xf9\x00\x00\x15\xf0\x00\x00-t\x00\x00\x03\x16\x00\x00\b0\x01\x15\x03\x10\x00\x00\x15\xf9\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x15\xa0\x00\x00\x030\x00\x00\x036\x00\x00\aH\x00\x00-!\x00\x00\x11H\x00\x00\x11\xd0\x01\x18\"\xd0\x00\x00$\xd0\x01B#\xd0\x00\x00\x1f\xd0\x00\x00*\xd0\x014\x1c\xd0\x00\x00\x1a\xd0\x01#\"\xd0\x00\x00(\xd0\x00\x00\x04\xd0\x01M\x12\xd0\x00\x00'\xd0\x01)\x18\xd0\x01H2\xd0\x00\x00(\xd0\x00\x00+\xd0\x014 \xd0\x01\x1d+\xd6\x00\x00!\xd0\x00\x00\x19\xd0\x00\x00%\xd0\x01-&\xd0\x00\x00$\xd0\x05#3\xd0\x05#$\xd0\x01)$\xd0\t.\x1d\xd0\x00\x00\x05\xf9\x00\x00\x15\xd0\x00\x00\x05\xf9\x00\x00\x15\xd0\x00\x00\x03\xc0\x00\x00\x03\xd0\x01\x11\x130\x01?\x16\xd0\x019\x0e0\x00\x00\x16\xd0\x00\x00\x0f0\x00\x00\x06\xd0\x11\x02\x158\x05L\x16\xd0\x00\x00\x01\xc0\x00\x00\x02\xc8\x00\x00\x14\xd0\x01\x19\x01\xd0\x00\x00.0\x00\x00\x160\x00\x00\x150\x019\x168\x019\x168\x00\x00\t0\x04\x00\v0\x00\x00\n`\x01@\x160\x01A\x100\x04\x00%0\x05\x19\x100\x00\x00\x108\x05\x1e\r0\x00\x00\x150\r\x1650\f\x00\x15\xd0\x00\x00\x15\xb0\x00\x00\x15\xc0\x00\x00\x00\x00\x00\x00\x00\x03\xed\a\x00\x04a\xf7\x00\x04\x91`\x00\x04\x97\xb2\x00\x04\xc7\x1b\x00\x05\x06P\x00\x055\xb9\x00\x05{@\x00\x05\x9e\x04\x00\x05\xf00\x00\x06M\xbe\x00\x06e \x00\a%\xe9\x00\aO\x00\x00\aO\x02\x00\a\x94\x87\x00\a\xc3\xf0\x00\a\xc7\x19\x00\a\xe6\xb4\x00\b\tw\x00\b8\xe0\x00\b~g\x00\bД\x00\b\xf6\x80\x00\t\"\xc0\x00\tkp\x00\t\x97\xb0\x00\t\xe0`\x00\n\f\xa0\x00\n\x12\xf2\x00\n\x81\x90\x00\n\x84\xb9\x00\n\xa7|\x00\n\xf6\x80\x00\n\xf9\xa9\x00\n\xfc\xd2\x00\v<\a\x00\vN\xfe\x00\vq\xc2\x00\v\xa1+\x00\v\xe0`\x00\v\xe3\x89\x00\f%\xe7\x00\fx\x14\x00\f\xca@\x00\r\x0f\xc7\x00\ra\xf4\x00\r\xb4 \x00\x0e,9\x00\x0e^\xcb\x00\x0f\x8e2\x00\x0f\xff\xf9\x00\x10q\xc0\x00\x00\x00\x00\x00\x01a\xf9\x00\x06\x02G\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t$\x95\x00\t{@\x00\tβ\x00\n\x1cr\x00\nx\x19\x00\n٠\x00\n\xec\x97\x00\v\x1cr\x00\v\xe3\x8e\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe\x02G\x00\x00\xc7\x1c\x00\x00\xe3\x8e\x00\x01{@\x00\x01\x8e9\x00\x02\x06R\x00\x02\xb8\xe4\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00:y\x00\x00i>\x00\x00t\xf0\x00\x01$Y\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00e\x80\x04\x00a\x80\x04\x00o\x80\x04\x80c\x80\x04\x00A\x80\x05\x00o\x80\x04\x00e\x80\x04\x00a\x80\x04\x00.\x80\x05\x80,\x80\x05\x00o\x80\x04\x00e\x80\x04\x00u\x80\x04\x00r\x80\x04\x00a\x80\x04\x00A\x80\x05\x00O\x80\x04\x00C\x80\x04\x00G\x80\x04\x80Q\x80\x04\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x05\x80u\x80\x05\x00X\x80\x04\x00W\x80\x04\x00A\x80\x04\x00V\x80\x04\x80Y\x80\x04\x00e\x80\x06\x00o\x80\x06\x00x\x80\x04\x00d\x80\x06\x00c\x80\x06\x00q\x80\x06\x00r\x80\x04\x00y\x80\x04\x80w\x80\x04\x00t\x80\x04\x00C\x80\x04\x00O\x80\x04\x00G\x80\x04\x00U\x80\x04\x00Q\x80\x04\x00T\x80\x05\x00Y\x80\x05\x00V\x80\a\x80W\x80\a\x80j\x80\x06\x80I\x80\x06\xff\xfc\x12\xf9\xff\xfb\xbd\xa4\x00\x01$Y\x00\x01\xd3\xc0\xff\xff\x8b\x10\xff\xfe\xa10\x00\x00t\xf0\xff\xfe,@\x00\x00\x00\x00\x00\x05{@\x00\x02\xbd\xa0\x00\x01\xd3\xc0\x00\a\x1cr\x00\x10q\xc0\x00\x01\xd3\xc0",
	"/texfonts/cmsy7.tfm":       "\x01\x18\x00\x12\x00\x00\x00\u007f\x00-\x00\x0f\x00\x0f\x00\x11\x00\a\x00\a\x00\x00\x00\x16O!\xe2\x85\x00p\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0 \xa9\x00\x00\x03S\x00\x00 \xa9\x00\x00\bB\x00\x00 \xa9\x00\x00\bS\x00\x00 \xa9\x00\x00 \xa9\x00\x00 \xa9\x00\x00 \xa9\x00\x00 \xa9\x00\x00 \xa9\x00\x00 \xa9\x00\x00+\xdc\x00\x00\bS\x00\x00\bS\x00\x00 d\x00\x00 d\x00\x00 \xcb\x00\x00 \xcb\x00\x00 \xcb\x00\x00 \xcb\x00\x00 \xcb\x00\x00 \xcb\x00\x00 !\x00\x00 u\x00\x00 \x97\x00\x00 \x97\x00\x00+\x97\x00\x00+\x97\x00\x00 \x97\x00\x00 \x97\x00\x00+!\x00\x00+!\x00\x00\b\xdc\x00\x00\b\xdc\x00\x00+!\x00\x00+\xdc\x00\x00+\xdc\x00\x00 d\x00\x00+!\x00\x00+!\x00\x00\x10\xdc\x00\x00\x10\xdc\x00\x00+!\x00\x00+\xdc\x00\x00+\xdc\x00\x00 0\x00\x00\x02\x80\x00\x00+0\x00\x00\x15\x97\x00\x00\x15\x97\x00\x00)\xdc\x00\x00)\xdc\x00\x00\x01\xdc\x00\x00\x01!\x00\x00\f\xd0\x00\x00\f\xd0\x00\x00\x150\x00\x00\b\xe6\x00\x00\x1c\xd0\x00\x00\x1c\xd0\x00\x00 \xd0\x00\x00 \xd0\x00\x00\x10\xd0\x00\x00\"\xb0\x01\x06\x13\xb0\t\x04\n\xb0\x11\x04\x1f\xb0\r\x02\t\xb0)\x03\x19\xb0-\x03\x0e\xb8\x15\x03'\xb0\x01\x03\v\xb0\x19\x00\x16\xb8=\x05\x1e\xb0\x05\x01\x17\xb0\x01\x04,\xb0\x01\x04#\xb09\x02!\xb0\r\x03\x18\xb0%\x02$\xb8\x01\x03(\xb0\x01\x02\x0f\xb0\x1d\x04\r\xb0A\x00\x11\xb0-\x02\x12\xb0%\x00*\xb0%\x02\x1a\xb05\x04\x14\xb8%\x02\x1b\xb0!\x04\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x15\x80\x00\x00\x10\xd0\x00\x00\x10\xd0\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\b\xed\x00\x00\b\xed\x00\x00\x04\xed\x00\x00\x04\xed\x00\x00\x03\xed\x00\x00\b\xed\x00\x00\b\xed\x00\x00\x10\xed\x00\x00\b\xed\x00\x00\x03\xdc\x00\x00%\x1e\x00\x00\x1d\xb0\x00\x00&\xb0\x00\x00\x05\xdc0\x00\x15\x80\x00\x00\x15\x80\x00\x00 \xcb\x00\x00 \xcb\x00\x00\a\xdc\x00\x00\x06\xdc\x00\x00\x06\xdc\x00\x00\x10\xdc\x00\x00 \xda\x00\x00 \xda\x00\x00 \xda\x00\x00 \xda\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05E\x15\x00\x05m\xb9\x00\ae\x99\x00\a\xe5\x9b\x00\ba\x89\x00\ba\x8b\x00\t]y\x00\t\xdbu\x00\t\xecG\x00\nX\x12\x00\nYi\x00\n]y\x00\v\x04+\x00\v<)\x00\vUY\x00\v|\x1b\x00\v\x84\xd2\x00\f\x0e\x15\x00\f:\xde\x00\fQI\x00\f\x83\xae\x00\f\xaa\xdb\x00\f\xf2I\x00\r\x17\xfb\x00\r\x1a\t\x00\r+\x97\x00\rM9\x00\r\xbf\x02\x00\r\xf2e\x00\x0e;0\x00\x0eI)\x00\x0e~P\x00\x0e\xae\x80\x00\x0e\xf8\x19\x00\x0e\xf9\x87\x00\x0f\x04\x15\x00\x0fE\x19\x00\x0f\xa8\x87\x00\x0f\xb2R\x00\x10A\t\x00\x12)g\x00\x128\xe9\x00\x15{\xa7\x00\x00\x00\x00\x00\x00\xc6\xf2\x00\x06%0\x00\x06\xe3\x8e\x00\aq\xc7\x00\aq\xc9\x00\a\xe6\xe5\x00\b@\xd5\x00\b\xe3\x90\x00\t5\xf7\x00\t\xe7\xa0\x00\n\xee\xf0\x00\n\xf7\xae\x00\v\x1cr\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe%0\xff\xffq\xc7\xff\xffq\xc9\xff\xff\xe6\xe5\x00\x00@\xd5\x00\x00\xe3\x8e\x00\x015\xf7\x00\x01\x8e9\x00\x01\xe7\xa0\x00\x02\x12\xf7\x00\x02\xf7\xae\x00\x03\x1cr\x00\x04\x00\x00\x00\x0f9\x0e\x00\x00\x00\x00\x00\x00\x05\x89\x00\x00dp\x00\x00}\xf9\x00\x00̒\x00\x00\xe7r\x00\x01\t\xf7\x00\x01' \x00\x01JG\x00\x01V\xe2\x00\x01Y\xa0\x00\x01\x9c\xd9\x00\x01\xf7\xe0\x00\x02W\xc5\x00\x02g\xc9\x00\x02\xfa\xb7\x00\x045\xa5\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00}\xf9\x00\x00\xfb\xf2\x00\x01y\xeb\x00\x01\xf7\xe5\x00\x02u\xde\x00\x02\xf3\xd7\x00\x03q\xd0\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x12\xba\xf2\x00\x00\x00\x00\x00\v\xb7\x8e\x00\x06$w\x00\a\x8a\x0e\x00\f\b\xce\x00\x05\x81\xe7\x00\b\nk\x00\x06\xe5\xd9\x00\x04\x92I\x00\x02I%\x00\x04\x92I\x00\x05\xa6\x97\x00\x01$\x92\x00\x1b32\x00\x12\x83\xa9\x00\x04\x00\x00",
	"/texfonts/cmu10.tfm":       "\x01?\x00\x12\x00\x00\x00\u007f\x00)\x00\x10\x00\n\x00\a\x00M\x00\t\x00\x00\x00\a\x13 P\xe2\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMU\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x14\xc0\x00\x00!\xc0\x00\x00\x1f\xc0\x00\x00\x19\xc0\x00\x00\x17\xc0\x00\x00\x1d\xc0\x00\x00\x1b\xc0\x00\x00\x1f\xc0\x00\x00\x1b\xc0\x00\x00\x1f\xc0\x00\x00\x1b\xc0\x00\x00\x13\xd8\x19\b\x11\xd8\x14\x00\x12\xd8\x14\x00\"\xd8\x14\x00$\xd8\x14\x00\x020\x14\x00\x048\x00\x00\r\xd0\x00\x00\r\xd0\x00\x00\r\x90\x00\x00\r\xd0\x00\x00\r`\x00\x00\x1d\xd0\x00\x00\n\x06\x00\x00\x10\xd8\x00\x00\x1b0\x00\x00\x1b0\x00\x00\rU\x00\x00#\xc0\x00\x00&\xc0\x00\x00\x1f\xe2\x00\x00\x010\x01\x0f\x02\xd0\x01\x17\r\xd0\x00\x00!\xd7\x00\x00\x15\xd0\x00\x00!\xf3\x00\x00\x1f\xd0\x00\x00\x02\xd0\x01\x12\a\xf9\x00\x00\a\xf9\x00\x00\r\xf0\x00\x00\x1ft\x00\x00\x02\x18\x00\x00\x050\x01\x15\x02\x10\x00\x00\r\xf9\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa8\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa8\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\x020\x00\x00\x028\x00\x00\x02H\x00\x00\x1f!\x00\x00\rH\x00\x00\r\xd0\x01\x18\x1f\xd0\x00\x00\x1d\xc0\x010\x1a\xc0\x00\x00\x1b\xc0\x00\x00\x1e\xc0\x01+\x18\xc0\x00\x00\x16\xc0\x01\x1a \xc0\x00\x00\x1d\xc0\x00\x00\x06\xc0\x00\x00\x0e\xc0\x00\x00\x1f\xc0\x01 \x14\xc0\x01A%\xc0\x00\x00\x1d\xc0\x00\x00\x1f\xc0\x01+\x18\xc0\x01*\x1f\xc8\x00\x00\x1c\xc0\x010\x11\xc0\x00\x00\x1b\xc0\x01$\x1d\xc0\x00\x00\x1d\xc0\t\x1a'\xc0\t*\x1d\xc0\x01 \x1d\xc0\r%\x13\xc0\x00\x00\x02\xf9\x00\x00\r\xd0\x00\x00\x02\xf9\x00\x00\r\xd0\x00\x00\x02\xb0\x00\x00\x02\xd0\x01\x11\r0\x14\x00\n\xd0\x01E\n0\x01E\r\xd0\x15\x19\n0\x01E\x03\xd8\x19\x00\n8\x00\x00\r\xd0\x14\x00\x02\xb0\x14\x00\x02\xb8\x00\x00\n\xd0\x00\x00\x01\xd0\x15\x19!0\x14\x00\x110\x15L\r0\x01E\r8\x01E\n8\x00\x00\t0\x01E\a0\x00\x00\x04\x80\x14\x00\x0f0\x14\x00\n0\x00\x00\x170\x01\x19\v0\x14\x00\f8\x00\x00\b0\x04\x00\r0\x11\x16(0\x10\x00\r\xd0\x00\x00\r\xb0\x00\x00\r\xb0\x00\x00\x00\x00\x00\x00\x00\x04q\xc6\x00\x05UU\x00\x05UV\x00\x05\xc7\x1d\x00\x068\xe3\x00\x06\xaa\xaa\x00\a\x1cr\x00\a\x1cs\x00\aUV\x00\b\x00\x00\x00\b\"#\x00\bq\xc8\x00\b\xe3\x8e\x00\t\x1cr\x00\tUV\x00\tUX\x00\t\xc7\x1d\x00\n8\xe3\x00\n\xaa\xab\x00\n\xe3\x8e\x00\v\x1cr\x00\vUV\x00\v\x8e:\x00\v\xc7\x1d\x00\f\x00\x00\x00\f8\xe5\x00\fq\xc8\x00\f\xaa\xab\x00\f\xe3\x8e\x00\r\x1cs\x00\rUV\x00\rq\xc8\x00\x0e8\xe5\x00\x0fUU\x00\x0fUV\x00\x0f\x8e8\x00\x0f\x8e:\x00\x11\x1cs\x00\x11UV\x00\x11\xc7\x1d\x00\x00\x00\x00\x00\x01\xb0[\x00\x05\u07b8\x00\x06\xe3\x8e\x00\b\x00\x00\x00\bq\xc8\x00\t\x15\x9d\x00\tUV\x00\t\xd7^\x00\n\x0e:\x00\nO\xa5\x00\n\xa1S\x00\n\xee\xee\x00\v\x1cr\x00\v\xb6\v\x00\f\x00\x00\x00\x00\x00\x00\xff\xfd\u07b8\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01UV\x00\x01\x8e:\x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x0033\x00\x008\xe3\x00\x00ff\x00\x00q\xc8\x00\x00\xa4\xfb\x00\x00\xaa\xab\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x00\x00?\x80\x00\x00!\x80\x00\x00)\x80\x00\x80]\x80\x00\x00l\x80\x01\x80L\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x80l\x80\x04\x00o\x80\x05\x00e\x80\x05\x00u\x80\x05\x00r\x80\x05\x00a\x80\x05\x00A\x80\x06\x00O\x80\a\x00C\x80\a\x00G\x80\a\x80Q\x80\a\x00y\x80\x05\x00e\x80\x05\x00o\x80\x05\x00r\x80\x05\x00a\x80\x05\x00u\x80\x05\x80A\x80\x05\x00X\x80\a\x00W\x80\a\x00A\x80\a\x00V\x80\a\x80Y\x80\a\x00n\x80\a\x00l\x80\a\x00r\x80\a\x00u\x80\a\x00m\x80\a\x00t\x80\a\x00i\x80\a\x00C\x80\a\x00O\x80\a\x00G\x80\a\x00h\x80\a\x00b\x80\a\x00U\x80\a\x00k\x80\a\x00v\x80\a\x00w\x80\a\x00Q\x80\a\x00T\x80\x05\x00Y\x80\x05\x00V\x80\x06\x00W\x80\x06\x00e\x80\b\x00a\x80\b\x00o\x80\b\x00d\x80\b\x00c\x80\b\x00g\x80\b\x80q\x80\b\x80'\x80\x06\x00\x00\xaa\xab\xff\xfb\x8e:\xff\xfaq\xc8\x00\x01\xc7\x1d\x00\x00\xe3\x8e\xff\xfe\xaa\xaa\xff\xfe8\xe3\xff\xff\x8e8\xff\xff\x1cr\x00\x00\x00\x00\x00\x068\xe3\x00\x02\xaa\xab\x00\x01\xc7\x1d\x00\x06\xe3\x8e\x00\x11\xc7\x1d\x00\x01\xc7\x1d",
	"/texfonts/trip.tfm":        "\x03\v\x00\x12\x00\x00\x00\x82\x00\t\x00\x04\x00\x03\x00\x03\x01I\x01\x06\x00\x01\x00\r\xd1\x1fX\xd1\x00\xa0\x00\x00\x19TEX TEST: NOT A REAL FONT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\vUNSPECIFIED\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\b\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\xf6\x00\x00\x00\x00\x03\x00\x01\xf8\x00\x00\x00\x00\x02\x00\x01\t\x02\x00\x01\b\x02\x00\x01\a\x02\x00\x01\x06\x02\x00\x01\x05\x02\x00\x01\x04\x02\x00\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04!\x05\x02\x052\x01\x01\x06\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\a\x00\v\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04!\x06\x82\x052\x02M\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x0e\x02\x00\x01\r\x02\x00\x01\f\x02\x00\x01\v\x02\x00\x01\x0f\x02\x00\x01\n\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x01\x99\x9a\x00\x0334\x00\x04\xcc\xcd\x00\x06fg\x00\t\x99\x9a\x00\v34\x00\x00\x00\x00\xff\xfeff\x00\v34\x00\f\xcc\xcd\x00\x00\x00\x00\x00\x01\x99\x9a\x00\x0334\x00\x00\x00\x00\x00\x01\x99\x9a\x00\x0334\xffZ\x01F\xffZ\x01C\xffZ\x01?\xffZ\x01>\xffZ\x018\xffZ\x013\xffZ\x01/\xffZ\x01,\xffZ\x01*\xffZ\x01'\xffZ\x01\"\xffZ\x01 \xffZ\x01\x1c\xffZ\x01\x18\xffZ\x01\x15\x00\x00\x80\x00\x00\x00\x80\x01\x00\x00\x80\x02\x00\x00\x80\x03\x00\x00\x80\x04\x00\x00\x80\x05\x00\x00\x80\x06\x00\x00\x80\a\x00\x00\x80\b\x00\x00\x80\t\x00\x00\x80\n\x00\x00\x80\v\x00\x00\x80\f\x00\x00\x80\r\x00\x00\x80\x0e\x00\x00\x80\x0f\x00\x00\x80\x10\x00\x00\x80\x11\x00\x00\x80\x12\x00\x00\x80\x13\x00\x00\x80\x14\x00\x00\x80\x15\x00\x00\x80\x16\x00\x00\x80\x17\x00\x00\x80\x18\x00\x00\x80\x19\x00\x00\x80\x1a\x00\x00\x80\x1b\x00\x00\x80\x1c\x00\x00\x80\x1d\x00\x00\x80\x1e\x00\x00\x80\x1f\x00\x00\x80 \x00\x00\x80!\x00\x00\x80\"\x00\x00\x80#\x00\x00\x80$\x00\x00\x80%\x00\x00\x80&\x00\x00\x80'\x00\x00\x80(\x00\x00\x80)\x00\x00\x80*\x00\x00\x80+\x00\x00\x80,\x00\x00\x80-\x00\x00\x80.\x00\x00\x80/\x00\x00\x800\x00\x00\x801\x00\x00\x802\x00\x00\x803\x00\x00\x804\x00\x00\x805\x00\x00\x806\x00\x00\x807\x00\x00\x808\x00\x00\x809\x00\x00\x80:\x00\x00\x80;\x00\x00\x80<\x00\x00\x80=\x00\x00\x80>\x00\x00\x80?\x00\x00\x80@\x00\x00\x80A\x00\x00\x80B\x00\x00\x80C\x00\x00\x80D\x00\x00\x80E\x00\x00\x80F\x00\x00\x80G\x00\x00\x80H\x00\x00\x80I\x00\x00\x80J\x00\x00\x80K\x00\x00\x80L\x00\x00\x80M\x00\x00\x80N\x00\x00\x80O\x00\x00\x80P\x00\x00\x80Q\x00\x00\x80R\x00\x00\x80S\x00\x00\x80T\x00\x00\x80U\x00\x00\x80V\x00\x00\x80W\x00\x00\x80X\x00\x00\x80Y\x00\x00\x80Z\x00\x00\x80[\x00\x00\x80\\\x00\x00\x80]\x00\x00\x80^\x00\x00\x80_\x00\x00\x80`\x00\x00\x80a\x00\x00\x80b\x00\x00\x80c\x00\x00\x80\x00\x00\x00\x80d\x00\x00\x80e\x00\x00\x80f\x00\x00\x80g\x00\x00\x80h\x00\x00\x80i\x00\x00\x80j\x00\x00\x80k\x00\x00\x80l\x00\x00\x80m\x00\x00\x80n\x00\x00\x80o\x00\x00\x80p\x00\x00\x80q\x00\x00\x80r\x00\x00\x80s\x00\x00\x80t\x00\x00\x80u\x00\x00\x80v\x00\x00\x80w\x00\x00\x80x\x00\x00\x80y\x00\x00\x80z\x00\x00\x80{\x00\x00\x80|\x00\x00\x80}\x00\x00\x80~\x00\x00\x80\u007f\x00\x00\x80\x80\x00\x00\x80\x81\x00\x00\x80\x82\x00\x00\x80\x83\x00\x00\x80\x84\x00\x00\x80\x85\x00\x00\x80\x86\x00\x00\x80\x87\x00\x00\x80\x88\x00\x00\x80\x89\x00\x00\x80\x8a\x00\x00\x80\x8b\x00\x00\x80\x8c\x00\x00\x80\x8d\x00\x00\x80\x8e\x00\x00\x80\x8f\x00\x00\x80\x90\x00\x00\x80\x91\x00\x00\x80\x92\x00\x00\x80\x93\x00\x00\x80\x94\x00\x00\x80\x95\x00\x00\x80\x96\x00\x00\x80\x97\x00\x00\x80\x98\x00\x00\x80\x99\x00\x00\x80\x9a\x00\x00\x80\x9b\x00\x00\x80\x9c\x00\x00\x80\x9d\x00\x00\x80\x9e\x00\x00\x80\x9f\x00\x00\x80\xa0\x00\x00\x80\xa1\x00\x00\x80\xa2\x00\x00\x80\xa3\x00\x00\x80\xa4\x00\x00\x80\xa5\x00\x00\x80\xa6\x00\x00\x80\xa7\x00\x00\x80\xa8\x00\x00\x80\xa9\x00\x00\x80\xaa\x00\x00\x80\xab\x00\x00\x80\xac\x00\x00\x80\xad\x00\x00\x80\xae\x00\x00\x80\xaf\x00\x00\x80\xb0\x00\x00\x80\xb1\x00\x00\x80\xb2\x00\x00\x80\xb3\x00\x00\x80\xb4\x00\x00\x80\xb5\x00\x00\x80\xb6\x00\x00\x80\xb7\x00\x00\x80\xb8\x00\x00\x80\xb9\x00\x00\x80\xba\x00\x00\x80\xbb\x00\x00\x80\xbc\x00\x00\x80\xbd\x00\x00\x80\xbe\x00\x00\x80\xbf\x00\x00\x80\xc0\x00\x00\x80\xc1\x00\x00\x80\xc2\x00\x00\x80\xc3\x00\x00\x80\xc4\x00\x00\x80\xc5\x00\x00\x80\xc6\x00\x00\x80\xc7\x00\x00\x80\xc8\x00\x00\x80\xc9\x00\x00\x80\xca\x00\x00\x80\xcb\x00\x00\x80\xcc\x00\x00\x80\xcd\x00\x00\x80\xce\x00\x00\x80\xcf\x00\x00\x80\xd0\x00\x00\x80\xd1\x00\x00\x80\xd2\x00\x00\x80\xd3\x00\x00\x80\xd4\x00\x00\x80\xd5\x00\x00\x80\xd6\x00\x00\x80\xd7\x00\x00\x80\xd8\x00\x00\x80\xd9\x00\x00\x80\xda\x00\x00\x80\xdb\x00\x00\x80\xdc\x00\x00\x80\xdd\x00\x00\x80\xde\x00\x00\x80\xdf\x00\x00\x80\xe0\x00\x00\x80\xe1\x00\x00\x80\xe2\x00\x00\x80\xe3\x00\x00\x80\xe4\x03\x00\x80\xe5\x00\x00\x00-\x00q\x06p\x80A\x80\xe6\x00\x00\x80\xe7\x00\x00\x80\xe8\x00\x00\x80\xe9\x00\x00\x80\xea\x00\x00\x80\xeb\x00\x00\x80\xec\x00\x00\x80\xed\x00\x00\x80\xee\x00\x00\x80\xef\x00\x00\x80\xf0\x00\x00\x80\xf1\x00\x00\x80\xf2\x00\x00\x80\xf3\x00\x00\x80\xf4\x00\x00\x80\xf5\x00\x00\x80\xf6\x00\x00\x80\xf7\x00\x00\x80\xf8\x00\x00\x80\xf9\x00\x00\x80\xfa\x00\x00\x80\xfb\x00\x00\x80\xfc\x00\x00\x80\xfd\x00\x00\x80\xfe\x00\x00\x80\xff\x00\x00\x81\x00\x00\x00\x81\x01\tr\vs\x00q\x03r\x00r\at\x80t\x00t\x00u\x03p\x00s\x03r\x00t\x80\xe6\x02r\x06t\x00u\x01q\x80q\x02u\x00p\x03s\x80s\x81\x02\x00p\x05q\x80r\x80\xe6\x00Z\x02p\x80p\x00r\x00q\x01q\x001\x025\x80-\x80\n\x001\x032\x002\x033\x01-\x061\x001\x033\x023\x034\x001\x034\x002\x034\x034\x035\x001\x035\x002\x035\x003\x035\x045\x036\x001\x036\x002\x036\x003\x036\x004\x036\x056\x037\x001\x037\x002\x037\x003\x037\x004\x037\x005\x037\x80Z\v7\x00Z\x80\xe6\x00A\x00A\x00B\x81\x03\x00-\x81\x02\x801\x81\x04\x00B\x00A\x00-\x00C\x80C\x81\x05\x00A\x00\x82\x80/\x00B\xff\x00\x01$\xff\xf0\x00\x00\xff\xff\xd7\n\xff\xff\xae\x14\xff\xff\x85\x1f\xff\xff\\)\xff\xff33\xff\xff\n=\xff\xfe\xe1H\xff\xfe\xb8R\xff\xfe\x8f\\\xff\xfeff\xff\xfe=q\xff\xfe\x14{\xff\xfd\xeb\x85\xff\xfd\u008f\xff\xfd\x99\x9a\xff\xfdp\xa4\xff\xfdG\xae\xff\xfd\x1e\xb8\xff\xfc\xf5\xc3\xff\xfc\xcc\xcd\xff\xfc\xa3\xd7\xff\xfcz\xe1\xff\xfcQ\xec\xff\xfc(\xf6\xff\xfc\x00\x00\xff\xfb\xd7\n\xff\xfb\xae\x14\xff\xfb\x85\x1f\xff\xfb\\)\xff\xfb33\xff\xfb\n=\xff\xfa\xe1H\xff\xfa\xb8R\xff\xfa\x8f\\\xff\xfaff\xff\xfa=q\xff\xfa\x14{\xff\xf9\xeb\x85\xff\xf9\u008f\xff\xf9\x99\x9a\xff\xf9p\xa4\xff\xf9G\xae\xff\xf9\x1e\xb8\xff\xf8\xf5\xc3\xff\xf8\xcc\xcd\xff\xf8\xa3\xd7\xff\xf8z\xe1\xff\xf8Q\xec\xff\xf8(\xf6\xff\xf8\x00\x00\xff\xf7\xd7\n\xff\xf7\xae\x14\xff\xf7\x85\x1f\xff\xf7\\)\xff\xf733\xff\xf7\n=\xff\xf6\xe1H\xff\xf6\xb8R\xff\xf6\x8f\\\xff\xf6ff\xff\xf6=q\xff\xf6\x14{\xff\xf5\xeb\x85\xff\xf5\u008f\xff\xf5\x99\x9a\xff\xf5p\xa4\xff\xf5G\xae\xff\xf5\x1e\xb8\xff\xf4\xf5\xc3\xff\xf4\xcc\xcd\xff\xf4\xa3\xd7\xff\xf4z\xe1\xff\xf4Q\xec\xff\xf4(\xf6\xff\xf4\x00\x00\xff\xf3\xd7\n\xff\xf3\xae\x14\xff\xf3\x85\x1f\xff\xf3\\)\xff\xf333\xff\xf3\n=\xff\xf2\xe1H\xff\xf2\xb8R\xff\xf2\x8f\\\xff\xf2ff\xff\xf2=q\xff\xf2\x14{\xff\xf1\xeb\x85\xff\xf1\u008f\xff\xf1\x99\x9a\xff\xf1p\xa4\xff\xf1G\xae\xff\xf1\x1e\xb8\xff\xf0\xf5\xc3\xff\xf0\xcc\xcd\xff\xf0\xa3\xd7\xff\xf0z\xe1\xff\xf0Q\xec\xff\xf0(\xf6\xff\xef\xd7\n\xff\xef\xae\x14\xff\xef\x85\x1f\xff\xef\\)\xff\xef33\xff\xef\n=\xff\xee\xe1H\xff\xee\xb8R\xff\xee\x8f\\\xff\xeeff\xff\xee=q\xff\xee\x14{\xff\xed\xeb\x85\xff\xed\u008f\xff홚\xff\xedp\xa4\xff\xedG\xae\xff\xed\x1e\xb8\xff\xec\xf5\xc3\xff\xec\xcc\xcd\xff\xec\xa3\xd7\xff\xecz\xe1\xff\xecQ\xec\xff\xec(\xf6\xff\xec\x00\x00\xff\xeb\xd7\n\xff\xeb\xae\x14\xff\xeb\x85\x1f\xff\xeb\\)\xff\xeb33\xff\xeb\n=\xff\xea\xe1H\xff\xea\xb8R\xff\xea\x8f\\\xff\xeaff\xff\xea=q\xff\xea\x14{\xff\xe9\xeb\x85\xff\xe9\u008f\xff陚\xff\xe9p\xa4\xff\xe9G\xae\xff\xe9\x1e\xb8\xff\xe8\xf5\xc3\xff\xe8\xcc\xcd\xff\xe8\xa3\xd7\xff\xe8z\xe1\xff\xe8Q\xec\xff\xe8(\xf6\xff\xe8\x00\x00\xff\xe7\xd7\n\xff\xe7\xae\x14\xff\xe7\x85\x1f\xff\xe7\\)\xff\xe733\xff\xe7\n=\xff\xe6\xe1H\xff\xe6\xb8R\xff\xe6\x8f\\\xff\xe6ff\xff\xe6=q\xff\xe6\x14{\xff\xe5\xeb\x85\xff\xe5\u008f\xff噚\xff\xe5p\xa4\xff\xe5G\xae\xff\xe5\x1e\xb8\xff\xe4\xf5\xc3\xff\xe4\xcc\xcd\xff\xe4\xa3\xd7\xff\xe4z\xe1\xff\xe4Q\xec\xff\xe4(\xf6\xff\xe4\x00\x00\xff\xe3\xd7\n\xff\xe3\xae\x14\xff\xe3\x85\x1f\xff\xe3\\)\xff\xe333\xff\xe3\n=\xff\xe2\xe1H\xff\xe2\xb8R\xff\xe2\x8f\\\xff\xe2ff\xff\xe2=q\xff\xe2\x14{\xff\xe1\xeb\x85\xff\xe1\u008f\xffᙚ\xff\xe1p\xa4\xff\xe1G\xae\xff\xe1\x1e\xb8\xff\xe0\xf5\xc3\xff\xe0\xcc\xcd\xff\xe0\xa3\xd7\xff\xe0z\xe1\xff\xe0Q\xec\xff\xe0(\xf6\xff\xe0\x00\x00\xff\xdf\xd7\n\xff߮\x14\xff߅\x1f\xff\xdf\\)\xff\xdf33\xff\xdf\n=\xff\xde\xe1H\xff\u07b8R\xffޏ\\\xff\xdeff\xff\xde=q\xff\xde\x14{\xff\xdd\xeb\x85\xff\xdd\u008f\xffݙ\x9a\xff\xddp\xa4\xff\xddG\xae\xff\xdd\x1e\xb8\xff\xdc\xf5\xc3\xff\xdc\xcc\xcd\xffܣ\xd7\xff\xdcz\xe1\xff\xdcQ\xec\xff\xdc(\xf6\xff\xdc\x00\x00\xff\xdb\xd7\n\xffۮ\x14\xffۅ\x1f\xff\xdb\\)\xff\xdb33\x00\x01\x99\x9a\xff\xdb\n=\xff\xda\xe1H\xffڸR\xffڏ\\\xff\xdaff\xff\xda=q\xff\xda\x14{\xff\xd9\xeb\x85\xff\xd9\u008f\xffٙ\x9a\xff\xd9p\xa4\xff\xd9G\xae\xff\xd9\x1e\xb8\xff\xd8\xf5\xc3\xff\xd8\xcc\xcd\xffأ\xd7\xff\xd8z\xe1\xff\xd8Q\xec\xff\xd8(\xf6\xff\xd8\x00\x00\xff\xd7\xd7\n\xff\u05ee\x14\xffׅ\x1f\xff\xd7\\)\xff\xd733\xff\xd7\n=\xff\xd6\xe1H\x00\x04\xcc\xcd\x00\x0334\xff\xfc\xcc\xcc\x00\x06fg\x00AB\x00\xff\xe0\x00\x00\x00\x06fg\x00\x0334\x00\x01\x99\x9a\x00\a33\x00\x10\x00\x00\x00\x0334\x00\x00\xcc\xcd\x00\x01\x99\x9a\x00\x0334\x00\x04\xcc\xcd\x00\x06fg\x00\b\x00\x00",
	"/texfonts/cmsy6.tfm":       "\x01\x17\x00\x12\x00\x00\x00\u007f\x00,\x00\x0f\x00\x10\x00\x10\x00\a\x00\a\x00\x00\x00\x16q\xa1%\v\x00`\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf2\x1f\xaa\x00\x00\x03S\x00\x00\x1f\xaa\x00\x00\aB\x00\x00\x1f\xaa\x00\x00\aS\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00\x1f\xaa\x00\x00)\xcc\x00\x00\aS\x00\x00\aS\x00\x00\x1fd\x00\x00\x1fd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x1f!\x00\x00\x1fu\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)\x97\x00\x00)\x97\x00\x00\x1f\x97\x00\x00\x1f\x97\x00\x00)!\x00\x00)!\x00\x00\a\xcb\x00\x00\a\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1fd\x00\x00)!\x00\x00)!\x00\x00\x0f\xcb\x00\x00\x0f\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1f0\x00\x00\x02\x80\x00\x00)0\x00\x00\x14\x97\x00\x00\x14\x97\x00\x00(\xcc\x00\x00(\xcc\x00\x00\x01\xcb\x00\x00\x01!\x00\x00\n\xc0\x00\x00\n\xc0\x00\x00\x140\x00\x00\a\xe6\x00\x00\x1b\xc0\x00\x00\x1b\xc0\x00\x00\x1f\xc0\x00\x00\x1f\xc0\x00\x00\x0f\xc0\x00\x00!\xb0\x01\x06\x12\xb0\x05\x04\t\xb0\r\x04\x1e\xb0\t\x02\b\xb0!\x03\x18\xb0)\x03\r\xb8\x11\x03&\xb0\x01\x03\v\xb0\x15\x00\x15\xb89\x05\x1d\xb0\x01\x01\x16\xb0\x01\x04+\xb0\x01\x04#\xb05\x02 \xb0\t\x03\x17\xb0%\x02$\xb8\x01\x03'\xb0\x01\x02\x0e\xb0\x19\x04\f\xb0=\x00\x10\xb0)\x02\x11\xb0%\x00*\xb0%\x02\x19\xb01\x04\x13\xb8%\x02\x1a\xb0\x1d\x04\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x0f\xc0\x00\x00\x0f\xc0\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\x06\xee\x00\x00\a\xee\x00\x00\a\xee\x00\x00\x04\xee\x00\x00\x04\xee\x00\x00\x03\xee\x00\x00\a\xee\x00\x00\a\xee\x00\x00\x0f\xee\x00\x00\a\xee\x00\x00\x03\xcb\x00\x00\"\x1f\x00\x00\x1c\xb0\x00\x00%\xb0\x00\x00\x05\xcc,\x00\x14\x80\x00\x00\x14\x80\x00\x00\x1f\xdd\x00\x00\x1f\xdd\x00\x00\x06\xcc\x00\x00\x06\xcc\x00\x00\x06\xcc\x00\x00\x0f\xcc\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x1f\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xda\x13\x00\x06\x12\xf5\x00\b%\xeb\x00\b\xaa\xab\x00\t/e\x00\n8\xe0\x00\n\xbd\x9d\x00\nڠ\x00\vB[\x00\vYc\x00\va\x80\x00\v\xf2\x83\x00\f1H\x00\fK\xd5\x00\fd\x15\x00\f\x90K\x00\r\x035\x00\r.\xa5\x00\rUP\x00\r\x8ah\x00\r\xac+\x00\x0e\x0e\x03\x00\x0e\x13\xe0\x00\x0e#u\x00\x0e$\xc5\x00\x0e^\xcb\x00\x0e\xc8\xfb\x00\x0f\x05M\x00\x0fa\x10\x00\x0fhE\x00\x0f\x91;\x00\x0f\xd6\xcd\x00\x0f\xff\xf8\x00\x10\x175\x00\x10\"\x1b\x00\x10q\xc0\x00\x10\xf2\xf8\x00\x10\xfbk\x00\x11{;\x00\x13\x8e0\x00\x13\x90E\x00\x16\xd5\xf0\x00\x00\x00\x00\x00\x00Ӡ\x00\x06=(\x00\x06\xe3\x8d\x00\aq\xc8\x00\a\xa1-\x00\b\x10\x80\x00\bm\xf8\x00\b\xe3\x90\x00\the\x00\n8\xe0\x00\n\xee\xf0\x00\v\x1cs\x00\v;\xbd\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe=(\xff\xffq\xc8\xff\xff\xa1-\x00\x00\x10\x80\x00\x00m\xf8\x00\x00\xe3\x8d\x00\x01he\x00\x01\x8e;\x00\x02\x12\xf8\x00\x028\xe0\x00\x03\x1cp\x00\x03\x1cs\x00\x03;\xbd\x00\x04\x00\x00\x00\x0f,`\x00\x00\x00\x00\x00\x00W\x05\x00\x00\x84\xbd\x00\x00\xb9{\x00\x00\xe1\x18\x00\x00\xf4+\x00\x01 k\x00\x01L\xfd\x00\x01N \x00\x01ZC\x00\x01\xa0=\x00\x02\x12\xf5\x00\x02W\xc8\x00\x02n\x8d\x00\x02\xfe\x1d\x00\x04I\xf5\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00\x84\xbd\x00\x01\t{\x00\x01\x8e8\x00\x02\x12\xf5\x00\x02\x97\xb3\x00\x03\x1cp\x00\x03\xa1-\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8d\x00\x14q\xc0\x00\x00\x00\x00\x00\r\x00\xd0\x00\x06F\xfd\x00\a\xc2@\x00\r\xd1e\x00\x06ޭ\x00\b\f(\x00\x06\xb6\xd3\x00\x04\x97\xb5\x00\x02\xaa\xab\x00\x05UU\x00\x06\x97\xb0\x00\x01UU\x00\x1f\xbb\xbb\x00\x15\x99\x9b\x00\x04\x00\x00",
	"/texfonts/cmtt8.tfm":       "\x00\xc0\x00\x12\x00\x00\x00\u007f\x00\x02\x00\x10\x00\f\x00\x01\x00\x02\x00\x00\x00\x00\x00\a\xdfC\xcas\x00\x80\x00\x00\x13TeX typewriter text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMTT\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01;\x00\x00\x01;\x00\x00\x01P\x00\x00\x01[\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x00\x00\x01\xc0\x00\x00\x01\xd0\x00\x00\x01\n\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x88\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xe4\x00\x00\x01(\x00\x00\x01\xd0\x01\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf6\x00\x00\x01\xf6\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01`\x00\x00\x01r\x00\x00\x01\x19\x00\x00\x01r\x00\x00\x01\x10\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01Y\x00\x00\x01\xa3\x00\x00\x01A\x00\x00\x01\xa3\x00\x00\x01\xd0\x01\x01\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd9\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\a\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01\xd0\x00\x00\x01[\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01\xdb\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01[\x00\x00\x01[\x00\x00\x01P\x00\x00\x01P\x00\x00\x01\x90\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01P\x00\x00\x01[\x00\x00\x01P\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xf5\x00\x00\x01\xd0\x00\x00\x01\xd0\x00\x00\x00\x00\x00\x00\x00\b\x80\b\x00\x00\x00\x00\x00\x02'\x1e\x00\x03\x80\x00\x00\x068\xe4\x00\x06\xb4\x9e\x00\x06\xe3\x8e\x00\bUV\x00\b\x88$\x00\b\xaa\xaa\x00\b\xdbp\x00\b\xf1\xc8\x00\t\x0e8\x00\t\" \x00\t\xc7\x1c\x00\n\xaa\xaa\x00\v\x1cr\x00\x00\x00\x00\xff\xfc\xed\x82\xff\xfe\xc1\b\xff\xff*\xac\x00\x00\xe3\x8e\x00\x01UT\x00\x01UV\x00\x01\x93\xe4\x00\x01\xc7\x1c\x00\x028\xe4\x00\x03\x1cr\x00\x03\x8e8\x00\x00\x00\x00\x80`\x00\x0e\x80`\x00\x0f\x00\x00\x00\x00\x00\b\x80\b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8e\x00\x11\x00\x10\x00\b\x80\b",
	"/texfonts/black.tfm":       "\x00\xb0\x00\x12\x00\x00\x00z\x00\x05\x00\x03\x00\f\x00\x01\x00\x00\x00\x00\x00\x00\x00\b\x1a\x02\x88\x03\x00{W\x00\x06GFGRAY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\aBLACKCX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x03 \x00\x00\x01\x10\x00\x00\x01\x11\x00\x00\x01\x11\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x12\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x13\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x14\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x15\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x16\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x17\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x18\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x19\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1a\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x00\x00\x01\x1b\x02y\x02\x1b\x02z\x04\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x02\x00\b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x06\x00\x02\x00\x00\x00\x00\x00\x02\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\b\x00\x00\x00\n\x00\x00\x00\f\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00",
	"/texfonts/cmbx10.tfm":      "\x01L\x00\x12\x00\x00\x00\u007f\x00-\x00\x0f\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a\x1a\xf2\"V\x00\xa0\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMBX\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xea\x14\xb0\x00\x00'\xb0\x00\x00#\xb0\x00\x00\x1b\xb0\x00\x00\x18\xb0\x00\x00$\xb0\x00\x00\x1d\xb0\x00\x00#\xb0\x00\x00\x1d\xb0\x00\x00#\xb0\x00\x00\x1d\xb0\x00\x00\x13\xc0\x11\n\x12\xc0\x00\x00\x12\xc0\x00\x00'\xc0\x00\x00'\xc0\x00\x00\x010\x00\x00\x038\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\rp\x00\x00\r\xc0\x00\x00\r`\x00\x00 \xc0\x00\x00\t\x06\x00\x00\x0f\xc0\x00\x00\x1d0\x00\x00#0\x00\x00\rT\x00\x00(\xb0\x00\x00+\xb0\x00\x00#\xd2\x00\x00\x010\x01\x00\x02\xc0\x01\x17\x10\xc0\x00\x00'\xc7\x00\x00\r\xe3\x00\x00'\xe3\x00\x00#\xc0\x00\x00\x01\xc0\x01\x12\x06\xe9\x00\x00\x06\xe9\x00\x00\r\xe0\x00\x00#\x85\x00\x00\x01\x18\x00\x00\x040\x01\x15\x01\x10\x00\x00\r\xe9\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\r\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x02H\x00\x00#!\x00\x00\vH\x00\x00\v\xc0\x01\x18#\xc0\x00\x00 \xb0\x01L\x1c\xb0\x00\x00\x1d\xb0\x00\x00!\xb0\x015\x17\xb0\x00\x00\x16\xb0\x01$&\xb0\x00\x00$\xb0\x00\x00\x05\xb0\x01W\x0e\xb0\x00\x00%\xb0\x01*\x14\xb0\x01R)\xb0\x00\x00$\xb0\x00\x00\x1f\xb0\x015\x19\xb0\x01\x1e\x1f\xb8\x00\x00\x1e\xb0\x01L\x12\xb0\x00\x00\x1a\xb0\x01.\"\xb0\x00\x00 \xb0\x05$,\xb0\x05$ \xb0\x01* \xb0\t/\x15\xb0\x00\x00\x01\xe9\x00\x00\x10\xc0\x00\x00\x01\xe9\x00\x00\r\xc0\x00\x00\x01\xc0\x00\x00\x01\xc0\x01\x11\f0\x01H\x12\xc0\x01B\t0\x01@\x12\xc0\x00\x00\n0\x00\x00\x03\xc0\x11\x02\r8\x05V\x12\xc0\x01:\x01\xc0\x00\x00\x03\xc8\x00\x00\x11\xc0\x01\x19\x01\xc0\x00\x00'0\x01:\x120\x01:\r0\x01B\x128\x01B\x118\x00\x00\b0\x00\x00\a0\x00\x00\x06\x90\x01J\x120\x01K\x110\x05\x19\x1d0\x05\x1a\x110\x00\x00\x118\x05\x1f\t0\x00\x00\r0\r\x16*0\f\x00\r\xc0\x00\x00\r\xc0\x00\x00\r\xc0\x00\x00\x00\x00\x00\x00\x00\x05\x1cp\x00\x05\x99\x98\x00\x05\x9fH\x00\x06\" \x00\x06\xfaN\x00\a'\xd0\x00\aA\xfb\x00\a\x93\xe8\x00\b-\x80\x00\bn\xed\x00\b\xb0X\x00\b\xf1\xc3\x00\t30\x00\t\x82\xd5\x00\t\x8e6\x00\t\xa4\xf8\x00\t\xb6\b\x00\n8\xe0\x00\n\xbb\xb8\x00\v\x11\r\x00\v>\x90\x00\v\x93\xe5\x00\f\x16\xbd\x00\fD@\x00\f\x93\xe5\x00\f\xcc\xc8\x00\f\xe3\x8a\x00\r\x16\xbd\x00\rI\xf0\x00\r\xcc\xc8\x00\r\xd2x\x00\r\xe9:\x00\x0e\x1cm\x00\x0e'\xce\x00\x0eO\xa0\x00\x0efb\x00\x0el\x12\x00\x0ews\x00\x0fUP\x00\x10\xaa\xa5\x00\x11wr\x00\x12f`\x00\x12\xb6\x05\x00\x13\x05\xaa\x00\x00\x00\x00\x00\x02}(\x00\x06A\xfe\x00\a\x1cr\x00\b\x00\x00\x00\b\xaa\xab\x00\t\x89\xaa\x00\n\x1cr\x00\n\" \x00\n(\xa3\x00\nO\xa5\x00\n\xfaP\x00\v\x1cr\x00\v\xc1m\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeA\xfe\x00\x00\xc7\x1d\x00\x00\xe3\x8e\x00\x01\x8e:\x00\x02\" \x00\x02\xb8\xe3\x00\x03\x1cp\x00\x03\x1cr\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00Am\x00\x00u\xc2\x00\x00\x82\xd8\x00\x01\xbe\x93\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa\xe3\x90\xff\xf9\xf4\xa0\x00\x01\xbe\x93\x00\x02\v`\xff\xfe\xfaP\xff\xff}(\xff\xfewx\xff\xfd\xf4\xa0\x00\x00\x82\xd8\x00\x01\x05\xb0\x00\x00\x00\x00\x00\x06\" \x00\x03\x11\x10\x00\x02\v`\x00\a\x1cr\x00\x12f`\x00\x02\v`",
	"/texfonts/cmfib8.tfm":      "\x01@\x00\x12\x00\x00\x00\u007f\x00%\x00\x0e\x00\a\x00\x05\x00X\x00\n\x00\x00\x00\aͯf=\x00\x80\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05CMFIB\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xee\x17\xc0\x00\x00\"\xc0\x00\x00\x1f\xc0\x00\x00\x19\xc0\x00\x00\x19\xc0\x00\x00\x1c\xc0\x00\x00\x1c\xc0\x00\x00\x1f\xc0\x00\x00\x1c\xc0\x00\x00\x1f\xc0\x00\x00\x1c\xc0\x00\x00\x16\xc0\x11\n\x14\xc0\x00\x00\x14\xc0\x00\x00!\xc0\x00\x00!\xc0\x00\x00\x010\x00\x00\x046\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\x80\x00\x00\x10\xc0\x00\x00\x10`\x00\x00\x1c\xc0\x00\x00\v\x05\x00\x00\x0f\xc0\x00\x00\x1c0\x00\x00\x1f0\x00\x00\x10C\x00\x00#\xc0\x00\x00$\xc0\x00\x00\x1f\xd2\x00\x00\x010\x01\x00\x02\xc0\x01\x17\x10\xc0\x00\x00\"\xc6\x00\x00\x10\xc0\x00\x00\"\xc0\x00\x00\x1e\xc0\x00\x00\x02\xc0\x01\x12\a\xc6\x00\x00\a\xc6\x00\x00\x10\xc0\x00\x00\x1f\x94\x00\x00\x02\x16\x00\x00\x060\x01\x15\x02\x10\x00\x00\x10\xc6\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x020\x00\x00\x026\x00\x00\x02V\x00\x00\x1f!\x00\x00\rV\x00\x00\r\xc0\x01\x18\x1f\xc0\x00\x00\x1c\xc0\x01L\x1a\xc0\x00\x00\x1c\xc0\x00\x00\x1d\xc0\x015\x19\xc0\x00\x00\x18\xc0\x01$\x1f\xc0\x00\x00\x1c\xc0\x00\x00\x06\xc0\x01W\x10\xc0\x00\x00\x1d\xc0\x01*\x17\xc0\x01R#\xc0\x00\x00\x1c\xc0\x00\x00\x1f\xc0\x015\x19\xc0\x01\x1e\x1f\xc6\x00\x00\x1c\xc0\x01L\x15\xc0\x00\x00\x1c\xc0\x01.\x1c\xc0\x00\x00\x1c\xc0\x05$$\xc0\x05$\x1c\xc0\x01*\x1c\xc0\t/\x17\xc0\x00\x00\x03\xc6\x00\x00\x10\xc0\x00\x00\x03\xc6\x00\x00\x10\xc0\x00\x00\x02\xb0\x00\x00\x02\xc0\x01\x11\x0e0\x01H\x13\xc0\x01B\v0\x01@\x13\xc0\x00\x00\f0\x00\x00\x05\xc0\x11\x02\x106\x05V\x13\xc0\x01:\x01\xb0\x00\x00\x04\xb6\x00\x00\x12\xc0\x01\x19\x01\xc0\x00\x00 0\x01:\x130\x01:\x100\x01B\x136\x01B\x116\x00\x00\b0\x00\x00\t0\x00\x00\ap\x01J\x130\x01K\x120\x05\x19\x1b0\x05\x1a\x120\x00\x00\x126\x05\x1f\n0\x00\x00\x100\r\x16$0\f\x00\x10\xc0\x00\x00\x10\xa0\x00\x00\x10\xb0\x00\x00\x00\x00\x00\x00\x00\x05\x9cn\x00\x05\xd5R\x00\x05\xd5T\x00\x061\xc4\x00\x06j\xa8\x00\x06\xff\xfc\x00\b*\xa6\x00\b1\xc4\x00\bH\x84\x00\tG\x16\x00\tUP\x00\t\x8a\xa6\x00\t\xea\xa6\x00\n\x18\xde\x00\nc\x8a\x00\n\u007f\xfa\x00\n\xdcj\x00\n\xdcl\x00\vq\xc0\x00\v\x8e2\x00\v\xaa\xa4\x00\f?\xfa\x00\f\xd5N\x00\rj\xa4\x00\r\xff\xf8\x00\x0e\x95N\x00\x0e\xf1\xbe\x00\x0f*\xa2\x00\x0f\xbf\xf8\x00\x108\xda\x00\x10UL\x00\x11G\x12\x00\x11c\x84\x00\x11\u007f\xf6\x00\x12\xaa\xa0\x00\x14\xff\xf4\x00\x00\x00\x00\x00\x01\xe3\x8e\x00\azP\x00\b\x00\x00\x00\t\x87\x1c\x00\t\xe3\x90\x00\n\xee\xee\x00\vm\xb8\x00\v\xb5V\x00\v\xf1\xc4\x00\f_\x80\x00\f\x83\x0e\x00\f\xf1\xc8\x00\r\xb5V\x00\x00\x00\x00\xff\xfd\x96\xc0\x00\x00Î\x00\x01\x87\x1c\x00\x02\x0e4\x00\x02\xacr\x00\x03\x0e8\x00\x00\x00\x00\x00\x00J\xaa\x00\x00\x86f\x00\x00\x95V\x00\x01\x98\xe4\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfac\x92\xff\xf9\xb1\xca\x00\x01\x98\xe4\x00\x02UT\xff\xfe\xd5V\xff\xffj\xaa\xff\xfe@\x00\xff\xfd\xaa\xac\x00\x00\x95V\x00\x01*\xaa\x00\x00\x00\x00\x00\x06\xff\xfc\x00\x03\u007f\xfe\x00\x02UT\x00\b\x00\x00\x00\x14\xff\xf4\x00\x02UT",
	"/texfonts/cmr6.tfm":        "\x01E\x00\x12\x00\x00\x00\u007f\x00%\x00\x10\x00\n\x00\x05\x00X\x00\n\x00\x00\x00\a\xb9Aa\xa8\x00`\x00\x00\bTeX text\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03CMR\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf2\x11\xc0\x00\x00\x1e\xc0\x00\x00\x1c\xc0\x00\x00\x15\xc0\x00\x00\x13\xc0\x00\x00\x19\xc0\x00\x00\x17\xc0\x00\x00\x1c\xc0\x00\x00\x17\xc0\x00\x00\x1c\xc0\x00\x00\x17\xc0\x00\x00\x0f\xd0\x11\n\x0e\xd0\x00\x00\x0e\xd0\x00\x00\x1f\xd0\x00\x00\x1f\xd0\x00\x00\x010\x00\x00\x028\x00\x00\n\xd0\x00\x00\n\xd0\x00\x00\n\x80\x00\x00\n\xd0\x00\x00\n`\x00\x00\x19\xd0\x00\x00\a\x06\x00\x00\n\xd0\x00\x00\x170\x00\x00\x1c0\x00\x00\nT\x00\x00 \xc0\x00\x00\"\xc0\x00\x00\x1c\xe2\x00\x00\x010\x01\x00\x01\xd0\x01\x17\n\xd0\x00\x00\x1e\xd7\x00\x00\n\xf3\x00\x00\x1e\xf3\x00\x00\x1c\xd0\x00\x00\x01\xd0\x01\x12\x05\xf9\x00\x00\x05\xf9\x00\x00\n\xf0\x00\x00\x1c\x95\x00\x00\x01\x18\x00\x00\x030\x01\x15\x01\x10\x00\x00\n\xf9\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\n\xa0\x00\x00\x010\x00\x00\x018\x00\x00\x01H\x00\x00\x1c!\x00\x00\tH\x00\x00\t\xd0\x01\x18\x1c\xd0\x00\x00\x19\xc0\x01L\x16\xc0\x00\x00\x17\xc0\x00\x00\x1a\xc0\x015\x14\xc0\x00\x00\x12\xc0\x01$\x1d\xc0\x00\x00\x19\xc0\x00\x00\x04\xc0\x01W\v\xc0\x00\x00\x1b\xc0\x01*\x11\xc0\x01R!\xc0\x00\x00\x19\xc0\x00\x00\x1c\xc0\x015\x14\xc0\x01\x1e\x1c\xc8\x00\x00\x18\xc0\x01L\r\xc0\x00\x00\x17\xc0\x01.\x19\xc0\x00\x00\x19\xc0\x05$#\xc0\x05$\x19\xc0\x01*\x19\xc0\t/\x10\xc0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xf9\x00\x00\n\xd0\x00\x00\x01\xb0\x00\x00\x01\xd0\x01\x11\n0\x01H\r\xd0\x01B\a0\x01@\r\xd0\x00\x00\b0\x00\x00\x02\xd0\x11\x02\n8\x05V\r\xd0\x01:\x01\xb0\x00\x00\x02\xb8\x00\x00\f\xd0\x01\x19\x01\xd0\x00\x00\x1e0\x01:\r0\x01:\n0\x01B\r8\x01B\f8\x00\x00\x050\x00\x00\x060\x00\x00\x05p\x01J\r0\x01K\f0\x05\x19\x170\x05\x1a\f0\x00\x00\f8\x05\x1f\a0\x00\x00\n0\r\x16$0\f\x00\n\xd0\x00\x00\n\xb0\x00\x00\n\xb0\x00\x00\x00\x00\x00\x00\x00\x05\xa1+\x00\x06%\xe8\x00\x06\xaa\xa5\x00\a\x14\xd5\x00\a\xb4 \x00\aέ\x00\b\xbd\x9b\x00\b\xbd\x9d\x00\tBX\x00\t\xc7\x15\x00\t\xfc-\x00\nK\xd3\x00\nА\x00\vBU\x00\v\xc7\x13\x00\v\xda\v\x00\f\x0f#\x00\f\x93\xe0\x00\f\xe3\x85\x00\r\x18\x9d\x00\rM\xb5\x00\r\x9d[\x00\r\xed\x00\x00\x0e\"\x18\x00\x0eW0\x00\x0e\xa6\xd5\x00\x0e\xdb\xed\x00\x0e\xf6{\x00\x0f\x11\b\x00\x0f\xff\xf5\x00\x10\xe3\x80\x00\x11>\x88\x00\x11s\xa0\x00\x13Q}\x00\x13\x86\x95\x00\x13\x8e+\x00\x00\x00\x00\x00\x01\xed\v\x00\x06=(\x00\x06\xe3\x8d\x00\b\x00\x00\x00\bq\xc8\x00\tB]\x00\t\xd7]\x00\n\x0e;\x00\n8\xe0\x00\nO\xa5\x00\n\xcd\xe3\x00\n\xee\xf0\x00\v\x1cs\x00\v\xb6\r\x00\f\x00\x00\x00\x00\x00\x00\xff\xfe=(\x00\x00\xc7\x1d\x00\x00\xe3\x8d\x00\x01\x8e;\x00\x028\xe0\x00\x02\xb8\xe5\x00\x03\x1cp\x00\x03\x1cs\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00B`\x00\x00wx\x00\x00\x84\xbd\x00\x01K\xd8\x00l\x80\x00\x80L\x80\x01\x00i\x00\f\x00f\x00\v\x00l\x00\r\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x00i\x00\x0e\x00l\x00\x0f\x00'\x80\x02\x00?\x80\x02\x00!\x80\x02\x00)\x80\x02\x80]\x80\x02\x80`\x00\\\x00'\x00\"\x00?\x80\x03\x80!\x80\x03\x80-\x00{\x80-\x00|\x80`\x00<\x80`\x00>\x00a\x80\x04\x00e\x80\x05\x00a\x80\x05\x00o\x80\x05\x80c\x80\x05\x00A\x80\x06\x00o\x80\x05\x00e\x80\x05\x00a\x80\x05\x00.\x80\x06\x80,\x80\x06\x00o\x80\x06\x00e\x80\x06\x00u\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\a\x00O\x80\x05\x00C\x80\x05\x00G\x80\x05\x80Q\x80\x05\x00y\x80\x05\x00e\x80\x06\x00o\x80\x06\x00r\x80\x06\x00a\x80\x06\x00A\x80\x06\x80u\x80\x06\x00X\x80\x05\x00W\x80\x05\x00A\x80\x05\x00V\x80\x05\x80Y\x80\x05\x00t\x80\x05\x00u\x80\x05\x00b\x80\x05\x00y\x80\x05\x00v\x80\x05\x80w\x80\x05\x00h\x80\x05\x80k\x80\x05\x00e\x80\b\x00o\x80\b\x00x\x80\x05\x00d\x80\b\x00c\x80\b\x00q\x80\b\x00v\x80\x05\x00j\x80\t\x00y\x80\x05\x80w\x80\x05\x00t\x80\x05\x00C\x80\x05\x00O\x80\x05\x00G\x80\x05\x00U\x80\x05\x00Q\x80\x05\x00T\x80\x06\x00Y\x80\x06\x00V\x80\a\x80W\x80\a\x80j\x80\b\x80I\x80\b\xff\xfa^\xd5\xff\xf9\xa5\x00\x00\x01K\xd8\x00\x02\x12\xf5\xff\xfe\xf6\x85\xff\xff{C\xff\xfeq\xc8\xff\xfd\xed\v\x00\x00\x84\xbd\x00\x01\t{\x00\x00\x00\x00\x00\x06\xaa\xa5\x00\x03\x1cp\x00\x02\x12\xf5\x00\x06\xe3\x8d\x00\x13\x8e+\x00\x02\x12\xf5",
	"/texfonts/cmsy5.tfm":       "\x01\x16\x00\x12\x00\x00\x00\u007f\x00,\x00\x0f\x00\x0f\x00\x10\x00\a\x00\a\x00\x00\x00\x16\xb0\xdc0n\x00P\x00\x00\x10TeX math symbols\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04CMSY\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\x1e\xaa\x00\x00\x03S\x00\x00\x1e\xaa\x00\x00\aB\x00\x00\x1e\xaa\x00\x00\aS\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00\x1e\xaa\x00\x00)\xcb\x00\x00\aS\x00\x00\aS\x00\x00\x1ed\x00\x00\x1ed\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x1e!\x00\x00\x1eu\x00\x00\x1e\x98\x00\x00\x1e\x98\x00\x00)\x98\x00\x00)\x98\x00\x00\x1e\x98\x00\x00\x1e\x98\x00\x00)!\x00\x00)!\x00\x00\a\xcb\x00\x00\a\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1ed\x00\x00)!\x00\x00)!\x00\x00\x10\xcb\x00\x00\x10\xcb\x00\x00)!\x00\x00)\xcb\x00\x00)\xcb\x00\x00\x1e0\x00\x00\x02\x80\x00\x00)0\x00\x00\x14\x98\x00\x00\x14\x98\x00\x00(\xcb\x00\x00(\xcb\x00\x00\x01\xcb\x00\x00\x01!\x00\x00\n\xc0\x00\x00\n\xc0\x00\x00\x140\x00\x00\a\xe6\x00\x00\x1b\xc0\x00\x00\x1b\xc0\x00\x00\x1e\xc0\x00\x00\x1e\xc0\x00\x00\x10\xc0\x00\x00\"\xb0\x01\x06\x12\xb0\x05\x04\t\xb0\r\x04\x1f\xb0\t\x02\b\xb0\x1d\x03\x17\xb0)\x03\r\xb7\x15\x03&\xb0\x01\x03\v\xb0\x11\x00\x15\xb79\x05\x1d\xb0\x01\x01\x16\xb0\x01\x04+\xb0\x01\x04#\xb05\x02 \xb0\t\x03\x1a\xb0%\x02$\xb7\x01\x03'\xb0\x01\x02\x0e\xb0\x19\x04\f\xb0=\x00\x0f\xb0)\x02\x11\xb0%\x00*\xb0%\x02\x19\xb01\x04\x13\xb7%\x02\x18\xb0!\x04\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x14\x80\x00\x00\x10\xc0\x00\x00\x10\xc0\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\x06\xed\x00\x00\a\xed\x00\x00\a\xed\x00\x00\x04\xed\x00\x00\x04\xed\x00\x00\x03\xed\x00\x00\a\xed\x00\x00\a\xed\x00\x00\x10\xed\x00\x00\a\xed\x00\x00\x03\xcb\x00\x00!\x1e\x00\x00\x1c\xb0\x00\x00%\xb0\x00\x00\x05\xcb,\x00\x14\x80\x00\x00\x14\x80\x00\x00\x1e\xdc\x00\x00\x1e\xdc\x00\x00\x06\xcb\x00\x00\x06\xcb\x00\x00\x06\xcb\x00\x00\x10\xcb\x00\x00\x1e\xc9\x00\x00\x1e\xc9\x00\x00\x1e\xc9\x00\x00\x1e\xc9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\a\x0e=\x00\aUZ\x00\t\x8e@\x00\n\x1cz\x00\n\xaa\xb3\x00\v\xc7&\x00\fU`\x00\f\x83s\x00\f\xe3\x9a\x00\r\x1c\xca\x00\r(\xb0\x00\r\x9b]\x00\r\xe3\x9a\x00\r\xfa\xea\x00\x0e\x00\r\x00\x0ea\xea\x00\x0e\xb5\x86\x00\x0e\xdf\x10\x00\x0f\x1c\x80\x00\x0fUc\x00\x0fo\x90\x00\x0fϰ\x00\x0f\xdc\xca\x00\x0f\xf2=\x00\x0f\xf6f\x00\x108\xf3\x00\x10\x93\xfa\x00\x10\xe1]\x00\x11Uf\x00\x11W\xb0\x00\x11mJ\x00\x11\x8eM\x00\x11\xd0\xd6\x00\x12\x04V\x00\x12\x1c\x83\x00\x12q\xda\x00\x13\x1c\xd0\x00\x13#]\x00\x13\x8eM\x00\x15\xc73\x00\x15\xe1\xf3\x00\x19\x15\xf6\x00\x00\x00\x00\x00\x00\xe5`\x00\x06W\xad\x00\x06\xe3\x8d\x00\aq\xc6\x00\a\xe3\x93\x00\b<\xa6\x00\b\x9d\xa6\x00\b\xe3\x90\x00\t\x9dZ\x00\n\xaa\xb3\x00\n\xee\xf0\x00\v\x1cs\x00\v\x82V\x00\f\x00\x00\x00\x00\x00\x00\xff\xfeW\xad\xff\xffq\xc6\xff\xff\xe3\x93\x00\x00<\xa6\x00\x00\x9d\xa6\x00\x00\xe3\x8d\x00\x01\x8e:\x00\x01\x9dZ\x00\x02\x12\xf6\x00\x02\xaa\xb3\x00\x03\x1cs\x00\x03\x82V\x00\x04\x00\x00\x00\x0f\x1a\xa0\x00\x00\x00\x00\x00\x00D=\x00\x00\x8e:\x00\x00\x9e\xba\x00\x00ՠ\x00\x00\xd8*\x00\x01\x17\x06\x00\x01=\xfd\x00\x01P\xc6\x00\x01_\x00\x00\x01\xa4\xfa\x00\x028\xe6\x00\x02W\xc6\x00\x02x\n\x00\x03\x02\xda\x00\x04fj\x800\x80\x00\x800\x80\x01\x800\x80\x02\x800\x80\x03\x800\x80\x04\x800\x80\x05\x800\x80\x06\x00\x00\x8e:\x00\x01\x1cs\x00\x01\xaa\xad\x00\x028\xe6\x00\x02\xc7 \x00\x03UZ\x00\x03\xe3\x93\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\xe3\x8d\x00\x17\x8eM\x00\x00\x00\x00\x00\x0e\xcd\xca\x00\x063\r\x00\b\x10\xed\x00\x10gc\x00\b\x82\xb3\x00\b\x0e\x90\x00\x06t\xf6\x00\x04\xb6\r\x00\x0333\x00\x06ff\x00\a\xe9@\x00\x01\x99\x9a\x00\x1f\xae\x13\x00\x16\xb8S\x00\x04\x00\x00",
	"/texfonts/logo9.tfm":       "\x00B\x00\x12\x00A\x00T\x00\x05\x00\x02\x00\x01\x00\x02\x00\x03\x00\x03\x00\x00\x00\x06\x90\tc\xc1\x00\x90\x00\x00\x0eAEFMNOPST only\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06MFLOGO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xec\x03\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x02\x10\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x00\x03\x10\x00\x00\x03\x10\x00\x00\x02\x10\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x02\x10\x00\x00\x01\x10\x05\x00\x00\x00\x00\x00\x00\t\xa1\xb9\x00\nY\xcb\x00\v\x11\xdc\x00\r:\x12\x00\x00\x00\x00\x00\t\x99\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\t\x80A\x80\x00\x80O\x80\x01\x80O\x80\x02\xff\xff\xa3\xf7\xff\xffG\xee\x00\x00\xb8\x12\x00\x00\x00\x00\x00\x04\x99<\x00\x02(5\x00\x01p$\x00\x00\x00\x00\x00\r:\x12",
}

// Run time library

var (
	_ error         = pasError(0)
	_ io.ReadCloser = readCloser{}

	isMain bool
)

const (
	pasEndOfTeX pasError = -iota - 1
	pasFinalEnd
)

const (
	modeNoIOPanic = "/O"
	stdioDev      = "TTY:"
	texArea       = "TeXinputs:"
	texFontArea   = "TeXfonts:"
	texPool       = "TeXformats:TEX.POOL"
)

func origin(skip int) string {
	pc, fn, fl, _ := runtime.Caller(skip)
	fn = filepath.Base(fn)
	f := runtime.FuncForPC(pc)
	var fns string
	if f != nil {
		fns = f.Name()
		if x := strings.LastIndex(fns, "."); x > 0 {
			fns = fns[x+1:]
		}
	}
	return fmt.Sprintf("%s:%d:%s", fn, fl, fns)
}

func todo(s string, args ...interface{}) string { //TODO-
	switch {
	case s == "":
		s = fmt.Sprintf(strings.Repeat("%v ", len(args)), args...)
	default:
		s = fmt.Sprintf(s, args...)
	}
	pc, fn, fl, _ := runtime.Caller(1)
	f := runtime.FuncForPC(pc)
	var fns string
	if f != nil {
		fns = f.Name()
		if x := strings.LastIndex(fns, "."); x > 0 {
			fns = fns[x+1:]
		}
	}
	r := fmt.Sprintf("%s:%d:%s: TODOTODO %s", fn, fl, fns, s) //TODOOK
	fmt.Fprintf(os.Stdout, "%s\n", r)
	os.Stdout.Sync()
	return r
}

func trc(s string, args ...interface{}) string { //TODO-
	switch {
	case s == "":
		s = fmt.Sprintf(strings.Repeat("%v ", len(args)), args...)
	default:
		s = fmt.Sprintf(s, args...)
	}
	_, fn, fl, _ := runtime.Caller(1)
	r := fmt.Sprintf("%s:%d: TRC %s", fn, fl, s)
	fmt.Fprintf(os.Stdout, "%s\n", r)
	os.Stdout.Sync()
	return r
}

type pasError int

func (err pasError) Error() string { return fmt.Sprintf("%T(%[1]d)", err) }

func pasJumpOut() { panic(pasEndOfTeX) }

func abs(n float32) float32       { return float32(math.Abs(float64(n))) }
func chr(i int32) byte            { return byte(i) }
func odd(i int32) bool            { return i&1 != 0 }
func pasSysDay() int32            { return int32(time.Now().Day()) }
func pasSysMonth() int32          { return int32(time.Now().Month()) }
func pasSysTime() int32           { return int32(time.Now().Hour()*60 + time.Now().Minute()) }
func pasSysYear() int32           { return int32(time.Now().Year()) }
func read(args ...interface{})    { args[0].(*pasFile).read(args[1:], false) }
func readLn(args ...interface{})  { args[0].(*pasFile).read(args[1:], true) }
func write(args ...interface{})   { args[0].(*pasFile).write(args[1:], false) }
func writeLn(args ...interface{}) { args[0].(*pasFile).write(args[1:], true) }

func iabs(n int32) int32 {
	if n >= 0 {
		return n
	}

	if n == math.MinInt32 {
		panic("overflow")
	}

	return -n
}

// [0] page 193
//
// round (r) yields a value such that if r >= 0 then round (r) =
// trunc(r + 0.5), and if r < 0 then round(r) =
// trunc (r - 0.5). It is an error if no such value exists.
func round(r float32) int32 {
	if r >= 0 {
		return int32(r + 0.5)
	}

	return int32(r - 0.5)
}

func setString(dst []byte, src string) {
	for i := range dst {
		dst[i] = ' '
	}
	copy(dst, src)
}

type pasFile struct {
	*ioFile
}

func (f *pasFile) byte() byte { return f.component[0] }

func (f *pasFile) memoryWord() memoryWord {
	if g, e := uintptr(f.componentSize), unsafe.Sizeof(memoryWord{}); g != e { //TODO-
		panic(todo("invalid component: got %v, expected %v (%q)", g, e, f.name))
	}

	return *(*memoryWord)(unsafe.Pointer(&f.component))
}

func (f *pasFile) pMemoryWord() *memoryWord {
	if g, e := uintptr(f.componentSize), unsafe.Sizeof(memoryWord{}); g != e { //TODO-
		panic(todo("invalid component: got %v, expected %v (%q)", g, e, f.name))
	}

	return (*memoryWord)(unsafe.Pointer(&f.component))
}

func break1(f *pasFile)                                  { /* nop */ }
func breakIn(f *pasFile, b bool)                         { /* nop */ }
func close(f *pasFile)                                   { f.close() }
func eof(f *pasFile) bool                                { return f.ioFile.eof }
func eoln(f *pasFile) bool                               { return f.ioFile.eoln() }
func erstat(f *pasFile) int32                            { return f.erstat }
func get(f *pasFile)                                     { f.get() }
func put(f *pasFile)                                     { f.put() }
func reset1(t *Context, f *pasFile, name, mode string)   { reset(t, f, 1, name, mode) }
func reset4(t *Context, f *pasFile, name, mode string)   { reset(t, f, 4, name, mode) }
func rewrite1(t *Context, f *pasFile, name, mode string) { rewrite(t, f, 1, name, mode) }
func rewrite4(t *Context, f *pasFile, name, mode string) { rewrite(t, f, 4, name, mode) }

type readCloser struct {
	io.Reader
}

func (r readCloser) Close() error { return nil }

// [0] page 87
//
// Reset (F) initiates inspection (reading) of F by placing the file at its
// beginning. If F is not empty, the value of the first component of F is
// assigned to F and eof (F) becomes false.
func reset(t *Context, f *pasFile, componentSize int, name, mode string) {
	name = strings.TrimRight(name, " ")
	if !strings.Contains(mode, modeNoIOPanic) {
		panic(fmt.Errorf("unsupported file mode: %q (%q)", mode, name))
	}

	f.close()
	f.ioFile = nil
	if name == stdioDev {
		if isMain {
			f.ioFile = &ioFile{
				eof:           false,
				erstat:        0,
				componentSize: componentSize,
				name:          os.Stdin.Name(),
				in:            os.Stdin, //TODO bufio
			}
			return
		}

		f.ioFile = &ioFile{
			eof:           false,
			erstat:        0,
			componentSize: componentSize,
			name:          os.Stdin.Name(),
			in:            t.stdin,
		}
		return
	}

	g, err := os.Open(name)
ok:
	switch {
	case err != nil:
		switch {
		case name == texPool:
			f.ioFile = &ioFile{
				eof:           false,
				erstat:        0,
				componentSize: componentSize,
				name:          name,
				in:            readCloser{strings.NewReader(assets["/tex.pool"])},
			}
			break ok
		case strings.HasPrefix(name, texArea):
			if s, ok := assets["/texinputs/"+name[len(texArea):]]; ok {
				f.ioFile = &ioFile{
					eof:           false,
					erstat:        0,
					componentSize: componentSize,
					name:          name,
					in:            readCloser{strings.NewReader(s)},
				}
				break ok
			}
		case strings.HasPrefix(name, texFontArea):
			if s, ok := assets["/texfonts/"+name[len(texFontArea):]]; ok {
				f.ioFile = &ioFile{
					eof:           false,
					erstat:        0,
					componentSize: componentSize,
					name:          name,
					in:            readCloser{strings.NewReader(s)},
				}
				break ok
			}
		}

		f.ioFile = &ioFile{
			erstat:        1,
			componentSize: componentSize,
			name:          name,
		}
		return
	default:
		f.ioFile = &ioFile{
			eof:           false,
			erstat:        0,
			componentSize: componentSize,
			name:          name,
			in:            g, //TODO bufio
		}
	}

	if _, err := io.ReadFull(f.ioFile.in, f.ioFile.component[:f.ioFile.componentSize]); err != nil {
		f.ioFile.eof = true
		f.ioFile.erstat = 1
		f.ioFile.in.Close()
	}
}

// [0] page 88.
//
// Rewrite (F) initiates generation (writing) of the file F. The current value
// of F is replaced with the empty file. Eof(F) becomes true, and a new file
// may be written.
func rewrite(t *Context, f *pasFile, componentSize int, name, mode string) {
	name = strings.TrimRight(name, " ")
	if !strings.Contains(mode, modeNoIOPanic) {
		panic(fmt.Errorf("unsupported file mode: %q", mode))
	}

	f.close()
	f.ioFile = nil
	if name == stdioDev {
		if isMain {
			f.ioFile = &ioFile{
				eof:           true,
				erstat:        0,
				componentSize: componentSize,
				name:          os.Stdout.Name(),
				out:           os.Stdout, //TODO bufio
			}
			return
		}

		f.ioFile = &ioFile{
			eof:           true,
			erstat:        0,
			componentSize: componentSize,
			name:          os.Stdout.Name(),
			out:           t.stdout,
		}
		return
	}

	g, err := os.Create(name)
	if err != nil {
		f.ioFile = &ioFile{
			eof:           false,
			erstat:        1,
			componentSize: componentSize,
			name:          name,
		}
		return
	}

	f.ioFile = &ioFile{
		eof:           true,
		erstat:        0,
		componentSize: componentSize,
		name:          name,
		out:           g, //TODO bufio
	}
}

type ioFile struct {
	component     [unsafe.Sizeof(memoryWord{})]byte
	erstat        int32
	in            io.ReadCloser
	componentSize int
	name          string
	out           io.WriteCloser

	eof bool
	eol bool
}

func (f *ioFile) close() {
	if f == nil {
		return
	}

	if f.in != nil {
		if err := f.in.Close; err != nil {
			f.erstat = 1
		}
		f.eof = true
		f.in = nil
	}

	if f.out != nil {
		if err := f.out.Close; err != nil {
			f.erstat = 1
		}
		f.eof = false
		f.in = nil
	}
}

// [0] page 88
//
// Read (F, X) (for X, a variable) is equivalent to
//
// 	begin
// 		X := F^; Get(F)
// 	end
//
// Read (F, V1, ... , Vn) is equivalent to the statement
//
//	begin Read(F,V1); ... ;Read(F,Vn) end
func (f *ioFile) read(args []interface{}, nl bool) {
	f.eol = false
	for len(args) != 0 {
		arg := args[0]
		args = args[1:]
		if _, ok := getWidth(&args); ok {
			panic("internal error: read field width specifier not supported")
		}

		switch x := arg.(type) {
		case *byte:
			*x = f.component[0]
		default:
			panic(fmt.Errorf("unsupported read variable type: %T (%q)", x, f.name))
		}
		f.get()
	}
	if !nl {
		return
	}

	// [0] page 92
	//
	// ReadLn(F) skips to the beginning of the next line of the textfile F (F^
	// becomes the first character of the next line).
	for !f.eof && f.component[0] != '\n' {
		f.get()
	}
	if !f.eof {
		f.get()
	}
}

// [0] page 88
//
// Write(F, E) (for E, an expresion) is equivalent to
//
// 	begin
// 		F^ := E; Put(F)
// 	end
// Write (F, E1, ... , En) is equivalent to the statement
//
//	begin Write(F,E1); ... ; Write(F,En) end
func (f *ioFile) write(args []interface{}, nl bool) {
	for len(args) != 0 {
		arg := args[0]
		args = args[1:]
		w, ok := getWidth(&args)
		if _, ok2 := getWidth(&args); ok2 {
			panic("internal error: write fraction field width specifier not supported")
		}

		var err error
		switch x := arg.(type) {
		case string:
			_, err = f.out.Write([]byte(x))
		case byte:
			if ok {
				_, err = fmt.Fprintf(f.out, "%*d", w, x)
				break
			}

			f.component[0] = x
			f.put()
		case int32:
			if ok {
				_, err = fmt.Fprintf(f.out, "%*d", w, x)
				break
			}

			_, err = fmt.Fprint(f.out, x)
		case int:
			if ok {
				_, err = fmt.Fprintf(f.out, "%*d", w, x)
				break
			}

			_, err = fmt.Fprint(f.out, x)
		case uint16:
			if ok {
				_, err = fmt.Fprintf(f.out, "%*d", w, x)
				break
			}

			_, err = fmt.Fprint(f.out, x)
		default:
			panic(fmt.Errorf("unsupported write variable type: %T (%q)", x, f.name))
		}
		if err != nil {
			panic(fmt.Errorf("write I/O error: %v (%q)", err, f.name))
		}
	}
	// [0] page 92
	//
	// Writeln (F) terminates the current line of the textfile F.
	if nl {
		f.write([]interface{}{"\n"}, false)
	}
}

// [0] page 88
//
// Get(F) advances the file to the next component and assigns the value of this
// component to the buffer variable F^. If no next component exists, then
// eof(F) becomes true, and F^ becomes undefined. The effect of Get (F) is an
// error if eof(F) is true prior to its execution or if F is being generated.
func (f *ioFile) get() {
	if f.eof {
		panic(fmt.Errorf("get called at eof: %s", f.name))
	}

	f.eol = false
	if _, err := io.ReadFull(f.in, f.component[:f.componentSize]); err != nil {
		f.eof = true
		f.erstat = 1
		f.in.Close()
	}
}

// [0] page 88
//
// Put(F) appends the value of the buffer variable F^ to the file F. The effect
// is an error unless prior to execution the predicate eof(F) is true. eof(F)
// remains true, and F^ becomes undefined. Put(F) is an error if F is being
// inspected.
func (f *ioFile) put() {
	if !f.eof {
		panic(fmt.Errorf("put called not at eof: %s", f.name))
	}

	if _, err := f.out.Write(f.component[:f.componentSize]); err != nil {
		panic(fmt.Errorf("put I/O error: %v (%q)", err, f.name))
	}
}

// [0] page 92
//
// Eoln(F)
//
// a Boolean function indicating whether the end of the current line in the
// textfile F has been reached. (If true, F^ corresponds to the position of a
// line separator, but F^ is a blank.)
func (f *ioFile) eoln() bool {
	if f.eol || f.eof {
		return true
	}

	if f.component[0] != '\n' {
		return false
	}

	f.component[0] = ' '
	f.eol = true
	return true
}

type vaWidth int

func getWidth(args *[]interface{}) (int, bool) {
	s := *args
	if len(s) == 0 {
		return 0, false
	}

	x, ok := s[0].(vaWidth)
	if !ok {
		return 0, false
	}

	*args = s[1:]
	return int(x), true
}
